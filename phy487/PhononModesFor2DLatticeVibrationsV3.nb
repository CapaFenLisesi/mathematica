(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1834427,      33890]
NotebookOptionsPosition[   1828586,      33718]
NotebookOutlinePosition[   1830235,      33768]
CellTagsIndexPosition[   1829883,      33756]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Phonon Modes for 2D Lattice Vibrations\
\>", "DemoTitle",
 CellChangeTimes->{3.6055642317849903`*^9}],

Cell[CellGroupData[{

Cell["", "InitializationSection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "glConstMinSquaredDistanceFromOrigin", ",", 
     "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
     "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
     "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
     "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
     "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
     ",", "glConstDynPlotRange", ",", "glConstSpringColorsByN"}], "]"}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], " ", 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
   RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstLocDefault", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstKDefaults", "=", 
   RowBox[{"{", 
    RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstSpringColors", "=", 
   RowBox[{"Darker", "@", 
    RowBox[{"{", 
     RowBox[{
     "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
     "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstPrimaryDisplaySize", "=", 
   RowBox[{".9", 
    RowBox[{"{", 
     RowBox[{"380", ",", "380"}], "}"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstTextDisplayOffsetHack", "=", 
   RowBox[{"{", 
    RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"glConstNeighboringCellIndexes", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", 
       RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"glConstDynPlotRange", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
        "glConstWindowHalfWidth"}], "}"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
        "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], " ", ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
      RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", 
        RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
      RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
   "\[IndentingNewLine]", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
    RowBox[{"DeleteDuplicates", "@", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"s", " ", 
           RowBox[{
            RowBox[{"Append", "[", 
             RowBox[{"glConstNeighboringCellIndexes", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
          RowBox[{"glConstSpringColors", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"s", ",", " ", 
           RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
         " ", 
         RowBox[{"{", 
          RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
      "]"}]}]}], " ", ";"}], "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
    RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
       {
        RowBox[{
         RowBox[{
         "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
          " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ", 
          "too", " ", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
            "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
             "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
           "Trickier"}]}], ",", " ", 
         RowBox[{
         "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
          "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
          "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
         "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
          " ", "of", " ", "the", " ", 
          RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", "if",
           " ", "that", " ", "is", " ", "done"}], ",", " ", 
         RowBox[{"that", " ", 
          RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
          " ", "scaling", " ", 
          RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", "overlap",
           " ", "in", " ", "the", " ", "dynamic", " ", 
          RowBox[{"tab", "."}]}]}]},
       {
        RowBox[{
        "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc", 
         " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
         RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
          RowBox[{
          "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
           "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
           "reciprocal", " ", "lattice", " ", 
           RowBox[{"vectors", ".", "\[IndentingNewLine]", 
            RowBox[{"(", 
             RowBox[{
             "returning", " ", "the", " ", "distance", " ", "from", " ", 
              "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
              "those", " ", "locators"}], ")"}]}]}]}]}]},
       {
        RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
         RowBox[{"error", ":", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
           " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
           "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
           "the", " ", "lattice", " ", 
           RowBox[{"vectors", ".", "\[IndentingNewLine]", 
            RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of", 
           " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
           "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ", 
           "to", " ", "the", " ", "defaults", " ", 
           RowBox[{"occurs", "."}]}]}]}]},
       {
        RowBox[{
        "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
         "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
         "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ", 
         "for", " ", 
         RowBox[{"consistency", "?"}]}]},
       {
        RowBox[{
         RowBox[{
         "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
          "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the", 
          " ", "freq", " ", "plot", " ", "intersection", " ", 
          RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
          " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
          RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ", 
          "graphic", " ", 
          RowBox[{"(", "23", ")"}]}], ",", " ", 
         RowBox[{
         "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
          "for", " ", "some", " ", "params"}]}]},
       {
        RowBox[{
         RowBox[{
         "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
          "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", " ", 
          RowBox[{"vs", ".", " ", "parameters"}], " ", 
          RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
          "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
         ",", " ", 
         RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
          RowBox[{"closer", "."}]}]}]}
      },
      GridBoxDividers->{
       "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
        "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]", 
   "*)"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
   "\"\<This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator.\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"checkAgainstRange", "[", 
     RowBox[{
     "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_", ",", 
      " ", 
      RowBox[{"typeFunc_", " ", ":", " ", "NumberQ"}]}], "]"}], " ", ":=", 
    " ", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"result", " ", "=", " ", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"typeFunc", "[", "v", "]"}], ",", "v", ",", " ", 
          "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"result", " ", "=", " ", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
          "result", ",", "default"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"result", " ", "=", " ", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
          "result", ",", "default"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
     "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
    "posted", " ", 
    RowBox[{"in", ":", " ", 
     ButtonBox[
      RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
          "a"}], "/", "37228"}], "/", "10"}]}],
      BaseStyle->"Hyperlink",
      ButtonData->{
        URL["http://mathematica.stackexchange.com/a/37228/10"], None},
      ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], " ",
    "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
    "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"springPoints", "[", " ", 
     RowBox[{"a12_List", ",", " ", 
      RowBox[{"n_Integer:", "8"}], ",", 
      RowBox[{"h_:", ".05"}], ",", " ", 
      RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", " ",
         "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
       ";", "\[IndentingNewLine]", 
       RowBox[{"n1", " ", "=", " ", 
        RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"springDiff", " ", "=", " ", 
        RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"nd", " ", "=", " ", 
        RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"r", " ", "=", " ", 
        RowBox[{"RotationMatrix", "[", 
         RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], " ",
        ";", "\[IndentingNewLine]", 
       RowBox[{"r1", " ", "=", " ", 
        RowBox[{"r", " ", ".", " ", 
         RowBox[{"{", 
          RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Table", "[", " ", 
          RowBox[{
           RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"n1", " ", "+", " ", 
                RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                RowBox[{"t", " ", 
                 RowBox[{"(", 
                  RowBox[{"1", " ", "-", " ", 
                   RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
               RowBox[{"h", " ", 
                RowBox[{"Sin", "[", " ", 
                 RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
              "}"}]}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
            " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", " ", 
          RowBox[{
           RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"n1", " ", "+", " ", 
                RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", " ", "-", " ", 
                   RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
              "}"}]}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
            " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Table", "[", " ", 
          RowBox[{
           RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"n1", " ", "+", 
                RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
              "}"}]}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
            " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
   "\"\<\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"indexLabel", " ", "=", " ", 
    RowBox[{
     RowBox[{"Subscript", "[", 
      RowBox[{
       RowBox[{"Style", "[", 
        RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
     "&"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
   "\"\<SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"kLable", " ", "=", " ", 
    RowBox[{
     RowBox[{"Style", "[", " ", 
      RowBox[{
       RowBox[{"indexLabel", "[", 
        RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
       RowBox[{"FontColor", "\[Rule]", 
        RowBox[{"glConstSpringColors", "[", 
         RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"massColors", " ", ":=", " ", 
    RowBox[{"(", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"Darker", "[", 
        RowBox[{"{", " ", 
         RowBox[{
         "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",", 
          " ", "Orange"}], " ", "}"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
       " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"massLabel", " ", ":=", " ", 
    RowBox[{
     RowBox[{"Style", "[", 
      RowBox[{
       RowBox[{"indexLabel", "[", 
        RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
       RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "calcLineTable", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"calcLineTable", "[", " ", 
     RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
    " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
       " ", ";", "\[IndentingNewLine]", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Line", "[", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"-", 
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], 
              RowBox[{"b", "[", 
               RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"j", " ", 
              RowBox[{"b", "[", 
               RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
            RowBox[{
             RowBox[{
              RowBox[{"n", "[", 
               RowBox[{"[", "first", "]"}], "]"}], 
              RowBox[{"b", "[", 
               RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"j", " ", 
              RowBox[{"b", "[", 
               RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
          "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", 
           RowBox[{"-", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
           RowBox[{"n", "[", 
            RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ",
    ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
   "\"\<Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
    RowBox[{"Inverse", "[", " ", 
     RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
       ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"adjustedmoSel", "[", 
     RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", "\[IndentingNewLine]", 
        RowBox[{"First", "[", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{
           RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], "]"}],
         ",", "\[IndentingNewLine]", "mOrigInd"}], " ", "\[IndentingNewLine]",
        "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"First", "@", 
       RowBox[{"Delete", "[", 
        RowBox[{
         RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"constructKArrayElements", "[", " ", 
     RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"a", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "j", ",", " ", 
               RowBox[{"s", " ", 
                RowBox[{"glConstNeighboringCellIndexes", "[", 
                 RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
             " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"s", ",", " ", 
              RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
            " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
          "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", " ", "[", " ", 
        RowBox[{
         RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
         RowBox[{"Append", "[", 
          RowBox[{"a", ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"i", ",", "j", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
            RowBox[{"glConstKDefaults", "[", 
             RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ", 
        "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "constructKArray", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
    " ", 
    RowBox[{"Flatten", "[", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"constructKArrayElements", "[", 
         RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
   " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"returnAlteredKArrayElements", "[", 
     RowBox[{
     "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", "ni_Integer",
       ",", "v_"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{"kA", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m1Ind", ",", "m2Ind", ",", 
             RowBox[{"glConstNeighboringCellIndexes", "[", 
              RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{"Rule", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m1Ind", ",", "m2Ind", ",", 
             RowBox[{"glConstNeighboringCellIndexes", "[", 
              RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
        ",", 
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m1Ind", ",", "m2Ind", ",", 
             RowBox[{"-", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}], 
         "\[RuleDelayed]", 
         RowBox[{"Rule", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m1Ind", ",", "m2Ind", ",", 
             RowBox[{"-", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
          "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"returnAlteredKarrayOriginElement", "[", 
     RowBox[{
     "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"m1oSet", "=", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"Sort", "[", 
           RowBox[{"{", 
            RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"kA", "/.", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], "\n", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], "\n", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
    RowBox[{"k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
     RowBox[{"m2Sel", "."}]}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"selectVFromKarray", "[", 
     RowBox[{
     "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
      "ni_Integer"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m1Ind", ",", "m2Ind", ",", 
        RowBox[{"glConstNeighboringCellIndexes", "[", 
         RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
    "m1Sel", " ", "and", " ", "moSel"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"selectOriginVFromKarray", "[", 
     RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"Sort", "[", 
         RowBox[{"{", 
          RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
   ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
     RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"k2", " ", "=", " ", 
        RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"constructKArrayElements", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
            " ", 
           RowBox[{"(", 
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"Table", "[", " ", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", " ",
                 "1"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
     " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
     RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"t", " ", "=", " ", 
        RowBox[{"Abs", "[", 
         RowBox[{"ArcCos", "[", 
          RowBox[{
           RowBox[{"Normalize", "[", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
           RowBox[{"Normalize", "[", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
       ";", "\[IndentingNewLine]", 
       RowBox[{"t", " ", "=", " ", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", ">", " ", 
           RowBox[{"Pi", "/", "2"}]}], ",", " ", 
          RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"t", " ", "<", " ", "minAngle"}], ",", "\[IndentingNewLine]",
          "glConstLocDefault", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"uLoc", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"uLoc", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"v", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
        RowBox[{
         RowBox[{"v", "[", 
          RowBox[{"[", "1", "]"}], "]"}], 
         RowBox[{"v", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"v", "[", 
          RowBox[{"[", "1", "]"}], "]"}], 
         RowBox[{"v", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
        RowBox[{
         RowBox[{"v", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], " ",
    ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
   "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{"projOpU", "[", "v", "]"}], "/", 
     RowBox[{"(", 
      RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
   "\"\<Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n\>\""}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"relativeDifferences", "[", " ", 
     RowBox[{"r_List", ",", "mp_List", ",", " ", 
      RowBox[{"{", 
       RowBox[{
       "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
       "}"}]}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"pOrigin", " ", "=", " ", 
        RowBox[{"mp", "[", 
         RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"pOther", " ", "=", " ", 
        RowBox[{
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
         RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"d", " ", "=", " ", 
        RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dn", " ", "=", " ", 
        RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
          RowBox[{"(*", 
           RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
        "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], " ",
    ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
   "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
  " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"calculateCouplings", "[", 
     RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
        ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
        " ", "=", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
           " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"t", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Append", "[", 
           RowBox[{"#", ",", " ", 
            RowBox[{"relativeDifferences", "[", 
             RowBox[{"r", ",", " ", "mp", ",", " ", 
              RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}], 
         "/@", " ", 
         RowBox[{"(", 
          RowBox[{"kA", "/.", " ", 
           RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
       ";", "\[IndentingNewLine]", 
       RowBox[{"t", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
           "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"t1", " ", "=", " ", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Select", "[", " ", 
              RowBox[{"t", ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&&", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                   RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                "&"}]}], "]"}], ")"}], ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
              RowBox[{"#2", "[", 
               RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"t2", " ", "=", " ", 
        RowBox[{"Select", "[", " ", 
         RowBox[{"t", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
            RowBox[{"{", 
             RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
       " ", ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
         RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"t2", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"t2", ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                  RowBox[{"Drop", "[", 
                   RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
          " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
       RowBox[{"t2", " ", "=", " ", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Sort", "[", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Select", "[", " ", 
              RowBox[{"t2", ",", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                  "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
            RowBox[{
             RowBox[{
              RowBox[{"#1", "[", 
               RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
              RowBox[{"#2", "[", 
               RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], " ", ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"spScaled", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
      ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ds", " ", "=", " ", 
        RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"springPoints", "[", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"s1", ",", "s2"}], "}"}], ",", 
         RowBox[{"Ceiling", "[", 
          RowBox[{"12", " ", "scaleKValue", " ", 
           RowBox[{"Sqrt", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}], 
            "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oneTermOfdynamicsMatrix", "::", "usage"}], " ", "=", " ", 
   "\"\<\!\(TraditionalForm\`\(grab\\\ data\\\ \(from : \\\ \
rawArrayOfMasses\), \\\ parameterLocatorDependencies, \
\[IndentingNewLine]\(\(couplingData[\([_]\)]\)[\([_]\)]\)[\([_]\)]\\\  = \\\ \
{k, \\\ j, \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \\\ \
\*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  + \\\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]
ex : \\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]
to\\\ form\\\ equations\\\ of\\\ the\\\ \(form : \
\[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\\  = \\\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\\  \[NotEqual] \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\\ \
\((\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\
\[RightVector]\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SubscriptBox[\(m\), \(k\)]] - \\\ \
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(j\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \*SubscriptBox[\(m\), \(j\)]\)]] \
\*SuperscriptBox[\(e\), \(I\\\ \((\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  . \\\ \
\*OverscriptBox[\(q\), \(\[RightVector]\)]\\\ )\)\)])\)\[IndentingNewLine]
Note\\\ that\\\ qVec\\\ here\\\ is\\\ intended\\\ to\\\ be\\\ an\\\ undefined\
\\\ global . \\\ \\\ Is\\\ there\\\ a\\\ way\\\ to\\\ do\\\ that\\\ \
\(\(programatically\)\(?\)\)\)\)\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"oneTermOfdynamicsMatrix", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
        "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
      ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", " ",
       "mA_List"}], "]"}], " ", ":=", " ", 
    RowBox[{"(", 
     RowBox[{"kS", " ", 
      RowBox[{"proj", "  ", ".", 
       RowBox[{"(", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"epsilon", "[", 
           RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
         RowBox[{
          RowBox[{"epsilon", "[", 
           RowBox[{"[", "j", "]"}], "]"}], 
          RowBox[{
           RowBox[{"E", "^", 
            RowBox[{"(", 
             RowBox[{"I", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                "qVec"}], ")"}]}], ")"}]}], "/", 
           RowBox[{"Sqrt", "[", " ", 
            RowBox[{"mk", " ", 
             RowBox[{"mA", "[", 
              RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
     "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dynamicsMatrix", "[", 
     RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", "epsilon",
         ",", " ", "m", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
       "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"cdFlatAndSorted", " ", "=", " ", 
        RowBox[{"SplitBy", "[", " ", 
         RowBox[{
          RowBox[{"Sort", "@", 
           RowBox[{"Flatten", "[", 
            RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}], 
         " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
         "}"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
           "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
       ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{"Here", " ", 
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
           RowBox[{"(", 
            RowBox[{"=", 
             RowBox[{"epsilon", "[", 
              RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
           "represented", " ", "as", " ", "a", " ", "2", "x", 
           RowBox[{"(", 
            RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", "the",
            " ", "vector", " ", "factored", " ", 
           RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
           " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
          RowBox[{
           RowBox[{
            TagBox[
             RowBox[{"(", "\[NoBreak]", GridBox[{
                {"1", "0", "0", "0", "0", "0"},
                {"0", "1", "0", "0", "0", "0"}
               },
               
               GridBoxAlignment->{
                "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                   Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                 "Rows" -> {
                   Offset[0.2], {
                    Offset[0.4]}, 
                   Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
             Function[BoxForm`e$, 
              MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
            "pre"}], "-", 
           RowBox[{
           "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
            "projection", " ", 
            RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
            "whole", " ", "thing", " ", "should", " ", "be", " ", "logically",
             " ", "treated", " ", "as", " ", "if", " ", "it", " ", "is", " ", 
            "post"}], "-", 
           RowBox[{
           "multiplied", " ", "by", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {
                  SubscriptBox["\[Epsilon]", 
                   RowBox[{"1", ",", "1"}]]},
                 {
                  SubscriptBox["\[Epsilon]", 
                   RowBox[{"1", ",", "2"}]]},
                 {
                  SubscriptBox["\[Epsilon]", 
                   RowBox[{"2", ",", "1"}]]},
                 {
                  SubscriptBox["\[Epsilon]", 
                   RowBox[{"2", ",", "2"}]]},
                 {
                  SubscriptBox["\[Epsilon]", 
                   RowBox[{"3", ",", "1"}]]},
                 {
                  SubscriptBox["\[Epsilon]", 
                   RowBox[{"3", ",", "2"}]]}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]]],
             
             CellChangeTimes->{{3.600871330362259*^9, 
              3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"epsilon", " ", "=", " ", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"IdentityMatrix", "[", " ", 
           RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"res", " ", "=", " ", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Table", "[", " ", 
            RowBox[{
             RowBox[{"Total", "@", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"oneTermOfdynamicsMatrix", "[", 
                  RowBox[{"#", ",", " ", "r", ",", " ", 
                   RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                   " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                RowBox[{"(", 
                 RowBox[{"cdFlatAndSorted", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ", 
           "//", " ", "Flatten"}], ",", " ", 
          RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"res", " ", "/.", " ", 
         RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{";", 
       RowBox[{"cdFlatAndSorted", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{";", 
       RowBox[{"mScalarArray", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{";", 
       RowBox[{
        RowBox[{
         RowBox[{"oneTermOfdynamicsMatrix", "[", 
          RowBox[{"#", ",", " ", "r", ",", " ", 
           RowBox[{"mScalarArray", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
           "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"cdFlatAndSorted", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{";", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
           RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}],
            " ", "]"}], "[", 
          RowBox[{"#", ",", " ", "r", ",", 
           RowBox[{"mScalarArray", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
           "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"cd", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
     "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "calcDynamics", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
    "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc.\>\""}], " ", ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Example", ":", "\n", "\n", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
        "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", 
        "qPoint", ",", " ", "omegaIndex"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"basisAndMassPoints", " ", "=", " ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ld", " ", "=", " ", 
        RowBox[{"locDependent", "[", " ", 
         RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
          RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"kArray", " ", "=", " ", 
        RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cd", " ", "=", " ", 
        RowBox[{"calculateCouplings", "[", " ", 
         RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"qPoint", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
         "2"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"matrix", " ", "=", " ", 
        RowBox[{"dynamicsMatrix", "[", " ", 
         RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dynamics", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"calcDynamics", "[", " ", 
           RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}], " ", "//",
           " ", "First"}], " ", "//", " ", "TableForm"}]}]}]}], 
     "\[IndentingNewLine]", "]"}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Sqrt", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
        "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\n", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
   "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"frequencyPlotCalc", "[", 
     RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
        "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
        ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
         " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"eigTable2D", " ", "=", " ", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"Re", "[", 
           RowBox[{"Table", "[", "  ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
               RowBox[{"Eigenvalues", "[", " ", 
                RowBox[{
                 RowBox[{"m", "[", " ", 
                  RowBox[{"{", 
                   RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                  " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"qx", ",", " ", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
               RowBox[{
                RowBox[{"qMax", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
               RowBox[{
                RowBox[{"qMax", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
              "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"qy", ",", " ", 
               RowBox[{
                RowBox[{"-", 
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
               RowBox[{
                RowBox[{"qMax", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
               RowBox[{
                RowBox[{"qMax", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
              "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
        RowBox[{
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{"Sqrt", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
              RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
         " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"range", " ", "=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
          "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"ListPlot3D", "[", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", " ",
           "range"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"AxesLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
           "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
            "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ",
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", " ", 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"showFreqPlot", "::", "usage"}], " ", "=", " ", 
   "\"\<showFreqPlot[ qPlaneLoc, freqPlot ]\>\""}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"showFreqPlot", "[", 
     RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"{", 
         RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
          RowBox[{"Graphics3D", "[", " ", 
           RowBox[{"Polygon", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"aa", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                RowBox[{"aa", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"bb", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                RowBox[{"bb", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", "  ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"bb", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                RowBox[{"bb", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"aa", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                RowBox[{"aa", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}], 
            "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"pointsTable", "::", "usage"}], " ", "=", " ", 
   "\"\<Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage.\>\""}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointsTable", "[", " ", 
     RowBox[{"massPosition_List", ",", " ", "latticeOrigins_List"}], " ", 
     "]"}], " ", ":=", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"#", " ", "+", " ", "massPosition"}], ")"}], " ", "&"}], "/@",
       " ", "latticeOrigins"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", " ", "findLatticeCells", " ", "]"}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"findLatticeCells", "::", "usage"}], " ", "=", " ", 
   "\"\<All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n\>\""}], " ", 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"findLatticeCells", "[", 
     RowBox[{"latticeVectors_List", ",", "limits_List"}], "]"}], " ", ":=", 
    " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", " ", "b", ",", "sol", ",", " ", "oneSolution"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"a", ",", " ", "b"}], "}"}], " ", "=", " ", 
        "latticeVectors"}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Rationalize", " ", "to", " ", 
         RowBox[{"fix", ":", " ", "to", ":", " ", 
          ButtonBox[
           RowBox[{
            RowBox[{"http", ":"}], "//", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], 
                "/", "questions"}], "/", "6055"}], "/", "how"}], "-", "to", 
             "-", "get", "-", "rid", "-", "of", "-", "warnings", "-", "when", 
             "-", "using", "-", "solve", "-", "on", "-", "an", "-", 
             "equation", "-", "with", "-", "inexact", "-", "coeffici"}]}],
           BaseStyle->"Hyperlink",
           ButtonData->{
             URL[
             "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"], None},
           
           ButtonNote->
            "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"]}]}], 
        " ", "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"oneSolution", "[", "o_", "]"}], " ", ":=", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"n", ",", "m"}], "}"}], " ", "/.", 
         RowBox[{"Solve", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Rationalize", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"limits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"n", " ", "a"}], " ", "+", " ", 
                  RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                ".", " ", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "0"}], "}"}]}]}], ")"}], " ", "&&", 
             "\[IndentingNewLine]", 
             RowBox[{"(", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"n", " ", "a"}], " ", "+", " ", 
                  RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                ".", " ", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "0"}], "}"}]}], " ", "<", " ", 
               RowBox[{
                RowBox[{"limits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ")"}], " ", "&&", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"limits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"n", " ", "a"}], " ", "+", " ", 
                  RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                " ", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}]}], ")"}], " ", "&&", 
             "\[IndentingNewLine]", 
             RowBox[{"(", " ", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"n", " ", "a"}], " ", "+", " ", 
                  RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                " ", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "1"}], "}"}]}], " ", "<", " ", 
               RowBox[{
                RowBox[{"limits", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], " ", "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"n", ",", "m"}], "}"}], ",", " ", "Integers"}], "]"}]}]}],
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"sol", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"oneSolution", "[", "#", "]"}], " ", "&"}], "/@", " ", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", "a", ",", " ", "b", ",", 
               " ", 
               RowBox[{"a", "+", "b"}]}], "}"}]}], " ", ",", "1"}], "]"}], 
          " ", "//", " ", "Sort"}], " ", "//", " ", "DeleteDuplicates"}]}], 
       " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{"a", " ", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
            RowBox[{"b", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], " ", "&"}], "/@", 
        " ", "sol"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "locDependent", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
   "\"\<Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"locDependent", "[", " ", 
     RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
     " ", "]"}], "  ", ":=", " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", ",",
         "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
        "mPosFirstCell", ",", " ", "reciprocalNorms", ",", " ", 
        "allLatticeCellOriginsInDynPlotRange", ",", " ", "cellOrigins"}], 
       "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"latticeBasis", " ", "=", 
        RowBox[{"Take", "[", 
         RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"m", " ", "=", " ", 
        RowBox[{"Drop", "[", 
         RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Ceiling", "[", "  ", 
            RowBox[{"Abs", "[", 
             RowBox[{"glConstWindowHalfWidth", "/", " ", 
              RowBox[{
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "[", 
               RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
          " ", "/@", " ", 
          RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"reciprocalBasis", " ", "=", " ", 
        RowBox[{"calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}],
        " ", ";", "\[IndentingNewLine]", 
       RowBox[{"reciprocalNorms", " ", "=", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Norm", "[", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
          " ", 
          RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"mObliqueComponents", " ", "=", " ", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"m", "[", 
            RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
           RowBox[{"reciprocalBasis", "[", 
            RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"mPosFirstCell", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
            RowBox[{
             RowBox[{"Floor", "[", 
              RowBox[{"mObliqueComponents", "[", 
               RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
             "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
         RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"allLatticeCellOriginsInDynPlotRange", " ", "=", " ", 
        RowBox[{
         RowBox[{"findLatticeCells", "[", 
          RowBox[{"latticeBasis", ",", "glConstDynPlotRange"}], "]"}], " ", "//",
          " ", "Transpose"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"cellOrigins", " ", "=", " ", 
        RowBox[{"(", 
         RowBox[{
         "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "Last"}], 
         ")"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{
         "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Norm", "[", 
              RowBox[{"latticeBasis", "[", 
               RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
            " ", 
            RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"Normalize", "[", 
              RowBox[{"latticeBasis", "[", 
               RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
            " ", 
            RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
          "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<latticeCellOriginIndexes\>\"", " ", "\[Rule]", " ", 
          RowBox[{"(", 
           RowBox[{
           "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "First"}], 
           ")"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
         "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
          RowBox[{"(", 
           RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<mObliqueComponents\>\"", "\[Rule]", " ", "mObliqueComponents"}],
          ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"pointsTable", "[", 
               RowBox[{
                RowBox[{"mPosFirstCell", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], ",", " ", "cellOrigins"}], 
               "]"}], ")"}], " ", "&"}], "/@", " ", 
            RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"calcLineTable", "[", " ", 
              RowBox[{
              "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
               " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
            RowBox[{"Permutations", "[", 
             RowBox[{"{", 
              RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
        "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], " ",
    ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
   "\"\<Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"plotSprings", "[", 
     RowBox[{
     "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
      ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
     " ", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
        "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
        " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
        "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
        ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"latticeBasis", " ", "=", " ", 
        RowBox[{"Take", "[", " ", 
         RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"aLoc", " ", "=", " ", 
        RowBox[{"uLoc", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"bLoc", " ", "=", " ", 
        RowBox[{"uLoc", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"scaleLoc", " ", "=", " ", 
        RowBox[{
         RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
         RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
         "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
          "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
          "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
           "\"\<pointsDataTable\>\"", ",", 
           "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
           "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
           "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
          ",", 
          RowBox[{"PointSize", "[", 
           RowBox[{"Sqrt", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"mScalarArray", "[", 
               RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
             "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
            " ", 
           RowBox[{"pointsDataTable", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
          RowBox[{"Text", "[", 
           RowBox[{
            RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
            RowBox[{
             RowBox[{"mLoc", "[", 
              RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
             "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
         "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"cOrigin", " ", "=", " ", 
        RowBox[{"Select", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"cd", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], " ",
          "]"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"cN", " ", "=", " ", 
        RowBox[{"Select", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"cd", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "[", 
           RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"g", " ", "=", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"spScaled", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", 
                RowBox[{"{", 
                 RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
              " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
               "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}], 
         "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", " ", "[", " ", 
        RowBox[{
         RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"g", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"spScaled", "[", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
                 " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"#", "[", 
                   RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                  "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
             "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Flatten", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", "\[IndentingNewLine]", " ", 
                RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                   "&"}], " ", "/@", " ", 
                  RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                 ",", "Thick", ",", 
                 RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                 "\[IndentingNewLine]", ",", "Red", ",", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                   "&"}], " ", "/@", " ", 
                  RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                 ",", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                   RowBox[{"OverVector", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                 "\[IndentingNewLine]", ",", 
                 RowBox[{"Text", "[", 
                  RowBox[{
                   RowBox[{"OverVector", "[", 
                    RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                   RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{"This", " ", "polygon", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    "with", " ", "doubling", " ", "of", " ", "PlotRange"}], 
                    " ", "\[Rule]", " ", 
                    RowBox[{"glConstDynPlotRange", " ", "below"}]}], ")"}], 
                  " ", "was", " ", "to", " ", "visually", " ", "test", " ", 
                  "the", " ", "Solve", " ", "logic", " ", "used", " ", "to", 
                  " ", "find", " ", "all", " ", "the", " ", "lattice", " ", 
                  "cells", " ", "contained", " ", "or", " ", "just", " ", 
                  "outside", " ", "of", " ", "the", " ", 
                  RowBox[{"region", "."}]}], " ", "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{",", 
                  RowBox[{"Lighter", "@", 
                   RowBox[{"Lighter", "@", "Gray"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Opacity", "[", "0.5", "]"}], "\[IndentingNewLine]",
                   ",", 
                  RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}]}], " ", "*)"}], 
                "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", " ", 
                RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
            "\[IndentingNewLine]", ",", 
            RowBox[{"PlotRange", " ", "\[Rule]", " ", 
             RowBox[{"(*", "2", "*)"}], " ", "glConstDynPlotRange"}], 
            "\[IndentingNewLine]", ",", 
            RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
           "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
         "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
     "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "dynamicsGraphicsTable", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dynamicsGraphicsTable", "::", "usage"}], " ", "=", " ", 
    "\"\<Calculate a time indexed table of positions for each of the masses\>\
\""}], " ", ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{"Example", ":", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
        "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", "sc", 
        ",", " ", "qPoint", ",", " ", "omegaIndex", ",", "  ", "lines", ",", 
        "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "pointsData", 
        ",", "dynAtOmegaIndex", ",", " ", "dynMesh", ",", "dynTable"}], "}"}],
       ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"basisAndMassPoints", " ", "=", " ", 
        RowBox[{"{", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1", ",", 
            RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ld", " ", "=", " ", 
        RowBox[{"locDependent", "[", " ", 
         RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
          RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"kArray", " ", "=", " ", 
        RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"cd", " ", "=", " ", 
        RowBox[{"calculateCouplings", "[", " ", 
         RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"sc", " ", "=", " ", "0.25"}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"qPoint", " ", "=", " ", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
         "2"}]}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"matrix", " ", "=", " ", 
        RowBox[{"dynamicsMatrix", "[", " ", 
         RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dynamics", " ", "=", " ", 
        RowBox[{"calcDynamics", "[", " ", 
         RowBox[{"matrix", "[", " ", "qPoint", " ", "]"}], " ", "]"}]}], " ", 
       ";", "\[IndentingNewLine]", 
       RowBox[{"omegaIndex", " ", "=", " ", "1"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dynAtOmegaIndex", " ", "=", " ", 
        RowBox[{"dynamics", "[", 
         RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dynMesh", " ", "=", " ", "30"}], " ", ";", 
       "\[IndentingNewLine]", 
       RowBox[{"dynTable", " ", "=", " ", 
        RowBox[{"dynamicsGraphicsTable", "[", 
         RowBox[{
         "ld", ",", " ", "dynAtOmegaIndex", ",", " ", "sc", ",", " ", 
          "qPoint", ",", " ", "dynMesh"}], " ", "]"}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"With", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}]}], " ", "]"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Animate", "[", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"showDynPlot", "[", " ", 
          RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"n", ",", " ", "1", ",", " ", "dynMesh", ",", " ", "1"}], 
          "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"dynamicsGraphicsTable", "[", 
     RowBox[{
     "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
      "qPoint_List", ",", " ", "dynMesh_Integer"}], " ", "]"}], " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "pointsDataTable", ",", "e", ",", " ", "omega", ",", " ", "lines", ",",
         " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", ",", 
        " ", "numberOfMasses", ",", " ", "latticeCellOriginIndexes", ",", " ",
         "mPosFirstCell", ",", "pointsData"}], "}"}], ",", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
          "lines", ",", " ", "mScalarArray", ",", " ", "numberOfMasses", ",", 
          " ", "latticeCellOriginIndexes", ",", " ", "mPosFirstCell"}], "}"}],
         "=", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", " ", 
           "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
           "\"\<numberOfMasses\>\"", ",", " ", 
           "\"\<latticeCellOriginIndexes\>\"", ",", " ", 
           "\"\<mPosFirstCell\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
        "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
       RowBox[{"e", " ", "=", " ", 
        RowBox[{"Partition", "[", 
         RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"nu", " ", "=", " ", 
        RowBox[{"2", " ", "Pi", " ", 
         RowBox[{"If", "[", " ", 
          RowBox[{
           RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
           " ", 
           RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"pointsData", " ", ":=", " ", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"a", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"b", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], " ", "\[IndentingNewLine]", 
             "+", " ", 
             RowBox[{"mPosFirstCell", "[", 
              RowBox[{"[", "k", "]"}], "]"}], " ", "\[IndentingNewLine]", "+",
              " ", 
             RowBox[{"sc", " ", 
              RowBox[{"Re", "[", " ", 
               RowBox[{
                RowBox[{"e", "[", 
                 RowBox[{"[", " ", "k", " ", "]"}], "]"}], " ", 
                RowBox[{"E", "^", 
                 RowBox[{"(", 
                  RowBox[{"I", 
                   RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qPoint", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
                    RowBox[{"b", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], " ", ")"}]}], "  ", 
                    "-", " ", 
                    RowBox[{"nu", " ", "tau"}]}], " ", ")"}]}], ")"}]}]}], 
               " ", "]"}]}]}], " ", "\[IndentingNewLine]", "&"}], "/@", " ", 
           "latticeCellOriginIndexes"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"k", ",", " ", "numberOfMasses"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"tau", ",", "0", ",", "1", ",", 
            RowBox[{"1", "/", "dynMesh"}]}], "}"}]}], "\[IndentingNewLine]", 
         "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"{", " ", 
        RowBox[{
        "pointsData", ",", " ", "mScalarArray", ",", "numberOfMasses", ",", 
         "lines", ",", "dynMesh"}], " ", "}"}]}]}], "\[IndentingNewLine]", 
     "]"}]}], " ", ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearAll", "[", "showDynPlot", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"showDynPlot", "::", "usage"}], " ", "=", " ", 
   "\"\<showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"showDynPlot", "[", 
    RowBox[{
     RowBox[{"{", " ", 
      RowBox[{
      "pointsData_List", ",", " ", "mScalarArray_List", ",", 
       "numberOfMasses_Integer", ",", "lines_List", ",", " ", 
       "dynMesh_Integer"}], " ", "}"}], ",", " ", "n_"}], " ", "]"}], " ", ":=",
    " ", 
   RowBox[{"Show", "[", 
    RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"pointsData", "[", 
              RowBox[{"[", "k", "]"}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}], "\[IndentingNewLine]", ",", 
            RowBox[{"PlotRange", " ", "\[Rule]", " ", "glConstDynPlotRange"}],
             "\[IndentingNewLine]", ",", 
            RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
            "\[IndentingNewLine]", ",", " ", 
            RowBox[{"PlotStyle", "\[Rule]", 
             RowBox[{"Directive", "[", 
              RowBox[{
               RowBox[{"PointSize", "[", 
                RowBox[{"Sqrt", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                   "350"}], "]"}], "]"}], ",", 
               RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"Graphics", "[", 
          RowBox[{
          "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", "}"}], 
          "]"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", "}"}],
       ",", " ", "1"}], "]"}], "\[IndentingNewLine]", "]"}]}], " ", 
  ";"}]}], "Input",
 InitializationCell->True,
 CellID->1596299]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateSection"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"This", " ", 
        RowBox[{"If", "[", "]"}], " ", "is", " ", "effectively", " ", "my", 
        " ", "Initialization"}], " ", "\[RuleDelayed]", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "}"}], " ", 
         RowBox[{"block", ".", "  ", "Done"}], " ", "with", " ", "a", " ", 
         "variable", " ", "so", " ", "that", " ", "copies", " ", "of", " ", 
         "the", " ", "output", " ", "cell", " ", 
         RowBox[{"won", "'"}], "t", " ", "re"}], "-", 
        RowBox[{"execute", " ", "their", " ", "Initialization", " ", 
         RowBox[{"cells", ".", "  ", "This"}], " ", "allows", " ", 
         "\"\<interesting\>\"", " ", "settings", " ", "to", " ", "be", " ", 
         "maintained", " ", "per"}], "-", 
        RowBox[{
        "copy", " ", "of", " ", "the", " ", "output", " ", "cell"}]}]}], ",", 
      " ", 
      RowBox[{
      "but", " ", "still", " ", "provide", " ", "an", " ", "Initialization", 
       " ", "block", " ", "for", " ", "the", " ", "primary", " ", "output", 
       " ", 
       RowBox[{"cell", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", " ", 
    RowBox[{"If", " ", "[", " ", 
     RowBox[{"bInitDefaults", ",", 
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"u", " ", "=", " ", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
           ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{
          "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "n", "}"}], ",", 
          RowBox[{
           RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
             RowBox[{
              RowBox[{"kArray", " ", "=", " ", 
               RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
              RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"qLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "\"\<qMaxVec\>\"", " ", "/.", " ", 
            "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPlaneLoc", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"couplingData", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshMatrix", ":", " ", 
           RowBox[{"dependent", " ", "on"}], ":", " ", 
           "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynamics", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
          "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"dynPlot", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", 
           RowBox[{"dynamics", "[", 
            RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
           " ", "qLoc", ",", " ", "dynMeshSize"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshFreqPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "freqMeshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"freqPlot", " ", "=", " ", 
         RowBox[{"frequencyPlotCalc", "[", " ", 
          RowBox[{
          "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
           "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
       "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "This", " ", "is", " ", "the", " ", "main", " ", "panel", " ", 
      "display"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"Switch", "[", " ", 
      RowBox[{
      "tabNumber", ",", "\[IndentingNewLine]", "dynTab", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", " ", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynamics", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynamics", " ", "=", " ", 
              RowBox[{"calcDynamics", "[", " ", 
               RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
             " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
           ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", " ", 
          RowBox[{"bRefreshDynPlot", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"dynPlot", " ", "=", " ", 
              RowBox[{"dynamicsGraphicsTable", "[", " ", 
               RowBox[{"parameterLocatorDependencies", ",", " ", 
                RowBox[{"dynamics", "[", 
                 RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                ",", " ", "qLoc", ",", "dynMeshSize"}], " ", "]"}]}], " ", 
             ";", 
             RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
           ","}], "]"}], " ", ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"showDynPlot", "[", " ", 
          RowBox[{"dynPlot", ",", " ", "tauSliderValue"}], " ", "]"}]}], 
        "\[IndentingNewLine]", ")"}], ",", "\[IndentingNewLine]", "freqTab", 
       ",", "\[IndentingNewLine]", 
       RowBox[{"(", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", " ", "[", " ", 
          RowBox[{"bRefreshMatrix", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"matrix", " ", "=", " ", 
              RowBox[{"dynamicsMatrix", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "couplingData"}], 
               " ", "]"}]}], " ", ";", 
             RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
             RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
             " ", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
            ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"bRefreshFreqPlot", ",", "\[IndentingNewLine]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"freqPlot", " ", "=", " ", 
              RowBox[{"frequencyPlotCalc", "[", " ", 
               RowBox[{
               "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
                "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
             RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
            ")"}], ","}], " ", "]"}], " ", ";", "\[IndentingNewLine]", 
         "\[IndentingNewLine]", 
         RowBox[{"showFreqPlot", "[", " ", 
          RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
        "\[IndentingNewLine]", ")"}], ",", "\[IndentingNewLine]", "_", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"LocatorPane", "[", " ", 
        RowBox[{
         RowBox[{"Dynamic", "[", 
          RowBox[{"u", ",", 
           RowBox[{
            RowBox[{"(", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"u", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Flatten", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                   RowBox[{
                   "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                  "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"If", "[", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                   RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"Module", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"rm", ",", "km"}], "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"rm", " ", "=", " ", 
                  RowBox[{"First", "@", 
                   RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                 " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                  "\[IndentingNewLine]", "]"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"km", " ", "=", " ", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                   "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"If", " ", "[", 
                  RowBox[{
                   RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                   "\[IndentingNewLine]", 
                   RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                   RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                  " ", "\[IndentingNewLine]", "]"}]}]}], 
               "\[IndentingNewLine]", "]"}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"u", "[", 
                RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
               RowBox[{"If", "[", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                   RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                  "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                 RowBox[{"glConstLocDefault", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                "angle", " ", "between", " ", "lattice", " ", "vectors", " ", 
                "get", " ", "too", " ", "small"}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"u", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"u", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
               RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                RowBox[{
                "u", ",", " ", " ", "glConstMinAngleBetweenLatticeVectors"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"rawNumberOfMasses", " ", "=", " ", 
               RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
               "These", " ", "are", " ", "in", " ", "case", " ", "the", " ", 
                "number", " ", "of", " ", "locators", " ", "were", " ", 
                "changed", " ", "and", " ", "we", " ", "have", " ", "a", " ", 
                "mass", " ", "selected", " ", "that", " ", "is", " ", "now", 
                " ", 
                RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"m1Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"m2Sel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", " ", 
                 "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
              "\[IndentingNewLine]", 
              RowBox[{"moSel", " ", "=", " ", 
               RowBox[{"adjustedmoSel", "[", " ", 
                RowBox[{
                "rawNumberOfMasses", ",", " ", "moSel", ",", " ", "m1Sel"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"omegaIndex", " ", "=", " ", 
               RowBox[{"If", " ", "[", " ", 
                RowBox[{
                 RowBox[{"omegaIndex", " ", ">", 
                  RowBox[{"(", 
                   RowBox[{"2", "rawNumberOfMasses"}], ")"}]}], ",", " ", "1",
                  ",", " ", "omegaIndex"}], "]"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{
                "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                 "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", " ", 
                "m2Sel", ",", " ", 
                RowBox[{
                "or", " ", "moSel", " ", "were", " ", "changed", " ", "just", 
                 " ", 
                 RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
              RowBox[{"k1", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                 "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k2", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k3", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k4", " ", "=", " ", 
               RowBox[{"selectVFromKarray", "[", 
                RowBox[{
                "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}], 
                "]"}]}], " ", ";", "\[IndentingNewLine]", 
              RowBox[{"k5", " ", "=", " ", 
               RowBox[{"selectOriginVFromKarray", "[", " ", 
                RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], " ",
                 "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
               RowBox[{"locDependent", "[", " ", 
                RowBox[{
                "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}],
                 " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                RowBox[{
                "and", " ", "the", " ", "last", " ", "selected", " ", "value",
                  " ", "is", " ", "now", " ", "out", " ", "of", " ", 
                 RowBox[{"range", "."}]}]}], " ", "*)"}], 
              "\[IndentingNewLine]", 
              RowBox[{"qLoc", " ", "=", " ", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                 "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}], 
                 " ", ")"}], "/", "2"}]}], "  ", ";", "\[IndentingNewLine]", 
              RowBox[{"qPlaneLoc", " ", "=", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"couplingData", " ", "=", " ", 
               RowBox[{"calculateCouplings", "[", " ", 
                RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], 
                " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
              "\[IndentingNewLine]", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"tick", "=", 
               RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"Why", " ", 
            RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
           RowBox[{
           "click", " ", "to", " ", "remove", " ", "existing", " ", "Locator",
             " ", "refresh", " ", "this", " ", 
            RowBox[{"plot", "?", "  ", 
             RowBox[{"Workaround", ":", " ", 
              RowBox[{
              "move", " ", "one", " ", "of", " ", "the", " ", "other", " ", 
               "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"plotSprings", "[", 
          RowBox[{
          "u", ",", " ", "parameterLocatorDependencies", ",", "couplingData", 
           ",", "m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], "]"}], " ", 
         ",", "\[IndentingNewLine]", 
         RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
         "\[IndentingNewLine]", 
         RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
        "\[IndentingNewLine]", "]"}]}], " ", 
      RowBox[{"(*", "LocatorPane", "*)"}], "\[IndentingNewLine]", "]"}]}]}], 
   " ", 
   RowBox[{"(*", "Switch", "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Here", " ", "is", " ", "the", " ", "declaration", " ", "of", " ", "the",
       " ", "dynamics"}], ",", " ", 
     RowBox[{
     "the", " ", "controls", " ", "for", " ", "which", " ", "are", " ", "in", 
      " ", "this", " ", "first", " ", "\"\<variable\>\"", " ", 
      RowBox[{"declaration", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   ",", "\[IndentingNewLine]", 
   RowBox[{"TabView", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
        RowBox[{"Column", "[", " ", 
         RowBox[{"{", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Dynamic", "@", 
            RowBox[{"Row", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"OverVector", "[", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<q\>\"", ",", "Italic", ",", " ", "10"}], "]"}], 
                "]"}], ",", "\[IndentingNewLine]", "\"\< = \>\"", ",", 
               "\[IndentingNewLine]", 
               RowBox[{"Module", "[", 
                RowBox[{
                 RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"qm", " ", "=", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                   "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
               "\[IndentingNewLine]", 
               RowBox[{"Style", "[", 
                RowBox[{"\"\< 2 \[Pi] \>\"", ",", " ", "10"}], "]"}], ",", 
               "  ", 
               RowBox[{"Style", "[", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"(", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                  "]"}], ",", " ", "10"}], "]"}]}], "\[IndentingNewLine]", 
              "}"}], "]"}]}], ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<number of time intervals \>\""}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"dynMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"dynMeshSize", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "14", ",", " ", "4", ",", " ", "30", ",", 
                    " ", "IntegerQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"4", ",", "30", ",", "1"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\"\< \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", "dynMeshSize", "]"}]}], " ", 
               "\[IndentingNewLine]", "}"}], "]"}], ",", 
             "\[IndentingNewLine]", "10"}], "]"}], ",", "\[IndentingNewLine]",
            "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                "Text", "@", "\"\<time, normalized to one period, \>\""}], 
                ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<t\>\"", ",", "Italic"}], "]"}], ",", 
                "\"\</\>\"", ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<T\>\"", ",", "Italic"}], "]"}], ",", 
                "\"\< = \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"N", "[", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"tauSliderValue", "-", "1"}], ")"}], "/", 
                   "dynMeshSize"}], "]"}], "]"}]}], "}"}], "]"}], 
             "\[IndentingNewLine]", ",", "10"}], "]"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"Manipulator", "[", 
               RowBox[{
                RowBox[{"Dynamic", "[", 
                 RowBox[{"tauSliderValue", ",", 
                  RowBox[{
                   RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tauSliderValue", " ", "=", " ", "#"}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                 "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", 
                  RowBox[{"dynMeshSize", "+", "1"}], ",", "1"}], "}"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"AppearanceElements", " ", "\[Rule]", " ", 
                 RowBox[{"{", 
                  RowBox[{
                  "\"\<StepLeftButton\>\"", ",", "\"\<PlayPauseButton\>\"", 
                   ",", "\"\<StepRightButton\>\"", ",", 
                   "\"\<FasterSlowerButtons\>\"", ",", 
                   "\"\<DirectionButton\>\""}], "\[IndentingNewLine]", 
                  "}"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", 
             "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{",", " ", 
              RowBox[{"ImageSize", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{"200", ",", "60"}], "}"}]}]}], "*)"}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}], 
               "}"}], "]"}], "\[IndentingNewLine]", ",", "10"}], "]"}], ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\[IndentingNewLine]", "\"\< \>\"", ",", "  ", 
                RowBox[{"Dynamic", "[", 
                 RowBox[{"(", 
                  RowBox[{"NumberForm", "[", 
                   RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                 "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
             "\[IndentingNewLine]", "10"}], "]"}], "\[IndentingNewLine]", ",",
            "\[IndentingNewLine]", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Style", "[", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<angular frequency \[Omega](\>\""}], 
                ",", 
                RowBox[{"Style", "[", 
                 RowBox[{"\"\<q\>\"", ",", "Italic"}], "]"}], ",", 
                RowBox[{"Text", "@", "\"\<), selection: \>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"SetterBar", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                   RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                  "]"}]}]}], "\[IndentingNewLine]", "}"}], " ", "]"}], ",", 
             "10"}], "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
       RowBox[{"(*", " ", "Column", " ", "*)"}], "\[IndentingNewLine]", ",", 
       RowBox[{
       "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\"", 
        " ", "\[Rule]", "  ", 
        RowBox[{"Column", "[", " ", 
         RowBox[{
         "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Style", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Row", "[", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"Text", "@", "\"\<number of mesh intervals \>\""}], 
                ",", "\[IndentingNewLine]", 
                RowBox[{"Manipulator", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"freqMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"freqMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "12", ",", " ", "2", ",", " ", "30", ",", 
                    " ", "EvenQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                   "]"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                  RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                  RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                  RowBox[{"AppearanceElements", "\[Rule]", 
                   RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                "\"\< \>\"", ",", " ", 
                RowBox[{"Dynamic", "[", "freqMeshSize", "]"}]}], " ", 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             ",", "10"}], "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]",
            ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"LocatorPane", "[", 
            RowBox[{
             RowBox[{"Dynamic", "[", "qPlaneLoc", 
              RowBox[{"(*", 
               RowBox[{",", " ", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                  RowBox[{"tick", "=", 
                   RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                 ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"Graphics", "[", 
                 RowBox[{
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                   "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                  " ", 
                  RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                  RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                   RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                 "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
               RowBox[{"(", 
                RowBox[{
                "\"\<qMaxVec\>\"", " ", "/.", 
                 "parameterLocatorDependencies"}], ")"}]}], 
              "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], " ",
          "]"}]}], "\[IndentingNewLine]", ",", " ", 
       RowBox[{"\"\<parameters\>\"", "\[Rule]", 
        RowBox[{"Grid", "[", " ", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                  "\[IndentingNewLine]", 
                  RowBox[{"Dynamic", "@", 
                   RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                 "}"}], "]"}], "\[IndentingNewLine]", ",", "10"}], "]"}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<\\n\>\""}], ",", " ", "\"\<\>\""}], 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Text", "[", 
              RowBox[{"Style", "[", 
               RowBox[{"\"\<coupling to neighboring: \>\"", " ", ",", "10"}], 
               "]"}], "]"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Dynamic", "@", 
                RowBox[{"If", " ", "[", " ", 
                 RowBox[{
                  RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                  "\[IndentingNewLine]", 
                  RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                  RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                 "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
               "10"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{
           "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                  RowBox[{"kLable", "[", "1", "]"}], ",", " ", "\"\< || \>\"",
                   ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  "\"\< \>\""}], "}"}], "]"}], "\[IndentingNewLine]", ",", 
               "10"}], "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\[IndentingNewLine]", "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{
           "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                  RowBox[{"kLable", "[", "2", "]"}], ",", " ", "\"\< || \>\"",
                   ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  "\"\< \>\""}], "}"}], "]"}], "\[IndentingNewLine]", ",", 
               "10"}], "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
             ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], " ", ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{
           "{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                  RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                  "\"\< || (\>\"", ",", "  ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\< + \>\"", ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\<) \>\""}], "}"}], "]"}], "\[IndentingNewLine]", 
               ",", "10"}], "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
               ",", "10"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", " ", 
                 RowBox[{
                  RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                  RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                  "\"\< || (\>\"", ",", "  ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<b\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\< - \>\"", ",", " ", 
                  RowBox[{"OverVector", "[", 
                   RowBox[{"Style", "[", 
                    RowBox[{"\"\<a\>\"", ",", "Italic"}], "]"}], "]"}], ",", 
                  " ", "\"\<) \>\""}], "}"}], "]"}], "\[IndentingNewLine]", 
               ",", "10"}], "]"}], "\[IndentingNewLine]", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Style", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Row", "[", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                   "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                  "\"\< \>\"", ",", 
                  RowBox[{"Dynamic", "[", 
                   RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                 "\[IndentingNewLine]", "}"}], "]"}], ",", 
               "\[IndentingNewLine]", "10"}], "]"}]}], "\[IndentingNewLine]", 
            "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"Text", "@", "\"\<\\n\>\""}], ",", " ", "\"\<\>\""}], 
            "}"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                "\[IndentingNewLine]", ",", "\"\<\>\"", "\[IndentingNewLine]",
                 ",", " ", 
                RowBox[{"Style", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
                    RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], 
                  "\[IndentingNewLine]", ",", " ", "10"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"Switch", "[", 
               RowBox[{
               "rawNumberOfMasses", ",", "\[IndentingNewLine]", "1", ",", 
                "\"\<\>\"", ",", "\[IndentingNewLine]", "2", ",", " ", 
                RowBox[{"Style", "[", 
                 RowBox[{
                  RowBox[{"Dynamic", "@", 
                   RowBox[{"massLabel", "[", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Delete", "[", " ", 
                    RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                    "]"}]}], " ", "]"}]}], ",", " ", "10"}], "]"}], ",", 
                "\[IndentingNewLine]", "_", ",", " ", 
                RowBox[{"Dynamic", "@", 
                 RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", 
                    RowBox[{"moSel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                   "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                ",", "\"\<\>\"", ",", 
                RowBox[{"Style", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"kLable", "[", "5", "]"}], ",", " ", 
                    "\"\<: \>\""}], "}"}], "]"}], ",", " ", "10"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"Dynamic", "@", 
              RowBox[{"If", "[", " ", 
               RowBox[{
                RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], 
                ",", "\"\<\>\"", ",", "\[IndentingNewLine]", 
                RowBox[{"Style", "[", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Row", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k5", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                    ",", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"NumberForm", "[", " ", 
                    RowBox[{"k5", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}], ",", 
                  "\[IndentingNewLine]", "10"}], "]"}]}], 
               "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
            "}"}]}], "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      RowBox[{"(*", "Grid", "*)"}], "\[IndentingNewLine]", "}"}], 
     "\[IndentingNewLine]", ",", " ", 
     RowBox[{"Dynamic", "[", 
      RowBox[{"tabNumber", ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"tabNumber", " ", "=", " ", "#"}], " ", ";", 
          RowBox[{"tick", "=", 
           RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], "]"}], 
     "\[IndentingNewLine]", ",", " ", 
     RowBox[{"ImageSize", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"250", ",", "350"}], "}"}]}]}], " ", "\[IndentingNewLine]", 
    "]"}], " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Localized", " ", "variable", " ", "declarations", " ", "using", " ", 
      "ControlType"}], " ", "\[Rule]", " ", 
     RowBox[{"None", " ", 
      RowBox[{"Manipulators", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tauSliderValue", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqMeshSize", ",", "12"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynMeshSize", ",", "14"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "3"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"mLocDefault", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", 
       " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"rawArrayOfMasses", ",", " ", 
         RowBox[{"{", 
          RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",",
        " ", "None"}], "}"}]}], "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "1"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"0.9", ",", "0.7"}], "}"}], 
        RowBox[{"(*", 
         RowBox[{",", 
          RowBox[{"{", 
           RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "*)"}], "}"}]}], "}"}], 
     ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", "10", 
        RowBox[{"(*", 
         RowBox[{",", " ", "15", ",", " ", "20"}], "*)"}], "}"}]}], "}"}], 
     ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellChangeTimes->{3.605564983996014*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1:eJwtl3d8z0cYx3+JX35fu1bt1h6p2rNVm9qbiNhBEELsLbESIyRWCIkRM4i9
YhN71OjLqlJUzaIoWqPt+9O7P948z+ee5+5+37t77lIocFCbgd4ul+sU+IAv
/8Ty/yrEFZAPvwosRUvCXwMF8A87LtcI7OEwGJZ4XK7mbpcrHXHBXi5Xf+iI
P4e4krSXgKIwmbgYtMLYRaCY1ZoS2wQK0taT3DbYo7DfY3+ATzCCuM7oIdjF
aAvBHggHYD9MRfuc/iYQF4GdCzsnZIPxaIVt3y2wuxLfDUY7pn+N8xaG0VYX
HdMVyD9toQ5+KBRCG4U/HHrjjyP2M/rOAW1o24c2gv5e0z6Uth34O+E6Whwx
WfluxaA47EVvRU5a9HQwhvgh8JLcN/CnxiGvGXFpiQvC7wPt8RvC95CP9gC0
JuSFwH3se/Ar9KVtEloh+i4O7enjkH4vmoOfAdJDGHFt0TPTPo68HtCcmJVo
iTDU/p7N2P0c07fGuK01Ji4FbQ/shQH0twjtiGP2hfbHKEhA8/IxG+wabUu0
Jti1YDXyUfwjsJG4A7QPwg6FIXZfvWPst3CUtjFoS9FSscdhj4WRdozdxLSg
P2/8f5nfSLRlMB7/GPHH4QRsRjuJdgLWEl+PecSjDcMfLdDe0JcP+izFQAxa
Ifz99nfGEf+RmE9QHz2J9tXop2GLx3xnj+anecJ42E5sU+JeMbdnEKo1R3+B
/RyewCC7D/6QTVsoDIacjJFAf/Ewnz5K4rclbgxxy2EFFCDuIWM8gBja2msu
aNWJTSQnBX8XlNV8tT+x79NeHr8CvCRvGHE90btqHGJmQD3sfhAMc4n/jtiV
xB3A3wsV8fujP2IOj+Gp/R1jIaPdZ9pv4cTEQ2XsK3aemm9u8qPobzH6QlhF
Xia0jHDVnp3VaLXx1xB3DD8VktEekz8IrTZ+DfgF/zw5kdjTYAYkam0dc6Z0
tt7Zc36X2L7kdsevRdx0j1lPresF4qPRPIx52dorac+OnwOeETOY3NbozWAW
bUXR56Etwl8AmfELw1y0+fhzdNbx0ysOO1a1irZ/6GsHY3TH7wadYB797UKr
i11Hc7O/Q/tPZ0NnpL89b3+RP4Z+wvSNYTnaAgjEDoLesJu8vIybB0r5mLV/
4Ji68ZtdN63fALQwtDy0fwH5IQrtOmNcg3uqPVoPx5ytCdiTYCKcsrm5sSOx
p8F0fXdyRjK/EHRdNouJqYg+hfGmQiR00J4n7gV8cJszq/5Sde5hHnYptDPY
s6AC/V0l75r2P36y6iLadfwrsEx9gK/uMvzV0JUxZto74jBtF+GSrdGq1Ufc
Zu76veHE5sMuCO3o46CNVc5iu4cjiYl2zD2m++xLfQe0IDQvXarw0d5bKeS1
RPoKLY3qIlpN4mJpXwhx0BltlmO+ub59AdtfBJTHrqT9QR8XVJdhCNQhPpHc
sdjVsGdiz4AI+01bou3ADsRuhd3aMXem7s6q2FG6p2mbr3z63oK/ASbih0OY
7mXitupuIC4Bu6rOFvYt2m5DOfZTHLnbVW9gHW3T0MuinSHvLMzDT4B46EMf
d9HWal/ozoRmdp5TsSMhAqLhJFon2pqqfmJvg03QnTH6eEy7v2P6Vf837P2y
xmP2uvZ8GghnLkvRl0Eu1TvVZHLbecx31Pcsg5aAFg+L7Hqoxo7FDoMJUJ6Y
XcQ217nF/1v3NDHlHNOuuIm6p9EqOWZ/a5+HW81X9xt2a+ye9NMLNsIG1RNb
93Xvt9RdBiVsfBfsAMjGuKH4g/VG0pqiZUAbojeH1si+a/S+KWt/Yz/sWHt+
pnrMOdZ5Vh1TPbtN2zrtdexj6H70V0b3BPyAvxW2wB63udP0ZriP3Z+4cvil
4Tx+ku5CtHOMeRrmalxYoDrLuJc0P3LX4zcg7iL+ee1//FqOOQc6D3O15sSP
Qy9J3AmdZ30DtMbEbcRO1pvE7gPdM5mYQ1bIApOJiSG3Mrl3iDkOQcT0gx+x
uznmbaM3TgdsNzk+ujvsm2aOvTvX07ZB40EytENrCy1hNjGnHVP3VP+mwArV
F4+pj4m0PaX/393mDq2P1gga6n7TGdcdit1H+czTrTNEbHW9h5jHAYhymzre
w94Luh+2k3vOMXeb7rjJdtxXxA4n14+8XrpbPOZM6bzo3Oy0NeCmxqC9JgTo
3a+1IG6NziMk6fsQNwp9CfZSyEtcX/wszHE69kxyI8Abfyu5/noXeEztVg2f
4ph10Hpk9zZv75P27fbebe513e/13P+XSFd7nUNoTFwjt/k7pJPOHzRFy2/f
uQ20XuAPjbUXieuiug7NcFrYOjXF7rlYG6ucVh7zd0NJYlbh38S+BZXoY7b2
gmPWRmvURHcA8cG2Tg3wmP2vc1BZb0VyoojZrz2iOTtmP2pfrrPf77Xqmvom
pq/eNfoGaCf0XW0NvWrPv+rAN3pj6FzL11sWez+Upo9JikPbh38IDup76Y2N
XlRj4E9XHVS91z7XnCGr9gMxl6Ei41UBf7Tj+M91f2B3QGsD0eTVsHMI8Jia
rNq82G3ObVfH1CjVKj/sY2ipcBh667w4Zl6a3xGrBcMN7J+9zL6Os79jL/4e
SFENc8wdortkk91LT7AHEveQ9gfaF+RuQ5ups6Tv5zbnOFDfkfVYRnuy1gKK
4K9Fb47dAlrZsxqk30POaMikdxv+OsfEKLaxXfOftBbY1SCEuEf4d2x9XEv7
1/Rf2sfUCD+dIejobd7ZfmiT6X8SFCZ3GLnfqhbhz9EdaOtaNfKX076VvE1Q
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1mHXgVUUWx+/73Tf3XRBpRAQJQQREkJBGQUAwELt1FXXt7natNdeutdsV
ERQQJKRFBEVSEAUUCVFSOvfz3e/sH/O+33fmzNyJM+ecmQb9rznp6rIkSXYX
kiQFK/IzD6wMHl5Mkh7Iu4L7lJKkH7xXliQvhCTpRn3LPElqID8eeU/k+8K7
oTsJ+Tj+q8MK8JbI2qPTAFltSjN4CayKfk94R3hzdLrCm4L30eZb2m5DPoay
lQGWR1Yd/Q7Uj4PXBlujv2/RY+gEjke+GN0v+PRPZR7Piej0oY+21B8BbwVm
yBvCdzCPfahrCg9gNeTHwbvDO6LXveDvaZxtwC/pv8i4Usre8DsoY+B/oT8S
fjA6LeGt43z/N+/M3xxDfRv4MciPANsj6wZvV/R3hWPRqZd5ToPhF9P3GuZy
AViN8g28Engq4x4Gvxy8jP8r4BeBC2l7OXg0bR+k7gB4Hfig4H4WUL8cWS2+
+ys4mlIV/iZYxhiWgc+jPyS4n+Pg/6ZshO9BtgJsjP7vYEPKdPqsBx5Ev72R
dwYbM/a28IZgpZLX/NDM/yWvBa8P7wTfH9xNv+vp46XctrEPss/glUte/7bI
2mW2wyrIHqFuAfq7MuschP4IZH/IHtFZBx5MXR94F3AN/VfSfIPlB6I/HP2K
tD1MY0C2gTa14Wu0r8gro/NJbn6ovovObur2h28HyyHfAb6NTomyHlsbhU4Z
7Q5EZxd15dFJ+P8O9fuBHZAv0jqmtv8Csr1KtuGaGgN9zKLJZnB05r2+Odj+
tyDL6Kd85vUvgBVKXs86OkeUzvAm4HR0R9B2GjiR/+X4XmXa3kRf45FfCk7W
OiPfF/lOeB3abkLekP8tkE9D9jPtv0R/EZgjmwsvD+5H+QH+qM4O+lX5f2ew
vBalJrKvaD8bnX8gv4cyDX5LsO738Brgd+gshj8XPJeKrMcA2v5H84RXzLwW
WhOd/02pz+k2sBF1bXT2wW20bwAv0sen8hG03Q/5zjKPYTcYSt7bF6l/Pdpz
qWQ/INt7DdnE3P6uJrKxtN9Fu3K5ufqoCM+pa8S3dvLN76KfmQGmyFfSz7Po
bI/rtk1OFflS5M8gfzX3HPRd+UadndvopyzuacW4jxUYw0eyvcxnpDGYZbap
N3Pbnmzwjdzf1Vl8Af493xsYx6P91brdS/9/as8KHt8a2QTydeBqnVvka8Hm
6B9e8LpNyuz7i/T5ErgX8tfA2yirZJPgCErdgu1b660zUg1Mo53LV67i2zXg
W+mvBqWLfDs4AflOmq7MfAarojuQb3Wnz2XIj9Q3kbVAPwerUJoUbB/14jgP
yWx/ssNng89FRv2H9LOEuU1BvhT8vcw2v6rMfl7fGoTOSPhKZAX4JNrn9DkH
fEABEP4wuAmdibJtdH6F3ws/Q/GOPtoV7KdG0GYjTSaDk6ivjnwcuB39GeAD
sjdwCzqvpLZDrffLyJ+Tz0X/BZ0nxlKEf57a9nWu95b/LNqnySa0hvJLH+f2
pYodrZE1KXpt5dfOZRxD+NaJwT65AbJh6Dcq2j/ov85OPfBznfXM8faL3L5I
a/gefJ7OMfqzUtuh9uF95POjXPUNM/vvd6MPmYvsYfgBcWwao3yv1uGfyJsV
7W/lr+VzxRUrW8QcQ7FSfR4F7wReQNvlrMuekuOIxjyUfr7ILN8l31yM9lB0
e/XTIfM6/IrOzpJjrupH0XYFsq8T730dZL0Kzle0DkcrzwFXU95mzJeh/4Hi
PfXlFDfieRSXzTyOztnU9wVX0ufx4HMxDskX/QudH5G/AR6Vmj8B7wpflNj/
6ly3os/q4FuyD/jtqf2G4vOTueOjbKAyOnMoZyDvGn3RFvhb8GfQ+YlmH4K3
IFsPvwHsR1kKPw7sQVmSOG8bjN5a+OvgdfxfB78K/Jn+N8FHBuctx2p95IdT
n/EtUedasC/fPRv8E/0zwc9p8xd8Xub/kp+qXCTOXWswIHj83WjbG/wFeU8w
jzlhffCd4PG2Q+cerVHBZ29o8LxG6zvB8Vo5yWeKb/Bh+g7/PwFvUP7IHldB
vpD/heiHn0I+OuZpyiUC2BydxcqtUvurrxSbgm3gytx+QPnSevl8ZBXhU8En
Up/9R8AhMcZr/DPRexfZ5ciWBp+X1eBvyA4pOMdqGnPdZpnjmeKa8okF6H0M
Xkvbj+K3BqbODXWmWqH/YRzngNR5wkbFN/QHKy9BPgh8j1IB/n7sU/ryx+sy
r891sm3FooLHelVwPznyLvEcKed6KLVvfAzsGON+W7AX+t+gv5Y1rML/Ccgr
pM4bdRY+0F5l9me30Of0YF+3GDwd2R/odNH6BrdV/rA7c361WWPJ7Edvo+3t
8tfwDcieCrbn18BRyOqjP1b+NfOe3IPu1/JZBfvu3vy/VHaRuc/x8LuR7cnc
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1: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
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
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
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 1, $CellContext`m2Sel$$ = 
    1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$196824, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.2000000000000002`, -2.7}, {
      0.7, -1.9000000000000001`}, {2.6, -1.1}, {-1.1, -1.4000000000000001`}, {
      0.8, -0.6000000000000001}, {2.6999999999999997`, 
      0.19999999999999996`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.8999999999999998, 1.2}, {1., 2.}, {2.9, 
      2.8}, {-0.7999999999999999, 2.5}, {1.1, 3.3}}}, "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    464., {228., 236.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{864., {266., 273.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, $CellContext`res,
           $CellContext`epsilon, $CellContext`m, $CellContext`mScalarArray, \
$CellContext`numberOfMasses}, $CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.6055650389721584`*^9, 3.605565226785901*^9},
 CellID->464036550]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ManipulateCaptionSection"],

Cell["\<\
A lattice of atoms can be modeled as harmonic oscillators, with forces \
proportional to the displacements of the atoms from equilibrium positions. \
The simplest such model introduces coupling only between nearest-neighbor \
atoms. In this Demonstration, a lattice cell containing one to five atoms is \
modeled, with nearest-neighbor harmonic coupling to the masses in each nearby \
cell. Normal mode solutions to these equations of motion are plotted. \
Controls are provided to alter the coupling \"spring constants\" and other \
free parameters, as well as controls to select from the reciprocal space \
vectors and angular frequencies associated with the normal mode solutions. A \
time control is also provided to display changes of the lattice through one \
period of the lattice vibration. A plot of the dispersion relation, showing \
the angular velocities associated with each reciprocal vector, is also \
provided.\
\>", "ManipulateCaption",
 CellChangeTimes->{3.6055648950189247`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ThumbnailSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.8550000000000001, 0.39048399999999955`, {0.472, 
        0.5950000000000002}, {0.39400000000000013`, 1.2149999999999999`}, {{
        0.015580663996476125`, -0.12384630356173348`}, {-0.12384630356173348`,
         0.9844193360035238}}}, {
       1, 5, {0, 0}, 0.25, 0.5614240000000003, {0.472, 0.5950000000000002}, {
        1.2040000000000002`, 0.7549999999999999}, {{0.9544016643392518, 
        0.20861238564792342`}, {0.20861238564792342`, 
        0.045598335660748196`}}}, {
       1, 4, {0, 0}, 0.25, 0.6028359999999998, {0.472, 0.5950000000000002}, {
        0.8279999999999998, 1.2850000000000001`}, {{0.21023296551632606`, 
        0.4074740061973737}, {0.4074740061973737, 0.7897670344836739}}}, {
       1, 3, {0, 0}, 0.25, 2.0060290000000003`, {0.472, 0.5950000000000002}, {
        1.4700000000000002`, 1.6}, {{0.49650528481891354`, 
        0.4999877868166412}, {0.4999877868166412, 0.5034947151810863}}}}, {{
       2, 4, {0, 0}, 0.77, 0.1932559999999998, {0.39400000000000013`, 
        1.2149999999999999`}, {0.8279999999999998, 1.2850000000000001`}, {{
        0.9746450304259633, 0.15720081135902708`}, {0.15720081135902708`, 
        0.025354969574036743`}}}, {
       2, 1, {0, 0}, 0.8550000000000001, 0.39048399999999955`, {0.472, 
        0.5950000000000002}, {0.39400000000000013`, 1.2149999999999999`}, {{
        0.015580663996476125`, -0.12384630356173348`}, {-0.12384630356173348`,
         0.9844193360035238}}}, {
       2, 5, {0, 0}, 0.25, 0.8677000000000001, {0.39400000000000013`, 
        1.2149999999999999`}, {1.2040000000000002`, 0.7549999999999999}, {{
        0.7561369136798433, -0.4294110867811455}, {-0.4294110867811455, 
        0.24386308632015666`}}}, {
       2, 3, {0, 0}, 0.25, 1.3060010000000004`, {0.39400000000000013`, 
        1.2149999999999999`}, {1.4700000000000002`, 1.6}, {{0.886504681083705,
         0.31719730689333325`}, {0.31719730689333325`, 
        0.11349531891629497`}}}}, {{
       3, 4, {0, 0}, 0.25, 0.5113890000000004, {1.4700000000000002`, 1.6}, {
        0.8279999999999998, 1.2850000000000001`}, {{0.8059696239066545, 
        0.39545238556167595`}, {0.39545238556167595`, 
        0.19403037609334553`}}}, {
       3, 5, {0, 0}, 0.25, 0.7847810000000004, {1.4700000000000002`, 1.6}, {
        1.2040000000000002`, 0.7549999999999999}, {{0.09016018481589128, 
        0.28641111341890274`}, {0.28641111341890274`, 0.9098398151841086}}}, {
       3, 2, {0, 0}, 0.25, 1.3060010000000004`, {0.39400000000000013`, 
        1.2149999999999999`}, {1.4700000000000002`, 1.6}, {{0.886504681083705,
         0.31719730689333325`}, {0.31719730689333325`, 
        0.11349531891629497`}}}, {
       3, 1, {0, 0}, 0.25, 2.0060290000000003`, {0.472, 0.5950000000000002}, {
        1.4700000000000002`, 1.6}, {{0.49650528481891354`, 
        0.4999877868166412}, {0.4999877868166412, 0.5034947151810863}}}}, {{
       4, 2, {0, 0}, 0.77, 0.1932559999999998, {0.39400000000000013`, 
        1.2149999999999999`}, {0.8279999999999998, 1.2850000000000001`}, {{
        0.9746450304259633, 0.15720081135902708`}, {0.15720081135902708`, 
        0.025354969574036743`}}}, {
       4, 5, {0, 0}, 0.25, 0.42227600000000054`, {0.8279999999999998, 
        1.2850000000000001`}, {1.2040000000000002`, 0.7549999999999999}, {{
        0.3347952523941689, -0.4719188398109294}, {-0.4719188398109294, 
        0.665204747605831}}}, {
       4, 3, {0, 0}, 0.25, 0.5113890000000004, {1.4700000000000002`, 1.6}, {
        0.8279999999999998, 1.2850000000000001`}, {{0.8059696239066545, 
        0.39545238556167595`}, {0.39545238556167595`, 
        0.19403037609334553`}}}, {
       4, 1, {0, 0}, 0.25, 0.6028359999999998, {0.472, 0.5950000000000002}, {
        0.8279999999999998, 1.2850000000000001`}, {{0.21023296551632606`, 
        0.4074740061973737}, {0.4074740061973737, 0.7897670344836739}}}}, {{
       5, 4, {0, 0}, 0.25, 0.42227600000000054`, {0.8279999999999998, 
        1.2850000000000001`}, {1.2040000000000002`, 0.7549999999999999}, {{
        0.3347952523941689, -0.4719188398109294}, {-0.4719188398109294, 
        0.665204747605831}}}, {
       5, 1, {0, 0}, 0.25, 0.5614240000000003, {0.472, 0.5950000000000002}, {
        1.2040000000000002`, 0.7549999999999999}, {{0.9544016643392518, 
        0.20861238564792342`}, {0.20861238564792342`, 
        0.045598335660748196`}}}, {
       5, 3, {0, 0}, 0.25, 0.7847810000000004, {1.4700000000000002`, 1.6}, {
        1.2040000000000002`, 0.7549999999999999}, {{0.09016018481589128, 
        0.28641111341890274`}, {0.28641111341890274`, 0.9098398151841086}}}, {
       5, 2, {0, 0}, 0.25, 0.8677000000000001, {0.39400000000000013`, 
        1.2149999999999999`}, {1.2040000000000002`, 0.7549999999999999}, {{
        0.7561369136798433, -0.4294110867811455}, {-0.4294110867811455, 
        0.24386308632015666`}}}}}, {{{
       1, 4, {-1, 0}, 0.25, 0.437636, {0.472, 0.5950000000000002}, {
        0.7279999999999999, -0.014999999999999902`}, {{
        0.14975002056503564`, -0.3568262208776242}, {-0.3568262208776242, 
        0.8502499794349644}}}, {
       1, 2, {-1, 0}, 0.25, 0.49408400000000047`, {0.472, 
        0.5950000000000002}, {0.29400000000000015`, -0.08500000000000019}, {{
        0.06412674767853221, 0.24497858663708974`}, {0.24497858663708974`, 
        0.9358732523214679}}}, {
       1, 3, {0, -1}, 0.25, 0.8556289999999994, {0.472, 
        0.5950000000000002}, {-0.4299999999999997, 0.8}, {{
        0.9508840864440078, -0.21611001964636534`}, {-0.21611001964636534`, 
        0.049115913555992104`}}}, {
       1, 3, {-1, 0}, 0.25, 0.8934290000000004, {0.472, 0.5950000000000002}, {
        1.37, 0.30000000000000004`}, {{
        0.902594386347432, -0.2965092917288336}, {-0.2965092917288336, 
        0.09740561365256786}}}, {
       1, 5, {1, -1}, 0.25, 1.5762239999999987`, {0.472, 
        0.5950000000000002}, {-0.5959999999999996, 1.255}, {{
        0.7236433400328888, -0.44719532249223454`}, {-0.44719532249223454`, 
        0.27635665996711123`}}}, {
       1, 5, {-1, 0}, 0.25, 1.699024000000001, {0.472, 0.5950000000000002}, {
        1.104, -0.5450000000000002}, {{
        0.2350902635866238, -0.4240552222923277}, {-0.4240552222923277, 
        0.7649097364133761}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.472, 0.5950000000000002}, {
        0.572, 1.8950000000000002`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.472, 
        0.5950000000000002}, {0.372, -0.7049999999999998}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 5, {0, -1}, 0.25, 1.7738239999999996`, {0.472, 
        0.5950000000000002}, {-0.6959999999999997, -0.04500000000000015}, {{
        0.769086448260932, 0.4214172319237987}, {0.4214172319237987, 
        0.230913551739068}}}, {
       1, 3, {-1, -1}, 0.25, 2.203029, {0.472, 
        0.5950000000000002}, {-0.5299999999999998, -0.5}, {{
        0.4557379861999091, 0.49803702084720625`}, {0.49803702084720625`, 
        0.5442620138000909}}}, {
       1, 4, {0, -1}, 0.25, 2.3960360000000005`, {0.472, 
        0.5950000000000002}, {-1.072, 0.4850000000000001}, {{
        0.9949499924041207, 0.07088374298215892}, {0.07088374298215892, 
        0.005050007595879202}}}, {
       1, 5, {1, 0}, 0.25, 2.823823999999999, {0.472, 0.5950000000000002}, {
        1.3040000000000003`, 2.0549999999999997`}, {{0.2451370906968709, 
        0.4301684524247972}, {0.4301684524247972, 0.754862909303129}}}, {
       1, 3, {1, -1}, 0.25, 2.908228999999999, {0.472, 
        0.5950000000000002}, {-0.3299999999999996, 2.1}, {{
        0.22116690260636268`, -0.41503265389348626`}, {-0.41503265389348626`, 
        0.7788330973936373}}}, {
       1, 2, {-1, 1}, 0.25, 2.9796839999999998`, {0.472, 
        0.5950000000000002}, {2.194, 0.7149999999999999}, {{
        0.9951672727712068, 0.06934963573318494}, {0.06934963573318494, 
        0.004832727228793362}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.472, 
        0.5950000000000002}, {-1.3279999999999998`, 1.0950000000000002`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.472, 
        0.5950000000000002}, {2.272, 0.0950000000000002}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 4, {1, -1}, 0.25, 3.5012359999999996`, {0.472, 
        0.5950000000000002}, {-0.972, 1.7850000000000001`}, {{
        0.5955428311601961, -0.4907866821888042}, {-0.4907866821888042, 
        0.40445716883980404`}}}, {
       1, 2, {1, 0}, 0.25, 3.6868839999999983`, {0.472, 0.5950000000000002}, {
        0.4940000000000001, 2.5149999999999997`}, {{0.00013127616708309944`, 
        0.011456829127252243`}, {0.011456829127252243`, 
        0.9998687238329168}}}, {
       1, 2, {0, -1}, 0.25, 3.944883999999999, {0.472, 
        0.5950000000000002}, {-1.5059999999999998`, 0.4149999999999998}, {{
        0.9917868307407771, 0.09025360441523775}, {0.09025360441523775, 
        0.008213169259222868}}}, {
       1, 4, {1, 0}, 0.25, 4.168035999999999, {0.472, 0.5950000000000002}, {
        0.9279999999999998, 2.585}, {{0.04988824472725282, 
        0.2177140504544586}, {0.2177140504544586, 0.9501117552727473}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.472, 0.5950000000000002}, {2.372, 
        1.3950000000000002`}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.472, 
        0.5950000000000002}, {-1.428, -0.20499999999999985`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 4, {-1, 1}, 0.25, 4.684435999999999, {0.472, 0.5950000000000002}, {
        2.6279999999999997`, 0.7850000000000001}, {{0.9922936293718176, 
        0.08744702670716388}, {0.08744702670716388, 0.007706370628182344}}}, {
       1, 4, {-1, -1}, 0.25, 4.690836000000001, {0.472, 
        0.5950000000000002}, {-1.1720000000000002`, -0.815}, {{
        0.5761736287518898, 0.49416351371056244`}, {0.49416351371056244`, 
        0.4238263712481102}}}, {
       1, 2, {1, -1}, 0.25, 4.781283999999998, {0.472, 
        0.5950000000000002}, {-1.4059999999999997`, 1.7149999999999999`}, {{
        0.73764369571019, -0.4399153030859493}, {-0.4399153030859493, 
        0.26235630428981}}}, {
       1, 2, {0, 1}, 0.25, 5.336083999999999, {0.472, 0.5950000000000002}, {
        2.294, 2.0149999999999997`}, {{0.6221198916658734, 
        0.48485743477801313`}, {0.48485743477801313`, 0.3778801083341265}}}, {
       1, 5, {-1, -1}, 0.25, 5.371424000000001, {0.472, 
        0.5950000000000002}, {-0.7959999999999998, -1.3450000000000002`}, {{
        0.29932919091846016`, 0.4579642195440165}, {0.4579642195440165, 
        0.7006708090815398}}}, {
       1, 2, {-1, -1}, 0.25, 6.508484, {0.472, 
        0.5950000000000002}, {-1.6059999999999999`, -0.8850000000000002}, {{
        0.6634546539562821, 0.4725278574857064}, {0.4725278574857064, 
        0.3365453460437179}}}, {
       1, 3, {1, 0}, 0.25, 6.518629000000002, {0.472, 0.5950000000000002}, {
        1.5700000000000003`, 2.9000000000000004`}, {{0.18494747898676248`, 
        0.3882549536106442}, {0.3882549536106442, 0.8150525210132376}}}, {
       1, 5, {-1, 1}, 0.25, 6.526624000000001, {0.472, 0.5950000000000002}, {
        3.004, 0.2549999999999999}, {{
        0.9822879332408302, -0.13190280304181776`}, {-0.13190280304181776`, 
        0.017712066759169854`}}}, {
       1, 4, {0, 1}, 0.25, 7.3096359999999985`, {0.472, 0.5950000000000002}, {
        2.7279999999999998`, 2.085}, {{0.6962776258626284, 
        0.45986421211671824`}, {0.45986421211671824`, 0.3037223741373715}}}, {
       1, 5, {0, 1}, 0.25, 7.849024, {0.472, 0.5950000000000002}, {3.104, 
        1.555}, {{0.8825841276571458, 0.3219151833399923}, {
        0.3219151833399923, 0.1174158723428543}}}, {
       1, 3, {-1, 1}, 0.25, 8.083829, {0.472, 0.5950000000000002}, {3.27, 
        1.1}, {{0.9684524499466775, 0.1747921684142502}, {0.1747921684142502, 
        0.031547550053322486`}}}, {
       1, 1, {1, 1}, 0.25, 8.41, {0.472, 0.5950000000000002}, {2.472, 
        2.6950000000000003`}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.472, 
        0.5950000000000002}, {-1.528, -1.505}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {1, 1}, 0.25, 11.092483999999999`, {0.472, 0.5950000000000002}, {
        2.394, 3.315}, {{0.3330258578691663, 0.47129569896156714`}, {
        0.47129569896156714`, 0.6669741421308337}}}, {
       1, 3, {0, 1}, 0.25, 11.656429000000001`, {0.472, 0.5950000000000002}, {
        3.37, 2.4000000000000004`}, {{0.7204954450458199, 
        0.44875578961618523`}, {0.44875578961618523`, 
        0.27950455495418025`}}}, {
       1, 5, {1, 1}, 0.25, 12.571424, {0.472, 0.5950000000000002}, {3.204, 
        2.855}, {{0.5937134886230868, 0.4911392695051889}, {
        0.4911392695051889, 0.40628651137691313`}}}, {
       1, 4, {1, 1}, 0.25, 13.334836, {0.472, 0.5950000000000002}, {2.828, 
        3.3850000000000002`}, {{0.4162582876909772, 0.49293744594984146`}, {
        0.49293744594984146`, 0.5837417123090228}}}, {
       1, 3, {1, 1}, 0.25, 18.629029000000003`, {0.472, 0.5950000000000002}, {
        3.47, 3.7}, {{0.482473026371906, 0.4996927107687684}, {
        0.4996927107687684, 0.517526973628094}}}}, {{
       2, 1, {1, 0}, 0.25, 0.49408400000000047`, {0.39400000000000013`, 
        1.2149999999999999`}, {0.572, 1.8950000000000002`}, {{
        0.06412674767853221, 0.24497858663708974`}, {0.24497858663708974`, 
        0.9358732523214679}}}, {
       2, 3, {0, -1}, 0.25, 0.8512009999999995, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.4299999999999997, 0.8}, {{
        0.7976682358220915, 0.4017382498375824}, {0.4017382498375824, 
        0.20233176417790855`}}}, {
       2, 5, {1, -1}, 0.25, 0.9816999999999996, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.5959999999999996, 1.255}, {{
        0.9983701741876336, -0.04033818885606605}, {-0.04033818885606605, 
        0.001629825812366307}}}, {
       2, 3, {1, -1}, 0.25, 1.307401, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.3299999999999996, 2.1}, {{
        0.40092978359355674`, -0.4900868211053839}, {-0.4900868211053839, 
        0.5990702164064433}}}, {
       2, 5, {1, 0}, 0.25, 1.5337, {0.39400000000000013`, 
        1.2149999999999999`}, {1.3040000000000003`, 2.0549999999999997`}, {{
        0.5399361022364219, 0.49840255591054305`}, {0.49840255591054305`, 
        0.4600638977635781}}}, {
       2, 4, {-1, 0}, 0.25, 1.6244559999999992`, {0.39400000000000013`, 
        1.2149999999999999`}, {0.7279999999999999, -0.014999999999999902`}, {{
        0.06867283570623019, -0.25289696981635684`}, {-0.25289696981635684`, 
        0.9313271642937698}}}, {
       2, 2, {1, 0}, 0.415, 1.6999999999999995`, {0.39400000000000013`, 
        1.2149999999999999`}, {0.4940000000000001, 2.5149999999999997`}, {{
        0.005882352941176469, 0.07647058823529411}, {0.07647058823529411, 
        0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.415, 1.7000000000000002`, {0.39400000000000013`, 
        1.2149999999999999`}, {0.29400000000000015`, -0.08500000000000019}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.7898009999999998`, {0.39400000000000013`, 
        1.2149999999999999`}, {1.37, 0.30000000000000004`}, {{
        0.5322245322245323, -0.49896049896049893`}, {-0.49896049896049893`, 
        0.46777546777546763`}}}, {
       2, 4, {1, 0}, 0.25, 2.1620559999999998`, {0.39400000000000013`, 
        1.2149999999999999`}, {0.9279999999999998, 2.585}, {{
        0.1318911258542793, 0.33837236408307636`}, {0.33837236408307636`, 
        0.8681088741457208}}}, {
       2, 4, {1, -1}, 0.25, 2.1908560000000006`, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.972, 1.7850000000000001`}, {{
        0.8517018005747524, -0.3553953340612072}, {-0.3553953340612072, 
        0.14829819942524758`}}}, {
       2, 4, {0, -1}, 0.25, 2.682056, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.072, 0.4850000000000001}, {{
        0.80130914492464, 0.3990147856718874}, {0.3990147856718874, 
        0.19869085507535994`}}}, {
       2, 5, {0, -1}, 0.25, 2.7756999999999996`, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.6959999999999997, -0.04500000000000015}, {{
        0.42803617105594977`, 0.49479410599128143`}, {0.49479410599128143`, 
        0.5719638289440503}}}, {
       2, 1, {1, -1}, 0.25, 2.9796839999999998`, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.3279999999999998`, 1.0950000000000002`}, {{
        0.9951672727712068, 0.06934963573318494}, {0.06934963573318494, 
        0.004832727228793362}}}, {
       2, 2, {1, -1}, 0.77, 3.4899999999999993`, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.4059999999999997`, 1.7149999999999999`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.77, 3.4899999999999993`, {0.39400000000000013`, 
        1.2149999999999999`}, {2.194, 0.7149999999999999}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 5, {-1, 0}, 0.25, 3.6017, {0.39400000000000013`, 
        1.2149999999999999`}, {1.104, -0.5450000000000002}, {{
        0.13996168475997445`, -0.34694727489796484`}, {-0.34694727489796484`, 
        0.8600383152400255}}}, {
       2, 1, {-1, 0}, 0.25, 3.686883999999999, {0.39400000000000013`, 
        1.2149999999999999`}, {0.372, -0.7049999999999998}, {{
        0.0001312761670830994, 0.011456829127252242`}, {0.011456829127252242`,
         0.9998687238329169}}}, {
       2, 3, {-1, -1}, 0.25, 3.795000999999999, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.5299999999999998, -0.5}, {{
        0.22497385376183038`, 0.4175651073609731}, {0.4175651073609731, 
        0.7750261462381696}}}, {
       2, 1, {0, 1}, 0.25, 3.944883999999999, {0.39400000000000013`, 
        1.2149999999999999`}, {2.372, 1.3950000000000002`}, {{
        0.9917868307407771, 0.09025360441523775}, {0.09025360441523775, 
        0.008213169259222868}}}, {
       2, 3, {1, 0}, 0.25, 4.222201000000002, {0.39400000000000013`, 
        1.2149999999999999`}, {1.5700000000000003`, 2.9000000000000004`}, {{
        0.3275485937310895, 0.4693192010517737}, {0.4693192010517737, 
        0.6724514062689105}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.39400000000000013`, 
        1.2149999999999999`}, {2.294, 2.0149999999999997`}, {{
        0.8494117647058823, 0.3576470588235293}, {0.3576470588235293, 
        0.15058823529411758`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.5059999999999998`, 0.4149999999999998}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 1, {-1, 1}, 0.25, 4.781283999999998, {0.39400000000000013`, 
        1.2149999999999999`}, {2.272, 0.0950000000000002}, {{
        0.73764369571019, -0.4399153030859493}, {-0.4399153030859493, 
        0.26235630428981}}}, {
       2, 4, {-1, 1}, 0.25, 5.175655999999997, {0.39400000000000013`, 
        1.2149999999999999`}, {2.6279999999999997`, 0.7850000000000001}, {{
        0.9642750600117165, -0.1856035254275013}, {-0.1856035254275013, 
        0.035724939988283584`}}}, {
       2, 1, {0, -1}, 0.25, 5.336084, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.428, -0.20499999999999985`}, {{
        0.6221198916658733, 0.4848574347780132}, {0.4848574347780132, 
        0.3778801083341265}}}, {
       2, 4, {0, 1}, 0.25, 6.204455999999998, {0.39400000000000013`, 
        1.2149999999999999`}, {2.7279999999999998`, 2.085}, {{
        0.878007032365126, 0.32727768558597253`}, {0.32727768558597253`, 
        0.12199296763487412`}}}, {
       2, 1, {1, 1}, 0.25, 6.508484, {0.39400000000000013`, 
        1.2149999999999999`}, {2.472, 2.6950000000000003`}, {{
        0.6634546539562821, 0.4725278574857064}, {0.4725278574857064, 
        0.3365453460437179}}}, {
       2, 4, {-1, -1}, 0.25, 6.573256, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.1720000000000002`, -0.815}, {{
        0.37308085977482097`, 0.4836233367451382}, {0.4836233367451382, 
        0.6269191402251789}}}, {
       2, 5, {0, 1}, 0.25, 7.4597, {0.39400000000000013`, 
        1.2149999999999999`}, {3.104, 1.555}, {{0.9845033982599838, 
        0.12351703151601275`}, {0.12351703151601275`, 
        0.015496601740016363`}}}, {
       2, 5, {-1, 1}, 0.25, 7.733699999999999, {0.39400000000000013`, 
        1.2149999999999999`}, {3.004, 0.2549999999999999}, {{
        0.8808332363551727, -0.32398463865937394`}, {-0.32398463865937394`, 
        0.11916676364482719`}}}, {
       2, 5, {-1, -1}, 0.25, 7.9697000000000005`, {0.39400000000000013`, 
        1.2149999999999999`}, {-0.7959999999999998, -1.3450000000000002`}, {{
        0.177685483769778, 0.38224776340389216`}, {0.38224776340389216`, 
        0.8223145162302219}}}, {
       2, 3, {-1, 1}, 0.25, 8.284601, {0.39400000000000013`, 
        1.2149999999999999`}, {3.27, 1.1}, {{
        0.9984036648234477, -0.039922260589254605`}, {-0.039922260589254605`, 
        0.00159633517655225}}}, {
       2, 2, {1, 1}, 0.56, 8.41, {0.39400000000000013`, 
        1.2149999999999999`}, {2.394, 3.315}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       2, 2, {-1, -1}, 0.56, 8.41, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.6059999999999999`, -0.8850000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 3, {0, 1}, 0.25, 10.260801, {0.39400000000000013`, 
        1.2149999999999999`}, {3.37, 2.4000000000000004`}, {{
        0.8631466490773965, 0.3436924661144876}, {0.3436924661144876, 
        0.1368533509226035}}}, {
       2, 5, {1, 1}, 0.25, 10.585700000000001`, {0.39400000000000013`, 
        1.2149999999999999`}, {3.204, 2.855}, {{0.7459213845092908, 
        0.4353420180054224}, {0.4353420180054224, 0.25407861549070915`}}}, {
       2, 4, {1, 1}, 0.25, 10.633256, {0.39400000000000013`, 
        1.2149999999999999`}, {2.828, 3.3850000000000002`}, {{
        0.5571535191102329, 0.4967227347860336}, {0.4967227347860336, 
        0.4428464808897672}}}, {
       2, 1, {-1, -1}, 0.25, 11.092483999999999`, {0.39400000000000013`, 
        1.2149999999999999`}, {-1.528, -1.505}, {{0.3330258578691663, 
        0.47129569896156714`}, {0.47129569896156714`, 0.6669741421308337}}}, {
       2, 3, {1, 1}, 0.25, 15.637001000000001`, {0.39400000000000013`, 
        1.2149999999999999`}, {3.47, 3.7}, {{0.605088916986064, 
        0.488831586056687}, {0.488831586056687, 0.39491108301393607`}}}}, {{
       3, 5, {1, 0}, 0.25, 0.23458099999999962`, {1.4700000000000002`, 1.6}, {
        1.3040000000000003`, 2.0549999999999997`}, {{
        0.11746901923003149`, -0.32197833584135127`}, {-0.32197833584135127`, 
        0.8825309807699684}}}, {
       3, 2, {0, 1}, 0.25, 0.8512009999999993, {1.4700000000000002`, 1.6}, {
        2.294, 2.0149999999999997`}, {{0.7976682358220916, 
        0.4017382498375822}, {0.4017382498375822, 0.20233176417790838`}}}, {
       3, 1, {0, 1}, 0.25, 0.8556289999999994, {1.4700000000000002`, 1.6}, {
        2.372, 1.3950000000000002`}, {{
        0.9508840864440078, -0.21611001964636534`}, {-0.21611001964636534`, 
        0.049115913555992104`}}}, {
       3, 1, {1, 0}, 0.25, 0.8934290000000006, {1.4700000000000002`, 1.6}, {
        0.572, 1.8950000000000002`}, {{
        0.902594386347432, -0.29650929172883356`}, {-0.29650929172883356`, 
        0.09740561365256784}}}, {
       3, 4, {1, 0}, 0.25, 1.2639890000000003`, {1.4700000000000002`, 1.6}, {
        0.9279999999999998, 2.585}, {{
        0.23241025040566046`, -0.4223691820102866}, {-0.4223691820102866, 
        0.7675897495943395}}}, {
       3, 2, {-1, 1}, 0.25, 1.307401, {1.4700000000000002`, 1.6}, {2.194, 
        0.7149999999999999}, {{
        0.40092978359355674`, -0.4900868211053839}, {-0.4900868211053839, 
        0.5990702164064433}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.4700000000000002`, 1.6}, {
        1.5700000000000003`, 2.9000000000000004`}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.4700000000000002`, 1.6}, {
        1.37, 0.30000000000000004`}, {{0.00588235294117648, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.7898009999999993`, {1.4700000000000002`, 1.6}, {
        0.4940000000000001, 2.5149999999999997`}, {{
        0.5322245322245325, -0.498960498960499}, {-0.498960498960499, 
        0.4677754677754675}}}, {
       3, 4, {0, 1}, 0.25, 1.8177889999999988`, {1.4700000000000002`, 1.6}, {
        2.7279999999999998`, 2.085}, {{0.8705982927611511, 
        0.33564401588963294`}, {0.33564401588963294`, 
        0.12940170723884897`}}}, {
       3, 4, {-1, 1}, 0.25, 2.0051889999999988`, {1.4700000000000002`, 1.6}, {
        2.6279999999999997`, 0.7850000000000001}, {{
        0.6687469360743549, -0.47066386260846244`}, {-0.47066386260846244`, 
        0.33125306392564513`}}}, {
       3, 1, {1, 1}, 0.25, 2.203029, {1.4700000000000002`, 1.6}, {2.472, 
        2.6950000000000003`}, {{0.4557379861999091, 0.49803702084720625`}, {
        0.49803702084720625`, 0.5442620138000909}}}, {
       3, 5, {0, 1}, 0.25, 2.6719809999999997`, {1.4700000000000002`, 1.6}, {
        3.104, 1.555}, {{
        0.999242135329555, -0.027518908255709996`}, {-0.027518908255709996`, 
        0.0007578646704448923}}}, {
       3, 1, {-1, 1}, 0.25, 2.908228999999999, {1.4700000000000002`, 1.6}, {
        2.272, 0.0950000000000002}, {{
        0.22116690260636268`, -0.41503265389348626`}, {-0.41503265389348626`, 
        0.7788330973936373}}}, {
       3, 4, {-1, 0}, 0.25, 3.1587890000000005`, {1.4700000000000002`, 1.6}, {
        0.7279999999999999, -0.014999999999999902`}, {{0.17429590897017824`, 
        0.3793637371790266}, {0.3793637371790266, 0.8257040910298217}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.4700000000000002`, 
        1.6}, {-0.3299999999999996, 2.1}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999993`, {1.4700000000000002`, 1.6}, {
        3.27, 1.1}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 2, {1, 1}, 0.25, 3.795000999999999, {1.4700000000000002`, 1.6}, {
        2.394, 3.315}, {{0.22497385376183038`, 0.4175651073609731}, {
        0.4175651073609731, 0.7750261462381696}}}, {
       3, 5, {-1, 1}, 0.25, 4.162181, {1.4700000000000002`, 1.6}, {3.004, 
        0.2549999999999999}, {{
        0.5653660905184082, -0.4957088603306775}, {-0.4957088603306775, 
        0.4346339094815916}}}, {
       3, 2, {-1, 0}, 0.25, 4.222201000000001, {1.4700000000000002`, 1.6}, {
        0.29400000000000015`, -0.08500000000000019}, {{0.3275485937310896, 
        0.46931920105177377`}, {0.46931920105177377`, 0.6724514062689105}}}, {
       3, 3, {0, 1}, 0.25, 4.25, {1.4700000000000002`, 1.6}, {3.37, 
        2.4000000000000004`}, {{0.8494117647058823, 0.35764705882352954`}, {
        0.35764705882352954`, 0.15058823529411774`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.4700000000000002`, 
        1.6}, {-0.4299999999999997, 0.8}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       3, 5, {1, -1}, 0.25, 4.387380999999999, {1.4700000000000002`, 
        1.6}, {-0.5959999999999996, 1.255}, {{0.9728710590669012, 
        0.16245910715299186`}, {0.16245910715299186`, 
        0.02712894093309885}}}, {
       3, 5, {1, 1}, 0.25, 4.581780999999999, {1.4700000000000002`, 1.6}, {
        3.204, 2.855}, {{0.6562417540253451, 0.4749615924462562}, {
        0.4749615924462562, 0.3437582459746548}}}, {
       3, 5, {-1, 0}, 0.25, 4.734981000000002, {1.4700000000000002`, 1.6}, {
        1.104, -0.5450000000000002}, {{0.02829071542208934, 
        0.1658021436622449}, {0.1658021436622449, 0.9717092845779106}}}, {
       3, 4, {1, 1}, 0.25, 5.0303889999999996`, {1.4700000000000002`, 1.6}, {
        2.828, 3.3850000000000002`}, {{0.36660465025666983`, 
        0.4818772464713961}, {0.4818772464713961, 0.6333953497433301}}}, {
       3, 4, {1, -1}, 0.25, 5.997589000000001, {1.4700000000000002`, 
        1.6}, {-0.972, 1.7850000000000001`}, {{
        0.9942935402876055, -0.0753252682036065}, {-0.0753252682036065, 
        0.005706459712394432}}}, {
       3, 1, {-1, 0}, 0.25, 6.518629, {1.4700000000000002`, 1.6}, {
        0.372, -0.7049999999999998}, {{0.1849474789867625, 
        0.3882549536106442}, {0.3882549536106442, 0.8150525210132373}}}, {
       3, 5, {0, -1}, 0.25, 7.397581000000001, {1.4700000000000002`, 
        1.6}, {-0.6959999999999997, -0.04500000000000015}, {{
        0.6342013693395177, 0.4816533945353217}, {0.4816533945353217, 
        0.3657986306604822}}}, {
       3, 4, {0, -1}, 0.25, 7.704989000000001, {1.4700000000000002`, 
        1.6}, {-1.072, 0.4850000000000001}, {{0.8386467521238512, 
        0.3678564628710047}, {0.3678564628710047, 0.1613532478761488}}}, {
       3, 1, {1, -1}, 0.25, 8.083829, {1.4700000000000002`, 
        1.6}, {-1.3279999999999998`, 1.0950000000000002`}, {{
        0.9684524499466775, 0.1747921684142502}, {0.1747921684142502, 
        0.031547550053322486`}}}, {
       3, 2, {1, -1}, 0.25, 8.284601, {1.4700000000000002`, 
        1.6}, {-1.4059999999999997`, 1.7149999999999999`}, {{
        0.9984036648234477, -0.039922260589254605`}, {-0.039922260589254605`, 
        0.00159633517655225}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.4700000000000002`, 1.6}, {3.47, 3.7}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.4700000000000002`, 
        1.6}, {-0.5299999999999998, -0.5}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 10.260801, {1.4700000000000002`, 
        1.6}, {-1.5059999999999998`, 0.4149999999999998}, {{
        0.8631466490773965, 0.34369246611448756`}, {0.34369246611448756`, 
        0.13685335092260345`}}}, {
       3, 1, {0, -1}, 0.25, 11.656429000000001`, {1.4700000000000002`, 
        1.6}, {-1.428, -0.20499999999999985`}, {{0.7204954450458199, 
        0.44875578961618523`}, {0.44875578961618523`, 0.2795045549541802}}}, {
       3, 4, {-1, -1}, 0.25, 12.812389000000003`, {1.4700000000000002`, 
        1.6}, {-1.1720000000000002`, -0.815}, {{0.5447980076159099, 
        0.4979890947738162}, {0.4979890947738162, 0.45520199238409004`}}}, {
       3, 5, {-1, -1}, 0.25, 13.807781000000002`, {1.4700000000000002`, 
        1.6}, {-0.7959999999999998, -1.3450000000000002`}, {{
        0.3718740904132242, 0.4833050292440182}, {0.4833050292440182, 
        0.6281259095867757}}}, {
       3, 2, {-1, -1}, 0.25, 15.637001000000001`, {1.4700000000000002`, 
        1.6}, {-1.6059999999999999`, -0.8850000000000002}, {{
        0.605088916986064, 0.488831586056687}, {0.488831586056687, 
        0.39491108301393607`}}}, {
       3, 1, {-1, -1}, 0.25, 18.629029000000003`, {1.4700000000000002`, 
        1.6}, {-1.528, -1.505}, {{0.482473026371906, 0.4996927107687684}, {
        0.4996927107687684, 0.517526973628094}}}}, {{
       4, 1, {1, 0}, 0.25, 0.437636, {0.8279999999999998, 
        1.2850000000000001`}, {0.572, 1.8950000000000002`}, {{
        0.14975002056503564`, -0.3568262208776242}, {-0.3568262208776242, 
        0.8502499794349644}}}, {
       4, 5, {1, 0}, 0.25, 0.8194759999999998, {0.8279999999999998, 
        1.2850000000000001`}, {1.3040000000000003`, 2.0549999999999997`}, {{
        0.27648887825879037`, 0.44726142071274844`}, {0.44726142071274844`, 
        0.7235111217412097}}}, {
       4, 3, {-1, 0}, 0.25, 1.2639890000000005`, {0.8279999999999998, 
        1.2850000000000001`}, {1.37, 0.30000000000000004`}, {{
        0.23241025040566032`, -0.42236918201028656`}, {-0.42236918201028656`, 
        0.7675897495943398}}}, {
       4, 2, {1, 0}, 0.25, 1.6244559999999986`, {0.8279999999999998, 
        1.2850000000000001`}, {0.4940000000000001, 2.5149999999999997`}, {{
        0.06867283570623021, -0.2528969698163569}, {-0.2528969698163569, 
        0.9313271642937698}}}, {
       4, 4, {1, 0}, 0.25, 1.6999999999999995`, {0.8279999999999998, 
        1.2850000000000001`}, {0.9279999999999998, 2.585}, {{
        0.005882352941176469, 0.07647058823529411}, {0.07647058823529411, 
        0.9941176470588234}}}, {
       4, 4, {-1, 0}, 0.25, 1.7000000000000002`, {0.8279999999999998, 
        1.2850000000000001`}, {0.7279999999999999, -0.014999999999999902`}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       4, 3, {0, -1}, 0.25, 1.817788999999999, {0.8279999999999998, 
        1.2850000000000001`}, {-0.4299999999999997, 0.8}, {{
        0.8705982927611511, 0.33564401588963316`}, {0.33564401588963316`, 
        0.12940170723884908`}}}, {
       4, 3, {1, -1}, 0.25, 2.0051889999999988`, {0.8279999999999998, 
        1.2850000000000001`}, {-0.3299999999999996, 2.1}, {{
        0.6687469360743549, -0.47066386260846244`}, {-0.47066386260846244`, 
        0.33125306392564513`}}}, {
       4, 5, {1, -1}, 0.25, 2.0286759999999986`, {0.8279999999999998, 
        1.2850000000000001`}, {-0.5959999999999996, 1.255}, {{
        0.9995563608974523, 0.021058069400929656`}, {0.021058069400929656`, 
        0.0004436391025476792}}}, {
       4, 2, {-1, 0}, 0.25, 2.1620560000000006`, {0.8279999999999998, 
        1.2850000000000001`}, {0.29400000000000015`, -0.08500000000000019}, {{
        0.13189112585427926`, 0.33837236408307625`}, {0.33837236408307625`, 
        0.8681088741457207}}}, {
       4, 2, {-1, 1}, 0.25, 2.1908560000000006`, {0.8279999999999998, 
        1.2850000000000001`}, {2.194, 0.7149999999999999}, {{
        0.8517018005747524, -0.3553953340612072}, {-0.3553953340612072, 
        0.14829819942524758`}}}, {
       4, 1, {0, 1}, 0.25, 2.3960360000000005`, {0.8279999999999998, 
        1.2850000000000001`}, {2.372, 1.3950000000000002`}, {{
        0.9949499924041207, 0.07088374298215892}, {0.07088374298215892, 
        0.005050007595879202}}}, {
       4, 2, {0, 1}, 0.25, 2.6820559999999998`, {0.8279999999999998, 
        1.2850000000000001`}, {2.294, 2.0149999999999997`}, {{
        0.8013091449246401, 0.39901478567188736`}, {0.39901478567188736`, 
        0.19869085507535988`}}}, {
       4, 3, {1, 0}, 0.25, 3.1587890000000014`, {0.8279999999999998, 
        1.2850000000000001`}, {1.5700000000000003`, 2.9000000000000004`}, {{
        0.17429590897017824`, 0.3793637371790266}, {0.3793637371790266, 
        0.8257040910298218}}}, {
       4, 5, {-1, 0}, 0.25, 3.425076000000001, {0.8279999999999998, 
        1.2850000000000001`}, {1.104, -0.5450000000000002}, {{
        0.022240674367517716`, -0.14746534091506303`}, {-0.14746534091506303`,
         0.9777593256324822}}}, {
       4, 4, {1, -1}, 0.25, 3.4899999999999993`, {0.8279999999999998, 
        1.2850000000000001`}, {-0.972, 1.7850000000000001`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {-1, 1}, 0.25, 3.4899999999999993`, {0.8279999999999998, 
        1.2850000000000001`}, {2.6279999999999997`, 0.7850000000000001}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 1, {-1, 1}, 0.25, 3.5012359999999996`, {0.8279999999999998, 
        1.2850000000000001`}, {2.272, 0.0950000000000002}, {{
        0.5955428311601961, -0.4907866821888042}, {-0.4907866821888042, 
        0.40445716883980404`}}}, {
       4, 5, {0, -1}, 0.25, 4.091476, {0.8279999999999998, 
        1.2850000000000001`}, {-0.6959999999999997, -0.04500000000000015}, {{
        0.5676621346428523, 0.49540068180773883`}, {0.49540068180773883`, 
        0.4323378653571476}}}, {
       4, 1, {-1, 0}, 0.25, 4.168036, {0.8279999999999998, 
        1.2850000000000001`}, {0.372, -0.7049999999999998}, {{
        0.049888244727252805`, 0.21771405045445857`}, {0.21771405045445857`, 
        0.9501117552727473}}}, {
       4, 4, {0, 1}, 0.25, 4.25, {0.8279999999999998, 1.2850000000000001`}, {
        2.7279999999999998`, 2.085}, {{0.8494117647058823, 
        0.3576470588235293}, {0.3576470588235293, 0.15058823529411758`}}}, {
       4, 4, {0, -1}, 0.25, 4.25, {0.8279999999999998, 
        1.2850000000000001`}, {-1.072, 0.4850000000000001}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       4, 1, {1, -1}, 0.25, 4.684435999999999, {0.8279999999999998, 
        1.2850000000000001`}, {-1.3279999999999998`, 1.0950000000000002`}, {{
        0.9922936293718176, 0.08744702670716388}, {0.08744702670716388, 
        0.007706370628182344}}}, {
       4, 1, {1, 1}, 0.25, 4.690836000000001, {0.8279999999999998, 
        1.2850000000000001`}, {2.472, 2.6950000000000003`}, {{
        0.5761736287518898, 0.49416351371056244`}, {0.49416351371056244`, 
        0.4238263712481102}}}, {
       4, 3, {-1, -1}, 0.25, 5.0303889999999996`, {0.8279999999999998, 
        1.2850000000000001`}, {-0.5299999999999998, -0.5}, {{
        0.36660465025666983`, 0.4818772464713961}, {0.4818772464713961, 
        0.6333953497433301}}}, {
       4, 2, {1, -1}, 0.25, 5.175655999999997, {0.8279999999999998, 
        1.2850000000000001`}, {-1.4059999999999997`, 1.7149999999999999`}, {{
        0.9642750600117165, -0.1856035254275013}, {-0.1856035254275013, 
        0.035724939988283584`}}}, {
       4, 5, {0, 1}, 0.25, 5.253076000000001, {0.8279999999999998, 
        1.2850000000000001`}, {3.104, 1.555}, {{0.9861224166564504, 
        0.11698288774043998`}, {0.11698288774043998`, 
        0.013877583343549547`}}}, {
       4, 5, {-1, 1}, 0.25, 5.795876000000002, {0.8279999999999998, 
        1.2850000000000001`}, {3.004, 0.2549999999999999}, {{
        0.8169560563407497, -0.3867025450509983}, {-0.3867025450509983, 
        0.1830439436592502}}}, {
       4, 3, {-1, 1}, 0.25, 5.997589000000001, {0.8279999999999998, 
        1.2850000000000001`}, {3.27, 1.1}, {{
        0.9942935402876055, -0.0753252682036065}, {-0.0753252682036065, 
        0.005706459712394432}}}, {
       4, 2, {0, -1}, 0.25, 6.204455999999999, {0.8279999999999998, 
        1.2850000000000001`}, {-1.5059999999999998`, 0.4149999999999998}, {{
        0.8780070323651258, 0.32727768558597253`}, {0.32727768558597253`, 
        0.12199296763487415`}}}, {
       4, 2, {1, 1}, 0.25, 6.573256, {0.8279999999999998, 
        1.2850000000000001`}, {2.394, 3.315}, {{0.37308085977482097`, 
        0.4836233367451382}, {0.4836233367451382, 0.6269191402251789}}}, {
       4, 1, {0, -1}, 0.25, 7.309635999999999, {0.8279999999999998, 
        1.2850000000000001`}, {-1.428, -0.20499999999999985`}, {{
        0.6962776258626284, 0.4598642121167183}, {0.4598642121167183, 
        0.3037223741373716}}}, {
       4, 3, {0, 1}, 0.25, 7.704989000000002, {0.8279999999999998, 
        1.2850000000000001`}, {3.37, 2.4000000000000004`}, {{
        0.8386467521238512, 0.36785646287100476`}, {0.36785646287100476`, 
        0.16135324787614885`}}}, {
       4, 5, {1, 1}, 0.25, 8.110276, {0.8279999999999998, 
        1.2850000000000001`}, {3.204, 2.855}, {{0.6960769275916135, 
        0.4599498216830105}, {0.4599498216830105, 0.3039230724083865}}}, {
       4, 4, {1, 1}, 0.25, 8.41, {0.8279999999999998, 1.2850000000000001`}, {
        2.828, 3.3850000000000002`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       4, 4, {-1, -1}, 0.25, 8.41, {0.8279999999999998, 
        1.2850000000000001`}, {-1.1720000000000002`, -0.815}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       4, 5, {-1, -1}, 0.25, 9.554276000000002, {0.8279999999999998, 
        1.2850000000000001`}, {-0.7959999999999998, -1.3450000000000002`}, {{
        0.276041428989491, 0.4470375358635232}, {0.4470375358635232, 
        0.7239585710105089}}}, {
       4, 2, {-1, -1}, 0.25, 10.633256, {0.8279999999999998, 
        1.2850000000000001`}, {-1.6059999999999999`, -0.8850000000000002}, {{
        0.5571535191102329, 0.4967227347860336}, {0.4967227347860336, 
        0.4428464808897672}}}, {
       4, 3, {1, 1}, 0.25, 12.812389000000003`, {0.8279999999999998, 
        1.2850000000000001`}, {3.47, 3.7}, {{0.5447980076159099, 
        0.4979890947738162}, {0.4979890947738162, 0.45520199238409004`}}}, {
       4, 1, {-1, -1}, 0.25, 13.334836, {0.8279999999999998, 
        1.2850000000000001`}, {-1.528, -1.505}, {{0.4162582876909772, 
        0.49293744594984146`}, {0.49293744594984146`, 
        0.5837417123090228}}}}, {{
       5, 3, {-1, 0}, 0.25, 0.23458099999999985`, {1.2040000000000002`, 
        0.7549999999999999}, {1.37, 0.30000000000000004`}, {{
        0.11746901923003139`, -0.32197833584135116`}, {-0.32197833584135116`, 
        0.8825309807699686}}}, {
       5, 4, {-1, 0}, 0.25, 0.819476, {1.2040000000000002`, 
        0.7549999999999999}, {0.7279999999999999, -0.014999999999999902`}, {{
        0.27648887825879015`, 0.44726142071274827`}, {0.44726142071274827`, 
        0.7235111217412098}}}, {
       5, 2, {-1, 1}, 0.25, 0.9816999999999996, {1.2040000000000002`, 
        0.7549999999999999}, {2.194, 0.7149999999999999}, {{
        0.9983701741876336, -0.04033818885606605}, {-0.04033818885606605, 
        0.001629825812366307}}}, {
       5, 2, {-1, 0}, 0.25, 1.5337, {1.2040000000000002`, 
        0.7549999999999999}, {0.29400000000000015`, -0.08500000000000019}, {{
        0.5399361022364217, 0.49840255591054317`}, {0.49840255591054317`, 
        0.4600638977635783}}}, {
       5, 1, {-1, 1}, 0.25, 1.5762239999999987`, {1.2040000000000002`, 
        0.7549999999999999}, {2.272, 0.0950000000000002}, {{
        0.7236433400328888, -0.44719532249223454`}, {-0.44719532249223454`, 
        0.27635665996711123`}}}, {
       5, 1, {1, 0}, 0.25, 1.699024000000001, {1.2040000000000002`, 
        0.7549999999999999}, {0.572, 1.8950000000000002`}, {{
        0.23509026358662385`, -0.42405522229232784`}, {-0.42405522229232784`, 
        0.7649097364133761}}}, {
       5, 5, {1, 0}, 0.25, 1.6999999999999995`, {1.2040000000000002`, 
        0.7549999999999999}, {1.3040000000000003`, 2.0549999999999997`}, {{
        0.005882352941176483, 0.07647058823529419}, {0.07647058823529419, 
        0.9941176470588234}}}, {
       5, 5, {-1, 0}, 0.25, 1.7000000000000002`, {1.2040000000000002`, 
        0.7549999999999999}, {1.104, -0.5450000000000002}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       5, 1, {0, 1}, 0.25, 1.7738239999999996`, {1.2040000000000002`, 
        0.7549999999999999}, {2.372, 1.3950000000000002`}, {{
        0.769086448260932, 0.4214172319237987}, {0.4214172319237987, 
        0.230913551739068}}}, {
       5, 4, {-1, 1}, 0.25, 2.0286759999999986`, {1.2040000000000002`, 
        0.7549999999999999}, {2.6279999999999997`, 0.7850000000000001}, {{
        0.9995563608974523, 0.021058069400929656`}, {0.021058069400929656`, 
        0.0004436391025476792}}}, {
       5, 3, {0, -1}, 0.25, 2.6719809999999997`, {1.2040000000000002`, 
        0.7549999999999999}, {-0.4299999999999997, 0.8}, {{
        0.999242135329555, -0.027518908255709996`}, {-0.027518908255709996`, 
        0.0007578646704448923}}}, {
       5, 2, {0, 1}, 0.25, 2.775699999999999, {1.2040000000000002`, 
        0.7549999999999999}, {2.294, 2.0149999999999997`}, {{
        0.4280361710559499, 0.49479410599128143`}, {0.49479410599128143`, 
        0.5719638289440501}}}, {
       5, 1, {-1, 0}, 0.25, 2.8238239999999997`, {1.2040000000000002`, 
        0.7549999999999999}, {0.372, -0.7049999999999998}, {{
        0.24513709069687076`, 0.43016845242479707`}, {0.43016845242479707`, 
        0.7548629093031292}}}, {
       5, 4, {1, 0}, 0.25, 3.4250760000000007`, {1.2040000000000002`, 
        0.7549999999999999}, {0.9279999999999998, 2.585}, {{
        0.022240674367517737`, -0.14746534091506305`}, {-0.14746534091506305`,
         0.9777593256324821}}}, {
       5, 5, {1, -1}, 0.25, 3.4899999999999993`, {1.2040000000000002`, 
        0.7549999999999999}, {-0.5959999999999996, 1.255}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 5, {-1, 1}, 0.25, 3.4899999999999993`, {1.2040000000000002`, 
        0.7549999999999999}, {3.004, 0.2549999999999999}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 2, {1, 0}, 0.25, 3.6016999999999997`, {1.2040000000000002`, 
        0.7549999999999999}, {0.4940000000000001, 2.5149999999999997`}, {{
        0.1399616847599745, -0.3469472748979649}, {-0.3469472748979649, 
        0.8600383152400255}}}, {
       5, 4, {0, 1}, 0.25, 4.091475999999999, {1.2040000000000002`, 
        0.7549999999999999}, {2.7279999999999998`, 2.085}, {{
        0.5676621346428524, 0.49540068180773883`}, {0.49540068180773883`, 
        0.4323378653571475}}}, {
       5, 3, {1, -1}, 0.25, 4.162181, {1.2040000000000002`, 
        0.7549999999999999}, {-0.3299999999999996, 2.1}, {{
        0.5653660905184082, -0.4957088603306775}, {-0.4957088603306775, 
        0.4346339094815916}}}, {
       5, 5, {0, 1}, 0.25, 4.25, {1.2040000000000002`, 0.7549999999999999}, {
        3.104, 1.555}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       5, 5, {0, -1}, 0.25, 4.25, {1.2040000000000002`, 
        0.7549999999999999}, {-0.6959999999999997, -0.04500000000000015}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 3, {-1, 1}, 0.25, 4.387380999999999, {1.2040000000000002`, 
        0.7549999999999999}, {3.27, 1.1}, {{0.9728710590669012, 
        0.16245910715299186`}, {0.16245910715299186`, 
        0.02712894093309885}}}, {
       5, 3, {-1, -1}, 0.25, 4.581780999999999, {1.2040000000000002`, 
        0.7549999999999999}, {-0.5299999999999998, -0.5}, {{
        0.6562417540253451, 0.4749615924462562}, {0.4749615924462562, 
        0.3437582459746548}}}, {
       5, 3, {1, 0}, 0.25, 4.734981000000002, {1.2040000000000002`, 
        0.7549999999999999}, {1.5700000000000003`, 2.9000000000000004`}, {{
        0.02829071542208934, 0.1658021436622449}, {0.1658021436622449, 
        0.9717092845779106}}}, {
       5, 4, {0, -1}, 0.25, 5.253076000000001, {1.2040000000000002`, 
        0.7549999999999999}, {-1.072, 0.4850000000000001}, {{
        0.9861224166564504, 0.11698288774043998`}, {0.11698288774043998`, 
        0.013877583343549547`}}}, {
       5, 1, {1, 1}, 0.25, 5.371424000000001, {1.2040000000000002`, 
        0.7549999999999999}, {2.472, 2.6950000000000003`}, {{
        0.29932919091846016`, 0.4579642195440165}, {0.4579642195440165, 
        0.7006708090815398}}}, {
       5, 4, {1, -1}, 0.25, 5.795876000000002, {1.2040000000000002`, 
        0.7549999999999999}, {-0.972, 1.7850000000000001`}, {{
        0.8169560563407497, -0.3867025450509983}, {-0.3867025450509983, 
        0.1830439436592502}}}, {
       5, 1, {1, -1}, 0.25, 6.526624000000001, {1.2040000000000002`, 
        0.7549999999999999}, {-1.3279999999999998`, 1.0950000000000002`}, {{
        0.9822879332408302, -0.13190280304181776`}, {-0.13190280304181776`, 
        0.017712066759169854`}}}, {
       5, 3, {0, 1}, 0.25, 7.397581000000001, {1.2040000000000002`, 
        0.7549999999999999}, {3.37, 2.4000000000000004`}, {{
        0.6342013693395177, 0.4816533945353218}, {0.4816533945353218, 
        0.3657986306604823}}}, {
       5, 2, {0, -1}, 0.25, 7.4597, {1.2040000000000002`, 
        0.7549999999999999}, {-1.5059999999999998`, 0.4149999999999998}, {{
        0.9845033982599838, 0.12351703151601275`}, {0.12351703151601275`, 
        0.015496601740016363`}}}, {
       5, 2, {1, -1}, 0.25, 7.733699999999999, {1.2040000000000002`, 
        0.7549999999999999}, {-1.4059999999999997`, 1.7149999999999999`}, {{
        0.8808332363551727, -0.32398463865937394`}, {-0.32398463865937394`, 
        0.11916676364482719`}}}, {
       5, 1, {0, -1}, 0.25, 7.849024, {1.2040000000000002`, 
        0.7549999999999999}, {-1.428, -0.20499999999999985`}, {{
        0.8825841276571458, 0.3219151833399923}, {0.3219151833399923, 
        0.1174158723428543}}}, {
       5, 2, {1, 1}, 0.25, 7.9697000000000005`, {1.2040000000000002`, 
        0.7549999999999999}, {2.394, 3.315}, {{0.177685483769778, 
        0.38224776340389216`}, {0.38224776340389216`, 0.8223145162302219}}}, {
       5, 4, {-1, -1}, 0.25, 8.110276, {1.2040000000000002`, 
        0.7549999999999999}, {-1.1720000000000002`, -0.815}, {{
        0.6960769275916135, 0.4599498216830105}, {0.4599498216830105, 
        0.3039230724083865}}}, {
       5, 5, {1, 1}, 0.25, 8.41, {1.2040000000000002`, 0.7549999999999999}, {
        3.204, 2.855}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       5, 5, {-1, -1}, 0.25, 8.41, {1.2040000000000002`, 
        0.7549999999999999}, {-0.7959999999999998, -1.3450000000000002`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       5, 4, {1, 1}, 0.25, 9.554276000000002, {1.2040000000000002`, 
        0.7549999999999999}, {2.828, 3.3850000000000002`}, {{
        0.276041428989491, 0.4470375358635232}, {0.4470375358635232, 
        0.7239585710105089}}}, {
       5, 2, {-1, -1}, 0.25, 10.585700000000001`, {1.2040000000000002`, 
        0.7549999999999999}, {-1.6059999999999999`, -0.8850000000000002}, {{
        0.7459213845092908, 0.4353420180054224}, {0.4353420180054224, 
        0.25407861549070915`}}}, {
       5, 1, {-1, -1}, 0.25, 12.571424, {1.2040000000000002`, 
        0.7549999999999999}, {-1.528, -1.505}, {{0.5937134886230868, 
        0.4911392695051889}, {0.4911392695051889, 0.40628651137691313`}}}, {
       5, 3, {1, 1}, 0.25, 13.807781000000002`, {1.2040000000000002`, 
        0.7549999999999999}, {3.47, 3.7}, {{0.3718740904132242, 
        0.4833050292440182}, {0.4833050292440182, 
        0.6281259095867757}}}}}}, $CellContext`dynamics$$ = {{
      Complex[1.6719470668547993`, 1.8605239886516338`*^-20], {Complex[
      0.7336468342623259, 0.], Complex[0.677868781049046, 
      0.00029429008145421447`], Complex[
      0.02721614321523024, -0.022084322851239242`], 
      Complex[-0.002539784131995444, -0.002624424984187912], Complex[
      0.007092770773492063, -0.011718426209124565`], Complex[
      0.01821093367650424, 0.013299929938913681`], 
      Complex[-0.0014177104378044754`, -0.0044151394612033665`], Complex[
      0.00991395336415735, 0.004456610448319899], 
      Complex[-0.004911849284564956, 0.001656022500097903], Complex[
      0.01204289401947892, 0.002582913590516805]}}, {
      Complex[1.2715028725581532`, 3.631995707934485*^-18], {
      Complex[-0.6709862841007126, 0.000582118100089468], Complex[
      0.7264614130639997, 0.], Complex[-0.033867717343234585`, 
      0.029766429283909285`], Complex[-0.10579694875111657`, 
      0.061847787903154205`], Complex[-0.0015962506770460588`, 
      0.03111505246660807], Complex[0.028599530675506944`, 
      0.028236996375307827`], Complex[-0.007084345623174985, 
      0.0065941869229015505`], Complex[0.030818093356479642`, 
      0.011516691924668516`], Complex[-0.003132921608436694, 
      0.004199034196768675], Complex[
      0.03449269942296556, -0.0006839900750264901]}}, {
      Complex[1.1597081418988637`, 1.2173536056433446`*^-16], {
      Complex[-0.07054183646143208, -0.05226492874902534], Complex[
      0.04214827522372967, 0.02689417034426371], Complex[0.8698967771006421, 
      0.], Complex[0.47888478819565333`, 0.0014977972217703195`], 
      Complex[-0.013863837724986255`, -0.001871777213496112], Complex[
      0.011589082485419244`, 0.014067075377042059`], 
      Complex[-0.048405213197852945`, 0.003386622896071261], Complex[
      0.009297345273665642, 0.006467900978213882], Complex[
      0.010179562129353201`, 0.014713853427085737`], Complex[
      0.019347363020452663`, 0.005832477407972313]}}, {
      Complex[0.898353527314187, -4.3193890229164914`*^-17], {
      Complex[-0.03464536911853057, -0.023380187852011562`], Complex[
      0.05452488514071365, 0.038910381217706534`], 
      Complex[-0.4792724735953912, 0.0057556741703147785`], Complex[
      0.8526771535027577, 0.], Complex[0.017573175744184003`, 
      0.057434100334640255`], Complex[0.13519448613534013`, 
      0.04470063952570747], Complex[0.04149564189193718, 
      0.0034033751478836707`], Complex[0.09614417553416618, 
      0.0017358397096277067`], Complex[0.007843113579880613, 
      0.0077954541843413844`], Complex[
      0.03890858293209149, -0.02174827854703509]}}, {
      Complex[0.7642874906038585, 5.9332960664195994`*^-18], {Complex[
      0.004131828899383565, -0.03032736764297639], 
      Complex[-0.0316891612757975, 0.029662650592011938`], Complex[
      0.045557534372267436`, -0.030458028372647678`], 
      Complex[-0.07991357147453006, 0.058523869818202914`], Complex[
      0.8201216079713748, 0.], Complex[0.5563125320796906, 
      0.016892283072464542`], Complex[-0.034543840813856384`, 
      0.005040737348366206], Complex[0.0049389885293013615`, 
      0.0044171809532533675`], Complex[0.007896106484579701, 
      0.018587885502233288`], Complex[0.016770129387485847`, 
      0.006676793802886885]}}, {
      Complex[0.621876666363886, 1.1654570399890782`*^-17], {Complex[
      0.007721223130385825, -0.006181906051761219], 
      Complex[-0.022253552738259012`, 0.0031868922959669647`], Complex[
      0.07423680520477693, 0.00830376571853278], 
      Complex[-0.07233825916369743, -0.005763073707709093], 
      Complex[-0.038030409500681935`, -0.039092631464146106`], Complex[
      0.07693235472697263, 0.058433301969857215`], Complex[0.8251998583158409,
       0.], Complex[0.5235853976327187, 0.022631784862139764`], Complex[
      0.0813698571841307, 0.06484053307007877], Complex[0.08951621989215566, 
      0.04237852037794148]}}, {
      Complex[0.5499370810973246, 5.870665506758225*^-19], {Complex[
      0.020056297352865224`, 0.011199114511963822`], 
      Complex[-0.04081473794551799, 0.013403969357265911`], Complex[
      0.0303667544966122, 0.01752247208681451], Complex[-0.10306200199919457`,
       0.003173068266909017], Complex[-0.5421405153127139, 
      0.011032590600395381`], Complex[0.7693871232470673, 0.], 
      Complex[-0.18602482661874795`, 0.07169676024425367], Complex[
      0.1300283698059802, 0.06435053649069233], 
      Complex[-0.015122601750398437`, -0.1375524459788276], Complex[
      0.09319481266400287, -0.10555813879197483`]}}, {
      Complex[0.5150877524264912, -1.7230141357530663`*^-17], {Complex[
      0.014512951032783454`, -0.0010322268087554242`], 
      Complex[-0.011573443677966913`, 0.006046432086229728], 
      Complex[-0.01112333797697597, 0.01605247703898876], 
      Complex[-0.020668698342491028`, 0.01094794630473397], Complex[
      0.025247044215179915`, 0.11240185457662512`], 
      Complex[-0.0716453504713159, -0.13247828329558778`], 
      Complex[-0.11110501404120088`, 0.0828124943851415], 
      Complex[-0.008178801116679927, 0.031665469121412014`], Complex[
      0.8207751084910596, 0.], Complex[
      0.5183346454858585, -0.010944773551337439`]}}, {
      Complex[0.43874008638411194`, 4.233743746086506*^-17], {Complex[
      0.013471959326423893`, 0.0001548292008419399], 
      Complex[-0.023496529970128657`, 0.005235233528613635], 
      Complex[-0.006599049116591367, 0.0005181370453827467], 
      Complex[-0.042590723909364823`, -0.003935189366913607], Complex[
      0.09661835366777094, -0.028493592169256544`], 
      Complex[-0.1879857972207488, 0.031795123135555325`], 
      Complex[-0.49870312111492987`, -0.0033363616878917045`], Complex[
      0.8216392194577863, 0.], Complex[-0.030641765843887517`, 
      0.0977798176587629], 
      Complex[-0.06632738698485044, -0.11028627019412433`]}}, {
      Complex[0.391029794738179, -1.337405158074671*^-17], {Complex[
      0.011163712116041748`, 0.002124835377227809], 
      Complex[-0.027843646015009153`, -0.0008130044673252245], 
      Complex[-0.00014174834342263703`, 0.006723646104607092], 
      Complex[-0.016406289373638243`, -0.014917397234683365`], Complex[
      0.042744081837445054`, -0.0134455480411554], 
      Complex[-0.0843424529083736, 0.007935363878582553], 
      Complex[-0.028738044702246043`, 0.07164931026375375], Complex[
      0.0008608206959184322, -0.13235176801888188`], 
      Complex[-0.5336144389483256, 0.014308953740617344`], Complex[
      0.8251952494854374, 0.]}}}, $CellContext`dynMeshSize$$ = 
    8, $CellContext`dynPlot$$ = {CompressedData["
1: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

     "], {2.8, 7.6000000000000005`, 13.100000000000001`, 20.700000000000003`, 
     27.3}, 5, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 8}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 4, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx8nXVYlUv3/jmK3d3d3WKgG1uEY6PY3aKI2IrdGFjHbrETLIxtd1IiCGw6
VWCDCoj+/L6uNc/Z9/L8zj/vda1rv8M8a9bc93zG55mpMnp633HZzMzMbhUz
M8v+63/7Vjh05enZHHd67gz69n1Kpr7zBls3mzsZOtN4gn7JpkMDxzdIV3Ez
+m9is2NvQ6ppcdvfv9cF1cgfcOU2tpOpu/53n1VpGRxP0/PfrZ94KVdGa4wn
6BsXNthu75Kp4vx353VrdW/VBS3Of/fIjJLucxqJ9nV9fl7K55mYruP/P/9d
j2x93u/4lAHxBH2kX4mU6wu13/N/86sNvHtzwjcV57+Lv+e/y+33/90fHf9d
7o9pPEG/n/rPcXxejvPfbUj5gfZ1pvnMYcV/1zT/HE/Qw3hZ/cf4WvHfXWZa
D9y+7s/1k6kfv2L8uGL2qaKuph9o7d3+sFHUVWH3h3abKxtFXX0ZssTveTWj
qKuMIelm57oYRV3tOPpK1zpHqqirJdlPdZ1inirqKmxsbaeKVVNFXX384eN1
oia2k6mbd+l06ob1qaKuvPy7Drw7xijqqvH51yGn36SIuurnEfTCfEOKqKv6
8Hv+u9w+1hX3B+sqjfqPdRVOz4t1tYLyg3W1zSSfWl2Z5l+rq0zT8VJ1BeOr
6srBtB5UXf25fjL1Lx9EVaq7MUXUlU+Xcl0d3ySJulob5T+ty/QkUVeWw87a
PPVKFnU183yr5j8OJIu6cozefnhkdown6A92LeWTu2KKqKsH32ZMcV+YIuqq
efU8DT/fE+3rRudOHJCsTxZ1NfdKi377S2A9JOiz7/y+ooN7kqir47nWW425
+EnUlTn8nv8ut491NYH6g3XVjPqPdfWInhfr6hDlB+tqmkk+tboyzb9WVzBe
qq5gfFVdeZvWg6qrP9dPpr5Q8tKoXvpEUVeR++MPv7GOE3VVPSXra5xDjKir
Ihsfbl7/IlbU1VPdJL+89eJEXX3b1ysq2jNe1JX5h/bZJ1aOF3VVfGn1CfVO
x4m6skjp232ep2hf93784jEPPiSIuhqt/7vS1ug4UVf+GTYu83bFiLpKq7nR
1uJYtKgrb/i9qmdqH+vKn/qDddWC+o91VYaeF+sqN+UH68o0n1pdmeZfq6uc
puOl6grGV9VVuGk9qLr6c/1k6t/blc+bbxbWQ4L+xrppBe+Yx4i6mrMi5/Bz
Y6JFXd0cWqDfxU4xoq4+644m+hSOFXV1ac38yJP5MP4rzyPnD531JlbUVRmb
q830pWRdDTFP2jbmVIyoq7g+DtHR78S46x8vfr7iTaFYUVcTng9aeGtntKir
C0dL/+NZNUrU1WT4Pf9dbh/rKor6g3U1iPqPdVWOnhfrqhnlB+vqrEk+tboy
zb9WV7dMx0vVFYyvqiu9aT2ouvpz/fzS58s5oiZFR4i6KnXk7tNPbcJFXeXt
+jHa0CJc1NWl9emjFnpjO7/WG99nby0eFyHqyibreP4xUzCeoC9ePX6259BI
UVebLy/9Z/GuSFFX1S5/fOO5WbSvm+z7/adnmwhRV827NWyX+ynGE/S2m170
fbIgXNRVnpd52jY4Gybqqh/8nv8ut491NZH6g3VVifqPdbWBnhfrqjDlB+uq
r0k+tboyzb9WV5dNx0vVFYyvqqsSpvWg6urP9fPLf2d3cS+xK0zU1bXOuys+
dDeIuqqYsXrGfTODqKv52abk+eeBQerV6Igdfc4ZRF2lF2vUu3OdMFFX34/G
t9dXDRN19aW+0/Zx7cJEXcUnLelh2QDbydTd7DZrzQ3XMFlXwSlvqgQaRF15
1lisb1TIIOrKIVdccs7WoaKu8Peqrqh9rKtb1B+sq0TqP9ZVKj0v1hXnB+sq
zSSf/9Irk/xrdTXPdLxUXcH4qrryNK0HVVd/rp9MfcCtCb12LcB6SNCX/NbZ
rmPuD6KuQqZ51+434oOoK/ufbds02h0q6urU1cIfT3aVdbW92hpvm2YYT9Cf
SNI9jOtvEHXl71suLaukQdTVuv5T++0fECrqKkeHPXUavA8VdZX11+WEaeVl
XW28FHl2XJNgUVeLHEYdGdQ+UNSVG/ye/y63j3WVnfqDdcX9x7rypefFujpO
+cG62mqST62uTPOv1dVg0/FSdQXjq+mVaT2ouvpz/fxab1zcZ9un+AdRV3HB
6yOGFw8SdZVezq7HmrXvRV11fvXh/ajmgaKuipX8NGH040BRV8ZtaQ7rtwWJ
uhpS6W6n3DmCRF1979uu+yavQFFX38t3WljxhWhft9Tx0uXU2CBRV27/5Cgw
uCLGE/Rvpw7uUe7re1FXE3Y//3TwXef2WFfe8Hv+u9w+1tVq6g/WVSb1H+vq
Bz0v1tVIyg/W1ReTfGp1ZZp/ra46mo6XqisYX1VX0ab1oOrqz/Xzi49G5PU7
lPO9qKvVmzNChu/2F3X1Yn7P+77jXou6CivR6P6tAG9RVysrvXUJmOkv6sq+
deOttScGiLpacTXMfMfyd6KuahS6P6xUvL+oK7uHS/dZXxXt65yf70o79SpA
1NXLKrrru5q+E3XlVGvul1bFX0ldgrjia2oH62cW/V2sn3HUT6wffi6sHxfK
A9ZPD5O8afVjmmetfiJMx0XVD4yjqh8Yd1U/XCcn0l8sLvwt250uNe4MWvTj
q/6nQxOz/WEZuh9+37oP7Gh2p+2lo15Zm1P1Xj1LTk/Klqk7Mda6umWZTH1T
3dpyLtWS9bMaZQZ3rK72dfW9qZ+8H87t2/wv/ly/O36mo+2ZdNX+734G6V8c
6ljIq3mGar/1//5upP6HfZFztW6pfWauE9E+5+dMo+TiTh5a+xwPeG3lvai1
1r7ar3DcvGmtXmu/J7R/9Pfv1Xg59S8zeeOQDN333+2rfF67ufhF1UUZOvff
/VHxH9WjG17dn6H6yeM19dvTl7kfa/3kuOOtT0+bTtb6yXHnZcUeDS2g5Znj
vN/e/X9xP9XPIovijk6/m6H7+3/xKBWf/nWpY/dtGbrM//3dJBV/NaOsZZUJ
GbreUJ+8P2/m/7/f6xvRuL+1/X7er1GmbuDv9mm8UvVOa0sXK1k2Uzf0d3/0
naiuij1qPnuAeSbNkwc3banO+d8dTMcxU895Mx3HTD3n2XQcM/U8Lv1Bl7D/
PL77ljaYPdwnQ/Wf43mN8w/UGpWh+s/xOWOfPEn6lK76r/bZ6N9TuP/Wv+tc
93XZ3ZwPx2vj2+N3netWeQe3PX0yXfXf4ned64pXzXB00/6dRd+D5i//OxG3
z/P65bWN+WJ2Z8A8+sXjNkV0peZo+eH4xZCtTt36iXmk2uf8dKB5Wvx0o41b
q2nj253m6fmCtQYf3KHlpxXN0x5OFWuezZOh8mMD+eH2uW7n//jZoX+Iln8V
v/z4bpX8WvsqPnVTh8+ttfyrOP07F+en8+9603nu6Fiw5BMtP21+16fuXGiz
HS23a/lp8ruedSdr16g4cLTQAZF/nheVvE7WGndV1KduZc1sT31nivrUJWwZ
PLlzY1Gf6t/7eP7y/NJVXjT32s50NX9b0fzaPTnyxxXPdDV/O9L8SvO0WXn5
TbqavzZU/+rfE03qP1PP8920/jP1jqQPpvWfqWc9Ma1/bf6a6k+C3vt7iRGT
TqaD/iTo71Yr+aK0fzroT4L+fI+SrZ9kQ/3R/p2R+29J86XM/ujENbfSVf/7
0vza9OxKs9026ar/9jQfc3xdNf/0+29QP16W6t9JqX2eFx7UH26f4/ep/9w+
x33peU31Tfv3Vs5Pe5ov1jRfOD8DaH6do/nF+RlF87EYzUfOz++/8/Am6r/y
BZov3L6K0/zi9lWc5qNp+2Zmc6l9zk9Dmi8xJaKcdCO0/FB96up5eehybdLq
h+pTN334svyvb2eg/qt/d4b61NVZUlZfv4GoT122v5Y5HXMQ9akLXBpXo+I5
UZ+qffZx6r/+GM139nGeX2dIH9jHeX5dIj0Bn9UH0d8Fn9VzP8Fn9XXpucBn
1Tw1XW8k6M+SbpuuNxL0N0nnTdcbCfrn5Avcz3Y0X/6j3nT/UW+6/6g3S6w3
rvPZ5I/cPsfzkJ9y+xzfQ/7L7eN7ApyH1lT/RXVnHxd1zlR56Ezz5VTLqi/3
W2SqPLSk+dWp4T/edTO1ced6nkXrKG6H4zNo3cXtcNyB1mn8vF2pnovSeoaf
15Lqfwatf/h5aZ2se03rJX7ePv/xvFwP7BewztSzv8A6U89+xO2QzuiyaP3M
7fC4P6f1Nrczksad1+fcDo9Ldlonczsc53U1t8Pxs7QO53YaUB6ciRe4HQvK
23XiC26nA+WZeQQ5pcHYq8PqdEoVnGLslHuArmGq4BSvaoN62pVJFZzC71cg
p0y99aPI6kFGwSlPfC1eLdpiFJxSPdFxnfNzo+AUbJ/n6cxrdp+fehkFp8x5
OyO/nY9RcMqC+A11DAlGwSncPnLKmr3Nn37+9bzIKYu27e7r/is/yCkzXM0+
DO2UKjjlgV3IB+NIo+CUuTm+jhl4yCg4pf7lQgleYUbBKfy+CnJK42cT+1Ry
NQpOOX5rnc0iT6PglAoXz3QJ+mAUnMLveyCn9Gr19pnVr98jp1Rw+Naz5K/2
kVMSD1XySVhvFJzC77EgpzhR3pBTXCjPyCnraFyQU3ZA/3l8p07zmLrgqlFw
iv37m1vWTzYKTunc+dG1PRWMglP4fR7klG6WeaaXHG0UnOLibbtm7xGj4JTL
EzcfqhplFJzC7x0hp3h29iu4fCzOowSdU4O63dscMwpOaVRy8dLkKDGPVPvI
KbMs+r68+9IoOCVP3oW1x80zCk7Z9+HY8tw1jIJT1PtOwCkurfxyB9w0Ck4p
m3/ZAbeBRsEpV0MbtrRJSRGcwu9NIadcNXc8n7jIKDjF+Wz0sHpXjIJTGg8Y
ln/yJ6EDIv88L3YnR2XV+Ad1JlPXZrV3xr5Y1JlM3fvy+q8l2oj6VO+PIadk
u9B17FidUXCK74VbceXPGQWnuF9sPt2vfKrgFPV+GnBKJZrvyCknSB+QU5qQ
nsA6UM1f5JQq99+UqFcT9SdBX/TdW9tTC1B/EvTZE7yX13mL+qO9t4ackivR
Tq+7YxScUvn9u/v+g4yCU9o8GvTEwYj142Wp3rsDTsmK/90f5JQC1H/klAr0
vKb6pr2/h5yyl+YLcgrPL+QUno/IKeGg/zhfkFPK0fxCTuH5iJzC7SOnGDyT
wj6lGQWn+EwukKfFQ6PglMeV6zZesE3ov3qPETll7YK+L3d3SBWcsqtz+rHj
X0V96k4VOOjieVbUp2ofOaUlzXfklDmkD8gp10lPkFP47yKn7KZ+IqfwcyGn
8DxFTrEg3UZOmUs6j5ziRb6AnLLrz/Wmy/XnetM5/7neLLHeuM47kj8ip7Cf
IqdMI/9FTlkB6y7mlBOjfzxbG24UnDJtpG+1tMNGwSkthp9aOPJf48713JDW
Ucgp82jdhZzykNZpyCm8nkFOqUTrH+SUPrReQk7B5+V6YL9ATmlN/oKcwn6E
nFKL1s/IKc9ovY2c4kDrc+QUF1onI6fMpXU1cgqvw5FTbhIvIKekEV8gpzCP
IKd0rHHpRRWnFMEpV1e6zCszIEVwSv3oHjWLtEkRnMLv6yKnvM6K7vYlMElw
SomSXysf75osOGVww1wZAy8lC07B9nme5uw6eJL/r3wgp7TuusvVck6y4JSp
XQPOH36WLDiF20dOyRES91ex8cmCU/b5tRv18Emy4JQWL93uzKmXIjjF/lTW
2X0pSYJTak2v/jFtVrLglLRmNvV7picLTuH3n5FTZt8rEFPwbbLglJmvouYv
dk0WnDIj8FbBpG7JglP4/WHklB3hFZt9KpciOMXVpeZWnzIpglOWlW1ovFYq
RXAKvxeNnNKS8oaccoDyjJySm8YFOcUR+s/jm75788+Sd5IFp/T9nKd+jdHJ
glNOd1pu38w8WXAKvx+OnNJ81pGQRg+SBKeEmjv2LFsmWXDK2m2Wt82nJQtO
4ffYkVMyenZ+4H0zWXDKNasgyw+3kwWnzG7qdDnqjphHqn3klG0HfZsUyJUi
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
0nc/rXb8YRCcUvO1Y33rRIPkFDpXFjnFj/KGnNKS8oycspPGBTklHfrP41v3
YaERQcEG+R19VPPFX3caBKesyjH4QLH+BsEpfF4ucspbi0fHw2wMglNWzDIP
+bnDIDjFwqNj8YrhBsEpfA4wckpJlwuD7oTgPErQXUpPOxn3zSA4peesthlF
i4UJTuH2kVNqTkmrFJBsEJxid3LuqR7uBsEpK2Mym98abBCcos4TBk5xv9e3
YAM/g+CUAfbNVqdONQhOyfmpmNlNc4PgFD7HGDll2qNnnfK/MghO+VjnUtKj
jwbBKVM27Nq3tIDQAZF/nhdVP3QrlhiFOpOps7M7s2lVBVGfujWvCuevYifq
U53njJzS8tzNi1umGQSnXGuZcSTtpUFwShu9xQ77BmGCU/h8ZuSU7jTfkVP+
IX1ATokmPYF1oJq/yCnLdurCLw1A/UnQ985nlqPlfoPglIoud2pd/5VP5JRE
qE/mlH1+FUoWfGoQnNLbyyssdKxBcEr2AwPPXjTD+vGyVOdgA6dUoP4gp/Si
/iOn8POa6pt2njZyygqaL8gp/Wl+IadUp/mInJIK+o/zBTnFjuYXcspRmo/I
Kdw+ckrWlApnZpUOE5xSKOZ6gfPZwwSnVB09YHrsJ6H/6lxx5JSyZ7eVLTFS
1KdublHPM9OaifrU+c/xaf8kZ5jkFGofOcWB5jtyyifSB+SU6aQnyCn8d5FT
uJ/IKfxcyCk8T5FTepFuI6ewziOnsC8gp/xHven+o950/1FvllhvXOfsj+I7
evJT5BT2X+QUXHcxp9iNdkxpUilMcMqVf6b1+mEWJjil9MupZ56FGwSn6Ggd
hZyyltZdyCm8TkNO4fUMcgqvf5BTeL2EnPIf60z9OvIL5JQB5C/IKdXIj5BT
utD6GTmF19vIKf60PkdOiad1sjjvi9bVyCmPaB2OnMK8gJxyjfgCOYV5BDnF
9Vnw1I8zDIJTrN71W9dhokFwSmrE0+PbhxsEp/D5+cgp85+362CcESw4pVTt
k4O2rggRnOKxorhTs39CBadg+zxPx17aeti9cbDgFI+p4Z/zDgoRnPJXrSbt
pi8NFZzC7SOnVM97p8mILgbBKZeTvm52Goi6kanr+q5R0spJBsEpbrfqDcrq
Gyw4pUv+lWuPdw0RnPJtcMj1Pm1CBafwfQTIKaOfTapRs6rklCdbKo4IroXr
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
7hGPNgUIThlgW6H5uKsBglM++G1dkT00QHCKf5NzBy8veSs4pWvNy6FLevoI
Trlc9mZF2/J+glOq072iyClnJtyYnrX4neCU9Wctao56+U5wymSjx4cHZQME
p/A9pMgpJYumJw+Y/k5wyomphUNLDXknOKXt41ovArq+E5zC96sipxgob4JT
KM/IKUE0Lsgp9tB/Ht8tPecethjnJzjlQFRBq/ddfQSnnFl4LHh+7beCU5zp
3ljklNGh+xpnc34rOGX40m0/y7TwEZwyqNr6V02++ApO6U/3ySKn3L57//rI
Nz6CU/Y42F/I/sRXcMrcMh/d3fViHql7dZFTbHpXOVY6xVdwiqPb4sQyGd6C
U7Z7Bzcrl+2t4BTOD7evo/z0gva7Un7mQvvkO7pD0L419X8r5J85Jb37okee
K/wFpzg41Snott1fcErYHj87B3d/wSl2kH/FFz2Wl9+Q953glEWzWnh1OIQ6
k6mbezBm4BcLUZ/q/mLklONLfcpYLXgrOGXH58nXxiT6CE5ZMSzbwNXD/AWn
zOT7kYFTZtF8R07ZQvqAnHKB9AQ5hecvckq1JS/vT0h7IzhlY+Lw/B4Gb8Ep
6fZJ/X889xWcMhbqk+vWSL9HjthM7SNHNKD+IEdshfrkdfjM8jOOVvD3F+tw
t5kjTyen+svvL571uvSwmNA3HeaHOWUr1TNyyjSqf+QUa5ovyCms/7jOz1tl
ubv7BDG+uoOzpw48bBYg1vkWL+xy798lxlf1H9f5H2m+4Dp/Fs0vXOdn0XzE
dT7/XVznH6J+4jo/Hz0XrvNnwTzi9fn+P+dZN+vPedbZ/jnPlpxn5IiVpKvI
EcdIh5EjHpBu4zrcr3DFr3ei/MQ6fGXReZsnh/mKdXjz4r51igf7CF64TD6F
vHCYfA15YRP5IPLCQlr/4Pq8Nfk4rs+Pke/j+rwIrRNwfe4C6ytez1yldQ5y
RDdaFyFHvKN1FK7z55He4jqf9RnX+aznuM5Pp/UnrvNn0noV1/m8vsV1/h1a
Z+I6PxutS3Gd34XWsbjOn0PrbVznO9L6HNf5k2g9T/e8sz/qfV6GddwyJEPF
yR/1owvOSQ34kq7ijWm+J/fM715pixbndfiSTYcGjm+gxXk9MH9u1dnm9bS4
Na/zRx3Zdri2Fu9M9T+tR3UPq5pa/PfoelpObHbsbUg1Lc77TjmS2vtsW6fF
+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
Fuf8l70z6kGbClr7an11fGvdCGctznkusvHh5vUvtDjnefH8T6PqRWpxzvPH
8aWaPc/U4pznIf2szKcUi1M+wnle4PC8/uNN8SrOef5h2c35+GQtznlemv/+
jdVd4oW/m+ZB3kuI/t69S6sPpbNrcbWveK7J5adR/+on5f9NqXob5z+JE/7O
96mhv/M9gOjvwyo4hrqc1eI8Lu7Xbwz0Pq/FeVw+2+V6U+NSnPB3vv8I/Z3v
R0N/H1moYiHX9trz8nitqR/nt/+JFuf2L1p77r3YN0H4u65ngau2/eKEv5cP
ftEz551Y4e/pU1yj9fVjhb/zfWHo7+p+OvD3kJUfkicOjRH+Hl3YYZx9pRjh
7x/3ZAV0C48W/q7uFwN/T4Tf87hEQPuK+6g/6O/q/j7wd294Lh6XL5Qf9Pey
kE8el/aUf/R3rgf093M0jujvq2jc0d+HUZ2gv/O9b+jvn6g+0d+PUz2jv4+k
+kd/z0k6g/7O90ahv/O9V+jvfjRP0d/daF6jv/9NOoD+zvdAob+vIP1Bfzdr
91uv0N8Xmuib5u/2Jnqo+XuMqX4qf59tqrcib+jvBUz1XPl7CVP9V/5e3tQv
lL+Dvyh/Bz9S/r7c1L+Uv3uQ36G/5zbRZ83fI0x9U/k7+Kzyd/Bl5e/o45z/
IhGNbb6V1nyK89/DsYtr1E3NNzn/y7IGvfQeqcU5/zfWTSt4x1yLc/7rru1/
eMGHaOHvu1a3aWnhqcU5/7lXVX6Wsl6Lc/7nrMg5/NwYLc75X9Ome7nze7Q4
539X0tqA8z5anPN/2v359gv5tH5ynm8OLdDvYictznleW2JmevpsLc55HvAq
4EDHU1qc81xtdfuu64M1H+Q8b3WZf++DZayKc56dnecfLDRNi3Oe7SbPd+l4
IFb4u2ke5H1e6O+fdlt7dwvX4kqX/Ep3L5uqxZUuFY69lZhD+jvfQ4T+zvdn
ob9PmpfDduJNrX0eF6/j/cYWGaXFeVzy+h9a6JUjVvg730OE/s73CqG/6wf2
mvTgshbn8ap6+ly7Gne1OLe/6keBoqtexAh/P1/0/L18l2KEv/9zbItZt/4x
wt8Xt5rdftmXaOHvfM8O+ru61wn8/frSPJ3ato0W/p6v1fU814OjhL8P+zTx
TcslUcLf1b084O8j4Pc8LgWgfe7/TeoP+ru69wr8fTI8F4/LUsoP+vtOyCeP
ywXKP/o73yOD/r6MxhH9vRKNO/r7TaoT9He+Lwn9nesT/Z3rGf19CtU/+vst
0hn0d75vBf2d74tBfx9F8xT9nec1+vtH0gH0d74/Bf29D+kP+rsj6RX6+0YT
fdP8vaqJHmr+Dvqp/B30VuQN/R30XPn7blP9V/4OfqH8HfxF+XseUz9S/r7H
1L+Uvzcgv0N/b2aiz5q/6019U/n7KlOfVf5ua+rLyt+LgY+r9+suNK+4fkGE
8HfdmTEDzxTW4pz/08e3bH55LFz4e6kjd59+aqPFOf++6/P3Od1ai3P+3ZwH
BkxopcU5/38POzyiuoUW5/zn7fox2tBCi3P+nQdeeJhrnxbn/IdMnHm0obnW
f85/9/ktl9tN0eKc50vr00ct9NbinOfUGPtpVQO0OOe5Zedr858Ea3HO89yD
pVZPi4hQPsJ5zlrVasLV41qc83y+8NO7+SK1OOd59O5B5UdWjhT+bpoHeQ8O
+vvM3IV1MVO0OOffO7FFrrILtDjnv8nbIa9t10UKf+f7O9Df+d4Z9PdZlz9E
2Q7U4jwugy9bNC9bQovzuLS/vGVZzK/8o7/z/R3o73wfB/p72sKLH5ov0OI8
Xo87z4r1HKfFuf2d+VunNu8dIfy9zfvtHa/NihD+bjUlq9vEqhHC37tmjf27
9Otw4e98PwX6u7oPBfz9RkiQa5Xu4cLf6zZMeDS/eLjw912LMsx8DWHC39V9
FuDve+H3PC4NoX3u/13qD/q7ui8G/L0fPBePiw3lB/29E+STx8WS8o/+zvcv
oL/voHFEf39A447+nkJ1gv7O94ygv7el+kR/H0D1jP7uRPWP/n6ZdAb9ne8p
QH/nexbQ3xvSPEV/f03zGv19OukA+jvfO4D+PpL0B/39IukV+vtfq/+tb5q/
zzPRQ83fW5nqp/L3L6Z6K/KG/t7DVM+Vv4ea6r/yd/AL5e/gL8rfwY+Uv282
9S/l7z7kd+jvhU30WfP3Eqa+qfz9lKnPKn9vb+rLyt/Rxzn/5qcGr1g6NEz4
+/bg6aM/VtLinP+aRVZaDYowCH+/1nl3xYfuWpzzX+SSnUfnRVqc8z+lUpHu
D/ppcc7/A9cXHzrV1eKc/4oZq2fcN9PinP8WN5cMvNZEi3P+bV3mtTs7Wour
++KtnKod3qrFOc/zs03J888DLc55/qfs0zM59Fqc8+zZtFZv5+tanPP8tsdK
Y7iHQfmI8otvwfmO1ApTcc7zgg+uj/+qqcU5zzfutF0+snqY8HfTPMj7I9Df
M1e5+k6so8U5/+kTG04u2liLc/6/9Xjz80bLMOHvfO43+jvf14D+bgy+3HFI
ay3O45K0Mf1z7xZaXPGFrt2+rk3ChL/zuffo73yOPfr7gZw/ypTvosV5vPqV
XxCXOVSLc/u5m367FuQcJvy9/+fttuOOG4S/O//V+skJZ4Pw923FPnRK7GAQ
/s7nuqO/q3sEwN8nZVwbkicqVPj75JMzW3mcDhX+PsW+YYlhTqHC39U58ODv
U+H3PC5ToH313iP1B/1d3bMA/o7Ppf49l/KD/o755HHh/KO/87nl6O95aBzR
3+1o3NHfD1KdoL/z+fxif57qE/2d6xn9PYXqH/19HukM+juf743+zueTo79/
oXmK/v6N5jX6ewbpAPo76wb6uxfpD/r7XNIr9HcLE33T/N3bRA81fwf9VP4O
eivyhv4+2lTPlb/bmOq/8vfmpn6h/B38Rfk7+JHy90mm/qX8vRD5Hfq7qT5r
/u5p6pvK36ub+qzy922mvqz8HX2c8/80cKrr7Buhwt8jWued77U4RPj7953H
J/zoFCz8veS3znYdc38Q/v7Erva6nBW1OOd/vkc+/bNmWpzzX7/IZ+NGay3O
+Q+Z5l273wgtzvnP8q7fIG9DrT+c//IWq5vc/a7FOf9t9oS1mPtcey7Os/3P
tm0a7dbywHkeOKTF6G/+WpzzfHpIqYeGPNLfT+cpPqhLbenvgSVb9vJoq8XV
/mHeyOdlO2txzvPYLLfuy2wNwt9N8yDPXUd/94hr+XZaFy2uvl8IbxBsbPGv
flL+nwVVj5tb0yD8nc+LRn/nc87R38f4rlhR/VuoivO4lPv5tuLf97Q4j4t3
nUrXZ7mGCn/n813R3/n8YfT3k4W+5e44R4vzeD15tvx21D9anNuPWVnIee21
UOHvB87nfvlzdqjw985Djt+rcjlE+Htczq7XOhmDhb/zecjo7+r8bfD3HmGd
Th92/iD8PWfhIydCrwYJf7/bPpt7+cxA4e+L+Pxk8Pd78Hsel1zQPvfflvqD
/q7OfwZ/d4Pn4nFJoPygv3eBfPK4HKT8o79zPaC/R9E4or8/pnFHfz9BdYL+
zs+F/s71if5ehuoZ/X0U1T/6+2DSGfR3PhcX/Z3P9UV/f0rzFP39Ns1r9HfW
AfR3PucW/X006Q/6ewXSK/T3ABN90/zdVA81fz9jqp/K3weZ6q3IG/p7W1M9
V/4O+q/8HfxC+Tv4i/J38CPl7+Bfyt8fk9+hvx830WfN38E3lb9nmfqs8vdI
U19W/v4MfJzz/9py0KX+vkHC3wMeFy9tv02Lc/4Nfd8sGtJfi3P+44LXRwwv
rsU5/w4N2rc7eTFQ+HvywqQdxp5aXL3f+OJwUrvE98Lf08vZ9VizVotz/l1z
W5xr76nFOf+V0koXTQvR4pz/S2EZs07n0f4u57nzqw/vRzXX4pznVpVHZVUZ
pMU5z/WdoiqHL9LinOfKDyZ1Pnw4UPkI53nDnIlHTjkGqTjnudbgoICntlqc
83zXsmfBuNpBwt9N8yDPK0Z/71TfYD45ResP579e658Pn4f+q5+U/2JdK65u
8DJQ+Dufs4r+zucDo78vfNi+hPG2Fudx+W5hFT7gvhZX342e6nDe63Gg8Hc+
FxH9nc9NRX8PTt6ft38xLQ88XrcfZexcO1iLKx/ZM6CW/lCQ8PewF4OHrvMN
FP7eJNuF017rAoW/L7XIkRlvFSj8PZTOEUV/f83n1oK/X3s4fH7/eT7C3zu1
e9S/3Nenwt8bhOybVO7rdeHvGXtXG/937ij4e0f4PY9Lb2if+6+n/qC/q3N9
wd+94bl4XJZRftDfm0I+eVzCKf/o71wP6O9HaRzR3+/SuKO/h1CdoL/zebDo
71yf6O9ZVM/o74uo/tHfO5LOoL/zeZLo73weJvp7KZqn6O+NaF6jv3cnHUB/
5/Mh0d8fkf6gv9cjvUJ/dzPRN83fK5nooebv9Uz1U/l7S1O9FXlDf79gqufK
3yua6r/y9/WmfqH8HfxF+buzqR8pf/9s6l/K36eQ36G/jzTRZ83fo019U/l7
iKnPKn/3N/Vl5e/o42p9NWVVKbcp2rk3nP/UOdkGL3nzTvh7uxUue6e30OKc
/1WbM0KG7/YX/n77xjH9UoOv8Pcv0b0PHq3pI/y9YdHvSx5PfSv8/eX8nvd9
x70W/r6yWZ42Ixa+Ef5+tM6Uor5dtHY4//crvYzvXshb+Ht4iUb3bwVocfXv
hjtLOa3Qa/1U+/NlzarYuGvPxXmusC/2dZENfsLfI3bu/Zy9UYCKc56nfctt
G5r2TsXV+9gDZ53wuvlO+LtpHjR/53M40d+nFig7pOUwLc757z+m70X/llqc
8295fV2uOYXfCX+fSee/ob/XoPO+0N8v3rz0cUywFudxaTf58KILb7Q4j8vT
UlsKZN33F/7O5xOiv/N5g8LfH602VmmnPReP17gnG6wz7mlxbv/j060HvLsH
CH/vPvz2pPm1/YS/39/druyQij7C39u/u/msbfG3wgfVuZHg7058nh74+2yI
q/0uiPN4uUCcx2UZxHlcVkGcx2UdxHlcNlK835DANva21y2xHtDft0JczSPK
D/r7C8gnj8vflH/0dz4fD/09mcYR/d2Bxh39PY7qBP19HI0X+rsf1Sf6exeq
Z/T3y1T/6O8RpDPo73xOHfo7zy/097Y0T9Hf+9C8Rn+fSDqA/s7ny6G/J5P+
oL+PJb1Cf39nom+av5c30cN/7c+b6qfyd9BbkTf09wemeq78/Zip/it/B79Q
/g7+ovy9kakfKX//aupf2vdx5Hfo7y4m+qz5+2pT31T+3t7UZ5W/p5n6svL3
M+Tjx03Pd9X/dGhitj8sQ5dler6r3qtnyelJ2TJ1x+j8Vc7/rEaZwR2rZ+pO
cjuUt93xMx1tz6TrflI7nOcXhzoW8mqeoTtJ7fC4/LAvcq7WrQw69zVJtf/W
9vt5v0Z8blKU8kGntaWLlSybqRvwv7if8s1ij5rPHmCeqZ6Lx+Xrsrs5H45P
5/P9lO+v8g5ue/pkuu4I9YfHpXjVDEe3RO5/kvK74qcbbdxajf9ulPLH8wVr
DT64I4POCzVTvn8utNmOltszdKdMz/fWnaxdo+LA0RnUjjwHrOfv51L6o6u8
aO61nXweV5TSq92TI39c8UznvCl9S/O0WXn5TbrOnvrJz7vp2ZVmu23Sdb0S
H/RMfHD7Jtczn2+Gus3njw2h/qhz1Zwq1jybJ4PPQdVhHohbdZi3DMon5yGm
RJSTbkSGrgf1U3GBl4cu16YMXScaX67b6cOX5X/9f+d90fmNnJ9jlE86N1jb
96P896Z+ch7OUT+zKG9cJ8Won31BV/ncMHf6u/xcRXVnHxd1zuT5ovTkVMuq
L/db8Hll8twqmkdKb7Oo/rkd7udzmi99QH/4fC32Be4/z7sz1D7n2ZnmKdWn
0ofrNK9pHaX0gXUA9aHB2KvD6nRKFfpg7JR7gK5hqtAHr2qDetqVSRX6MPXW
jyKrBxmFPjzxtXi1aItR6EP1RMd1zs+NQh96tXr7zOqDUehDBYdvPUt6GoU+
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
LerPCbo3HPVnJ90bjvqziu4Nx/nO91/jfOf7r8V+At1/jfrD98Kj/nCeUX94
XFA3+L5p1A2+bxp1g+93Rt3g8ULd4PdRUTf4XmbUDb6XGXWD34dE3eB7hFE3
+B5h1A1+bxN1I5HmI+rGXJq/qBszaL6jbkwmfeD7wdX+8G3r9/tvZaj7wTnP
oRnjLEOPa3F1bmGjf7JNtOF7PB/c/PM9qg9u/vke1Qc38R5VGl+lY9dzPN+X
506G7gTNC47P3De27az9WlydMxN9Pv/QMHVPpbiHl+N4Dy/H8R7eE//x3inH
uZ2N5x5djFyoxbmdCp+HjKlXWr3vJ95T5Tj/3nrT6coW/3oufH+V22ffP9Mo
ubiTR7qK87xzL+3UrPBFLa787i9jn3PntDxzOwGvrbwXtdb6qb7vvnY3qZyF
1h91r4Hj5k1r9drz4vu0P8Av+H1aNb70+/3nd06d3UtrH9+z5Ti382b8hHyR
7/5VD9TOYedbEw+maOOI9yBzHO9BVnVC7fA9yHy/Oee/QbdFURMepqv7zdU9
UG6RU8aHaXH1Hsu0RX1LpaSre8/xvlqO4321HMf7as3o+0r1/bLXuAK5T2lx
budN9oshnxK1OL6fzPOd25lh9bJDo3fq/Vjx3vJQ8GV+b5nHnfVq6renL3M/
1sad4463Pj1tOlkbd9axzG7R2T7n0caRf++8rNijoQUyVZx//zN/vp+lz2q/
Z/1c+0+2Vn622rhzO3B/rrifmuN4PzXH8X7qE7AO4fe0Oc7tbNMNyb3gpRbn
dpp8T83T5F/1j+91c5x/X23TnHajCmvPi+978/ji+8kcZ/3v29rWdWNPLc76
f2uox7Hgdtq44/vMHFf3aQaXHTTARdN/fM+Z22d92Le0wezhPlqc5+P0Tct9
yn7S4jwfO+x73/hd7kytzmk+8vvY3B9uP69x/oFao7R+qn9PMXv7PWKBFsf3
vbn/3M6csU+eJH1KV36E75PzOLK/v7y2MV/Mbq0e1Ptd2Spf/XJSi3M+b9le
HJ3zujbu6vxhmyK6UnO0OLdzdfvh+JqrtHHn318M2erUrZ/2XCo/o78WGNVH
ey71vA8/vXd4kK7NX/59Gf2Ghou15/3z/eMPbv75/vFf/s7t0H3i/Lx4bzs/
F35fwHH+fZnse86vXKE9L353wHFup7itq4V7Hy3O7SyebuydZqXNX/xOgeN4
XzzHuf35pveGi/viiTvUdz2eNF7utL5S/k7jznH+/T2qk+60TmZdPX6lbOL/
PRfHFa8l2FxqlJau4vidBfsUt/OqhUerhkUyVBy/v8iE9T9/f8HzjvVz/o+f
HfqHaPOUdc987df5hV20uNLPYp89XlTQ6lO1c/nx3Sr5tbhqx0qfEXxaq0/1
+6mbOnxurdWhivO99nDOQJn90YlrbqWr9vH7EY7z7+vMiV78frP2d/n3B45c
eRRfUYurc7F6RxetO1brD/e/BNU/x7kdnC/cTg+aXzwu6v0B8l8eF67D1+Tj
HFfvI5Hv8zoB723nOLfD97ZzHO9t57pi3fP+XmLEpJNaPzl+t1rJF6X9tTjr
RqtdFbcOban1k39/vkfJ1k+yaXH+fc07Fc3yj9HirDP7WtR63Ou+1k9uZz/N
X45zOyXIlzmu7s8iH1frLtIr9n2uH9YHD+on1wnH79PzclzdG/4pMsfmppre
8u99KW8c59/nfhK505BD+z2Pi+VWD+//0zeuE26HfYfj3E5p4iOOczu2wFM8
vkuIv3h88Xsojqt7XckvlC5R3oqRX/C4q9+Tnyr94d+THymd4Tj5+FHma9If
F9JtjrNeFSGdPwr7APz9FOswt1OafOQ77A/wd1Wsw/z7S+RT/Lxq3Uj6w3Ge
7+ybHFffZ1HeOA+qHdI9jnM7nB+O43denDfVDulwJuxjcD65zvn3c2ndy+2r
+8JoXcTt8N+1onUXx/n3DrRO4/b577oTH3Gc2/EhnuI4t2NG/MXjyPP6LK1n
OK6+n+q/t/V6Dy3O9bbn6VGz18X+VT9UV/xdG487t3+T1lccV+/z3y2Tc8g7
LY7fwXGdcDvPab3HcXW+UMN/vOtmavXD83c2rSc5rs6dpn0SjvP8DaF9FR4v
bicPrW85rv69kvZneLz493tovc35x+/4jsJ+EX9nx3Huz0zaP+E464kT7bdw
3vC7PI7z76/Rvo077Dvx/omavzSOBeeveR77Rvs9j4v7jKw3ztv+NX/p93ku
j3l9u4HWT67/WcSPHOe65f0BjnPd8n7CUdiv4+8cuZ/c/gziWY6r941pH4Pj
+F0k95/bcSBedof9Pd4/4XbUOZC0D8O/5/Z5P4fj/PvjtP/Dz8X1kJ32bbh9
jvP+D8e5Tng/itvn35+lfSeO8+8r0n4Xx7lONtH+GO43tjkSmNR7k1HsN+YJ
+GtWzQlGsd9Ys2BkyVEdjWK/MSB/nfTM9kax35jWMd+elmWNYr+x6LyPljPS
UsR+Y6upfXydGqaK/cYuzgk9bpZJFfuNP20Ov1jzK477jb0XrrybI0eq2G/M
19+yk7d5qthvfFjP+GD/rzjuN/L3a7jf+LluYivPEqliv/FicuXiulij2G/k
715xv/Fy3nZNnpmliv1G/h4W9xtnXrP7/NTLKPYby3m16j18t1HsN96/Ue5i
yjyj2G+c83ZGfjsfo9hvrOTT3yHuklHsNy6I31DHkGAU+438fS7uN/L3ubjf
WNmh1K74XUax38jf7eJ+48IVve3CvI1iv9G3fOPKPQONYr8xYM/aIgH5UsV+
Y+Pmkz50LpYq9hvXvuh+/GLZVLHfaLzfbU/ENqPYb3z44HblvdlTxX5j5Lvu
3qPjjWK/cefDFu79nVLFfuPVAP3AcoNSxX6jf4J1nnBdqthvDFwz5vHxD0ax
37h9ZFlr53/F8Xtn3G8cs73DS2tPo9hv5O+gcb+Rv4PG/cYHdiEfjCONYr9x
bo6vYwYeMsr9xoQqX+YdNor9xvqXCyV4hRnFfuP5PW0WBYcbxX5j02XjCplF
GsV+Yxh9V4v7jWNt+pl3qJYq9htjmrjsGFM9Vew3Ti59svaqGqliv5G/+8b9
xrtxX3tG/SvO7bT9J7qh5xij2G/k78Rxv/Hb4rYTpxw1iv1G/n4c9xv5e2fc
b7x/aHzj2oVSxX6j+8YPLqNqp4r9Rv4+GvcbrwxcPnBaiFHsN/J307jfOHWa
x9QFV41iv/FBzq0WsbeNYr+x/AGnbHaPjGK/kb/vxv1G+/c3t6yfbBT7jRdm
7B32bYZR7Dfy9+O439i586NreyoYxX4jf5+O+42enf0KLh9rFPuNl1d47Mqc
ahT7jVceuFV3nmUU+41ODep2b3PMKPYbZzrk9rl01ij2GxuVXLw0Ocoo9huL
5Ps5ZsFEo9hvdA+ura9Y3Cj2G8+FnM5ont0o9htbX+hb9p4+Rew3drzoZxdw
LkXsN/a4ZO/2aV+K2G+8au54PnGRUew38nkFuN84cPfQM2NfG8V+I59jgPuN
xTr5DD6SK1XsN35pZH3yQ+VUsd/I5x7gfuMb0lXcb/QgHcb9xh2k27jfOJfG
C/cbr9O4437jdaoT3G983GlZ5c9rjGK/MWre2Ht1xhrFfiOf24D7jVfnB3UL
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

      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFtMj3EYx38v+uf1/pMi5sJpc7xwuHFcWMQo1tGGGDo5hKhYZEoi/FNK
hEKKJC5szGY2F8zmgs1sxpU5zJXNbGZMks+z57l4/s/n/32f9/f+fs/hNyG3
OHP3AOdcDTYQG+05F42Pw3f7zh3E+2HnOuFdcH/gXEnIuZHEVOKvow+Hy+Eb
8AFihhB/Ex6FfhT9N+8cRr+F1gtXwj1wB7YT/od2DY4nvoz42LDGSPxSfDJ2
l5gu20/A82Z4CXwHfTM+jnfX4TfwfhL+Nvom/DD0efgd6Dn4d+h5+HzsE9zO
OoXwF3gNMfx1BfjxnvJEfKJ8Ex7h6X/RZ3l69jL8Lx6mYH/Rq9G2og11+p2F
GNt1s/FHefYPziD2Dx7JJfBzFb0A/xl9Y0jjz6OVhjTn39Gz4elwIzwNP5iY
Sfi9WAl2D73Pae2iPDVhD7+CZ73wEV9jS7H7lnM5+0f4OZYFt6I9gzPhS3Af
XCX59LUHpF7fLG+y5w/wUyzD07zJWSS379FOw5PhaviFnAFuQ7uCrYffWk2l
Z6I5dHxYvyW9kWc5zGfNev7P4H8T8Zd9rfObQM8i5/8R6Jnk/0+4weJPwtuw
scK+riM5rA20T6SOWfgmYA56h+U5Cn15SHtPeqwb/SW2Em4h9jWcCl+EX0nt
4Qtwna81qUR7gq2ymEcWI+/G4GOd7rvR175o5/liq1EV2kP7lvSA9IzM5aKQ
riczku5p/0ufdxH72PYje1hmvSXrSE6kPx+g1VjvrYZjwjqPtax5xtdebkE/
C8+FOyWflrdTvuZc6tUaaO1kjtrgEzL7UvdAzyI5XB/orCXwrUMhPaecdztc
xLNxtmad9UYErRAbA6fYfmZKDNoe06V2++zdCHxO8siaW6x2suecQO+fcnhQ
WGPk3uhBT7LZlP5fHNJ8yrfkvHI3bOT5Aet56f9s2/NaT++oIvxXnu+3Ppe5
qLB5kX5OY62pcE2gLPMrc5xsMyl3wnFf79TcQGdSZjOVmGO+XgTZ6BH+j3Y6
axWe3aue3q3CUq/d1gOypwbLVTPv1sr9KfcaPMXT/dTDxYHeZRHbg8TMt37o
Z51M24/sId1mVt6vszWlvgsC3afEp1nd5S5MhP8DKISyiQ==
            "]], 
           Polygon[CompressedData["
1:eJxFl2W0VkUUhs8BOfA5HwiKIOoPY7lU9Ie5loCEl5YQKQGR5hJygUtdEBAU
FbALu8VAbFBRsRMMxFbADuwuzPdxvyx+vOvsmdmzZ8+eXWfPEZN6T6yVZVnD
PMu20/fSlGUHiS6J7ldk2WUp5qD7C0tEX5xi/nLhamGE+IcLV3qONXiPE5aJ
PkBrBwq3ib7CPKwNKGJ8mNYOFS4RfYZwurBIWCwsFfbXWnPhFtHlcpYl4XTt
PaOIPUssE1ndNddNmCN6rjCbs7S3v3CSz0W3GaJrhB0kq4HQUGjk71zx7qL7
LxLfReK50Gdw1jxhH63X03rPItBDONlr0OjA2cyd4/uj/1miZ2JL0dtncf8B
tlON14aJrp+Fvc73/rOF81KMp2p9ijBPmC9k0vdfzZ8i+lSjqaYn57H2m9bG
i95Jw6V61NlaP0n4Q/NbUtCzhN9TzFWJbiTedtozVOOfhB+FX4Qpecibpu9U
4Vev/SD8bJ7vhe9S6IiunFGIt3EWZ3MH7oZNuBs6ousk4R+NnxGeFp4VnhOm
a880IRdfrXLYYl/xnmubzCiCh7Xa5fCR5paP722nuZm+f00Re9g7RPRQ+w++
d0gebz1OSKLLwoQU78Nb4aNX+I7clbtjgwv0PVjfOuLp6/txBrJ5y79F19N6
XeEv0ffhc6IbCCt4N2G+sMD36lWEb+Hz+P5IoaXoVsJo0X2KiM09sJnG7YuI
2z3ziJtKoYR/CWMcn1cRC/hoEefsprXdhdN89q55zLF2h3C7cKdwV4qY5b3w
ySWliKtmeexh73Kho/PF4CL2dNa4Ux6y0And9sojpgH03sKZovviA6Jz4Thi
rPS/S2StNX5Q4yOK/5ezLUJHjY/WuHYWd+SuE+2vwzTerHFPoTa5DFuK7ibU
ymOOtXZCU+JbqBB9r9AlD53Rva3QJA8eeMkldbO48xzbpkJ0+zxsdHwR+mLP
Nhp3Nf/fQgf8SeMd8A2tv6jxcMd3D43fSeHbO2o8MQ8f502QhcxjijiDs+7W
9x6/yZ2m0X2l/fB+fR9IEWONnc9X2d9Wem2VwRo+yNoKx/VK864yL3kBWdDI
nuW8cb3oE8Q/RLhR9Kn2YXz3nFLov18eY/wJn2uSRY3AFwdqzJMP1viaFIBG
JrJbEctZvBlv97jwmN95kvCE56AnC0+mmIOuFo4tIoaInZuE3p6Dvlm41mdy
1g3CrSlyxjLbGX/v4PddZjtj+xGSMVIYJTTIwmfu9RvAs3XtEdGrrTN6dtYc
abqF+Idp/LDwkHkeMR+5Fh/mjo96/nHfiz3sJQeM9HuRO+oL1cKOrluLtffM
ImKe2CeHkcv6eEy8HJsiZ0y0Xfq4vpH7DnYu61BETiFuqcXjU8ghF1alqGvE
wXy/+zTHMzE+xbLhw+acwb6y6yXvsrXGUlvRucqye/mdThQaine69ryWoobO
9Vn42sIicvlsbODaPSePmo3cjkXcAd0XpuCBFx54r9Pc4Y4vYpccRa4ih5HL
qHlD0KmIWtg5hS/iky01blFETiIXdUrb5qDhPTpF7iHfdBU9RmuVRdTIH50P
xhZRV6v9JrwNOW1BKe7M3WcIb4puLd4j6SlE90jRw9DL0EPQLwy3j+Abo+zz
S+3T+DZ7iSliCRmDiojBaxwLY1P4zDi/NTLpRWb5LGzEHnixHXWZXIn/r0mR
w8hlPYWNKXRG9xrhbdEDUuT17u6T+ovu5/mBBnSPYls/ha/gMwP9Fiek8Ave
BB+rFqba95BN7ejmvmt9Cl3QaZ3owUJbcrMwyLKOyMPHkNnL71XHNQj+433u
UIP4bOs1bIgtqSXHWP+y423r3fparwGOv96eZ523xyfwBXyg0vlkTL6tjxpL
7ObRYzyVwjfxUfqiE/1OVY610e4H4IGXmtna9yXPvI+e1ELhwxQyOrne8ZbV
rj/d88il6IAu6IAuq20/bECu2mj7IhPZ6Iiu9Jj0hl+n+Bcg39MHokMb2w9Z
1GhqNTzw1ilH70cPWK8cNZBayBxry3W5Zln0UPRS9FD0UvSUW2xTbE+Ow9YV
us9RRfgIvkLNfcF2J/bap6j75OUuRaytdZzC85x9fI3niWFimRxAfFPTkcFe
av3zKfas9TnrHA/UePq/tZZV6XcnJoiNnbU+XuPPNf4sRR9bY5DfsOfn3kus
4SOVvls7ap/jgLpET0Ecvuu70dtQc7jjUSn6mArrzVmfpuiZZ7gHphd+SXMv
C6+nyEHE8Vv4knBkipxBHqjnfp1/jFv0NqVyzEHfWgrexnnUePYU5XhHeOCt
8bn06vTmrcTY0ue0MaA5i9yDTGQvEH1aEf9/c53Pt/d+elf60RYpbM6dXvZb
8I/Ivxx72Puq4wEfXu/z6LeQgSx8Ft+lZ+Ef5hv7NPP823xFDOYRM9WuD+T+
LvYV3uAdx8kmY6Pj8AP7De9Czh5uHdH1lRT6vIGt3Q9U2U7822DHuuXwef7T
/nQsfOL4I14/4l1T9NbUZPLjF4457sBdajnG6lhmV8cBuoxIkSN6+X7Xl2Ku
UR49bVfXRPLw69b1PWEUvYmwIUVfRh+z2Wej38f2O/x5svs41r5MYUPmvrRt
N9iGmyx7gnuC1+ybyBjv/PiJZXzhu32bwgbYYox1IgfQm/CPVOEejV6Nc1iH
Jobe9dn/ATX4+IM=
            "]], 
           Polygon[CompressedData["
1:eJwtlVdsT2EYh8+fOnJ6irRGQmLFCBLqxmyrZqNVo8toKS0tMVpC7a1aStGl
Va2WalMrcSVBSKyQGEGsG3tcEOLSrufN+1486e//+8b53vF97Z2Zm5jTynGc
mdAGYn3HmQw7PMf5w+849D/IDThODiyDE4xth1+Md+Z3F4hmzmjoiN7DWCQ6
Cnai/8re+EEB3S8oxHFaQ1vYgNfInC/4n+EbLLdvFEEP9BK8pbDM9pNzjUNP
gImwClbCXpu/Gh0Dk3w9529HY8qEDFgEYcwr8FQvhCw7e6GnscsaiWmsr9+S
8QjGI6GTxfgT7wecQm/D+43eh+4Z0LPmSN4gmDg3422C9RbvKDuDfE/yFgFn
JK94YcwvctkL6vHr4AQMZ6yEOdPR02AGOHi78d7LGdH16I/oT3AUUvGO4dWg
a6EcwvEO4VWiq3ydn413HG8N38yDA3gD8Kaj50E6lOINwTvo6T4VEi/0xyvG
248uhiLog9cXhtq33uC9hrf2LTnnK/RLX8fk7HV476Q+piWmD7ARNkg8eEmS
R3QNOhk9G2aZV42XgL6Bvgm3bJ6suYO+C/fgj6+1Om35/utrL7rgwUa8Jk97
8St8hxV4DZ7Weiu6HfPaQwfwbU0zY/nkabere0tPyHhoiNb0CF483gzJKzyW
uJi7Hgpd3Vf6Kd1yfpj5sXj3LfbEgMZ029d4/tldkXO1SC+E6F8562rWb4cd
8BTvCTy3fqj1VD+DF5BmPSK928vqJvXLYywRWhztsWR0CsxkzxTIcjXfa/EK
oUDuoPXIAU979jg0wAi8UrwY1kxydf5gvGRXe2gQeiD0g/1SM/xEaJL7hzfX
1X3S0fNhJJRJjvG2yrtgfShrz8u7gK5AZ7AuEyotlxcZuwSXYSrE+3qfJMZ8
5jxCP5R7gZ5iNUq1uyfnT0PPhQe+1kX2jQvomjSLU841T84KJRan5EPuT5mv
fSB7X0Vfg+ty9y3OcsbOos/Zd8fgRcEwu/sJUnc7q9QmSd4o4ouGOOgesLcQ
9thdDLc7K++jjGfjLfb1Xa2x+i9l7WbYAhfw1uCd9LQ3pUflveqG1xVC7e2U
9yUDvQDmWF9JvRqhGcZbPFWWI8n5FV/jXudr31RbX8v9HsN3olyti8S4S94j
X9/zIntXpSeD7f+G3FG5eyHwH3wp28k=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFtoz2EYx98/+etXvztSDo3JaWgkciOkXFAicqGkHFNELrgQ5bAhITnU
zJichh1sbGyzmfOOmDEzysxpOV44lMMFn2/Pc/H0fP7f3/t/D8/7fd7UJWvn
rukWQsgguhMPoxC+J0Koi0OogAvhhfA1uAxeCs8g8uCraJVEKbwYLYtoge+g
/SH/Jh6ifSCSLNKK3gb3hNsi+/6LuI82lTgNH0+GMB0+C19hzEG4Gb4FN5Dr
iW2xrav9rIYb4NfwBriIfJFY6Xu+Aq+BP/u6T9GqiKvo69Dq4U54PVzM2oOp
QR65WuPQN6Jfh6vhTWK+pTOmmXwTfRhcBrfAgfk7tXfihWoY2Zx1cCbae3Ia
w2rIX4nh8EdyB2PGBatJF+N6MM8LtG7k0ej/GPOTGAV/IzclTdeYZv7zF+1R
bCxd30uIocHqdoxvzxhTgfYosvleojXCn+ByOJdoh++hnYSfw7VwE/EZrkTL
IR7DdyOr2yvVOrYz6CzlzP8gsj3eje1uR6BXo19GP8LvyX5fqnkJfC5p/lkF
34jsfnfANfB1eHNse1Zt32p9eKxq5TVPoL+Lzbc/GN8OP3H9je9XdWtL2N7k
7Wex+VN12+/7lBf3+rq6n4nwQGIrXBDZ/rPh3mgF7nPVoYTYCaej7SIPYq3c
pLH0ke4fnWUCfI9vYxjzmDyE39vRi/h+Qef03rnkteqFVgofhfvAg4ltcGFk
/pQnx3ufyvcr4FbvNfn8PvEF/RraLOKM99Rs7y/1b6mfawraTO/BMvUd+xsQ
rB+rvI+Wxeb5RjgDLvf3YTl8yv0m36lPNWa394E80EGe5x6Tr+a4J+W3RvdY
tXtJnqxSjb0XWt2HOktNbOfSndaxVm3S7r0htjvUve6D57uH1YPam96ERWiH
fD+68zx/W24zZprXR2cvJnbAo/2MBfCC2O4lC57kvk1hnmzyeX831F96F8X5
mpcYEuz+NGem+oT/7nGfyCN6T/R2XUK/GFnNDySNNX6Ue7Afeg75sPtEe87w
eTRff/eSvNHXfSLfFpNTg52hxM+V5r2md2kLfCdhd6f3rkueDdbbKbGtIX+e
8LV0/nw/o97Q/+xz/t4=
            "]], 
           Polygon[CompressedData["
1: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
lsHZ9fb/T75/cUnUoBrPU8Tyf0VUkro=
            "]], 
           Polygon[CompressedData["
1:eJwtlVdsjmEUx9+v4pUvee6sILbY40aR2EJixB4hcUHNBBUSxIpdCS7MoGbR
oS0dOvFVdfjaWm1pqxVtrSK4sW5c8Ds55+KX/Ps/z/e+5znnvKc9ozbOi47w
PG8RtIbhzvNCAc8rCHpeJHoEDIYYvAy8oehhkIreh3cRLkEnvNt4B9Bd0F2h
G7SF83h3iLVDt4datM9Lv6C/wjfIxrvBuQnoiTAJYn1+C8vRWcSSfH1GLDqL
8x3QHaEUXY13Dn0BLsIjvFeSG/oyXIG7kA/34DuxJ5zJQ+da7BveY7z7kpfp
ELoA1lkOd/HWozdAJvlkQBFeJbFEvDJ0A/oaOh4SIIxXH9Ac4pzG9sIe2A/l
xAo5UwOtqcsnvM9O6xOyvCTXB+hCeAvN8B4CnK+2mNzpKbqMnMrhkORjz45B
H4Z6+IUXJv4SaiAFLxlKrI6pVtMX6DqoNS9NegwZkgNeOWc+oFuRQwT8w6vC
a8R7Y3l6EerJHMQRvyp9gsygzlopugTuQwiv2Gp5ithpOAOD4BBeelBncYjE
yPsUXPZ1bqbjbZG6oT9Bs+U3Bm80jLM5lPe+Qv9B/4Yf8Cyod0qXnsI7vAq8
ueg5NkvSv/nok7zvBPSznNKIjUcXoYvhgs3mC7xqpz2VWa9BJzmdEbljVUBr
Xip1lz7BT8vlo/X1peTKu+p9rbNnvZZ4i9N7yG+eB7WvDbAbPuK1wAOB2Fa7
UwHPqYQqX+sx1mnusfZ9brG+Vthvtkm+nE3wdV5lltLRx9F/0ZWce8LfTyEa
L0f6iLcJvRmOwGO8h3jZnMmBXXg7Lc8C2zPyzbxGN0EjLCR2C2+/7ZXOTnfK
AOgPA2WWbR/tQG93+tyQzZD0pq+dj7G56Y3uZc+VHdUH3QO6O91l8i6Jyw47
iD4GR+1cpOUqtRyJHuV0B2Tj3Qvq3TfCLJgpdcBLIDbb6e5aBivsvOyPJejF
sFTywcsLajwKVlod5bklNifyDZx1ut9qnc6S7NA2zEOdzU4YKuzblnmQnkhv
Xvu6U2QWZzj9TmTXxgc017XyXaOv2y6TnbbK8srn3Gr0GshFJ+KlyNza3ZI5
exPyfd21cyz/ZDuXa/OwwOm3E7bdKP2Vd2RIb2S3WA1yrW5TiE2FaVZLyVX+
H0x2Gquzu8v/jUbe3QT/AQHVEfE=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlP1rz1EUx+++4/v1mX2sUWLUxtRiWBkbZvPM2A9YMpZsJEYh8xRWHtKQ
8YM85CclJVHCL0pIyt/g+Zl52szmmeH17pwfbuf1ed/zOffec869Q1ZsqF6f
CCHsY6QzHkYhjMO+SYbwG97J5NU4hCpsBfp0OWeEcAB7A70XthgpH9ubMQHu
h73IXAs2Dd8C13MTNifOwv4j/hy4MBXCL3gH2hX+u8Q4DCf4ty9za+AWtC3Y
KfhvxL7Gfyy2BP0PvBe+AA9K2Z7PwjlwJf4FKTtXJnpP9LnYcvSh2Fb0SfpG
74b3wzfhv5Gd8Rb8yP9Ng3djdzHOwR/R58G18FZGLfwZbQO8GP4E3/Y8FLGH
RngJ3IG+Da6D45TlWWc/g9bsPoqj/TTD19B+wJvgY/B3uBE+KqZOJfB4OI9Y
M4OtpT1OhbM9t9v5Po3PV3g1fDC2PCqfmfh8Q2/g+xB6E3ZGsH+KmatSb1CL
gwmL3+w5UC5W4//GczgrtrqMU9zYclsOV8KvvF6TPYd7GA06V6b1zQPm37p/
RWzzqula1dTPojVrfW/LFIO5Gs/zAmw1Y6XnR7k66flR3/ZMWb3mo9ej/4ws
zuCU5UH5PIG+z2vX4edQbqehrfO12n2fFXCV51N5m6c+ZK0y5Qgegy0L5jfa
WVp30lh1L+V7IlycsB5WblVD7VV7bvdzac9LiamLOj1Y/XqkrPfqtDftEX1W
wu7LbHgYto3/J8MR/F7nZX4R/u8iu8cLY/NR3pbBH7QHuCa2ftC9mx/bWtrz
76T14Wb0U+6vNbM9n9KP6+5Q0wyv6V2+j/hdfhbZnetgfoT3fyfaKLge7orM
Zwg8EG276/LRe9FH50bLjy2nLyPrPeW8DK2IsRz+grbCe2YVtsl1xd8d25x8
hsGF8HO4NWnvXid2OPooj18Aj4RfwHf8XdKb9iSy96y/96p6+rx6gLNF8H3m
czy+YuZ6TMXRXVDNi9EeR3auXv7OxHASvux5073L8jezizhP8cnje4DXUTXt
4++V3q7rsdVadcxSXTLtjb4X2VqKn66+9Rppn4P9jMrDU89/O/Ndfhb9q94u
VU8m7ezaQxvz/wEKdcG9
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJw1lelTzlEUx3+elqcnzw0Za6GUqSSNZTAoe5aasZca+9gHDdllLIOUmLEv
LxjGS8Y6wzD24W+wLyFrhZBKxufMOV58pm/fc+/93XvOufeJn1s4abnP87xc
CIM3Ac9Lw+jiPK8rJEAFXg+8WHRnp7HxsAjvF7EJ6InwCB2BlwCJUBv0vCj8
HHQ2jICPjMnE64XuDZnwAa8Zngch4PCe4VWGe967cI0F8Z7ihZmWeDjaDxfg
PPgiPW8vsYvoKr6djE6Ss8ALxsf7PS8O0qEc7yzjLsNGdAxeMqT4dQ8+CIUo
Ys+Zewm9Ad0Y0DlXIBW6w3e82cTSnOZiMTqadRKhm1/3tQfvPrEH8BA+cK73
8B1SJV94t2GXFIPxPZiX5tczOttDBDoAuTAV8mAUsU/EbqFL0H8Dus4deB3Q
tTuiY5zWbwpMtjVGWj1CLG+yr958s48gGvpBX2JvpUaRmre7ePecnucGXIeb
tnf5fgf0WPQ46Aqv8GotR+sl31AMbaENtIc4q9ERdBH6N/oY+rjTs5XhlcJO
aCJ2De+qfb/EvOGyX3QdOQ2T3MFpvFNwxuos9ZPeLURL4y+En3jVzKmCQcQG
4f1B/4UmcKwzy6e1HmXxSuZkoUfDEBiA1x/6WK5k76vQ9ehY5neCArx8mC59
QuwLsSfQHN1aekbyR982QH1Q71NA9hLU/tuELpYcQgOxg3gH4JB9S3J2zmlf
N7Oek3uRAYOd3rsMvPeMawrquo/RkfZdOfvA/+PtjKVSV9ht911ydRi9UvJs
9Tpq8TIot/6Xd2GI9c479FD0MDgJJ5zWZYOdQ+rfzmnfxOO9xJslb4zlaDZ6
DuyA7fAVL196Ad3C7sBnvFboaOjm9D69tncrye6o1HAtep3TPoyyOyD3R9Zp
CY3UuyFcayXfD6Vu89CT0FVSD/6P9GveAvbG/YCfQX1z4mz/1eiaoN7RpXjL
IMv2+cRyLnPq4HdQx8fbXfmK/iagC/Bmwgw77w+8OT69P5thC4yxuso7mo3O
cTpXcrQSvRrWOH3be9q7K+9viuVyGroQvcLp+Bq8PNkzernTmNwluVPVFtuK
t83p3xpbQ2qTZb0jPSb7Gmt7nou3AOZDOt4SmS+9HdA3Wd7mnk7f0Fo7o4xL
dlq/Cvtdkj3vh31O+7/I+vAfK3vbaA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlElsTlEUx1+/j3483q2pqtRQ1FBzImJIJBrRSBtaBK0hVXQlLWFBCBFT
BEGpMRKxMC0sDAvjwhCCRlRSRLQlQRtBY0prit8/5y5Ozu+dd+69557hZpZW
zCqPBUGwFYkjb/hYhH6H/oMUwS3oIWEQtMdhmwuCNYkgWIx9C3oHsgwexf8i
eB7cE04gB1hXHwVBGfZmuIy1PbA/hyfClehZ+B9Dv0BeIpOxd4rb/lHczhXr
zKf8nwufi9karT2ETsXnIXoka+Nxi1+XqYlZPPpXyPo58BJ0F/xvax3+8/mu
hSfAV2LmcxV9C5kNX0OfQorhZPbcC+fD59E/udsldMR+WchvuELxh7YugrvD
j+DRcAnSAPfGVsC5BeyTk7C1inmlbM5qIB/lSrGNxZYOz8dnET4n+U4llpHY
OiPX8enkLL4EMsX7K5/j4TT4MTzGWb6qkLrIfNshOdgXIHXYe4VmU62nYrvg
83wavZjvenRGaD3Riqx0li/l7V7M7qXc9sWe5Cw/Dv8mn8NP6Dx8bqK7qF7I
ZTgFn47IWfgbsU3CZwb+09D/+L7o89wVuQv3d1bHO3A/uFto52fB7ZFG2dWH
8AfFA4eh3aOZ/b77PbV/a2QxKM42+L+H+6jfkYPwa/7XRNavydiewPvhtqH1
j+4+E93O9/wr7Y9egL0afSNm983wvaF6pTvbX7V4G1mN5Psxsn5WzzRG1j+q
XVNk+yueBj9TJey/NmE1VY1y4R/wQvizchTa3GU76xPF0RN+4eNP9jk5A9+P
LIfKbQ98/kY2D6pLnp9rzXct9n3+7pnIF3ios7qoFmnws8jmpA22Dr6mDyKr
r2b3ITwA/gWvcuajGL5iHwQn0Xu7nb0JeivGwdnYU7AfhSuIIwZvdOavWV/n
7L6KZzk83feq+rnYWf+pH4aG9q5UYhvsz9oAb9cd4BHYCn0P6K1QnOrzFdjy
/fyq/6t9HnTH436t3sMW/2aWwHN9H6r3Bvr7lmOb7Xuyj38n1ecTEzaPmuHN
/M/186i3dKf628/7MKQU/00Jy4nDXuXsXuIj8HCfq8POaqReWOpsrnXGFmfx
6L1aDZ/w++vuu/zbovdcsWhml3NWObIEXp+wvCn/e/D9DyR9sm4=
            "]], 
           Polygon[CompressedData["
1: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
yOaRFGuy9r+wjy2l
            "]], 
           Polygon[CompressedData["
1:eJwtlGdIUFEUx1+OnprvabmtNC0tbVgUgRpBEQ2KUiPJdlZ+qbRhoDQoAqWt
ppQN6lM2oKABDSpo0N6hTc2mlpVlSrt+h3s+/OD/zjn3vHvvOffEZOdl5HpY
lpUJ3lDmWlYpVIDraVkJfpa1CP2DoO7oxegl0A3dgC0TnQVTYCO0Y01PfJvQ
myEZqokLx5aCToVo9DtsE9GTXJOjM7ZabKPQo2EMTLAtazwM0hyTbfMPL/7h
CRbEs64YWxH0RQdjW4cuhAJYoXuSuGnoqfqvOvLNQPeHJBgAN7GF4huB9mVN
L3Q+/1wG612Ttx+2EHwb0EPhMWsisE0nZoZt7q0ctkEAcYn45qCzYR58Jj4G
W1eoR7+B1zAL30zX7KkLvhdqq9Q8fbCtJv8a25wzCNtOfLtgN2yHjtgCwdG6
bdcayh4kzw6pE+uzIFLvW+5DauVBXB72FbASvjqW9QVaYD9xHbT2P9E90EvR
+RACwRAGF/F1wheBPoPuiI6U+5YzwVlsY/X/sg8v/FuwHYRDcIt/hRN3En0K
LkOwn8kd6hrfJWxB2BL0LmPRiejecgaptZwZ23F8nqqPodvI/R1+QKzmkdxx
6HjpZ92/5BZ/d6219JPc7x7YC/9Y/xcczSv/e8j3A8ecpwRbNTpJ+0TWFHHW
YniO/RnUQgVxvsQ0OqbvwtAf0E1653ex3YMD4C/9gK1c17xEv4IGuKE9K3ne
w1Wtl6y5Ln64AlVaQ/FfgxrH7NMbWym+R+in8MQx+5R/+eBrD2XoHVCpcXLf
zegczlQAhbaJkzx38N+D+5BL3ELIg1/aNwFwQut7UmuUwfp0mA1vsXnpu10O
q7Q3ZabIHBgIg6FGZ0od/9mqe5U7qocoP5MnXXK7Zs7IG5a3vNY2b0fmRQo6
2Tbnlhw26xZgn++avf/Umeftmj1F6dyypTdk3uj8kBqE6JuQc8bJzCTvYtu8
+bmQo3cm/Sr1OII+DPvAT+9Felb68zf8geGsH2abN3YBXxo6WrW8M+nZGNfU
sETfz23H1MDHNfuM1jntqzO7Ef0RmtQ2hJypMBKOepjelr56gL4P1/Vs0u/i
/4av1THvqRk+O2ZWVOk55F22oVvhk846mQfn0efgNATq/JMZN07mPKTp3JO5
LLN/rGt8DvhDoM4UWSuzukX2ImfWt/MfWwjRwQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlI1VEQh/90gxs3uCcqytICCYIKS1PLrdzLNXPJNDGlUIvUq6lJWrSC
FaQ9lIEGURkRKFQkpfSkBRG2gA8GUhA9BBFEC0ER1DfMPIzn+//OOHfOzJwT
uS9U0jzH87yzmA87w5/DrCdYtwQ8L5P1Z9Dz0uB8+Dt83e95LfiMsI5jR+Ep
1hR8MvD5Yf4F8L+gxsjCfsFb0fPgP3CqxfwL74A74bnO88rhfrgN3gVfkZyc
/q7E+YL/WywRTmT/IxyCC+BZOAlOgvvwbyC3AdZMvsvQn7G/G+5Gn0YvhI+g
+4ifAG+AXwbVvxSejz6L33H8q9Bq0PZiC9AjsTp4G/pd/icMjoGH4WXwRjge
C4cfocXBy+FReDO8Hp6ymuTCX+EZLAVODmh9pFbfgtoLqe1neBMcBb+A32NN
cB5aHPm0WB2i4GbT07FieB5aBlwCB+BhztXEuW75tf5Sh1SnNemQ/judA5mH
h/is5fsA37nsF2En5exoO+FTcA4c7bQX+WgfgpqD8Ds42c4lObYRs511BH0J
azT6CtYI7LHVSuo2Dt/DllptH1idpbYyb+nwJ7QOfncAniHP2ID2vRd+Y/OQ
aPEPoQ/6tSZShwn271h8yUFmIBoeQlvntLaj+K+C6+Ht7GdjtfBCtCy4Gg7C
Q/gdJH6/X+f2Mnqj017LXN0k5kU7+xg+Jeg9fJc67anMww18Xtlsy9wWWW3z
8SmWHvG/T9H70C5hKy0HmcnFTnNrxec+Pkl8N1i/4m1WJf8EO0tOQOdB5nyS
3yyFz8MN1mf5rUbWNZaz5C69Ps1a6PQuSB3CnO71YuHwpF/jVFjO4p9rsyQz
kwdP4NNFzNdWh3Po9ei11sdKtAp7B1qd3iOZjSfkuZ/vQXhPQH9TahGBNm0z
Jnd/tZ1dztjN2u7p/Y+0GZBZiLX7OGb3VXTZv233Qvpe6dO3Tu7PVazT075m
S289nb9Oy0dylvdQ3rE0mwe517+Jf4y1w9N71cXeNcu/LKAxn/uVpac1Tnsh
NSmHK1hDns7lBetLj51bzl9tb6a8kyGnsSSm3AW54zKfi5y+13IWea/i7bzy
jtRZPvK+ydsjZ0+z2NLXKqd3tA49xqd74iPv+3/JIbER
            "]], 
           Polygon[CompressedData["
1:eJxNl3m0V1MUx29uXJ7cmyGJRIRmDUqoDKkMiWggz1CKnuo1iV7GtczJFFaZ
JYmKiqeoNJBSRDMykyHzPE/fz9rft5Y/vuu3zzn77HPPPnt/9/7V7z/s1PJt
kiSpWS1Jquu3vEiSocJwYYQwSLhAWJslyTphk3CZ9O5Ok+QizW/Jk6SN5LbC
53kA+VDhS8mnlyRJH2G99m0QyrRnnNZuSuOc5sJ5kgcILSU3EfpJ7i80lbxU
ey7WeYM0bqzxbsLZks8Rdpd8jnCb5FuFsyX3Fc4QSoWzhNOFPsILsvOiUEju
It2uws6Sz/QedG/R3HLpvCRcqPFgoT72NN9X2E/yM1obmsQ38q0NsCG5VDio
CJ/gm0nCyCL2sBedBvYpvsUn+AZ5vNYuTWKOO3N3fIJvhgh3Sr5E6yt09kb5
dIPwkOTJwh3CIK11kM7XXmsoeUgSOtyRux4n7CL5Mc2Va+0UjbfR+B6NL9D4
AI1f097vhI6SjxR+kFyp9ZFJvM+e0q/lN8D3tYuYG+Dvre153mYP/dYp4sxz
/V58S80i3mBn6+GvUcJGx9a9wuAkYorY2tXxgM9nZnHGeY6PWrbP3UZovXNJ
xOt4x9f5Rbw5b/+6sMYxjK/RQfd1nXEgbyeszQPI+BBf4hN8gw66xNIVkscm
YfcVzfXWuI+wWvJEYkdrvTR+OQ8go4MusbXMeUCMTXE8tdf6G3m8IW/JG/AW
b2Tx9hM1Hi39i4uILWJsTBE5Rq61E77KQ2ei4w/d7YQxkiuEHZzb+Ib7E3uP
y/6wJHTQ7ShMkHyHcJTz6zrHX8+SyKtrNL7W+bZY+xcJp0juIRwjHC0cK3QW
TrD+1cKVQifrsNZFeFZ752WRg+TiAGF/co03ts5V/9vLGZzVU+hVxN65WeQ8
Nk61Dmu9hRlaG56Efx6Vfx4TWks+RJieB78syWLfacJzkkdJfzg65LLjsY7G
M/PgBN4NnhxGbjoHebdvhOclj06CD1ZoPE1olcaZnI197sxdb07jbHzYw99+
GPY1XwaHFoG2Qjuvzcki1lnHzzsJNZxTNZ2f5AY5Q+50F04qIu7gtpM9hwyf
LBQWCEdorr1wVxZ34i7fCn8K3WXrJOH3PN6kHznot8Jn16fB0fjyedvEVgdj
dBo+YW173ieNN5lhni1zXJb7vaYLWRG6yMQosckcMUfsEZPE5g1aGyhbu2v8
hHkR7uuchl+IlcskX55GzHQVBsOPwvGOVXyJz4lZ7kfsjZGNV7LAqizu3N++
xjY1BJ8PFBqkEbMDHPfY4gzOWub6Rc0rc9zyLXAIXELckhvkCLk113zLHGtn
KucuT+IMzqJOldoPt/6Pc+FauJhvXSmc63fiXW9PI6c7Oi/4Bs6mNt6YhQ/x
3ZPCKqFZGjFP7INJ2PTauCz2oDvLqAfXJrH2qcafCFuFL4SbslhD5+k8gLyP
MDcPIO8rPCu5S0nEBjWX2nu79t8mvKm1t4SPhJHwvfCB5AlZ6LC2WVhgPoez
n5M8Potv4NxK4eYs5pCfyYO7iE1ihFjZbP6lpk7w3eF0eHyl77bFfQ535Bve
Fz70tz3sukxe5kVwLtw7VtixiHgitppyZ42XaM9i4T7N3y884Pil/izN4w7c
hRrduiR8hK/qC3un8e7U2qe4YxZ7sFllazk1J48cJy/hJOYWOldZ60kdTkJn
qsaP5JFz0+2np/1O8/CX6yM+XmCf4/u3hXeEZXn0OvQ8L3j8os9cYcCN6LAG
J3MmZ5H72JwPj/osfhfaR9yrte7ayrwPjyK3dN4w16yIHore6WDzZ5n7g9nm
PGoZ/AEXwvGtXYfgZmzRz5CD2GxhO62st6dzDV9X2t8N3T8s8nfyLvQxvGnV
Hfh2dH8VfiHXtDYrC06FW8t03iNZnNXcd+LM37wHXb7/gCL6SHrNhkX4nF6B
mOUtphCD9im+ne16QY+ErZ+Fn2zzN8ud0vimX13DqGX0Ht/n0VO0M18/mMUe
bNFT/mx7Xc2HP0r+WBiVRo6SD/Sb07LIEXJlUx49LDlCrqzJo6+i71rnPMB3
W5xr7CHXy5Owtc66G2wH248K7zkP19vORp9FLLdIo8chpj/T+Og0cuwB58j9
5i3WnnJ+wUlz8ujJNjmv6dUez6OO0zvMsI/xDz3YFPsfmf9Ak/PgR7hydh72
ALbhwFm2Qy9CzwjPzPDcRHMP/j82jTei14NTt/rNOpTEt+MzfPWp1+CmL60D
Z8Fd9J6v5tHDcMYkc/u7efT6xBCxdGARMUZsNSoi9+qaa4jt9q4p1JIjzTv0
JNRR+jr+U1Qr4l14r3+05+885ljj3anRNdy7dBNOdE9CPtJz0ntWyB/zpXe4
6zU1lf6Hnpfel/+gb2p9L40ba9wojX5qb42bpDHHGuB/Xd0i1uA4uI6ayD3g
4H1cN+HmbSVXF1ZLfi2L/ucP3+Ef3yMpIuammU/opegL+a+Gzslp9Ezs5c78
12Kuyhd/5WGjmnua7VwnSoo4k/8W9AfbmmfwMb6l//1Xe7ul8Z9hahZ2mJvq
PLikiL4fP1UUwRtwTZsi+khsXuF+KLX/r3X/Qa9e6TrCWfTcFbaFr9/Kwod1
7bMq39UroufAh2N9LrqbzVl8Q1tzcUNzF3WXvhe51P0hc40dd/TF9JONvAdd
5vYv4j91A8cpPdwQ9589SuJ/BT0Yvddx/lb6pHr+VmIM7ufO3XwHanETx85/
pog5XA==
            "]], 
           Polygon[CompressedData["
1:eJwtlFlsTVEUhk9czeWKcySmGiJKSIydS+eqDnpbU0tNIaYOSatFW6JI8GIK
+qAlSKTVGkIbbdTshRJFqbGoISUh8WAmMYVv2evhy/3vv/ZZe+21B7/FhekF
nSzLygQfSPZYVpbLsvwcyxoCQ+GLbVlJeIkwAaIYkwbL0cVQBK8Z8xtS0XHE
/qIt/TYeLxrvK/obtMAsvNkQAOOJPcNrhwh0JN5ztC/fL5R58erdltUAb/Hf
wDvNK7X8QKegY9A/0b+ggrHl8EFj1egM8qVDJmzBS9fxXnSsx9T/B3oSn4+X
gNcL3RsGQRneDLzr5Gp2m1oj8Fr55h7ch1twU9foT2ycrAeipC8yj67NRb71
6HVQApMZY+N1hx6wQOdfJD2AOej9eEvQh5i7ym3GS50n0Nno7ehtsFnXdhi/
BhphGd4L5g1jXKhj9jlbeo9eCXvRe2A3zPSYvr2HT9of6e0rdIfsMbpQ9/yz
bdYka0vTvc8nXx4UQrnmi9R9lR49gjbN/VFzpOoeTNK65NwNg+HQBdzgkf2T
M8iYG3zTrP0eixeG14g+BWdgAF4IXgrkovMhDyLIcV7jocQuoi9BuGN6IfPn
6LgiqJBziveAHj7UfZf9b4N9LrM35/i+v84nuS/IevA34k3Dm4yeApfx5+LN
gem6Di/+BvRUj/kmDXaSe4fbrEfyBhNb6pi9n4s+gJel+yb9zfSYWou15wWw
QmuX2Dz9phTvKXnb3aamTVIHsSb+XwWvx5yTUcRGwxiow6+FJH0X5Oyk6f4H
oIMhRO/UTJgNW4llMCYJnSg91V78XyMUuExuf8fkkHgypGhN0rMczXOFuVvh
LlyhHxl4E4lfRV+DaMZFQSys0nsk56QrdHPM+Hi8IOgn7xoMhga+rYeTEEjM
V706qIUAvL4uE8/W9yJD68qFSrlL0g9Zi54/uaNyJkqkFljtmHsudU0h1hnt
o3sod1niaxyzL1JrKd5aeWN0jUFa1zHmOg4nbHOe5XzKvRgBIx1Tv9R6hPhR
24z/Dgl4B3X/ZB+lRzEQJ7VpTXIm07VH0t8meAKP5U7o+9au/eiDDoQgnUvi
4ejb6Du2eQfLmGeX3A23iUmeSr2j8hZWoQ/Z5tdf3/5qdI1t+iN1nefbW9AC
L23zbnn13HTo/T4NZ2Gg3uN/R0HTDw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtMj2EYxh+9//zTxvuylEMsxXwwYzYzNsMXm2HGfHTM+VTkGEmlA4mc
1ifJodFsNsyhDZswpFhkJuawFNaoTVKWzO/efX+491zv9Vzv89yn5x6RnLog
JcI5l4t52Lpo554CnvvOZYD7hJwbHTi3BxwFHgXeCy5GOyjKuVTwW/TN6Huz
H8ZGotkA/wK+Bn4L+Cv4O7gfe53gXXCR4F/gPpyTzvdfcBzcfnRl4MVw0/hO
4swC8EasHr6B/R7sB3gr3HqsDlztq2/icxL/bQY3wX+D78UdB/E5DS4bG4pm
ZqDxVqN5iMZFqf6H+An+Bx4S6PkSyyv4qXwn8m8+3BTwCHAeOA59AJ4At5vv
HvSDwV1h53I4uoU1Fs0JcBJrJhof/XTL1Uv0rzk/FzwMfjb8JvAb+Eb4dv6v
AT8CF2KnLT8plv9SuHJP69gW1pwXgiO5a775LH7KmQ3oTlm8+Syd6FfA34TP
gM8Bx6OfxX8FfJfCL4Jbid0CZ8Ilg2+A9/jqg5zZBF5o9ZL8xLAWcX5f7sk2
n+Wc5dh5cImvvSCabk9z0o9/xnLGNfbuwa2C+4x/WWhaWW/AV8Gvhh8Y0jsm
or8Ffx9+DXxsSPcmwd+G74DfCb8MOwsuhsvHzoCXWFwS+0W4Sl97cofpz4FP
whVZTy6xuOT8Drgvnvb2T/BH1gNOc/TJ036T+t1l77f1vOibsRZf35nUtA68
1vrwGfiBp3V57KkJlr6XOyW232j+hJWXtxMONEbxeanFeAJNhfWD9MUly5vk
86rdIbnaZ304PtAekJpe8LVGEvsxX9+d9Get9aHEJe9JfH4CX+XrvVKjRvYv
Wy2kRhVWR6ndfr5PohkdpW9QemxOoP0mPT83UF+lN45bj10Hl4ND7LWBt0fr
LJI5kxBoDSVGiVX6NBNcyeqz993mQwy41f4dEOjc2Bat58kca2cdh08lTueM
vF95+x98zXcc1uXrPJHatYKvWN9KL8isOA5OYM1CcxQcD45g7zD4naez8ZA8
OfjhIdXIDEq3WfGeM6NNI9oMm7eJNkNkvtWj8eCOOJ2VtVie0xrMs1k0hvPv
WE4kd85il3hlVosvZXJXoD0p70J8FX/GmP8S72T2u33NYZr1icy3GfD9Q5o3
eav/ARvs2Yo=
            "]], 
           Polygon[CompressedData["
1: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
ZvE=
            "]], 
           Polygon[CompressedData["
1:eJxNlWdsjlEUxx8d3qdvos9jRFtqtFbFjI/ETAixR3yyN7WVoq29gtjji6q9
QmLTILFCS2u1RitqtI0RKqm9/U7OSfjwy/vPOeeee895zr1v3Igp/SaHOI4z
EMJhm+c4z0Md5xk8gklBxynH9hI9DR3uOk5FyMR2FmZh+4TvHPpFgLWwFr0T
21B8G00PQ29Cb4YOvuNUCXOcyhAJ8/DNhDLiHHyhEAZfiY3CvwBfLHvWcnW/
j8SF468IAegBdYirDTVhITGj4SJxB8hxEA5BClzAdh5OwghiurC2M3SDWFt7
ibiLcBWyiRuHLQneoX9h++PpOUv5rcCaEHiMbwoxr6RX8AZKsU3Ftgq9Egaj
M7CtRg8xvRi9FJaZbYecGfZbnJz5FHokvlR0GqyA5TAI2/ZQzS2+0+hR2Oah
59t+4l+IXuTpXt/5Pt8gwtU+yjdsRC0R1JBGfDT2GKgrPYV4cPGl4GtgOjWo
axLMHwf1LIf46st3+W9NQ8hmnyy4CXfZd0JQ9Q3IgXvYEoM6fwXoyeh09Hbz
X8N2HfJgIr492HbDPuuPfEvRe2G/9UJ6JroI/RTOWH/GwmX0EXxH4RicgOOe
zs0lfKfQJfSpGMoCOkvib0ktLaAV+NQ4n/gxtkZm7LCneeUOrIH1sMvmX+op
tDnJQO+A857enWRsn/FdQM9Gf0H/gO9m22R5huPbgt4KuTaf47HdQt+2/dbB
BumPxT9B/0LPRRehn3r6+xtbpHxriHN1XzlDkNoqQSQ0g6a+1u3ZXe1otUex
pj40sLspd7SJ5MLXmpilQdW90X2gLyzDFh+muj8MkFySG2bYHauC/kLPPwf0
PpXIu+Dqu+FZz+UMnXytLQxbKPwkbo7ksDVy98rQ7z3N/VZ6iv7p6T1+Q/7X
AZ3NO/i+otuRs62dsx452/va51z8OZBl70GerZE5zkffhzb+v7qlRsmz3PJI
nc2poYWr83fF5lnm+oy8c/irQ4yv30rqeGD3Qua9QGZH9pQ7hO0DZ61ArhBX
10RDDV+/qXxnsYt/utUt/a3qa2+T7K2thi4hX7Gnb1mh3bt8u6OJdoaH8rbL
/4Kn8QX2vyBvZlfoDrWocRG2nqaXoBPYv7Gr73Psf/5evr5d6fL+QKa9Ucn2
XyJveoSvcyj/C++lXii3M5/29H6OsXss/fsLRQjwQQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFtoj2Ecxx+85d8/5V2UcEPMjOLOLjBlF3McxjAstjSxGWWIOW9ynDnN
MNvY+bzhggtREi4UKSkXpFxQUuJKTp9vv9/F0/N5v+9z+B2fiUU7csuGhhCq
GMMY15IhbIpC2BOH0Amfh4ekhDCduYH/WYkQShh1fI9AP8Oaa+iz0LrgTrgU
7oBrWPOPc87DmfBauAaeC6+Gq5nPMf7Ch5jb2HtMGmtmMx9CPwunw2XwR8YB
uBltPZwKn0za+jlwHtoFxkL4Eto3eDd8Cx6Lrd3wXXiA0cddFdjZB7egT+H/
e9bv8fU9jCtwEn0QboVT4QLWTIFPJS0m0xilaJ/dh1b0r3A5fBMu9vWn4c1u
s/ZWwQvgC3AhPNl9+QQfhFuUBzjN98oexXw8NtT43ototR4TrW/XufAPtDa4
Ev4O18FrFV94u+xlPIktR4r/L7je419ITG6gl/D9GL1bd8DDlWu+F3lsl7Cu
nvWZCcup4n+E/8cY2fB89BOeC9mpXLeyfgP6G/RdfDeiX4QrPKdvPW5Nij1j
jfxSDfiZilU2+3MV29hqdSP8AH7nuVbM6zyGykVGwupT9nzwuwrgWv4tlw1o
173mH3qtqj6Pev2rhn/Dq9jTxDmLmauTlvedihtcBO/zcwrhvapD91d+d3kf
/UG/GlmPKKZX0depJmPzVznqjy2Px+H7cJb3nfohzXlmZEOsGmzTHXAzc1HC
9v5kby/nNMKj1L+MLvh20npqKrw1Nl/UXyWx7e3hnPKE9YHs3B9ZrFboO7ZZ
8e+GL3sMO2LzJR9u93oTD8bWX7JrAvfncW5zsLyf1r5gNbpSeYCXRVZXynuf
15pinsO81OOv3OW4rtgVq1+DvS/Kker2mfuumOxES+fuTvTDcENkMXnNmlOy
N1j+Zvj7cCdpb5ris501/f4+TOL/lsjsV81luy/ySb1bB8+LLCbyo569DXAZ
/BQe4/HX+fVeJ4/8fL0tafy/EVkfjoQrOXcg2HvV5n19j/Xb0HvR9zKPdr+U
U/ml/SloX7y/1EfyX3GQ793+po1LMdta0PPRM7z3dbfeB9n8wt8Enfkytll3
vIrtfdAb8hz+Dydv1y4=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJxNlFlsTWEQxw8prhsP5ybEmliLVvBkSSiCpJSWVFttaao3SildYm1pqwu6
r7pT1dudVqmkxBYiQeJJgpDYQmIJYnux+02+eejDL/33P+fOme+bOTPRnRic
MNCyrDAYJH9ty/LzsqxSp2WFoyNglMuyRsJ5vE5io9Ee9EH0S+Kv4DWMwa/C
O01sLHocJDssKwkyoJ3YcDw3z8ZALs95421Gn0LvQT9BP4Vn0IyX5mVyv4G3
EAoL8Uqcptb1tqmrA28GuWfCLBjhMu86pzGpX+qrRddAJXQSm4rXim6BJujC
m4A3HibLOdUTPQm8oRmvG2+a6h65C86XBr16R1JDFv9nQxiEQgOxXcTeUXMC
+KCL8JLQyRAP22EH+GrMSZ6hMAyq9W5jbXNneVI/3hb0XtiErsPbh94P+VIj
3mypR5+TWAy6nlgKOtU2dyS98eEdvi5zj9vw47QmqbNQeyo1xHOW/ZDiMDVI
Dzfw3EaIggoohyadkUrVB9DP0S9sMzdDyDfYZc5Ypf3IxI+VWmGRzmE6Xhoc
0t4X45XDCnQO3hE4CvehAe+M08yczN4qCICbchZiIapvwC25a7zj0jN0MNpf
eyU9u62/kfgd9F0Iwg+EKIc5j5zzvW16epLnduN9UC29foB+CI+0/gzbnNFP
Z7gCVnqZ+vOhABaR2w88Mt/EVqO7VFfxfDf6LBRBIZTpXZToHMSht0I01BKr
x6uTu4G1eMec5jf+6Cy8bNvcY6ltcpRrTWXoezKr6BN4EdQRCX1SJ14+ZMu3
Q2w+/jxY6jB5pS45WwA6CAI1306YrvMk30AifIOv8B0OE2vVM4ajq9E9MqO6
D9KlZsiUmO6NvehUSIFPuiOWo5fBAp2XKtvMoUd3ivz2n5wX3Y43gBkcCG14
IXjrYI3e1W+8X/BH7kifb9ReS18f22ZvfbRN7xt1l0ktf6EY3eY077NcZu9N
wVsMS/TbkfdL7g5iO7jDnXAF/zJc029bevkT/cM2NZVo3ha5G2iFiH53JroG
3Yu+AHPJOcdhvm3pQYHTzFiTbXKE63xdR+ei88Ctu0JyB2ovIzVvm85TpewP
dAdc1B66ec9u2OMwe0j2lOyGaDkLfIHP2vscnSE551XbvD9Gd1mfxmUmJPcl
2+xsT78dPB3+A7+R7JQ=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lElIlVEUx6/6Hny9WvSJDYsGmhYNoAURFEQQDbRq2ERFUFAQRdIiiCAa
EAqjRS6sKEpbRJbmgD6nfE+f+nLIKWctTQhLQqHSjSX1O5zT4nB/3/873/3u
Pfd/z6rT6YcvJjrnMogkIhZybjTg3B3fuWb4LVqB51wT/Av9Ofo04wzxAo4w
RshZHXSukudExmLyP5C/AM5CG4TXw7NwFzwfvg/Xw5/5PhO+RATQO9HWMK4l
XqFFmWsFPA4nJTuXCnd7ugZZz1P0Br4Zg+/ZmmVtOfA7+Bv8CK4g5uA2tClf
5/kEx+Cg/fcHnAaPwBH+0ci+Whl7eF6M3sf7WriPeS7bvjagu2Rds9RgAr0f
fTn8xVdN6lPGPKU8/+Hb97x/zHM1eh5jIfosegt6MfwbboWriHo41dd6yD++
Ww1DcCvcBy+Dx+ABcgeJDPgU0Slnw/sTcDuczb/OyPdwVM6WaICPozXCX+GD
cNzqdgjeSuTDpWg74NfGUtsJ+AjaLqIADtucjfAWtO3EG9O3WU4ZvNPmFK62
PR5DK4dLqEkm66yUWqAfQC8JKO+1s5J6zgtqDWW/V80D4qUbdkb98E24LqR1
uQVfMH+2o523+kStzjH4qPgELoR323/D/OuBp3oRz/vR08WLzNMR0nWKvgft
HNFhNb/r6V6k5met/jUhPS/xxjRatc0j6xkm4uR3kN9LboVTT4c9vUft5C5l
rEFPCapvxD/imYjdHVlPvd3f62gevtxsfu4llsD94hN4HTwpdWOemNM75aPV
OvWW3PefzPOEnCHGcqe+f+mpnou+kLyoUx90k7+I5x6bX+aUuVei1Tn1qPSW
EXKvyd03z4vPJxmrnPpmKqD7Gmccsvs1Z96Qc9n331PkhAMWTs9KvFkEx6U3
+Lr3Ub5rsZyYrVPu8qD1A1lbAs9xu3dyN7us/nIOdealK77WUPJrPT0D2e8A
epPda+ktwWTtIdJbcjzd723ebwpqTaQP5no6v/RJ6RXS32Z87ZnSG9vsDsp9
fCj9RPqv071ITTaSk8B/Phr/9fVcZM5njCfNh+K3FPNMkae9SHpInvUT8UC+
rx5rIKfJ0z4gtc/29W5Kf0jztQeKf4Z93Vcp+VmM/wCaDgSx
            "]], 
           Polygon[CompressedData["
1:eJw1mHWQllUUxl/0/fSdnTGu6AyoM3bNYHd3I3YHitjd3YVFCEoIBi3ICiy7
qxvALtKItEiIIGECKiKoqM9vzrN/PPOde++555x776n3263dPRfdvVmWZds2
y7Jcv12LLKvU748aXJay7HHhC9G1mntXa1M1Litl2ViNP9P4HY1Xen2Qxqdp
PErjSuEM0Z0110l4QvSTwt3CXcI9wr0pdKDrJ+FK0UuEb4RlwnfCC8IirS0U
nhM9X2gp/S2E7YUHNL5feFh4JIUNA4W3U9gGPUDolmLuTdFvCDeLvkXoWMQc
9K3CyUJFHmfgLNiEbT8LV5sH3tuE232GLWXHFqU420ThP/H+K4xPcUfc1a8a
X6rxOcII0SOF87AJ24TLRV8hfCq6WpgseoowQ/hSmCXMFroUcafc5VPCWGGM
MFJzFUXoQwZ7eatRnv9e9A/Cb+iQ7mphrejKInhY211n2KDfP4W/hX+EV3kH
8S4TXhH9rd+It1nu+5iltYos7rJW4xqhTqhPoWON8Kt190O++NcLH4p+V+gl
9BHeE+YIO/htZ6bADJ+dNe4KH8Vvmu6sUbKqsrhL7gVfe1p4JsUbfC5M8Ntw
F9zVqhR3gp0btH9jHveIDGSVa3yM9XL3c4V5widaLy/CJmwbXsQcNDazNqyI
N5vhN+QtpxFH2KG18cJq38t0YV/t+1w6qzT/sTC0CJuxfbTvkXduECYJWSl8
jPOsFFbApz1jvHeIMM7nrvcZx1gGMvHNuix0NXi+wn4AH3dRn8U9NVova/gK
uppL//gsdP6Oj+fhU7zvojLFqvAldyT8q7ndxD8hi/n1Hu8qrEthM3KmCtOE
vzS3n9YaxT+uCP4/uDvR04uYaxQ2puD9x76Knv+EzbbLsmbCTPHM8h50o3O9
eeDFFmyFZ6LWDyjFXgC9v5CJ3lLYQpgjvrlCSXTuOdYK/7I2r4h59iOTPROL
ePM1jgV8Dt/7UfjJMfm96T1K8cvaz8KepfBl4mt2Hj59tlArukY4U3QHyX6l
iLx1CvFaxBz0qcJj+F4eOZxcTp6cmscca+RmYhcd6LrW8uuEtqJf1vpLwnGi
jzfIjyOyWDucuNJ4knBECltYgweb2PuicGwKGfDAO1k4SvT75Cvxz9T4Jo2v
SXE2bMAW9g7X+tA8ZGATttUL7VL4wQb7waYUtWBKHmfkrF8JzXSPDZIxV+9d
L3l1ReSxpcJiYSet7ygsSJHXljmmiK1fvI4/zi+LNyR3jsvibVnfqxRvxZsh
u7aIHIkOZCKbmjXf46+JE+smBonFxZL5ssYPpqhp1LJHzQNvo30fm3f2eeqt
q6aImolO6h+1mPc+LDlesjhDk6yFxLTjiPr6PO+UQn8vzfUswo6HPIdt1GB4
+wq/i14n9E+Rs8nd76eY+4B49Tpz70lWnyLyfO8UPowvzxGe9T5kL/ZezpFk
63aleIf+1DTZv0LrnVPkJHIT9X+VdS+0fciizm+lta2F7qJHCMPZh98Kw7jz
FDmYuByQIv9Tk6hN1CRqEz45uAibFjtfTi6LWrXA/Qi66S1qstCJbnSiexuh
p+iLiXFqSxZ1/SKNLxQuSdEPXGKeatft9qJvTHFn3N0Noq/3XHvTxEA7z13n
mG3rtXNT9Bj0Fm1SxFR7vwOxRv44y3ythfNTxBIx1doykd3b79bO69VZzLX2
3jbei7+wBs/5PhO9zto8ztp0xk/dm1T4LSqFKttJL9Rdaz2KkIFsfBDZbczT
w36Jr84X/4v2WXSga41wgehRfmdkV6PXv8Ql8VLttVrnAWo7tZSaSo0f5nik
RlLDa9y/4ZP4JjVwNOylqI1TyiLeVov/kxR72ItMZI8tIlZ3KUVf1dv3hQ/h
S5/Z3/A/+qYRzofMsUbfsE8peoTp9uU1vl/uEZ2rfX7W3qG/ySKHkku7u58h
J97vu2cvb8QboBPdxECd/RBf3bsUfQt3wt2QQ8mlzLGGTdh2ZIqcTi4/Wugq
vAUfPWgRPXdTXPRIEW/kjUHC4BT9E/FMz8GYnEpubdC4PEVM9vUe9jJHDE9w
bWWeXDPQMivtf7wZb1fluRrnSnRs9HkHeA97y93HDfYcNLZ9lKIuD9Hv0BQ+
xHtuysO3iBHelLckx3FmeiN6pK7eM5b4z0MW4yE+Q7nBWeFhDR54R+fRj8NL
bfnYe8jph6b4riHX0wPTC/OdcpVwiDA+j5xEbnpd49eEjkIn74WHNWS8IXp5
Hj0+vf5s14tW0rm5epkl8u9JWfR49HrkYHIxe9hLzaO+UV+ohcjokEIv628K
S51PPyxiP3b0KyK3d7JtfYuY486aO/93SdFr0YvRU9FbdbRMZPW1/a9bJrKp
CS1cb+mjQEvXd2ylV6T3pB+kD+SbjW83akx/24DcO1N8p1KH6SPolcg7j3oO
uqEseqqv8xjD0yTjLsu+TyhK8Y3It2JP5zlqPDWWGkwtpoehlyFH7OL+GFv5
5uLba5Ts+0B8d6SondRQvj+pz+RB+n56CWr2POfrXtZFDiD2HzAvuZNvBPZQ
Y7lr7pyehzdv5f6Xu8c2chh2YSP5v879GbWEHpRcQ86p1n0crPFB9jN8lf8A
+C+gKo88T56g96v0fw18Y5E3+K7j2wsaHta6uY+lj+Rb/PQUZ+bs9Ku3WscX
7mfRfWKKb3f6T3rVk6yfOdbgmeb+8MAUPPSlJ3jv/2bazRA=
            "]], 
           Polygon[CompressedData["
1:eJwtlVdsjmEUx1/1ffH6SHi+BDfmhQsrWoIYQexxY8UmiBGzJCQubBJqJSVW
iFGJGKWEblS1qO5q+7WqVEOMxEhLJVb4nZxz8Uv/33nWec/5P0+7LYmdti7K
87yZEISdzvOqAp6XHfK8XejdcB9dQmwhehEshiPQmgUpvuflwVNoFva8XsRq
mV/K7zJYz7xYKCEWYGwDOh7CaAchKGMsBa5zxiDGBsMQOA7H4CS8Z+wRc+ah
P6E/y2+4S6yIWCEUW07PQrrmBJyCD8x7HFLdhvG28JHYE2JniJ2Gs/CNWB6x
RnQDvELHMPcbugj9l/FmQS1UnpxHLAqdjs6ATCglFiTWEnz73gLId5pnK/ve
7ehtsANes28Osb1yJvoheh86zsYriFVCPeRKHsT+wD+n9a4hlgVlNk/mr2as
L+SgMxmLRsfAd+jEmipiTegfkECfLsAtX79nDbGtsMVpnnWW0yr0SvNDqZ0h
NYpmTZDetwA/rPt2JpbFfoVQ5Ov5udavfuj+8BLdl3nNWRMI6x7JxBKZN4Dx
gU79cIT18b7mJPU5j66z3sh5EX5XgYfuafUQL0aF1XfNg9qbe5K7U4+/YJ8a
iMAD5tyBa+IT8YWdPxbGwDi4RSydOU/Qj8Vv6D8B9UG89VV8J/fiKAyDoU73
le8Zjq6GdswrJ/YcXeP0b3tiFcReoGthNIyy82+yNo2xKXYHxMdT0dOceqTO
vLMffQC+wherrfSlwXreFd0FOkLEzuqArkQ/oHbZ4gFijXYHEtAXpWfiIfEw
sd8B/fYVsFzqae+CeGKPfAv6NPtcgau+5vyV2Bd4Z/dX9vmFTpJvk7rCCKf1
SbY3YCT6F/x06nXp6XPGzrHnWV/vrOR52ddafLC7PB09w3ojucret6UHUC/3
DN6a/6UG+1kf52u9k5ifSuwSugn9VHJh7AZsIrYRNjt9G8Uvs9GzYK7dsYyQ
+q8Pe/eGHpazjM9x+m7l2l2Ue1mAzpd7ZWuz7E7J27oUlsFBzj4Ax6E4oDUv
tXdUfJwND60PMj4fvcDpO50I3ZlXzVgu6x9BBbFyiJjnxIcTzGPi7UnoyU7f
OvG21C0V0pz667W9P4fQh532WHqdbz3Nsfq+gXf2Bsg7s9bpm1Jsd1H+H4y3
mqdZDhMtr0qpsXlT7oTkLfmX+/pWiLflf8UN1qZAsvnlP/zNE8s=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtozmEUwJ/NXva+U/KYkmiGUuQLxiRRomYkwlzHFqZcttzC9sFlyZCw
ZGVDmHvaJZdSUhJac8nctrbZ2IzZhc19Lr/TOR9O5/c///Oc53Iusanpc9aH
O+eykW5IW8i5tIBzK7xz1ch1eFjQuQfGwSjn+vBdCN/B5uEa1sWg8/jej/03
MS6jLyH3sNUiN2ytQ07A17D9w68ALoWPo/ORErjM/EP4RiBVLOtH/K5I57Zh
z+T/W9aOhWPhbvichW973fMichcOs72K4e5wMfwS/sPaw3ChMDEriP8NWya2
7chW7O/5ng6PgRvhBHgUXIDshL9j60Ay4JHYPsPr4eFwb2QMXIftC5IOj7Dz
VLJXNHcZy/c87B/ZfxK8AG42f4mzAdtRZB/8C9sROBv+CefYGeTME+AkiQOX
wzfhKPY5De82/4PGP+Bwe6tH2PKRA3AX9r+yB3weW73FkfePh+fDH0L6ri85
fzCo718G13D+AH5F/KuQ/CO77H06+VeOTyP6E99Lsc/ify9kNPwGW2lA8yvr
Q8TNRV/wes4z8C2vNXAFvu+1DsRfarKd9auxp2GPQz/GPlHemn91Tt/hXEDf
XGLl4peDDvC/M6S1tMVrTUodFsFfOetTpz6SE+ElknvkITwTPdv2kpqQO65E
p7A2Bf3E6T2PIa+c1kce8tppzUXbWetDWrfSR4+x9YBr8RkS1F54AUcE9T6y
1/iAnkPOI3eW3pF+ucrazQGt4XXoSOKUyH5e8yI1X2n1L/YquIG18fBQrz0l
MTvQJ21f2V/ylYxejE+b9Yj0SrvNh0VeZ8UqeKHX80nMQXB/q/966xGp/43W
U4mSZ3gT+hkxZ6BbsC+T+2FvCqmtp+Ta6kT6aKrVntRgX6/5kPqRvpN7Z1jv
y9zJ9qqlZvZ4XSP/dkt+8X9OnDCrAen3LK+9n4XsMB/h7XBrSPObBCdYP8p8
S7RZJ70j77Mcnuv1HsLJ1q9Se3vRk63fpY9a7d1SsU2zmpQef4eMgwd77YVq
1g5A10Zqr8msaDCfGK/+MgMHwqes76THWyx3c7z2tfTUWptjMtOCli+pq2Zi
TrUZIvNnivW7zJMmy1eczUyZD2tsZkguDqH/A2Xh6l4=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJxFlHlMz3EYx7/Fz34Hw7cyWVFoNmGjc25zTTmmTc6MXG10kJojm2uoXAkx
tFzxhzvXGPMnc26MiUgUClHKVfF69nk2f7y29/f9fI7n83me7yc4MTUuxduy
rHhwQIxtWePgj9uycjFi0XfgNrg8lnUF7y56EkyEOJiN94nxi9H70fsgD5rx
xuKNgd/oHIdZ2yXz0JPlG6qINcFW9E7YofvO1LU/E5uFToAZ4uPNgiT4Sqw3
XiY6A5LhG94rp2WVQSCxSLy3eMGq36G7o3vI+jAHr5axzdACNcSn6R6y12jb
nG0XuoXYEnQyuPU+XqPfQAVMhXiYDguJfWH8fPQizXUROknj0/Q8Eqsllqhz
anXOArgO1+AmHCPmzZ7l5PgaqmEK3nBiH91GR6KjINo2eebjuV2WFQCBMApv
JFQzfqqebYT9f414h4nPlf01f8lrntYjEW8uJGjNH+CdQBfDUc2vkbwawMF+
2Q5T/yq+K53mfmTd7+gK5kegh8Bg6ELsHJyF81AoDekx9U1B1zE+FN0HfqE3
4G1H50lt4Ak8hmcyn5jDY/pOcsjH2w174LjcpeStNW3WfohCV6J7okM0Xgwn
9R6l9pvQp9CtWbsz5/OHn/jr8XKJbbNNTpLDU3gOF4i1YXw6ei+6ANKgnnkP
JR+0D+sEQTDUczd1kElsJbEmp/n3LqPL8F7Zpude6NpOYj2ZF+Iy/638Z3LO
AtgHayELr4GYF2O8YRneUtvklKp3W4q+iC6Bc3p/pXqXkr/s9xLu2eYNkP6/
Suy+be5B7qOXy+Qp78UD7dlWHnPOR9rHN+CWnltioZqD3EdfdD/tT+lF6eOB
MMg2b4S8SXKmA3AQDkORbWog/XAEnSbr2eaMKfoenEGf1v46hPfXbd6GAOim
tZd3wR/dWf5ndLj2pNQhA1bAKuldYp3QflCODnOYOYWyNvzQfijS+AD0BJgI
7fFWa11lnSz0Gu3njXhbYLOeQ9ZZh85G59imvyo0r45oH/CVHpC70DOVSA1t
847Je9aoa0he4RAGERCL995tdDp6OYyHD5IvXn8dH6Pvs1vnSLwtuh1c0n/U
ixr6Unc/l9n/kP63Er9sm/c+RveTdTx6510hCKL1v6vRN0lqPRSGaR3C9N46
2ObcHu07eW97s2co/AMk2u8w
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlEtszVEQxk/ovfV3q4/719etvlRbpVrt7YtELZRUbBQJJRqPpISmSBMS
XYgIYSERhNiIkAg2EkGoFgtLC6+FhUeiVW31QfWRaiN+k5nFyXznOzPnzDnn
m8ndc2hT6yzn3CnGbMbHgHN92DfYRN+5T9haz7kj4DlB5xrBw2HnOuHjQ84t
Z+TA32P9J/wz+HlwJ/CbYp8acDJrX+BTwMfBIfyLwKWMLPB5uFjsCP4J2GL4
NOxp+Pngd8QmgI8y5sIvtths8F24XPAYPlvBFeBJ9jnG+WngHvgi+CbmYfy3
gBOEx6ccbik4CX4zfD3zXviV4gv/lthu7uRbDj1hzec9uBdcLvcn9hGxUXAZ
+DH4CaMS3M4+ifBd+E/inw7/FZwKlyd5gmPt3EHwWnA5cX/IoVTeiDHq9I2S
8H+Bzz/LR3KLx78EHGH9nK9nPYefwWc38xj4jexdA+6Hz2D9NrgKvhrc4ulZ
kqfsI2ftBzczJsBt2Ax8f4MTsUtCahvkfnbfh+CXppnV+OcxD8Dnh5SXnP+S
zyijw7QRMV0lg+uI6Sc2As6E/2w6iXr6R6K9bNOPvNtCxgQ4ADfCnk/BcXAp
nPnL6ZuKHsaxMfiMmSZFq68DqrF8fJcxT8ee9VXDoqULvu73DZ8P2HzmQfgC
0bi95yJwh71hFXg9+Q04feeCoO59nfU1zH+wRwn4DqM6qLXQG1C+1rQgsd3Y
HNaGsRXw6ea3AtzAPkNO60747/DFvsZI7EhAzxKfBtO8+FThkxVSXZWBs8FD
4Cj4gNWb3CvL+HW+5iD7bbAaEd1Oh1V7oqsp8Cv7a/nbTsPCzQQ0B6lDqSmp
tcvsM8180GnNNJkOF4Q0H7lvvfQN7LD0n6DWhfzvdvgdjD7T7S7wADgTfMvq
S94/N6ixqfb28r87PdWq1PUlfM9Y35CeUxZSzYv2xV/+7CDrhdJXGK2+1r70
vzhwl/2d1Eu/aVj0Vmd5Sz7t1hsLwW1gz3DU+sMDuFWWv9z9pPlIH2s2jUm9
SC6SRwvcXqsj0ZvcTfrhFetj4+R/2FNfibnhq4+8wzZP+5L0j/vw+zztzxd9
1bz0imu+9ljR/1W5r9Wd1GOlvXnEak3qqNHXd5P3uQn+D+i1uj0=
            "]], 
           Polygon[CompressedData["
1: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
XDAfYOOR7ptePodcFCwGyTHm4Bqee/8CF3kVYw==
            "]], 
           Polygon[CompressedData["
1:eJxFldlvzVEQx39Br14/bfUeLVqq1aqtlm63NHih1PLQlqCINZaKraioCiG2
JoTYeSXWhBBbKR74A6wJiSWxaxWxldb2mcwkHj7p986c35w558xMU2YtKVnc
wvO8UoiAlyHPu4to73vea/Qb6IB+ii3OeV5H6AQ/sf+AJriBL5Y1+8UX8Ly+
6IPoQxBG52K7jK6BKxAB3/kmFV9rdCT8Is51i/MH/Rfy0OGAflML15zGTcDW
D9/8oOeVwQVsA7BlY7uIvgSt4Bvxuvm6X8CpL5N1udhW8V0lNLLP95CeR/Zv
h+8k65JZNw//CqiAY9iOOs0pD99x9CLsC6EqqGc8jO0cnIXztpfk9ILYd4jt
fL3fV3AG/2lbL7ln4TuB7ooeYDmcgrbgQ7TTGCF8a9BV0AMdZP16dBz6seSP
joUQTIdp0BlfHb4Z6KHwBj2MnIuhBJKwdYF4e+eu8tu+GYIeBsPNVo+tJXu2
CGi8Ar4fDgn43uKbgq0UJsFke2d5g92SB98kQjvo7evekkMpRAb+n0l0OXoZ
LIfu8obYZqPnwFyLHYctHhqtlqROn6FfwHM7h9RGttwv9Ld7TpQasjt7EqFn
H00Oo6AIWrEu2em7PcL/EG7b3Utd/Ub/gq+Qgi3H6X6y70dIxhYNtehbcFPW
EitT3lrygQZsSb7qLKcxPkjO2JpZe81qUfriN2SRV6bVq/hi8KVL/5BrDERD
d2LEQBP+ZrhnfRxv55SaaO+0j8PwClsnfIPQ+VYn77ANRA92+vZpkGpvELA9
pE57o3tBktwrviNO6z9sPSu9sh22wU6ra1m3T2YIOsPmxQHYI/WKbRrnWwrl
Qf1mB+yyXpSe2ILeDL3QPrZq9CbYCFtt9mRYrcWi+/gaey9scNonPbG1CWic
ntY/UmMVsBI+cb8foS2+K9zF55DuJ9+IvxJWO33fq/jr8TfAB1gsMVmX6etc
kPkQZXHe4a8L6XrJVc5SbbNM5qX0d5S9312bFV9Cun+U7SU1VID/vdXOCPRI
p38brHYK0aPkjiQXyLB37ohvInqC9ec3q900X+t9JrZZTnss3d5a+qwMFkCK
055Is16UmpA7qiHOfXhgZ8zhzNkwNKjzSPqs0Gpb+mIMeiwk2rzIRec5rTnR
Ly3XsNmLoQjG2ZvK3BBdAuOtbuSdpzqdPYlWwzL38slhUFD7Tu6sED3Q5rf8
L1nL73XwD4euzRA=
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LlOAlEAhtGLAhoISMFa8ggKhawuLB0NCWChkvAAUCmNGyhE9KU9E4uT
b+4/mclkqovVeBkLIYw4dVHR32QIPxz4pmzb644vPinZtrrhg3eKtjd95YWC
89o7n3ki5zzXRx64J21ra4smDTwaylqiSIHoGy/daNDkyLmlbTp0ObZd6TU3
3BK39bTPgCEJ27kXXlCjTso20Skz7jizZTQbXUffT96W1JPY///6AwuJFZ0=

          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MlNQlEAhtHLhiKQIUQXsgCUPtxYggVgI4AyKwFpw2GD2oAIqBCGBWIV
aDyExcn37r+4ebnpi8vzYiSEcMaVj4KuoiEsWTDn1DbTKV98cmL70AljRuRt
7zrkjZzznzt/2ZJx/tEN36w5sr3qC88MSNn6ekePLjFbyZ1lKhzs/levqVIj
bqtrgyYtEra23nBLh6Tt3p0PPPLEoW2uC5asOLY1tEmLNllbWSuR/Xv9AwUR
MV4=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOQlEYhuEfCtyA2jgkRgYnDIhTgUEpZDA2LAGVAhwWAe5TQZxlDTw3
Fk/enO8mJzdno/vUeUxFxDXL6YgrrSxEHFCmRNu2r0X22KVl29FttijQtOU1
R5aG87M7RwypOz/oPQP6nNna2qJJg9PkHs2RZZOK7SUT8cqYQ+eJvjHlnSPb
h37yxTfHth/95Y8ZJ7aaO8+5SP6Lqu1Gb7mjl3yzregqa6xzaVvUpfT/e80B
7sYfTQ==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MsywmEcx+FftWgGN9E9qJCc1iJmWGiBsmbrUE4TLgKbsCG3IW3EbaCF
wwX0zLR45jPvd/H+//Nmqnuru4mIKHGbjNjRq3TEJRc0qdnO9YxTTqjajrVB
nSO2bYd6wD5bzmOpiFFGqDj/+8Yfv/ywbvvQd3q8sWJ71jZPPLJoG3dnllx6
+L95nWCSKZZsBZ2myAzLtlmdY54FyrYXd3Z4pcua7VO/+KbPhq2ld9zzwKbt
Wm+Sw/caALTxKSA=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LlOQkEAhtEhFD4HS6PYoLwGYEwUaxM3CghKwaK9yqKA8lS4gRDFl/FM
KE6+zF9M5t7Uaf2wlgghFMkmQ7jTv60Q1vzyw61tpUu+WdC1zfWLTz7o2N71
jRlt54k7x4xoOne1Q5sWdduJVjjmiKqtoPvskefMdu/OBx45d+5pnwFDLmxP
+syIMZfxDfrCK1Ou4ve6s0SZA2q2hl5zE98aa9vWHXLsxjfb0ppJbv7XP72l
KP0=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOQmEYhtEPMMElqJWIIhiHldC4BBegO3DAQgssmNyD2jg0oNtQbAAF
FIcVOBRyDMXJc/83d0huZmtnczsREUUuUhGnujEdsc4aqzRsK1ogzzJ1W06X
WCRLzbagGeapOs9NRcwyw4lzUhMEf7537PJJe3TpcGi701taNNm1ddLuocfe
/3P6TJ8B+7ahvvDKiAPbm77zwScl2713PtDmkSPbl37zwy9l26Vecc0NFduZ
nqcm/2sMNoAv0w==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DtOAmEYhtHfhIJtuAMBkZlRVOhpbFELUEtoxPsFhkRwBeIlEQopRHGL
ngnFyZP/Lb5MZr3VPeishRAaFHMh/OkwH0LKgD5L24Pec8ctv7YbveaKS35s
F9rjnIX3zM0pn8y9n3XMiCdmtjM95YQ2H7a61thnjxfbhpsFiky8S7pJmS1e
bRWNiEl4s23rDlV2ebc13TzkiOPsG22P2mdAyld2TyNiEr6z79BCbvW//gH/
ISO8
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0ElOAlEYhdHfBBQGKFtgom6GCUtgAboJOxSxWYmgRnEAGmkVGwjC3Gai
uAeOcXBy875Kql4qV9wsbCxERJ56IqJnp6mICW+M6WojO+SVFzras31iwCNt
7cH26dFyXk9GrLFK0zlrV1gmw43267szfvjmUuv/3YUuHc60Le/cZoeq867d
o8Q+Ne3Aljmkwrl2ZI854ZQL7d07P/jki7q26D5LpEjT0BqeNbnljnvtyl4n
/v/XHIq4NIg=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DlOAlAUhtFLQaJ7ABRUgrgHtHFoUMMS6BwiUdmGQ4G6CnUdAlpAISKj
IuvwJBQnX+5fvOJlq7XKRSIiyuwkI6a6tRxRZJMCE1teN1hnjbEtp1lWWWFk
y2iaFEP3qzdfeKbnftJHHmjQtdX1misu+bAd6xGHlHmz9ZYivujTdH/rgCEj
WraxTpjyQ9v2qzP+mPNuO/HmKWec07Hd6C133PNp29U99jlgYCvpdnLxX//i
bS1s
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yQnEcx+GfRWbMeFmgvX0lkbd7sHEJXYCUEOPl6mSDNtE+0oIZlSK1
8RiLZ77z/5yZ/zlzVgrF/YOpiNjjNhHxY69nIq645IKRdm7PqHLKt3Zij6lw
xJdWtiUOGTpnpiPSpOg6J+0ySyzyrk28d/z3bkZ0tKZ94pEGLS3lzjQZnp1X
bZY1crxo63aDPJu0tS27zQ67vGpdd/bo88mbNut75phngQ/tzrN7Hqgz0G5s
LfH/v34BkmAu5w==
          "]]}, {
         Line[{1594, 2887, 2889, 2890, 2434, 2884, 1609, 2914, 2438, 2873, 
          2875, 2878, 1627, 2976, 2449, 2906, 2908, 2911, 1645, 3029, 2461, 
          2971, 2973, 1662}], 
         Line[{1598, 2435, 2897, 2899, 2902, 2905, 1614, 2943, 2444, 2955, 
          2957, 2960, 1632, 3023, 3025, 3026, 2457, 3010, 1649, 3051, 2466, 
          3070, 3072, 1666}], 
         Line[{1602, 2930, 2932, 2933, 2443, 2927, 1619, 1628, 2987, 2989, 
          2991, 2994, 1636, 355, 3042, 3044, 3047, 1655, 3076, 2469, 3082, 
          3084, 1670}], 
         Line[{1606, 1620, 2961, 2963, 2966, 2970, 1624, 2936, 2938, 2939, 
          2460, 3020, 1641, 369, 2995, 2997, 3000, 1659, 3066, 3068, 3069, 
          2475, 1675}], 
         Line[{1660, 1642, 3032, 3030, 3027, 1643, 2909, 2451, 2979, 2977, 
          2974, 1625, 2876, 2440, 2917, 2915, 2912, 1607, 2882, 2880, 2879, 
          2432, 2885, 1592}], 
         Line[{1663, 1650, 3055, 3052, 3048, 1646, 3007, 3004, 3002, 3001, 
          2454, 1629, 1615, 2948, 2947, 2944, 2940, 1611, 257, 2896, 2894, 
          2891, 1595}], 
         Line[{1667, 2471, 3080, 3077, 3073, 1652, 2465, 3041, 3039, 3036, 
          3033, 1633, 2453, 2986, 2985, 2983, 2980, 1616, 2924, 2921, 2919, 
          2918, 1610, 1599}], 
         Line[{1672, 3088, 3086, 3085, 1671, 1656, 2468, 3063, 3062, 3060, 
          3057, 1638, 3017, 3014, 3012, 3011, 1637, 1621, 2967, 2448, 2954, 
          2952, 2949, 1603}], 
         Line[{1678, 3105, 3107, 3108, 2478, 3102, 1693, 3132, 2482, 3091, 
          3093, 3096, 1711, 3194, 2493, 3124, 3126, 3129, 1729, 3247, 2505, 
          3189, 3191, 1746}], 
         Line[{1682, 2479, 3115, 3117, 3120, 3123, 1698, 3161, 2488, 3173, 
          3175, 3178, 1716, 3241, 3243, 3244, 2501, 3228, 1733, 3269, 2510, 
          3288, 3290, 1750}], 
         Line[{1686, 3148, 3150, 3151, 2487, 3145, 1703, 1712, 3205, 3207, 
          3209, 3212, 1720, 490, 3260, 3262, 3265, 1739, 3294, 2513, 3300, 
          3302, 1754}], 
         Line[{1690, 1704, 3179, 3181, 3184, 3188, 1708, 3154, 3156, 3157, 
          2504, 3238, 1725, 504, 3213, 3215, 3218, 1743, 3284, 3286, 3287, 
          2519, 1759}], 
         Line[{1744, 1726, 3250, 3248, 3245, 1727, 3127, 2495, 3197, 3195, 
          3192, 1709, 3094, 2484, 3135, 3133, 3130, 1691, 3100, 3098, 3097, 
          2476, 3103, 1676}], 
         Line[{1747, 1734, 3273, 3270, 3266, 1730, 3225, 3222, 3220, 3219, 
          2498, 1713, 1699, 3166, 3165, 3162, 3158, 1695, 392, 3114, 3112, 
          3109, 1679}], 
         Line[{1751, 2515, 3298, 3295, 3291, 1736, 2509, 3259, 3257, 3254, 
          3251, 1717, 2497, 3204, 3203, 3201, 3198, 1700, 3142, 3139, 3137, 
          3136, 1694, 1683}], 
         Line[{1756, 3306, 3304, 3303, 1755, 1740, 2512, 3281, 3280, 3278, 
          3275, 1722, 3235, 3232, 3230, 3229, 1721, 1705, 3185, 2492, 3172, 
          3170, 3167, 1687}], 
         Line[{1762, 3323, 3325, 3326, 2522, 3320, 1777, 3350, 2526, 3309, 
          3311, 3314, 1795, 3412, 2537, 3342, 3344, 3347, 1813, 3465, 2549, 
          3407, 3409, 1830}], 
         Line[{1766, 2523, 3333, 3335, 3338, 3341, 1782, 3379, 2532, 3391, 
          3393, 3396, 1800, 3459, 3461, 3462, 2545, 3446, 1817, 3487, 2554, 
          3506, 3508, 1834}], 
         Line[{1770, 3366, 3368, 3369, 2531, 3363, 1787, 1796, 3423, 3425, 
          3427, 3430, 1804, 625, 3478, 3480, 3483, 1823, 3512, 2557, 3518, 
          3520, 1838}], 
         Line[{1774, 1788, 3397, 3399, 3402, 3406, 1792, 3372, 3374, 3375, 
          2548, 3456, 1809, 639, 3431, 3433, 3436, 1827, 3502, 3504, 3505, 
          2563, 1843}], 
         Line[{1828, 1810, 3468, 3466, 3463, 1811, 3345, 2539, 3415, 3413, 
          3410, 1793, 3312, 2528, 3353, 3351, 3348, 1775, 3318, 3316, 3315, 
          2520, 3321, 1760}], 
         Line[{1831, 1818, 3491, 3488, 3484, 1814, 3443, 3440, 3438, 3437, 
          2542, 1797, 1783, 3384, 3383, 3380, 3376, 1779, 527, 3332, 3330, 
          3327, 1763}], 
         Line[{1835, 2559, 3516, 3513, 3509, 1820, 2553, 3477, 3475, 3472, 
          3469, 1801, 2541, 3422, 3421, 3419, 3416, 1784, 3360, 3357, 3355, 
          3354, 1778, 1767}], 
         Line[{1840, 3524, 3522, 3521, 1839, 1824, 2556, 3499, 3498, 3496, 
          3493, 1806, 3453, 3450, 3448, 3447, 1805, 1789, 3403, 2536, 3390, 
          3388, 3385, 1771}], 
         Line[{1846, 3541, 3543, 3544, 2566, 3538, 1861, 3568, 2570, 3527, 
          3529, 3532, 1879, 3630, 2581, 3560, 3562, 3565, 1897, 3683, 2593, 
          3625, 3627, 1914}], 
         Line[{1850, 2567, 3551, 3553, 3556, 3559, 1866, 3597, 2576, 3609, 
          3611, 3614, 1884, 3677, 3679, 3680, 2589, 3664, 1901, 3705, 2598, 
          3724, 3726, 1918}], 
         Line[{1854, 3584, 3586, 3587, 2575, 3581, 1871, 1880, 3641, 3643, 
          3645, 3648, 1888, 760, 3696, 3698, 3701, 1907, 3730, 2601, 3736, 
          3738, 1922}], 
         Line[{1858, 1872, 3615, 3617, 3620, 3624, 1876, 3590, 3592, 3593, 
          2592, 3674, 1893, 774, 3649, 3651, 3654, 1911, 3720, 3722, 3723, 
          2607, 1927}], 
         Line[{1912, 1894, 3686, 3684, 3681, 1895, 3563, 2583, 3633, 3631, 
          3628, 1877, 3530, 2572, 3571, 3569, 3566, 1859, 3536, 3534, 3533, 
          2564, 3539, 1844}], 
         Line[{1915, 1902, 3709, 3706, 3702, 1898, 3661, 3658, 3656, 3655, 
          2586, 1881, 1867, 3602, 3601, 3598, 3594, 1863, 662, 3550, 3548, 
          3545, 1847}], 
         Line[{1919, 2603, 3734, 3731, 3727, 1904, 2597, 3695, 3693, 3690, 
          3687, 1885, 2585, 3640, 3639, 3637, 3634, 1868, 3578, 3575, 3573, 
          3572, 1862, 1851}], 
         Line[{1924, 3742, 3740, 3739, 1923, 1908, 2600, 3717, 3716, 3714, 
          3711, 1890, 3671, 3668, 3666, 3665, 1889, 1873, 3621, 2580, 3608, 
          3606, 3603, 1855}], 
         Line[{1930, 3759, 3761, 3762, 2610, 3756, 1945, 3786, 2614, 3745, 
          3747, 3750, 1963, 3848, 2625, 3778, 3780, 3783, 1981, 3901, 2637, 
          3843, 3845, 1998}], 
         Line[{1934, 2611, 3769, 3771, 3774, 3777, 1950, 3815, 2620, 3827, 
          3829, 3832, 1968, 3895, 3897, 3898, 2633, 3882, 1985, 3923, 2642, 
          3942, 3944, 2002}], 
         Line[{1938, 3802, 3804, 3805, 2619, 3799, 1955, 1964, 3859, 3861, 
          3863, 3866, 1972, 895, 3914, 3916, 3919, 1991, 3948, 2645, 3954, 
          3956, 2006}], 
         Line[{1942, 1956, 3833, 3835, 3838, 3842, 1960, 3808, 3810, 3811, 
          2636, 3892, 1977, 909, 3867, 3869, 3872, 1995, 3938, 3940, 3941, 
          2651, 2011}], 
         Line[{1996, 1978, 3904, 3902, 3899, 1979, 3781, 2627, 3851, 3849, 
          3846, 1961, 3748, 2616, 3789, 3787, 3784, 1943, 3754, 3752, 3751, 
          2608, 3757, 1928}], 
         Line[{1999, 1986, 3927, 3924, 3920, 1982, 3879, 3876, 3874, 3873, 
          2630, 1965, 1951, 3820, 3819, 3816, 3812, 1947, 797, 3768, 3766, 
          3763, 1931}], 
         Line[{2003, 2647, 3952, 3949, 3945, 1988, 2641, 3913, 3911, 3908, 
          3905, 1969, 2629, 3858, 3857, 3855, 3852, 1952, 3796, 3793, 3791, 
          3790, 1946, 1935}], 
         Line[{2008, 3960, 3958, 3957, 2007, 1992, 2644, 3935, 3934, 3932, 
          3929, 1974, 3889, 3886, 3884, 3883, 1973, 1957, 3839, 2624, 3826, 
          3824, 3821, 1939}], 
         Line[{2014, 3977, 3979, 3980, 2654, 3974, 2029, 4004, 2658, 3963, 
          3965, 3968, 2047, 4066, 2669, 3996, 3998, 4001, 2065, 4119, 2681, 
          4061, 4063, 2082}], 
         Line[{2018, 2655, 3987, 3989, 3992, 3995, 2034, 4033, 2664, 4045, 
          4047, 4050, 2052, 4113, 4115, 4116, 2677, 4100, 2069, 4141, 2686, 
          4160, 4162, 2086}], 
         Line[{2022, 4020, 4022, 4023, 2663, 4017, 2039, 2048, 4077, 4079, 
          4081, 4084, 2056, 1030, 4132, 4134, 4137, 2075, 4166, 2689, 4172, 
          4174, 2090}], 
         Line[{2026, 2040, 4051, 4053, 4056, 4060, 2044, 4026, 4028, 4029, 
          2680, 4110, 2061, 1044, 4085, 4087, 4090, 2079, 4156, 4158, 4159, 
          2695, 2095}], 
         Line[{2080, 2062, 4122, 4120, 4117, 2063, 3999, 2671, 4069, 4067, 
          4064, 2045, 3966, 2660, 4007, 4005, 4002, 2027, 3972, 3970, 3969, 
          2652, 3975, 2012}], 
         Line[{2083, 2070, 4145, 4142, 4138, 2066, 4097, 4094, 4092, 4091, 
          2674, 2049, 2035, 4038, 4037, 4034, 4030, 2031, 932, 3986, 3984, 
          3981, 2015}], 
         Line[{2087, 2691, 4170, 4167, 4163, 2072, 2685, 4131, 4129, 4126, 
          4123, 2053, 2673, 4076, 4075, 4073, 4070, 2036, 4014, 4011, 4009, 
          4008, 2030, 2019}], 
         Line[{2092, 4178, 4176, 4175, 2091, 2076, 2688, 4153, 4152, 4150, 
          4147, 2058, 4107, 4104, 4102, 4101, 2057, 2041, 4057, 2668, 4044, 
          4042, 4039, 2023}], 
         Line[{2098, 4195, 4197, 4198, 2698, 4192, 2113, 4222, 2702, 4181, 
          4183, 4186, 2131, 4284, 2713, 4214, 4216, 4219, 2149, 4337, 2725, 
          4279, 4281, 2166}], 
         Line[{2102, 2699, 4205, 4207, 4210, 4213, 2118, 4251, 2708, 4263, 
          4265, 4268, 2136, 4331, 4333, 4334, 2721, 4318, 2153, 4359, 2730, 
          4378, 4380, 2170}], 
         Line[{2106, 4238, 4240, 4241, 2707, 4235, 2123, 2132, 4295, 4297, 
          4299, 4302, 2140, 1165, 4350, 4352, 4355, 2159, 4384, 2733, 4390, 
          4392, 2174}], 
         Line[{2110, 2124, 4269, 4271, 4274, 4278, 2128, 4244, 4246, 4247, 
          2724, 4328, 2145, 1179, 4303, 4305, 4308, 2163, 4374, 4376, 4377, 
          2739, 2179}], 
         Line[{2164, 2146, 4340, 4338, 4335, 2147, 4217, 2715, 4287, 4285, 
          4282, 2129, 4184, 2704, 4225, 4223, 4220, 2111, 4190, 4188, 4187, 
          2696, 4193, 2096}], 
         Line[{2167, 2154, 4363, 4360, 4356, 2150, 4315, 4312, 4310, 4309, 
          2718, 2133, 2119, 4256, 4255, 4252, 4248, 2115, 1067, 4204, 4202, 
          4199, 2099}], 
         Line[{2171, 2735, 4388, 4385, 4381, 2156, 2729, 4349, 4347, 4344, 
          4341, 2137, 2717, 4294, 4293, 4291, 4288, 2120, 4232, 4229, 4227, 
          4226, 2114, 2103}], 
         Line[{2176, 4396, 4394, 4393, 2175, 2160, 2732, 4371, 4370, 4368, 
          4365, 2142, 4325, 4322, 4320, 4319, 2141, 2125, 4275, 2712, 4262, 
          4260, 4257, 2107}], 
         Line[{2182, 4413, 4415, 4416, 2742, 4410, 2197, 4440, 2746, 4399, 
          4401, 4404, 2215, 4502, 2757, 4432, 4434, 4437, 2233, 4555, 2769, 
          4497, 4499, 2250}], 
         Line[{2186, 2743, 4423, 4425, 4428, 4431, 2202, 4469, 2752, 4481, 
          4483, 4486, 2220, 4549, 4551, 4552, 2765, 4536, 2237, 4577, 2774, 
          4596, 4598, 2254}], 
         Line[{2190, 4456, 4458, 4459, 2751, 4453, 2207, 2216, 4513, 4515, 
          4517, 4520, 2224, 1300, 4568, 4570, 4573, 2243, 4602, 2777, 4608, 
          4610, 2258}], 
         Line[{2194, 2208, 4487, 4489, 4492, 4496, 2212, 4462, 4464, 4465, 
          2768, 4546, 2229, 1314, 4521, 4523, 4526, 2247, 4592, 4594, 4595, 
          2783, 2263}], 
         Line[{2248, 2230, 4558, 4556, 4553, 2231, 4435, 2759, 4505, 4503, 
          4500, 2213, 4402, 2748, 4443, 4441, 4438, 2195, 4408, 4406, 4405, 
          2740, 4411, 2180}], 
         Line[{2251, 2238, 4581, 4578, 4574, 2234, 4533, 4530, 4528, 4527, 
          2762, 2217, 2203, 4474, 4473, 4470, 4466, 2199, 1202, 4422, 4420, 
          4417, 2183}], 
         Line[{2255, 2779, 4606, 4603, 4599, 2240, 2773, 4567, 4565, 4562, 
          4559, 2221, 2761, 4512, 4511, 4509, 4506, 2204, 4450, 4447, 4445, 
          4444, 2198, 2187}], 
         Line[{2260, 4614, 4612, 4611, 2259, 2244, 2776, 4589, 4588, 4586, 
          4583, 2226, 4543, 4540, 4538, 4537, 2225, 2209, 4493, 2756, 4480, 
          4478, 4475, 2191}], 
         Line[{2266, 4631, 4633, 4634, 2786, 4628, 2281, 4658, 2790, 4617, 
          4619, 4622, 2299, 4720, 2801, 4650, 4652, 4655, 2317, 4773, 2813, 
          4715, 4717, 2334}], 
         Line[{2270, 2787, 4641, 4643, 4646, 4649, 2286, 4687, 2796, 4699, 
          4701, 4704, 2304, 4767, 4769, 4770, 2809, 4754, 2321, 4795, 2818, 
          4814, 4816, 2338}], 
         Line[{2274, 4674, 4676, 4677, 2795, 4671, 2291, 2300, 4731, 4733, 
          4735, 4738, 2308, 1435, 4786, 4788, 4791, 2327, 4820, 2821, 4826, 
          4828, 2342}], 
         Line[{2278, 2292, 4705, 4707, 4710, 4714, 2296, 4680, 4682, 4683, 
          2812, 4764, 2313, 1449, 4739, 4741, 4744, 2331, 4810, 4812, 4813, 
          2827, 2347}], 
         Line[{2332, 2314, 4776, 4774, 4771, 2315, 4653, 2803, 4723, 4721, 
          4718, 2297, 4620, 2792, 4661, 4659, 4656, 2279, 4626, 4624, 4623, 
          2784, 4629, 2264}], 
         Line[{2335, 2322, 4799, 4796, 4792, 2318, 4751, 4748, 4746, 4745, 
          2806, 2301, 2287, 4692, 4691, 4688, 4684, 2283, 1337, 4640, 4638, 
          4635, 2267}], 
         Line[{2339, 2823, 4824, 4821, 4817, 2324, 2817, 4785, 4783, 4780, 
          4777, 2305, 2805, 4730, 4729, 4727, 4724, 2288, 4668, 4665, 4663, 
          4662, 2282, 2271}], 
         Line[{2344, 4832, 4830, 4829, 2343, 2328, 2820, 4807, 4806, 4804, 
          4801, 2310, 4761, 4758, 4756, 4755, 2309, 2293, 4711, 2800, 4698, 
          4696, 4693, 2275}], 
         Line[{2350, 4849, 4851, 4852, 2830, 4846, 2365, 4876, 2834, 4835, 
          4837, 4840, 2383, 4951, 2849, 4868, 4870, 4873, 2401, 4945, 2858, 
          5011, 5013, 2418}], 
         Line[{2354, 2831, 4859, 4861, 4864, 4867, 2370, 4905, 2840, 4918, 
          4922, 4928, 2388, 4989, 4994, 4998, 2857, 4986, 2405, 5005, 2863, 
          5033, 5035, 2422}], 
         Line[{2358, 4892, 4894, 4895, 2839, 4889, 2375, 4957, 4959, 4960, 
          2845, 4932, 2392, 1559, 5014, 5016, 5019, 2411, 5039, 2866, 5045, 
          5047, 2426}], 
         Line[{2362, 2376, 4933, 4935, 4938, 4942, 2380, 4898, 4900, 4901, 
          2854, 4970, 2397, 1573, 4971, 4973, 4976, 2415, 5029, 5031, 5032, 
          2872, 2431}], 
         Line[{2416, 2398, 4948, 4946, 4943, 2399, 4871, 2851, 4954, 4952, 
          4949, 2381, 4838, 2836, 4879, 4877, 4874, 2363, 4844, 4842, 4841, 
          2828, 4847, 2348}], 
         Line[{2419, 2406, 5009, 5006, 5002, 2402, 4983, 4980, 4978, 4977, 
          2393, 2385, 2371, 4910, 4909, 4906, 4902, 2367, 1472, 4858, 4856, 
          4853, 2351}], 
         Line[{2423, 2868, 5043, 5040, 5036, 2408, 2862, 5001, 4999, 4995, 
          4990, 2389, 4929, 4923, 4919, 4917, 2842, 2372, 4886, 4883, 4881, 
          4880, 2366, 2355}], 
         Line[{2428, 5051, 5049, 5048, 2427, 2412, 2865, 5026, 5025, 5023, 
          5020, 2394, 4967, 4964, 4962, 4961, 2384, 2377, 4939, 2848, 4916, 
          4914, 4911, 2359}], 
         Line[{1593, 2886, 2888, 2433, 2881, 2883, 1608, 2913, 2916, 2439, 
          2874, 2877, 1626, 2975, 2978, 2450, 2907, 2910, 1644, 3028, 3031, 
          2462, 2972, 1661}], 
         Line[{1596, 2892, 2895, 2437, 2900, 2903, 1612, 2941, 2945, 295, 
          2958, 1630, 3021, 2455, 3003, 3005, 3008, 1647, 3049, 3053, 3056, 
          1651, 1664}], 
         Line[{1597, 2893, 2436, 2898, 2901, 2904, 1613, 2942, 2946, 2445, 
          2956, 2959, 1631, 3022, 3024, 2456, 3006, 3009, 1648, 3050, 3054, 
          2467, 3071, 1665}], 
         Line[{1600, 2928, 2441, 2920, 2922, 2925, 1617, 2981, 2984, 323, 
          2992, 1634, 3034, 3037, 3040, 2464, 3045, 1653, 3074, 3078, 3081, 
          2472, 1668}], 
         Line[{1601, 2929, 2931, 2442, 2923, 2926, 1618, 2982, 2452, 2988, 
          2990, 2993, 1635, 3035, 3038, 2463, 3043, 3046, 1654, 3075, 3079, 
          2470, 3083, 1669}], 
         Line[{1604, 2950, 2953, 2447, 2964, 2968, 1622, 2934, 2458, 3013, 
          3015, 3018, 1639, 3058, 3061, 371, 2998, 1657, 3064, 2473, 3087, 
          3089, 1673}], 
         Line[{1605, 2951, 2446, 2962, 2965, 2969, 1623, 2935, 2937, 2459, 
          3016, 3019, 1640, 3059, 370, 2996, 2999, 1658, 3065, 3067, 2474, 
          3090, 1674}], 
         Line[{1677, 3104, 3106, 2477, 3099, 3101, 1692, 3131, 3134, 2483, 
          3092, 3095, 1710, 3193, 3196, 2494, 3125, 3128, 1728, 3246, 3249, 
          2506, 3190, 1745}], 
         Line[{1680, 3110, 3113, 2481, 3118, 3121, 1696, 3159, 3163, 430, 
          3176, 1714, 3239, 2499, 3221, 3223, 3226, 1731, 3267, 3271, 3274, 
          1735, 1748}], 
         Line[{1681, 3111, 2480, 3116, 3119, 3122, 1697, 3160, 3164, 2489, 
          3174, 3177, 1715, 3240, 3242, 2500, 3224, 3227, 1732, 3268, 3272, 
          2511, 3289, 1749}], 
         Line[{1684, 3146, 2485, 3138, 3140, 3143, 1701, 3199, 3202, 458, 
          3210, 1718, 3252, 3255, 3258, 2508, 3263, 1737, 3292, 3296, 3299, 
          2516, 1752}], 
         Line[{1685, 3147, 3149, 2486, 3141, 3144, 1702, 3200, 2496, 3206, 
          3208, 3211, 1719, 3253, 3256, 2507, 3261, 3264, 1738, 3293, 3297, 
          2514, 3301, 1753}], 
         Line[{1688, 3168, 3171, 2491, 3182, 3186, 1706, 3152, 2502, 3231, 
          3233, 3236, 1723, 3276, 3279, 506, 3216, 1741, 3282, 2517, 3305, 
          3307, 1757}], 
         Line[{1689, 3169, 2490, 3180, 3183, 3187, 1707, 3153, 3155, 2503, 
          3234, 3237, 1724, 3277, 505, 3214, 3217, 1742, 3283, 3285, 2518, 
          3308, 1758}], 
         Line[{1761, 3322, 3324, 2521, 3317, 3319, 1776, 3349, 3352, 2527, 
          3310, 3313, 1794, 3411, 3414, 2538, 3343, 3346, 1812, 3464, 3467, 
          2550, 3408, 1829}], 
         Line[{1764, 3328, 3331, 2525, 3336, 3339, 1780, 3377, 3381, 565, 
          3394, 1798, 3457, 2543, 3439, 3441, 3444, 1815, 3485, 3489, 3492, 
          1819, 1832}], 
         Line[{1765, 3329, 2524, 3334, 3337, 3340, 1781, 3378, 3382, 2533, 
          3392, 3395, 1799, 3458, 3460, 2544, 3442, 3445, 1816, 3486, 3490, 
          2555, 3507, 1833}], 
         Line[{1768, 3364, 2529, 3356, 3358, 3361, 1785, 3417, 3420, 593, 
          3428, 1802, 3470, 3473, 3476, 2552, 3481, 1821, 3510, 3514, 3517, 
          2560, 1836}], 
         Line[{1769, 3365, 3367, 2530, 3359, 3362, 1786, 3418, 2540, 3424, 
          3426, 3429, 1803, 3471, 3474, 2551, 3479, 3482, 1822, 3511, 3515, 
          2558, 3519, 1837}], 
         Line[{1772, 3386, 3389, 2535, 3400, 3404, 1790, 3370, 2546, 3449, 
          3451, 3454, 1807, 3494, 3497, 641, 3434, 1825, 3500, 2561, 3523, 
          3525, 1841}], 
         Line[{1773, 3387, 2534, 3398, 3401, 3405, 1791, 3371, 3373, 2547, 
          3452, 3455, 1808, 3495, 640, 3432, 3435, 1826, 3501, 3503, 2562, 
          3526, 1842}], 
         Line[{1845, 3540, 3542, 2565, 3535, 3537, 1860, 3567, 3570, 2571, 
          3528, 3531, 1878, 3629, 3632, 2582, 3561, 3564, 1896, 3682, 3685, 
          2594, 3626, 1913}], 
         Line[{1848, 3546, 3549, 2569, 3554, 3557, 1864, 3595, 3599, 700, 
          3612, 1882, 3675, 2587, 3657, 3659, 3662, 1899, 3703, 3707, 3710, 
          1903, 1916}], 
         Line[{1849, 3547, 2568, 3552, 3555, 3558, 1865, 3596, 3600, 2577, 
          3610, 3613, 1883, 3676, 3678, 2588, 3660, 3663, 1900, 3704, 3708, 
          2599, 3725, 1917}], 
         Line[{1852, 3582, 2573, 3574, 3576, 3579, 1869, 3635, 3638, 728, 
          3646, 1886, 3688, 3691, 3694, 2596, 3699, 1905, 3728, 3732, 3735, 
          2604, 1920}], 
         Line[{1853, 3583, 3585, 2574, 3577, 3580, 1870, 3636, 2584, 3642, 
          3644, 3647, 1887, 3689, 3692, 2595, 3697, 3700, 1906, 3729, 3733, 
          2602, 3737, 1921}], 
         Line[{1856, 3604, 3607, 2579, 3618, 3622, 1874, 3588, 2590, 3667, 
          3669, 3672, 1891, 3712, 3715, 776, 3652, 1909, 3718, 2605, 3741, 
          3743, 1925}], 
         Line[{1857, 3605, 2578, 3616, 3619, 3623, 1875, 3589, 3591, 2591, 
          3670, 3673, 1892, 3713, 775, 3650, 3653, 1910, 3719, 3721, 2606, 
          3744, 1926}], 
         Line[{1929, 3758, 3760, 2609, 3753, 3755, 1944, 3785, 3788, 2615, 
          3746, 3749, 1962, 3847, 3850, 2626, 3779, 3782, 1980, 3900, 3903, 
          2638, 3844, 1997}], 
         Line[{1932, 3764, 3767, 2613, 3772, 3775, 1948, 3813, 3817, 835, 
          3830, 1966, 3893, 2631, 3875, 3877, 3880, 1983, 3921, 3925, 3928, 
          1987, 2000}], 
         Line[{1933, 3765, 2612, 3770, 3773, 3776, 1949, 3814, 3818, 2621, 
          3828, 3831, 1967, 3894, 3896, 2632, 3878, 3881, 1984, 3922, 3926, 
          2643, 3943, 2001}], 
         Line[{1936, 3800, 2617, 3792, 3794, 3797, 1953, 3853, 3856, 863, 
          3864, 1970, 3906, 3909, 3912, 2640, 3917, 1989, 3946, 3950, 3953, 
          2648, 2004}], 
         Line[{1937, 3801, 3803, 2618, 3795, 3798, 1954, 3854, 2628, 3860, 
          3862, 3865, 1971, 3907, 3910, 2639, 3915, 3918, 1990, 3947, 3951, 
          2646, 3955, 2005}], 
         Line[{1940, 3822, 3825, 2623, 3836, 3840, 1958, 3806, 2634, 3885, 
          3887, 3890, 1975, 3930, 3933, 911, 3870, 1993, 3936, 2649, 3959, 
          3961, 2009}], 
         Line[{1941, 3823, 2622, 3834, 3837, 3841, 1959, 3807, 3809, 2635, 
          3888, 3891, 1976, 3931, 910, 3868, 3871, 1994, 3937, 3939, 2650, 
          3962, 2010}], 
         Line[{2013, 3976, 3978, 2653, 3971, 3973, 2028, 4003, 4006, 2659, 
          3964, 3967, 2046, 4065, 4068, 2670, 3997, 4000, 2064, 4118, 4121, 
          2682, 4062, 2081}], 
         Line[{2016, 3982, 3985, 2657, 3990, 3993, 2032, 4031, 4035, 970, 
          4048, 2050, 4111, 2675, 4093, 4095, 4098, 2067, 4139, 4143, 4146, 
          2071, 2084}], 
         Line[{2017, 3983, 2656, 3988, 3991, 3994, 2033, 4032, 4036, 2665, 
          4046, 4049, 2051, 4112, 4114, 2676, 4096, 4099, 2068, 4140, 4144, 
          2687, 4161, 2085}], 
         Line[{2020, 4018, 2661, 4010, 4012, 4015, 2037, 4071, 4074, 998, 
          4082, 2054, 4124, 4127, 4130, 2684, 4135, 2073, 4164, 4168, 4171, 
          2692, 2088}], 
         Line[{2021, 4019, 4021, 2662, 4013, 4016, 2038, 4072, 2672, 4078, 
          4080, 4083, 2055, 4125, 4128, 2683, 4133, 4136, 2074, 4165, 4169, 
          2690, 4173, 2089}], 
         Line[{2024, 4040, 4043, 2667, 4054, 4058, 2042, 4024, 2678, 4103, 
          4105, 4108, 2059, 4148, 4151, 1046, 4088, 2077, 4154, 2693, 4177, 
          4179, 2093}], 
         Line[{2025, 4041, 2666, 4052, 4055, 4059, 2043, 4025, 4027, 2679, 
          4106, 4109, 2060, 4149, 1045, 4086, 4089, 2078, 4155, 4157, 2694, 
          4180, 2094}], 
         Line[{2097, 4194, 4196, 2697, 4189, 4191, 2112, 4221, 4224, 2703, 
          4182, 4185, 2130, 4283, 4286, 2714, 4215, 4218, 2148, 4336, 4339, 
          2726, 4280, 2165}], 
         Line[{2100, 4200, 4203, 2701, 4208, 4211, 2116, 4249, 4253, 1105, 
          4266, 2134, 4329, 2719, 4311, 4313, 4316, 2151, 4357, 4361, 4364, 
          2155, 2168}], 
         Line[{2101, 4201, 2700, 4206, 4209, 4212, 2117, 4250, 4254, 2709, 
          4264, 4267, 2135, 4330, 4332, 2720, 4314, 4317, 2152, 4358, 4362, 
          2731, 4379, 2169}], 
         Line[{2104, 4236, 2705, 4228, 4230, 4233, 2121, 4289, 4292, 1133, 
          4300, 2138, 4342, 4345, 4348, 2728, 4353, 2157, 4382, 4386, 4389, 
          2736, 2172}], 
         Line[{2105, 4237, 4239, 2706, 4231, 4234, 2122, 4290, 2716, 4296, 
          4298, 4301, 2139, 4343, 4346, 2727, 4351, 4354, 2158, 4383, 4387, 
          2734, 4391, 2173}], 
         Line[{2108, 4258, 4261, 2711, 4272, 4276, 2126, 4242, 2722, 4321, 
          4323, 4326, 2143, 4366, 4369, 1181, 4306, 2161, 4372, 2737, 4395, 
          4397, 2177}], 
         Line[{2109, 4259, 2710, 4270, 4273, 4277, 2127, 4243, 4245, 2723, 
          4324, 4327, 2144, 4367, 1180, 4304, 4307, 2162, 4373, 4375, 2738, 
          4398, 2178}], 
         Line[{2181, 4412, 4414, 2741, 4407, 4409, 2196, 4439, 4442, 2747, 
          4400, 4403, 2214, 4501, 4504, 2758, 4433, 4436, 2232, 4554, 4557, 
          2770, 4498, 2249}], 
         Line[{2184, 4418, 4421, 2745, 4426, 4429, 2200, 4467, 4471, 1240, 
          4484, 2218, 4547, 2763, 4529, 4531, 4534, 2235, 4575, 4579, 4582, 
          2239, 2252}], 
         Line[{2185, 4419, 2744, 4424, 4427, 4430, 2201, 4468, 4472, 2753, 
          4482, 4485, 2219, 4548, 4550, 2764, 4532, 4535, 2236, 4576, 4580, 
          2775, 4597, 2253}], 
         Line[{2188, 4454, 2749, 4446, 4448, 4451, 2205, 4507, 4510, 1268, 
          4518, 2222, 4560, 4563, 4566, 2772, 4571, 2241, 4600, 4604, 4607, 
          2780, 2256}], 
         Line[{2189, 4455, 4457, 2750, 4449, 4452, 2206, 4508, 2760, 4514, 
          4516, 4519, 2223, 4561, 4564, 2771, 4569, 4572, 2242, 4601, 4605, 
          2778, 4609, 2257}], 
         Line[{2192, 4476, 4479, 2755, 4490, 4494, 2210, 4460, 2766, 4539, 
          4541, 4544, 2227, 4584, 4587, 1316, 4524, 2245, 4590, 2781, 4613, 
          4615, 2261}], 
         Line[{2193, 4477, 2754, 4488, 4491, 4495, 2211, 4461, 4463, 2767, 
          4542, 4545, 2228, 4585, 1315, 4522, 4525, 2246, 4591, 4593, 2782, 
          4616, 2262}], 
         Line[{2265, 4630, 4632, 2785, 4625, 4627, 2280, 4657, 4660, 2791, 
          4618, 4621, 2298, 4719, 4722, 2802, 4651, 4654, 2316, 4772, 4775, 
          2814, 4716, 2333}], 
         Line[{2268, 4636, 4639, 2789, 4644, 4647, 2284, 4685, 4689, 1375, 
          4702, 2302, 4765, 2807, 4747, 4749, 4752, 2319, 4793, 4797, 4800, 
          2323, 2336}], 
         Line[{2269, 4637, 2788, 4642, 4645, 4648, 2285, 4686, 4690, 2797, 
          4700, 4703, 2303, 4766, 4768, 2808, 4750, 4753, 2320, 4794, 4798, 
          2819, 4815, 2337}], 
         Line[{2272, 4672, 2793, 4664, 4666, 4669, 2289, 4725, 4728, 1403, 
          4736, 2306, 4778, 4781, 4784, 2816, 4789, 2325, 4818, 4822, 4825, 
          2824, 2340}], 
         Line[{2273, 4673, 4675, 2794, 4667, 4670, 2290, 4726, 2804, 4732, 
          4734, 4737, 2307, 4779, 4782, 2815, 4787, 4790, 2326, 4819, 4823, 
          2822, 4827, 2341}], 
         Line[{2276, 4694, 4697, 2799, 4708, 4712, 2294, 4678, 2810, 4757, 
          4759, 4762, 2311, 4802, 4805, 1451, 4742, 2329, 4808, 2825, 4831, 
          4833, 2345}], 
         Line[{2277, 4695, 2798, 4706, 4709, 4713, 2295, 4679, 4681, 2811, 
          4760, 4763, 2312, 4803, 1450, 4740, 4743, 2330, 4809, 4811, 2826, 
          4834, 2346}], 
         Line[{2349, 4848, 4850, 2829, 4843, 4845, 2364, 4875, 4878, 2835, 
          4836, 4839, 2382, 4950, 4953, 2850, 4869, 4872, 2400, 4944, 4947, 
          2859, 5012, 2417}], 
         Line[{2352, 4854, 4857, 2833, 4862, 4865, 2368, 4903, 4907, 1510, 
          4926, 2386, 4987, 2855, 4979, 4981, 4984, 2403, 5003, 5007, 5010, 
          2407, 2420}], 
         Line[{2353, 4855, 2832, 4860, 4863, 4866, 2369, 4904, 4908, 2841, 
          4921, 4927, 2387, 4988, 4993, 2856, 4982, 4985, 2404, 5004, 5008, 
          2864, 5034, 2421}], 
         Line[{2356, 4890, 2837, 4882, 4884, 4887, 2373, 4955, 2843, 4920, 
          4924, 4930, 2390, 4991, 4996, 5000, 2861, 5017, 2409, 5037, 5041, 
          5044, 2869, 2424}], 
         Line[{2357, 4891, 4893, 2838, 4885, 4888, 2374, 4956, 4958, 2844, 
          4925, 4931, 2391, 4992, 4997, 2860, 5015, 5018, 2410, 5038, 5042, 
          2867, 5046, 2425}], 
         Line[{2360, 4912, 4915, 2847, 4936, 4940, 2378, 4896, 2852, 4963, 
          4965, 4968, 2395, 5021, 5024, 1575, 4974, 2413, 5027, 2870, 5050, 
          5052, 2429}], 
         Line[{2361, 4913, 2846, 4934, 4937, 4941, 2379, 4897, 4899, 2853, 
          4966, 4969, 2396, 5022, 1574, 4972, 4975, 2414, 5028, 5030, 2871, 
          5053, 2430}]}, {
         Line[{264, 3069, 384, 3090, 3089, 3088, 381, 3084, 3083, 378, 3081, 
          3080, 368, 3072, 3071, 365, 3056, 3055, 354, 2973, 2972, 347, 3032, 
          375}], 
         Line[{272, 3000, 2999, 2998, 372, 3063, 362, 3047, 3046, 3045, 358, 
          3041, 336, 332, 3010, 3009, 3008, 3007, 320, 2911, 2910, 2909, 312, 
          351}], 
         Line[{277, 250, 2885, 2886, 2887, 258, 2891, 2892, 2893, 254, 2897, 
          265, 2918, 285, 2928, 2929, 2930, 289, 2949, 2950, 2951, 301, 2961, 
          305}], 
         Line[{308, 2970, 2969, 2968, 2967, 304, 292, 288, 2927, 2926, 2925, 
          2924, 268, 2905, 2904, 2903, 257, 261, 253, 2884, 2883, 2882, 280}], 
         Line[{313, 2912, 2913, 2914, 273, 281, 2940, 2941, 2942, 2943, 293, 
          297, 2980, 2981, 2982, 321, 2987, 325, 3011, 337, 2934, 2935, 2936, 
          341}], 
         Line[{344, 340, 3020, 3019, 3018, 3017, 328, 2994, 2993, 2992, 324, 
          2986, 300, 2960, 2959, 2958, 296, 2948, 284, 2878, 2877, 2876, 276, 
          316}], 
         Line[{348, 2974, 2975, 2976, 309, 317, 3001, 329, 3021, 3022, 3023, 
          333, 3033, 3034, 3035, 355, 359, 3057, 3058, 3059, 369, 269}], 
         Line[{373, 3027, 3028, 3029, 345, 352, 3048, 3049, 3050, 3051, 363, 
          366, 3073, 3074, 3075, 3076, 376, 379, 3085, 382, 3064, 3065, 3066, 
          262}], 
         Line[{399, 3287, 519, 3308, 3307, 3306, 516, 3302, 3301, 513, 3299, 
          3298, 503, 3290, 3289, 500, 3274, 3273, 489, 3191, 3190, 482, 3250, 
          510}], 
         Line[{407, 3218, 3217, 3216, 507, 3281, 497, 3265, 3264, 3263, 493, 
          3259, 471, 467, 3228, 3227, 3226, 3225, 455, 3129, 3128, 3127, 447, 
          486}], 
         Line[{412, 385, 3103, 3104, 3105, 393, 3109, 3110, 3111, 389, 3115, 
          400, 3136, 420, 3146, 3147, 3148, 424, 3167, 3168, 3169, 436, 3179, 
          440}], 
         Line[{443, 3188, 3187, 3186, 3185, 439, 427, 423, 3145, 3144, 3143, 
          3142, 403, 3123, 3122, 3121, 392, 396, 388, 3102, 3101, 3100, 415}], 
         Line[{448, 3130, 3131, 3132, 408, 416, 3158, 3159, 3160, 3161, 428, 
          432, 3198, 3199, 3200, 456, 3205, 460, 3229, 472, 3152, 3153, 3154, 
          476}], 
         Line[{479, 475, 3238, 3237, 3236, 3235, 463, 3212, 3211, 3210, 459, 
          3204, 435, 3178, 3177, 3176, 431, 3166, 419, 3096, 3095, 3094, 411, 
          451}], 
         Line[{483, 3192, 3193, 3194, 444, 452, 3219, 464, 3239, 3240, 3241, 
          468, 3251, 3252, 3253, 490, 494, 3275, 3276, 3277, 504, 404}], 
         Line[{508, 3245, 3246, 3247, 480, 487, 3266, 3267, 3268, 3269, 498, 
          501, 3291, 3292, 3293, 3294, 511, 514, 3303, 517, 3282, 3283, 3284, 
          397}], 
         Line[{534, 3505, 654, 3526, 3525, 3524, 651, 3520, 3519, 648, 3517, 
          3516, 638, 3508, 3507, 635, 3492, 3491, 624, 3409, 3408, 617, 3468, 
          645}], 
         Line[{542, 3436, 3435, 3434, 642, 3499, 632, 3483, 3482, 3481, 628, 
          3477, 606, 602, 3446, 3445, 3444, 3443, 590, 3347, 3346, 3345, 582, 
          621}], 
         Line[{547, 520, 3321, 3322, 3323, 528, 3327, 3328, 3329, 524, 3333, 
          535, 3354, 555, 3364, 3365, 3366, 559, 3385, 3386, 3387, 571, 3397, 
          575}], 
         Line[{578, 3406, 3405, 3404, 3403, 574, 562, 558, 3363, 3362, 3361, 
          3360, 538, 3341, 3340, 3339, 527, 531, 523, 3320, 3319, 3318, 550}], 
         Line[{583, 3348, 3349, 3350, 543, 551, 3376, 3377, 3378, 3379, 563, 
          567, 3416, 3417, 3418, 591, 3423, 595, 3447, 607, 3370, 3371, 3372, 
          611}], 
         Line[{614, 610, 3456, 3455, 3454, 3453, 598, 3430, 3429, 3428, 594, 
          3422, 570, 3396, 3395, 3394, 566, 3384, 554, 3314, 3313, 3312, 546, 
          586}], 
         Line[{618, 3410, 3411, 3412, 579, 587, 3437, 599, 3457, 3458, 3459, 
          603, 3469, 3470, 3471, 625, 629, 3493, 3494, 3495, 639, 539}], 
         Line[{643, 3463, 3464, 3465, 615, 622, 3484, 3485, 3486, 3487, 633, 
          636, 3509, 3510, 3511, 3512, 646, 649, 3521, 652, 3500, 3501, 3502, 
          532}], 
         Line[{669, 3723, 789, 3744, 3743, 3742, 786, 3738, 3737, 783, 3735, 
          3734, 773, 3726, 3725, 770, 3710, 3709, 759, 3627, 3626, 752, 3686, 
          780}], 
         Line[{677, 3654, 3653, 3652, 777, 3717, 767, 3701, 3700, 3699, 763, 
          3695, 741, 737, 3664, 3663, 3662, 3661, 725, 3565, 3564, 3563, 717, 
          756}], 
         Line[{682, 655, 3539, 3540, 3541, 663, 3545, 3546, 3547, 659, 3551, 
          670, 3572, 690, 3582, 3583, 3584, 694, 3603, 3604, 3605, 706, 3615, 
          710}], 
         Line[{713, 3624, 3623, 3622, 3621, 709, 697, 693, 3581, 3580, 3579, 
          3578, 673, 3559, 3558, 3557, 662, 666, 658, 3538, 3537, 3536, 685}], 
         Line[{718, 3566, 3567, 3568, 678, 686, 3594, 3595, 3596, 3597, 698, 
          702, 3634, 3635, 3636, 726, 3641, 730, 3665, 742, 3588, 3589, 3590, 
          746}], 
         Line[{749, 745, 3674, 3673, 3672, 3671, 733, 3648, 3647, 3646, 729, 
          3640, 705, 3614, 3613, 3612, 701, 3602, 689, 3532, 3531, 3530, 681, 
          721}], 
         Line[{753, 3628, 3629, 3630, 714, 722, 3655, 734, 3675, 3676, 3677, 
          738, 3687, 3688, 3689, 760, 764, 3711, 3712, 3713, 774, 674}], 
         Line[{778, 3681, 3682, 3683, 750, 757, 3702, 3703, 3704, 3705, 768, 
          771, 3727, 3728, 3729, 3730, 781, 784, 3739, 787, 3718, 3719, 3720, 
          667}], 
         Line[{804, 3941, 924, 3962, 3961, 3960, 921, 3956, 3955, 918, 3953, 
          3952, 908, 3944, 3943, 905, 3928, 3927, 894, 3845, 3844, 887, 3904, 
          915}], 
         Line[{812, 3872, 3871, 3870, 912, 3935, 902, 3919, 3918, 3917, 898, 
          3913, 876, 872, 3882, 3881, 3880, 3879, 860, 3783, 3782, 3781, 852, 
          891}], 
         Line[{817, 790, 3757, 3758, 3759, 798, 3763, 3764, 3765, 794, 3769, 
          805, 3790, 825, 3800, 3801, 3802, 829, 3821, 3822, 3823, 841, 3833, 
          845}], 
         Line[{848, 3842, 3841, 3840, 3839, 844, 832, 828, 3799, 3798, 3797, 
          3796, 808, 3777, 3776, 3775, 797, 801, 793, 3756, 3755, 3754, 820}], 
         Line[{853, 3784, 3785, 3786, 813, 821, 3812, 3813, 3814, 3815, 833, 
          837, 3852, 3853, 3854, 861, 3859, 865, 3883, 877, 3806, 3807, 3808, 
          881}], 
         Line[{884, 880, 3892, 3891, 3890, 3889, 868, 3866, 3865, 3864, 864, 
          3858, 840, 3832, 3831, 3830, 836, 3820, 824, 3750, 3749, 3748, 816, 
          856}], 
         Line[{888, 3846, 3847, 3848, 849, 857, 3873, 869, 3893, 3894, 3895, 
          873, 3905, 3906, 3907, 895, 899, 3929, 3930, 3931, 909, 809}], 
         Line[{913, 3899, 3900, 3901, 885, 892, 3920, 3921, 3922, 3923, 903, 
          906, 3945, 3946, 3947, 3948, 916, 919, 3957, 922, 3936, 3937, 3938, 
          802}], 
         Line[{939, 4159, 1059, 4180, 4179, 4178, 1056, 4174, 4173, 1053, 
          4171, 4170, 1043, 4162, 4161, 1040, 4146, 4145, 1029, 4063, 4062, 
          1022, 4122, 1050}], 
         Line[{947, 4090, 4089, 4088, 1047, 4153, 1037, 4137, 4136, 4135, 
          1033, 4131, 1011, 1007, 4100, 4099, 4098, 4097, 995, 4001, 4000, 
          3999, 987, 1026}], 
         Line[{952, 925, 3975, 3976, 3977, 933, 3981, 3982, 3983, 929, 3987, 
          940, 4008, 960, 4018, 4019, 4020, 964, 4039, 4040, 4041, 976, 4051, 
          980}], 
         Line[{983, 4060, 4059, 4058, 4057, 979, 967, 963, 4017, 4016, 4015, 
          4014, 943, 3995, 3994, 3993, 932, 936, 928, 3974, 3973, 3972, 955}], 
         Line[{988, 4002, 4003, 4004, 948, 956, 4030, 4031, 4032, 4033, 968, 
          972, 4070, 4071, 4072, 996, 4077, 1000, 4101, 1012, 4024, 4025, 
          4026, 1016}], 
         Line[{1019, 1015, 4110, 4109, 4108, 4107, 1003, 4084, 4083, 4082, 
          999, 4076, 975, 4050, 4049, 4048, 971, 4038, 959, 3968, 3967, 3966, 
          951, 991}], 
         Line[{1023, 4064, 4065, 4066, 984, 992, 4091, 1004, 4111, 4112, 4113,
           1008, 4123, 4124, 4125, 1030, 1034, 4147, 4148, 4149, 1044, 944}], 
         Line[{1048, 4117, 4118, 4119, 1020, 1027, 4138, 4139, 4140, 4141, 
          1038, 1041, 4163, 4164, 4165, 4166, 1051, 1054, 4175, 1057, 4154, 
          4155, 4156, 937}], 
         Line[{1074, 4377, 1194, 4398, 4397, 4396, 1191, 4392, 4391, 1188, 
          4389, 4388, 1178, 4380, 4379, 1175, 4364, 4363, 1164, 4281, 4280, 
          1157, 4340, 1185}], 
         Line[{1082, 4308, 4307, 4306, 1182, 4371, 1172, 4355, 4354, 4353, 
          1168, 4349, 1146, 1142, 4318, 4317, 4316, 4315, 1130, 4219, 4218, 
          4217, 1122, 1161}], 
         Line[{1087, 1060, 4193, 4194, 4195, 1068, 4199, 4200, 4201, 1064, 
          4205, 1075, 4226, 1095, 4236, 4237, 4238, 1099, 4257, 4258, 4259, 
          1111, 4269, 1115}], 
         Line[{1118, 4278, 4277, 4276, 4275, 1114, 1102, 1098, 4235, 4234, 
          4233, 4232, 1078, 4213, 4212, 4211, 1067, 1071, 1063, 4192, 4191, 
          4190, 1090}], 
         Line[{1123, 4220, 4221, 4222, 1083, 1091, 4248, 4249, 4250, 4251, 
          1103, 1107, 4288, 4289, 4290, 1131, 4295, 1135, 4319, 1147, 4242, 
          4243, 4244, 1151}], 
         Line[{1154, 1150, 4328, 4327, 4326, 4325, 1138, 4302, 4301, 4300, 
          1134, 4294, 1110, 4268, 4267, 4266, 1106, 4256, 1094, 4186, 4185, 
          4184, 1086, 1126}], 
         Line[{1158, 4282, 4283, 4284, 1119, 1127, 4309, 1139, 4329, 4330, 
          4331, 1143, 4341, 4342, 4343, 1165, 1169, 4365, 4366, 4367, 1179, 
          1079}], 
         Line[{1183, 4335, 4336, 4337, 1155, 1162, 4356, 4357, 4358, 4359, 
          1173, 1176, 4381, 4382, 4383, 4384, 1186, 1189, 4393, 1192, 4372, 
          4373, 4374, 1072}], 
         Line[{1209, 4595, 1329, 4616, 4615, 4614, 1326, 4610, 4609, 1323, 
          4607, 4606, 1313, 4598, 4597, 1310, 4582, 4581, 1299, 4499, 4498, 
          1292, 4558, 1320}], 
         Line[{1217, 4526, 4525, 4524, 1317, 4589, 1307, 4573, 4572, 4571, 
          1303, 4567, 1281, 1277, 4536, 4535, 4534, 4533, 1265, 4437, 4436, 
          4435, 1257, 1296}], 
         Line[{1222, 1195, 4411, 4412, 4413, 1203, 4417, 4418, 4419, 1199, 
          4423, 1210, 4444, 1230, 4454, 4455, 4456, 1234, 4475, 4476, 4477, 
          1246, 4487, 1250}], 
         Line[{1253, 4496, 4495, 4494, 4493, 1249, 1237, 1233, 4453, 4452, 
          4451, 4450, 1213, 4431, 4430, 4429, 1202, 1206, 1198, 4410, 4409, 
          4408, 1225}], 
         Line[{1258, 4438, 4439, 4440, 1218, 1226, 4466, 4467, 4468, 4469, 
          1238, 1242, 4506, 4507, 4508, 1266, 4513, 1270, 4537, 1282, 4460, 
          4461, 4462, 1286}], 
         Line[{1289, 1285, 4546, 4545, 4544, 4543, 1273, 4520, 4519, 4518, 
          1269, 4512, 1245, 4486, 4485, 4484, 1241, 4474, 1229, 4404, 4403, 
          4402, 1221, 1261}], 
         Line[{1293, 4500, 4501, 4502, 1254, 1262, 4527, 1274, 4547, 4548, 
          4549, 1278, 4559, 4560, 4561, 1300, 1304, 4583, 4584, 4585, 1314, 
          1214}], 
         Line[{1318, 4553, 4554, 4555, 1290, 1297, 4574, 4575, 4576, 4577, 
          1308, 1311, 4599, 4600, 4601, 4602, 1321, 1324, 4611, 1327, 4590, 
          4591, 4592, 1207}], 
         Line[{1344, 4813, 1464, 4834, 4833, 4832, 1461, 4828, 4827, 1458, 
          4825, 4824, 1448, 4816, 4815, 1445, 4800, 4799, 1434, 4717, 4716, 
          1427, 4776, 1455}], 
         Line[{1352, 4744, 4743, 4742, 1452, 4807, 1442, 4791, 4790, 4789, 
          1438, 4785, 1416, 1412, 4754, 4753, 4752, 4751, 1400, 4655, 4654, 
          4653, 1392, 1431}], 
         Line[{1357, 1330, 4629, 4630, 4631, 1338, 4635, 4636, 4637, 1334, 
          4641, 1345, 4662, 1365, 4672, 4673, 4674, 1369, 4693, 4694, 4695, 
          1381, 4705, 1385}], 
         Line[{1388, 4714, 4713, 4712, 4711, 1384, 1372, 1368, 4671, 4670, 
          4669, 4668, 1348, 4649, 4648, 4647, 1337, 1341, 1333, 4628, 4627, 
          4626, 1360}], 
         Line[{1393, 4656, 4657, 4658, 1353, 1361, 4684, 4685, 4686, 4687, 
          1373, 1377, 4724, 4725, 4726, 1401, 4731, 1405, 4755, 1417, 4678, 
          4679, 4680, 1421}], 
         Line[{1424, 1420, 4764, 4763, 4762, 4761, 1408, 4738, 4737, 4736, 
          1404, 4730, 1380, 4704, 4703, 4702, 1376, 4692, 1364, 4622, 4621, 
          4620, 1356, 1396}], 
         Line[{1428, 4718, 4719, 4720, 1389, 1397, 4745, 1409, 4765, 4766, 
          4767, 1413, 4777, 4778, 4779, 1435, 1439, 4801, 4802, 4803, 1449, 
          1349}], 
         Line[{1453, 4771, 4772, 4773, 1425, 1432, 4792, 4793, 4794, 4795, 
          1443, 1446, 4817, 4818, 4819, 4820, 1456, 1459, 4829, 1462, 4808, 
          4809, 4810, 1342}], 
         Line[{1479, 5032, 1591, 5053, 5052, 5051, 1588, 5047, 5046, 1585, 
          5044, 5043, 1579, 5035, 5034, 1568, 5010, 5009, 1565, 5013, 5012, 
          1554, 4948, 1582}], 
         Line[{1487, 4976, 4975, 4974, 1576, 5026, 1572, 5019, 5018, 5017, 
          1562, 5001, 1547, 4986, 4985, 4984, 4983, 1535, 4873, 4872, 4871, 
          1527, 1558}], 
         Line[{1492, 1465, 4847, 4848, 4849, 1473, 4853, 4854, 4855, 1469, 
          4859, 1480, 4880, 1500, 4890, 4891, 4892, 1504, 4911, 4912, 4913, 
          1516, 4933, 1520}], 
         Line[{1523, 4942, 4941, 4940, 4939, 1519, 1507, 1503, 4889, 4888, 
          4887, 4886, 1483, 4867, 4866, 4865, 1472, 1476, 1468, 4846, 4845, 
          4844, 1495}], 
         Line[{1528, 4874, 4875, 4876, 1488, 1496, 4902, 4903, 4904, 4905, 
          1508, 4917, 1512, 4955, 4956, 4957, 1536, 4961, 1540, 4896, 4897, 
          4898, 1548}], 
         Line[{1551, 1543, 4970, 4969, 4968, 4967, 1539, 1515, 4932, 4931, 
          4930, 4929, 4928, 4927, 4926, 1511, 4910, 1499, 4840, 4839, 4838, 
          1491, 1531}], 
         Line[{1555, 4949, 4950, 4951, 1524, 1532, 4977, 1544, 4987, 4988, 
          4989, 4990, 4991, 4992, 1559, 1569, 5020, 5021, 5022, 1573, 1484}], 
         Line[{1580, 4943, 4944, 4945, 1552, 1563, 5002, 5003, 5004, 5005, 
          1566, 1577, 5036, 5037, 5038, 5039, 1583, 1586, 5048, 1589, 5027, 
          5028, 5029, 1477}], 
         Line[{263, 3068, 3067, 383, 3087, 3086, 380, 3082, 377, 3079, 3078, 
          3077, 367, 3070, 364, 3054, 3053, 3052, 353, 2971, 346, 3031, 3030, 
          374}], 
         Line[{270, 2995, 370, 3061, 3060, 360, 3042, 356, 3038, 3037, 3036, 
          334, 3025, 3024, 330, 3003, 3002, 318, 2906, 310, 2978, 2977, 349}], 
         Line[{271, 2997, 2996, 371, 3062, 361, 3044, 3043, 357, 3040, 3039, 
          335, 3026, 331, 3006, 3005, 3004, 319, 2908, 2907, 311, 2979, 350}], 
         Line[{278, 2879, 251, 2888, 2889, 259, 2894, 2895, 255, 2898, 2899, 
          266, 2919, 2920, 286, 2931, 2932, 290, 2952, 2953, 302, 2962, 2963, 
          306}], 
         Line[{279, 2880, 2881, 252, 2890, 260, 2896, 256, 2900, 2901, 2902, 
          267, 2921, 2922, 2923, 287, 2933, 291, 2954, 303, 2964, 2965, 2966, 
          307}], 
         Line[{314, 2915, 2916, 274, 2873, 282, 2944, 2945, 2946, 294, 2955, 
          298, 2983, 2984, 322, 2988, 2989, 326, 3012, 3013, 338, 2937, 2938, 
          342}], 
         Line[{315, 2917, 275, 2874, 2875, 283, 2947, 295, 2956, 2957, 299, 
          2985, 323, 2990, 2991, 327, 3014, 3015, 3016, 339, 2939, 343}], 
         Line[{398, 3286, 3285, 518, 3305, 3304, 515, 3300, 512, 3297, 3296, 
          3295, 502, 3288, 499, 3272, 3271, 3270, 488, 3189, 481, 3249, 3248, 
          509}], 
         Line[{405, 3213, 505, 3279, 3278, 495, 3260, 491, 3256, 3255, 3254, 
          469, 3243, 3242, 465, 3221, 3220, 453, 3124, 445, 3196, 3195, 484}], 
         Line[{406, 3215, 3214, 506, 3280, 496, 3262, 3261, 492, 3258, 3257, 
          470, 3244, 466, 3224, 3223, 3222, 454, 3126, 3125, 446, 3197, 485}], 
         Line[{413, 3097, 386, 3106, 3107, 394, 3112, 3113, 390, 3116, 3117, 
          401, 3137, 3138, 421, 3149, 3150, 425, 3170, 3171, 437, 3180, 3181, 
          441}], 
         Line[{414, 3098, 3099, 387, 3108, 395, 3114, 391, 3118, 3119, 3120, 
          402, 3139, 3140, 3141, 422, 3151, 426, 3172, 438, 3182, 3183, 3184, 
          442}], 
         Line[{449, 3133, 3134, 409, 3091, 417, 3162, 3163, 3164, 429, 3173, 
          433, 3201, 3202, 457, 3206, 3207, 461, 3230, 3231, 473, 3155, 3156, 
          477}], 
         Line[{450, 3135, 410, 3092, 3093, 418, 3165, 430, 3174, 3175, 434, 
          3203, 458, 3208, 3209, 462, 3232, 3233, 3234, 474, 3157, 478}], 
         Line[{533, 3504, 3503, 653, 3523, 3522, 650, 3518, 647, 3515, 3514, 
          3513, 637, 3506, 634, 3490, 3489, 3488, 623, 3407, 616, 3467, 3466, 
          644}], 
         Line[{540, 3431, 640, 3497, 3496, 630, 3478, 626, 3474, 3473, 3472, 
          604, 3461, 3460, 600, 3439, 3438, 588, 3342, 580, 3414, 3413, 619}], 
         Line[{541, 3433, 3432, 641, 3498, 631, 3480, 3479, 627, 3476, 3475, 
          605, 3462, 601, 3442, 3441, 3440, 589, 3344, 3343, 581, 3415, 620}], 
         Line[{548, 3315, 521, 3324, 3325, 529, 3330, 3331, 525, 3334, 3335, 
          536, 3355, 3356, 556, 3367, 3368, 560, 3388, 3389, 572, 3398, 3399, 
          576}], 
         Line[{549, 3316, 3317, 522, 3326, 530, 3332, 526, 3336, 3337, 3338, 
          537, 3357, 3358, 3359, 557, 3369, 561, 3390, 573, 3400, 3401, 3402, 
          577}], 
         Line[{584, 3351, 3352, 544, 3309, 552, 3380, 3381, 3382, 564, 3391, 
          568, 3419, 3420, 592, 3424, 3425, 596, 3448, 3449, 608, 3373, 3374, 
          612}], 
         Line[{585, 3353, 545, 3310, 3311, 553, 3383, 565, 3392, 3393, 569, 
          3421, 593, 3426, 3427, 597, 3450, 3451, 3452, 609, 3375, 613}], 
         Line[{668, 3722, 3721, 788, 3741, 3740, 785, 3736, 782, 3733, 3732, 
          3731, 772, 3724, 769, 3708, 3707, 3706, 758, 3625, 751, 3685, 3684, 
          779}], 
         Line[{675, 3649, 775, 3715, 3714, 765, 3696, 761, 3692, 3691, 3690, 
          739, 3679, 3678, 735, 3657, 3656, 723, 3560, 715, 3632, 3631, 754}], 
         Line[{676, 3651, 3650, 776, 3716, 766, 3698, 3697, 762, 3694, 3693, 
          740, 3680, 736, 3660, 3659, 3658, 724, 3562, 3561, 716, 3633, 755}], 
         Line[{683, 3533, 656, 3542, 3543, 664, 3548, 3549, 660, 3552, 3553, 
          671, 3573, 3574, 691, 3585, 3586, 695, 3606, 3607, 707, 3616, 3617, 
          711}], 
         Line[{684, 3534, 3535, 657, 3544, 665, 3550, 661, 3554, 3555, 3556, 
          672, 3575, 3576, 3577, 692, 3587, 696, 3608, 708, 3618, 3619, 3620, 
          712}], 
         Line[{719, 3569, 3570, 679, 3527, 687, 3598, 3599, 3600, 699, 3609, 
          703, 3637, 3638, 727, 3642, 3643, 731, 3666, 3667, 743, 3591, 3592, 
          747}], 
         Line[{720, 3571, 680, 3528, 3529, 688, 3601, 700, 3610, 3611, 704, 
          3639, 728, 3644, 3645, 732, 3668, 3669, 3670, 744, 3593, 748}], 
         Line[{803, 3940, 3939, 923, 3959, 3958, 920, 3954, 917, 3951, 3950, 
          3949, 907, 3942, 904, 3926, 3925, 3924, 893, 3843, 886, 3903, 3902, 
          914}], 
         Line[{810, 3867, 910, 3933, 3932, 900, 3914, 896, 3910, 3909, 3908, 
          874, 3897, 3896, 870, 3875, 3874, 858, 3778, 850, 3850, 3849, 889}], 
         Line[{811, 3869, 3868, 911, 3934, 901, 3916, 3915, 897, 3912, 3911, 
          875, 3898, 871, 3878, 3877, 3876, 859, 3780, 3779, 851, 3851, 890}], 
         Line[{818, 3751, 791, 3760, 3761, 799, 3766, 3767, 795, 3770, 3771, 
          806, 3791, 3792, 826, 3803, 3804, 830, 3824, 3825, 842, 3834, 3835, 
          846}], 
         Line[{819, 3752, 3753, 792, 3762, 800, 3768, 796, 3772, 3773, 3774, 
          807, 3793, 3794, 3795, 827, 3805, 831, 3826, 843, 3836, 3837, 3838, 
          847}], 
         Line[{854, 3787, 3788, 814, 3745, 822, 3816, 3817, 3818, 834, 3827, 
          838, 3855, 3856, 862, 3860, 3861, 866, 3884, 3885, 878, 3809, 3810, 
          882}], 
         Line[{855, 3789, 815, 3746, 3747, 823, 3819, 835, 3828, 3829, 839, 
          3857, 863, 3862, 3863, 867, 3886, 3887, 3888, 879, 3811, 883}], 
         Line[{938, 4158, 4157, 1058, 4177, 4176, 1055, 4172, 1052, 4169, 
          4168, 4167, 1042, 4160, 1039, 4144, 4143, 4142, 1028, 4061, 1021, 
          4121, 4120, 1049}], 
         Line[{945, 4085, 1045, 4151, 4150, 1035, 4132, 1031, 4128, 4127, 
          4126, 1009, 4115, 4114, 1005, 4093, 4092, 993, 3996, 985, 4068, 
          4067, 1024}], 
         Line[{946, 4087, 4086, 1046, 4152, 1036, 4134, 4133, 1032, 4130, 
          4129, 1010, 4116, 1006, 4096, 4095, 4094, 994, 3998, 3997, 986, 
          4069, 1025}], 
         Line[{953, 3969, 926, 3978, 3979, 934, 3984, 3985, 930, 3988, 3989, 
          941, 4009, 4010, 961, 4021, 4022, 965, 4042, 4043, 977, 4052, 4053, 
          981}], 
         Line[{954, 3970, 3971, 927, 3980, 935, 3986, 931, 3990, 3991, 3992, 
          942, 4011, 4012, 4013, 962, 4023, 966, 4044, 978, 4054, 4055, 4056, 
          982}], 
         Line[{989, 4005, 4006, 949, 3963, 957, 4034, 4035, 4036, 969, 4045, 
          973, 4073, 4074, 997, 4078, 4079, 1001, 4102, 4103, 1013, 4027, 
          4028, 1017}], 
         Line[{990, 4007, 950, 3964, 3965, 958, 4037, 970, 4046, 4047, 974, 
          4075, 998, 4080, 4081, 1002, 4104, 4105, 4106, 1014, 4029, 1018}], 
         Line[{1073, 4376, 4375, 1193, 4395, 4394, 1190, 4390, 1187, 4387, 
          4386, 4385, 1177, 4378, 1174, 4362, 4361, 4360, 1163, 4279, 1156, 
          4339, 4338, 1184}], 
         Line[{1080, 4303, 1180, 4369, 4368, 1170, 4350, 1166, 4346, 4345, 
          4344, 1144, 4333, 4332, 1140, 4311, 4310, 1128, 4214, 1120, 4286, 
          4285, 1159}], 
         Line[{1081, 4305, 4304, 1181, 4370, 1171, 4352, 4351, 1167, 4348, 
          4347, 1145, 4334, 1141, 4314, 4313, 4312, 1129, 4216, 4215, 1121, 
          4287, 1160}], 
         Line[{1088, 4187, 1061, 4196, 4197, 1069, 4202, 4203, 1065, 4206, 
          4207, 1076, 4227, 4228, 1096, 4239, 4240, 1100, 4260, 4261, 1112, 
          4270, 4271, 1116}], 
         Line[{1089, 4188, 4189, 1062, 4198, 1070, 4204, 1066, 4208, 4209, 
          4210, 1077, 4229, 4230, 4231, 1097, 4241, 1101, 4262, 1113, 4272, 
          4273, 4274, 1117}], 
         Line[{1124, 4223, 4224, 1084, 4181, 1092, 4252, 4253, 4254, 1104, 
          4263, 1108, 4291, 4292, 1132, 4296, 4297, 1136, 4320, 4321, 1148, 
          4245, 4246, 1152}], 
         Line[{1125, 4225, 1085, 4182, 4183, 1093, 4255, 1105, 4264, 4265, 
          1109, 4293, 1133, 4298, 4299, 1137, 4322, 4323, 4324, 1149, 4247, 
          1153}], 
         Line[{1208, 4594, 4593, 1328, 4613, 4612, 1325, 4608, 1322, 4605, 
          4604, 4603, 1312, 4596, 1309, 4580, 4579, 4578, 1298, 4497, 1291, 
          4557, 4556, 1319}], 
         Line[{1215, 4521, 1315, 4587, 4586, 1305, 4568, 1301, 4564, 4563, 
          4562, 1279, 4551, 4550, 1275, 4529, 4528, 1263, 4432, 1255, 4504, 
          4503, 1294}], 
         Line[{1216, 4523, 4522, 1316, 4588, 1306, 4570, 4569, 1302, 4566, 
          4565, 1280, 4552, 1276, 4532, 4531, 4530, 1264, 4434, 4433, 1256, 
          4505, 1295}], 
         Line[{1223, 4405, 1196, 4414, 4415, 1204, 4420, 4421, 1200, 4424, 
          4425, 1211, 4445, 4446, 1231, 4457, 4458, 1235, 4478, 4479, 1247, 
          4488, 4489, 1251}], 
         Line[{1224, 4406, 4407, 1197, 4416, 1205, 4422, 1201, 4426, 4427, 
          4428, 1212, 4447, 4448, 4449, 1232, 4459, 1236, 4480, 1248, 4490, 
          4491, 4492, 1252}], 
         Line[{1259, 4441, 4442, 1219, 4399, 1227, 4470, 4471, 4472, 1239, 
          4481, 1243, 4509, 4510, 1267, 4514, 4515, 1271, 4538, 4539, 1283, 
          4463, 4464, 1287}], 
         Line[{1260, 4443, 1220, 4400, 4401, 1228, 4473, 1240, 4482, 4483, 
          1244, 4511, 1268, 4516, 4517, 1272, 4540, 4541, 4542, 1284, 4465, 
          1288}], 
         Line[{1343, 4812, 4811, 1463, 4831, 4830, 1460, 4826, 1457, 4823, 
          4822, 4821, 1447, 4814, 1444, 4798, 4797, 4796, 1433, 4715, 1426, 
          4775, 4774, 1454}], 
         Line[{1350, 4739, 1450, 4805, 4804, 1440, 4786, 1436, 4782, 4781, 
          4780, 1414, 4769, 4768, 1410, 4747, 4746, 1398, 4650, 1390, 4722, 
          4721, 1429}], 
         Line[{1351, 4741, 4740, 1451, 4806, 1441, 4788, 4787, 1437, 4784, 
          4783, 1415, 4770, 1411, 4750, 4749, 4748, 1399, 4652, 4651, 1391, 
          4723, 1430}], 
         Line[{1358, 4623, 1331, 4632, 4633, 1339, 4638, 4639, 1335, 4642, 
          4643, 1346, 4663, 4664, 1366, 4675, 4676, 1370, 4696, 4697, 1382, 
          4706, 4707, 1386}], 
         Line[{1359, 4624, 4625, 1332, 4634, 1340, 4640, 1336, 4644, 4645, 
          4646, 1347, 4665, 4666, 4667, 1367, 4677, 1371, 4698, 1383, 4708, 
          4709, 4710, 1387}], 
         Line[{1394, 4659, 4660, 1354, 4617, 1362, 4688, 4689, 4690, 1374, 
          4699, 1378, 4727, 4728, 1402, 4732, 4733, 1406, 4756, 4757, 1418, 
          4681, 4682, 1422}], 
         Line[{1395, 4661, 1355, 4618, 4619, 1363, 4691, 1375, 4700, 4701, 
          1379, 4729, 1403, 4734, 4735, 1407, 4758, 4759, 4760, 1419, 4683, 
          1423}], 
         Line[{1478, 5031, 5030, 1590, 5050, 5049, 1587, 5045, 1584, 5042, 
          5041, 5040, 1578, 5033, 1567, 5008, 5007, 5006, 1564, 5011, 1553, 
          4947, 4946, 1581}], 
         Line[{1485, 4971, 1574, 5024, 5023, 1570, 5014, 1560, 4997, 4996, 
          4995, 4994, 4993, 1545, 4979, 4978, 1533, 4868, 1525, 4953, 4952, 
          1556}], 
         Line[{1486, 4973, 4972, 1575, 5025, 1571, 5016, 5015, 1561, 5000, 
          4999, 4998, 1546, 4982, 4981, 4980, 1534, 4870, 4869, 1526, 4954, 
          1557}], 
         Line[{1493, 4841, 1466, 4850, 4851, 1474, 4856, 4857, 1470, 4860, 
          4861, 1481, 4881, 4882, 1501, 4893, 4894, 1505, 4914, 4915, 1517, 
          4934, 4935, 1521}], 
         Line[{1494, 4842, 4843, 1467, 4852, 1475, 4858, 1471, 4862, 4863, 
          4864, 1482, 4883, 4884, 4885, 1502, 4895, 1506, 4916, 1518, 4936, 
          4937, 4938, 1522}], 
         Line[{1529, 4877, 4878, 1489, 4835, 1497, 4906, 4907, 4908, 1509, 
          4918, 4919, 4920, 1513, 4958, 4959, 1537, 4962, 4963, 1541, 4899, 
          4900, 1549}], 
         Line[{1530, 4879, 1490, 4836, 4837, 1498, 4909, 1510, 4921, 4922, 
          4923, 4924, 4925, 1514, 4960, 1538, 4964, 4965, 4966, 1542, 4901, 
          1550}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
D/o8jk8N8GrKlUGqBcvnfQeOi+mkgL5AuoZ8RxOE95zi1WvG4mzh3/bJIbFP
xMKN9d/7a2BATWR6SaUckvxCWzP6sfyBdXjUcLgUhvlpzwoK5ALFSfr0/Zj9
d2QP8yqYZYJWeOsD6wvRMFS4sN6LfZcqkWftx46/edaeE3nWPMhHnN6dvgPV
Xke7fIJS0BUlCcE+bD9k0w/oszcOhu6VCr/EwhzEWCZHlovNu9IgzX33DwnA
r1q7k5f2AeLj27mT4//HPpnMrhLalzyRLcyt3iKLRPtmjdrwPnD+U1rTa2qO
KEpun+S6ZBQaJHvtj9ebD+Ze7D583BKlNi+LRvtEIx11mg783HXiP/jmmrf0
KFn9lkMXS8bev4+sBzMGecHmF0tQcOOh4tc7t1BhxcVtK86VMO6TPnl+Bsuv
hKW+lZWpott1ep/fNhVAeZZ+isnaEnQS+eNeEfnj9hH540IfMk2WvbWB6uqw
7z1pgbBZMNWOr6OHkd/Z83dawauB0v6XN0Ihrc3GFd8fnqrHtJ2wMwUJ9tTT
Q5tY/bJzwAA/T7Mirt8nJOuXrjXEZisNPeLZcOsXWXkELFW///Rj68Vv72Ga
SVoJsHjcyX1T/CHEkpmvnZzH6tMndTVvmRUgsjKsO3AjB6T71F8dxOaXg8hz
507Cc/fG1eGmm1Uq8BWKFwVEFiLVUaFTuth8hepPZU3IxAGtUlHSZEUmcr6l
V8OL6ZmQUb1cfy0c5L8O3riWGY1+VflcT8TxnYj+E0n9b/9R33Z47uX2YLhN
w7NX+VIdYu7/pW79Gtu3f8rejTzuh7brZ9PIdiN0S9STleMJVo9LliidZs1E
Ar81ehlznqLd7d3U95Kw9Ujk+9Mi4ftzuKv7sFYlBjXcjE/yVHwEO5qyo08P
LcHJqI+XgqhzkOC+MEq9r+UwPzfwqu4TVsdNvPHPmC5BbQQpu7lDmfD5dWSZ
5Wfsu4h8f2RC/+b7eyv9JvvT4xCUYDLXfu6HPuquOcKC36dT72Jj7B7LRJ4L
41VNVHeR3+ulcjJs/5lNlBic6ShGLQZp80PHL6B1HtMx6tX/6X9Cwid4q0Ol
4ZNfMpiJHOqsNHyARC5xrlxfXgLLqKNuKnZRkHiCZ7pXIxfF2tw0DFjH8vmh
tVe/272BI+en2d7CNPT50IPAn9j/9Tz+N+/hSRLewz+D50MVupXRpPfv7Dix
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
7gu6qfnCdImv4OE6Q2Roki+D7etJfZT1ZH2UXTULtL8dTaFcAjZ63Q8E7X1X
j+E+l9LEdq/X286hVpdrkyXNfjByXCYnENeZc+0Ktz1lj7y/8L9vrPIGnaYC
bVw3yPRagPn7J3fwrzJvdW7QAroxF6kuwi5B6g+9QtYfuoXUl1pF1pe6921Z
t9leXaDP1nBVe+8Ldzs2+kcQ9j0FXRxnRy1Qy9nMIplvrpCXco8L9wFdfXVA
2WaLNzrBmiC55YQF7N+jMo/f9+pYjN7WrXUE8eA37uznXdF937nD5YR9+cxO
fcod+sT4T3Smanuh8MjQh7gPN7iV936d81XUdvV3USKVH2r9UraKeR28NY2X
dc+Hod2DXl2UFJHoiaD/k/2E/43bmURvzAUjF2HPm8/MA1EGTeFtrD/Fu+cU
9+c3Uag45vsn1awwZMjuV4T52689u7c2CUaiOMqdB4Vc3ZGX+ff9nfh9Kanv
ciL/f/suo7LRlpkCN2T7U3jTlVl92Hwj6NADwr7urcAO4S5OiKNgWCvLsiHy
1WgVfj9JTer7ayDr+xv0vfsqNDUW6q7yC140vAHDXtV0asR9U0xHy/SfZ8Dl
MM9pSX0fCEnpdy0h1tE+Un8iC1l/4p+O9ucRwXlwGN5/MjscCRsOVV1uIPZL
4gFdz9p6AmDzyjFbFOiI6LNc/q7TZPHX0l1DofCq119h6YUnuurz4O+6Lmv8
qPByLhK8aL9oui74If7dxxpxHHjDY7I7X5sXuhVc81RjIyFC+8E23HeTUZt3
VddbFeLTneQPbwyH2ZaEAswVH/Sk3BQwchGcbTj1uz8Fg+qHHDVcp/fm/mmn
97mhyHBhf7TQsi6sxFLqHiDsWXnfYwODvNDxjGfPHV/YwbazlLMJhJ0xkfpU
S/0NZB0tU/aazQvKvym6leJ9yJHHVsOvTKFd9vRBv7EQEDA1O4r3acXniqma
KK1BKlttsHQ+AgJYJz7hPhR6RrVC5dhbEHw4pfc9RTSk6F3gwn1J71e+5Mwa
haD7mXHcRkT+Seq93o/reTQsmcP4dnig3GtqRSbZLuhwPj8zrt9r7uCmnA7Q
QodK6agSvLzR3gsyUXjfaFAx+BqI+XxG1dnvWoADOGaP8LYSdqPQiwVHEk3h
91m5a8FbvCDTgg/hvJBgP0Q/6GWHWCIe1E8c8EKH5APH8PUp9MQKGT7tRXtv
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
YUvpZ++5p8kQcefApnTqPvkPnu4YuG0LLCFY/i8qCoQFlVNIHLF+9M039oUA
uO5hUC3dFQ+rNrTzkn6JzwLYGJNYAsBCkm4qnSEH/Ue4vck8Zzxf3z8dFQIH
aPrf/vuQjHQJli5N1P1tN4W6GTKFgy1n3m4aT3/kW3nvKKlbKZC5vaapOxhu
nqOdO2qchkN1xf9cqOsPMm0SNrAPgztRI79fxIThnSfHjhKdTcR7KEz9USgM
BpZdqjkWjTp3fqaT/ngVc6edEtZFABt7msXb2gTICFq18IiskyumO+lbQuDy
aIfY/K04uGe61YqRut5XwNR46kQwWNRcjOjPj4afQx8YCTdc4ct24ZlXfrCh
OF98zS3K/ypgVSL1j8JXtAJf1vnCcXpz2vG8SMjOmlxO+lGkMF0PvZ7pDTQP
ZH61hIfBnt12toR3WSuyhlUvNhKGeqVWc7WchOzpaR7CMd9/WIDG4UsEjMp+
mqqsFEEZZ/kkogeeS+5kaL0dAonPOYaUHrmC+/lJfXLOEiZ0XyxAMwI+XYwQ
k75lhVY25Yrk+hMBxkffbA4BrnPGpWfrTSFOrvYJ8WPLNu9TVn/rA53H9+LH
Wl8IVMmQIJwsOoFf7yKvhMNNBz+Oz7MeWNm9bwepe23r2iM7QhMMrObNDeIB
ypjRFB5L+OY5HRw5EaXecMT+V+2stDMIv5q6TvQTwTfe/bOJjiD4GQIadEMg
fF/XJfJduEb/a2NdG4AlrZorHiyEonah0FPCGXdaqXyyTs0HNcKT33g/8cTl
wfTM5P6/kX1dPZsKpHx16WJuO4FhtR8vEB1pTd60027VIDixN9ZcIiIZggPW
m5LzDs7iewtFSl4w6dh06Y1QAvRKMzWQ/oTPr39n/OtjCzXywBx6PwYMt5jv
IeuDbrxl8lsaPQgyl8vi54qFCQXDLYQv75TdEjq0Tg9b/E4OX2yMhJf7FEtI
n3xt/k1JHoe8MGp820j91TA41lBhSPp5rg/4cmSlbTQo+VSvb65LgpM3eljj
qfHs9spImrOIhNuKZmrrD4aDNuvyEUnq+gvr6gJvGodDnZ12yRsVF7j9Spw7
ncQpOm/yw5dT1zVU+d4tiIULEXGhZH1zCDmiqjcfAhsihUu+GQRAtFTrFZK3
U2y1+WXPvkDwes/76VpEBOw8Ia9Jxi/P19UY7+kJ5nEROdueB8FbFwdnUh93
+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
PVXoiZbTpYeoey6vuW6rDRFGYBt/JNLVMwpFHTb6UueRhfjmx2VnZFDdcu5D
UmQKKJW8D4gidsdToj0Tv1oZFQeHC91do2B+fasQ1cfnV9P0aP0tNRReEwoC
uZ6wQeLFRSqP5fSj5d93TmjilfD2z46SiniyZHsElcfFlBFeI8ishQ0fWlxG
N/iimaBEDlU/9mRRxg3eFW1sUshdWScZg+5/rhqeI/z5qptctL7poFRK++E8
i1T8GtnTxUzmE/WGNj+5KBZrTHc0jG7JwfedkilXyHpNbLUoeVIWggovkzPK
C7Jx/pPWA1WyXmNrdp4/lRiKQt5Zf8M0s5CTd0flMaJvSw0uChUWruibWPOE
ViYbj21eTM8i4yaqEklvz7ij/pz9qcmJTHye+KgolughQ2v4aP9mT7xQ9zWr
JSoDg81OzDiQ/WXputBFl54z6GW+Ue5NexZmm6kduEHol84Is+5010TWKbP5
Vw6ZuMx4YIW67y72jfCqDriLykZa2mVCGZh9Fv+eI/ZofZ9X5MvHe9jzvssr
sjMNvR3OHhUidsS1Y39x0x97VG+2sW0QyQemZyp2luR/71ixHA7TMMZk4ZXi
31yZILb3U34c4S89c6Nh2ZcbaTzXlZ5ZSQKlq6rCDsSuG76Y+JlPOMHY1J+a
/adzIP8DndAkkc/fC03ls2pe8HPkpaHKvjSgUfZlpvogy3QXph25FwVh2z/b
2mlmAltoo8YeIp+P/XsDuBqdIf2mxmFOwTLgL7kukDU0DR/MuRX6Ai5AocSF
eou0YnDdG0lP9cE8vmMouDTPDoe+FFgYnMiDEZtX2VeIPxzIK3qvzWiN66bW
XehUKoGqDUnKAd+IvSsaOH+/5IsnH3EYyQYUwg/Nm5seE7u+INGW56ofhgMR
j0YlTIohPLXK6ur4NJzTF+xoOBQE8jVn+A70O+Gl/U7xVN2/r7WRqmvK3KCX
62W80uUIlAvjeZlM9Xc4UztCz2gOtD0+c6HbUnBN489lqi+8mFFvJ7+nK0SN
Ke5ta4/Aq+vNsiMJPbOcjOrd6yYgn3zy4NvrKbiULmqZS+iztBf5nqUZwpGm
YIf1sSn4y7u31peMW618dl64po7PNfeM/2PLRia1Rv19RB9OzIrcE2y5idMp
m3IPXshGWb67Nr+IPGPOlWkfHrqMBzN2HW6kL8A1n3Ptholfst565aAw7108
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
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       9.705451964196053*^-9, 1.7305972658836863`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.415, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.56, $CellContext`k4$$ = 
    0.77, $CellContext`k5$$ = 
    0.77, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.8550000000000001, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 
     0.25, {2, 1, {-1, -1}} -> 0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
     0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 
     0.25, {2, 2, {-1, 0}} -> 0.415, {2, 2, {0, -1}} -> 
     0.25, {2, 2, {-1, -1}} -> 0.56, {2, 2, {-1, 1}} -> 0.77, {2, 2, {1, 0}} -> 
     0.415, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 0.56, {2, 2, {1, -1}} -> 
     0.77, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 
     0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 0.25, {1, 3, {0, 1}} -> 
     0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 
     0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 
     0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 
     0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 
     0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 0.25, {3, 1, {-1, -1}} -> 
     0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 0.25, {3, 1, {0, 1}} -> 
     0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 0.25, {3, 2, {-1, 0}} -> 
     0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 0.25, {3, 2, {-1, 1}} -> 
     0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 0.25, {3, 2, {1, 1}} -> 
     0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 0.25, {3, 3, {0, -1}} -> 
     0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 0.25, {3, 3, {1, 0}} -> 
     0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 0.25, {3, 3, {1, -1}} -> 
     0.25, {1, 4, {-1, 0}} -> 0.25, {1, 4, {0, -1}} -> 0.25, {1, 4, {-1, -1}} -> 
     0.25, {1, 4, {-1, 1}} -> 0.25, {1, 4, {1, 0}} -> 0.25, {1, 4, {0, 1}} -> 
     0.25, {1, 4, {1, 1}} -> 0.25, {1, 4, {1, -1}} -> 0.25, {1, 4, {0, 0}} -> 
     0.25, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 0.25, {2, 4, {-1, -1}} -> 
     0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 0.25, {2, 4, {0, 1}} -> 
     0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 0.25, {2, 4, {0, 0}} -> 
     0.77, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 0.25, {3, 4, {-1, -1}} -> 
     0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 0.25, {3, 4, {0, 1}} -> 
     0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 0.25, {3, 4, {0, 0}} -> 
     0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 0.25, {4, 1, {-1, -1}} -> 
     0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 0.25, {4, 1, {0, 1}} -> 
     0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 0.25, {4, 2, {-1, 0}} -> 
     0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 0.25, {4, 2, {-1, 1}} -> 
     0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 0.25, {4, 2, {1, 1}} -> 
     0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 0.25, {4, 3, {0, -1}} -> 
     0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 0.25, {4, 3, {1, 0}} -> 
     0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 0.25, {4, 3, {1, -1}} -> 
     0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 0.25, {4, 4, {-1, -1}} -> 
     0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 0.25, {4, 4, {0, 1}} -> 
     0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 0.25, {1, 5, {-1, 0}} -> 
     0.25, {1, 5, {0, -1}} -> 0.25, {1, 5, {-1, -1}} -> 0.25, {1, 5, {-1, 1}} -> 
     0.25, {1, 5, {1, 0}} -> 0.25, {1, 5, {0, 1}} -> 0.25, {1, 5, {1, 1}} -> 
     0.25, {1, 5, {1, -1}} -> 0.25, {1, 5, {0, 0}} -> 0.25, {2, 5, {-1, 0}} -> 
     0.25, {2, 5, {0, -1}} -> 0.25, {2, 5, {-1, -1}} -> 0.25, {2, 5, {-1, 1}} -> 
     0.25, {2, 5, {1, 0}} -> 0.25, {2, 5, {0, 1}} -> 0.25, {2, 5, {1, 1}} -> 
     0.25, {2, 5, {1, -1}} -> 0.25, {2, 5, {0, 0}} -> 0.25, {3, 5, {-1, 0}} -> 
     0.25, {3, 5, {0, -1}} -> 0.25, {3, 5, {-1, -1}} -> 0.25, {3, 5, {-1, 1}} -> 
     0.25, {3, 5, {1, 0}} -> 0.25, {3, 5, {0, 1}} -> 0.25, {3, 5, {1, 1}} -> 
     0.25, {3, 5, {1, -1}} -> 0.25, {3, 5, {0, 0}} -> 0.25, {4, 5, {-1, 0}} -> 
     0.25, {4, 5, {0, -1}} -> 0.25, {4, 5, {-1, -1}} -> 0.25, {4, 5, {-1, 1}} -> 
     0.25, {4, 5, {1, 0}} -> 0.25, {4, 5, {0, 1}} -> 0.25, {4, 5, {1, 1}} -> 
     0.25, {4, 5, {1, -1}} -> 0.25, {4, 5, {0, 0}} -> 0.25, {5, 1, {-1, 0}} -> 
     0.25, {5, 1, {0, -1}} -> 0.25, {5, 1, {-1, -1}} -> 0.25, {5, 1, {-1, 1}} -> 
     0.25, {5, 1, {1, 0}} -> 0.25, {5, 1, {0, 1}} -> 0.25, {5, 1, {1, 1}} -> 
     0.25, {5, 1, {1, -1}} -> 0.25, {5, 2, {-1, 0}} -> 0.25, {5, 2, {0, -1}} -> 
     0.25, {5, 2, {-1, -1}} -> 0.25, {5, 2, {-1, 1}} -> 0.25, {5, 2, {1, 0}} -> 
     0.25, {5, 2, {0, 1}} -> 0.25, {5, 2, {1, 1}} -> 0.25, {5, 2, {1, -1}} -> 
     0.25, {5, 3, {-1, 0}} -> 0.25, {5, 3, {0, -1}} -> 0.25, {5, 3, {-1, -1}} -> 
     0.25, {5, 3, {-1, 1}} -> 0.25, {5, 3, {1, 0}} -> 0.25, {5, 3, {0, 1}} -> 
     0.25, {5, 3, {1, 1}} -> 0.25, {5, 3, {1, -1}} -> 0.25, {5, 4, {-1, 0}} -> 
     0.25, {5, 4, {0, -1}} -> 0.25, {5, 4, {-1, -1}} -> 0.25, {5, 4, {-1, 1}} -> 
     0.25, {5, 4, {1, 0}} -> 0.25, {5, 4, {0, 1}} -> 0.25, {5, 4, {1, 1}} -> 
     0.25, {5, 4, {1, -1}} -> 0.25, {5, 5, {-1, 0}} -> 0.25, {5, 5, {0, -1}} -> 
     0.25, {5, 5, {-1, -1}} -> 0.25, {5, 5, {-1, 1}} -> 0.25, {5, 5, {1, 0}} -> 
     0.25, {5, 5, {0, 1}} -> 0.25, {5, 5, {1, 1}} -> 0.25, {5, 5, {1, -1}} -> 
     0.25}, $CellContext`m1Sel$$ = 2, $CellContext`m2Sel$$ = 
    2, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$214940, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    4, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {2.8, 7.6000000000000005`, 13.100000000000001`, 
      20.700000000000003`, 27.3}, "numberOfMasses" -> 5, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.3150209205020922, 0.2318410041841004}, {
      0.8340167364016735, 0.1634728033472804}, {0.7799163179916317, 
      0.7326359832635985}, {0.7443933054393306, 0.3966108786610878}, {
      0.19719665271966508`, 0.623305439330544}}, 
     "mPosFirstCell" -> {{0.472, 0.5950000000000002}, {0.39400000000000013`, 
      1.2149999999999999`}, {1.4700000000000002`, 1.6}, {0.8279999999999998, 
      1.2850000000000001`}, {1.2040000000000002`, 0.7549999999999999}}, 
     "pointsDataTable" -> CompressedData["
1:eJwtU2lIlVEQ/Xybz6eZSYtIiEWUFRJRZiYyEyoSIlZKiEiIGEhImkSIiFhi
EaYWIm2ILahEISUVJuE8LMQkxUwRs9yeS27o6y3u0Xfnfhfuj7ln7pmZc8/d
k5Fz/pJeURSjun3VrVM3hl1sOeOzRlejLAMvck3WJ1+C3+RlfQcRRVkUa3t8
+J3T6R4YN1awvTHOQfWcsEJqoJ6skO7w7Z2D3QNQ0eYKSaucoqoAwwXfUB2m
NweVzp1rBh9OcNNJJuykrPsLhRA2DD7Mb4P0yZ69Q6s6TOJ8N+RxgotuqZeD
Su0wvf7S3pswDhL/B6FNNYsN7Xq8x/WMONi9nGSrc9ChtEr1RI+BR37vM92Y
BIl7IafHr1MhN+xhrY/94Njs6wCZ76aKB1f8S6wKtnC748TtN61SMtebp1Pq
9JM9vdAj6NreU2pm5EhiuQeOCjnGpqDo8qdrVQErdJfr/YSnolz4IOSyng44
cNT8eneqDpk+SMEJMW6RmyS+DiZRrmYEJG5A52Zf/sx+PXJYakGWf9JJEjfj
CfFcOhtI3BdDeI4J6v4m1gZJnZyg8FoihtO88OEjsb6Sky+MksRHaV7QzLng
+DGxfsBBvmDBx5xvh2KuM0QyngH5Lssg41VwM58F5X09BnBj/dTF/SgYzPGq
xu+Jn1lHb41/C2axDl0kcW/8yIOugbzvhyGsn1PrU7FKvSc0f7qoNyHDLyXC
gPwcBaPae/7V/DlLb/n9p6GYeSuolg1i1PqaAam3naQfR0C+z6zmHydkswGN
yHSNCr7ruN5aG7hIEt+AXeyXBZC4ASM4wYQ7+MAbb1ZHl2VPz5HEzVjH/2cJ
JL4V1eLqhPOaf43WV3Yx0ZKm8yaJ6TMjPTVdlihG2Dd/RvsfLoop4w4hj3Uc
o34mNONZ9kEP+JVYO5/FTlEwz9dAw+rvqI52gPTNH3jO/8GM/L3HVuBXYrmq
oE3Tzwn5rUIxp+ZnBXP8BaEXMt2ACZN54BHNzwbcliIO3CBxC/4HvYosbA==

      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {2.8, 
    7.6000000000000005`, 13.100000000000001`, 20.700000000000003`, 
    27.3}, $CellContext`rawNumberOfMasses$$ = 5, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.472, 0.5950000000000002}, {0.39400000000000013`, 
    1.2149999999999999`}, {1.4700000000000002`, 1.6}, {0.8279999999999998, 
    1.2850000000000001`}, {1.2040000000000002`, 0.7549999999999999}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    464., {228., 236.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{864., {266., 273.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellEditDuplicate->False,
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.605565242823818*^9, {3.6055653327999644`*^9, 3.6055654080982714`*^9}, {
   3.6055654545869303`*^9, 3.605565460899291*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SnapshotsSection"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 3, {0, 0}, 0.25, 0.39355600000000024`, {0.9, 0.7}, {
        0.43399999999999994`, 1.12}, {{
        0.551779162304729, -0.49731169134761}, {-0.49731169134761, 
        0.44822083769527093`}}}, {
       1, 2, {0, 0}, 0.25, 0.42460900000000007`, {0.9, 0.7}, {
        1.2720000000000002`, 1.2349999999999999`}, {{0.3259092482731175, 
        0.46871356942504766`}, {0.46871356942504766`, 
        0.6740907517268825}}}}, {{
       2, 1, {0, 0}, 0.25, 0.42460900000000007`, {0.9, 0.7}, {
        1.2720000000000002`, 1.2349999999999999`}, {{0.3259092482731175, 
        0.46871356942504766`}, {0.46871356942504766`, 0.6740907517268825}}}, {
       2, 3, {0, 0}, 0.25, 0.7154690000000005, {1.2720000000000002`, 
        1.2349999999999999`}, {0.43399999999999994`, 1.12}, {{
        0.9815156212218838, 0.1346948644874897}, {0.1346948644874897, 
        0.018484378778116085`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.39355600000000024`, {0.9, 0.7}, {
        0.43399999999999994`, 1.12}, {{
        0.551779162304729, -0.49731169134761}, {-0.49731169134761, 
        0.44822083769527093`}}}, {
       3, 2, {0, 0}, 0.25, 0.7154690000000005, {1.2720000000000002`, 
        1.2349999999999999`}, {0.43399999999999994`, 1.12}, {{
        0.9815156212218838, 0.1346948644874897}, {0.1346948644874897, 
        0.018484378778116085`}}}}}, {{{
       1, 2, {-1, 0}, 0.25, 0.6592090000000003, {0.9, 0.7}, {
        1.1720000000000002`, -0.06500000000000017}, {{
        0.11223147742218333`, -0.3156510302498905}, {-0.3156510302498905, 
        0.8877685225778168}}}, {
       1, 3, {-1, 0}, 0.25, 1.0947559999999998`, {0.9, 0.7}, {
        0.33399999999999996`, -0.17999999999999994`}, {{0.29262776362952125`, 
        0.45496896112010354`}, {0.45496896112010354`, 0.707372236370479}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {-1, 1}, 0.25, 1.785956, {0.9, 0.7}, {2.234, 
        0.6200000000000001}, {{
        0.9964164850645817, -0.05975511154810073}, {-0.05975511154810073, 
        0.003583514935418328}}}, {
       1, 2, {0, -1}, 0.25, 2.405008999999999, {0.9, 
        0.7}, {-0.6279999999999997, 0.43499999999999983`}, {{
        0.9708005250708001, 0.1683652743087449}, {0.1683652743087449, 
        0.02919947492919989}}}, {
       1, 3, {1, 0}, 0.25, 3.0923559999999997`, {0.9, 0.7}, {
        0.5339999999999999, 2.42}, {{
        0.0433184277618748, -0.20357293920881048`}, {-0.20357293920881048`, 
        0.9566815722381253}}}, {
       1, 2, {1, -1}, 0.25, 3.110408999999998, {0.9, 
        0.7}, {-0.5279999999999996, 1.7349999999999999`}, {{
        0.6555999548612416, -0.47517223619144633`}, {-0.47517223619144633`, 
        0.34440004513875844`}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 3, {0, 1}, 0.25, 3.5447559999999996`, {0.9, 0.7}, {
        2.3339999999999996`, 1.9200000000000002`}, {{0.5801121431207111, 
        0.4935403170204099}, {0.4935403170204099, 0.41988785687928887`}}}, {
       1, 2, {1, 0}, 0.25, 3.590009000000001, {0.9, 0.7}, {
        1.3720000000000003`, 2.535}, {{0.06205666893871302, 
        0.24125844809859817`}, {0.24125844809859817`, 0.9379433310612869}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 2, {-1, 1}, 0.25, 4.718809, {0.9, 0.7}, {3.072, 
        0.7349999999999999}, {{0.9997404005968455, 0.016109997247186703`}, {
        0.016109997247186703`, 0.00025959940315448116`}}}, {
       1, 2, {-1, -1}, 0.25, 5.099608999999999, {0.9, 
        0.7}, {-0.7279999999999998, -0.8650000000000002}, {{
        0.5197229826835742, 0.4996108525183009}, {0.4996108525183009, 
        0.4802770173164258}}}, {
       1, 3, {0, -1}, 0.25, 5.742356000000001, {0.9, 0.7}, {-1.466, 
        0.32000000000000006`}, {{0.9748535270192233, 0.15656988176978223`}, {
        0.15656988176978223`, 0.02514647298077651}}}, {
       1, 3, {1, -1}, 0.25, 5.981156, {0.9, 0.7}, {-1.3659999999999999`, 
        1.62}, {{
        0.8584888941201333, -0.3485480064388891}, {-0.3485480064388891, 
        0.14151110587986673`}}}, {
       1, 2, {0, 1}, 0.25, 6.944209000000002, {0.9, 0.7}, {3.172, 2.035}, {{
        0.743350898568865, 0.43678408872774416`}, {0.43678408872774416`, 
        0.2566491014311349}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 3, {1, 1}, 0.25, 8.703556000000003, {0.9, 0.7}, {2.434, 3.22}, {{
        0.27036719244409985`, 0.4441494947582345}, {0.4441494947582345, 
        0.7296328075559002}}}, {
       1, 3, {-1, -1}, 0.25, 8.903556, {0.9, 0.7}, {-1.566, -0.98}, {{
        0.6830030607995279, 0.46530622146926465`}, {0.46530622146926465`, 
        0.3169969392004722}}}, {
       1, 2, {1, 1}, 0.25, 12.569609, {0.9, 0.7}, {3.2720000000000002`, 
        3.335}, {{0.44761806035494034`, 0.49724856198788686`}, {
        0.49724856198788686`, 0.5523819396450597}}}}, {{
       2, 1, {1, 0}, 0.25, 0.6592090000000004, {1.2720000000000002`, 
        1.2349999999999999`}, {1., 2.}, {{
        0.1122314774221834, -0.31565103024989055`}, {-0.31565103024989055`, 
        0.8877685225778166}}}, {
       2, 3, {-1, 1}, 0.25, 1.3036689999999993`, {1.2720000000000002`, 
        1.2349999999999999`}, {2.234, 0.6200000000000001}, {{
        0.7098765100650548, -0.4538191826299467}, {-0.4538191826299467, 
        0.2901234899349451}}}, {
       2, 3, {0, 1}, 0.25, 1.5970689999999992`, {1.2720000000000002`, 
        1.2349999999999999`}, {2.3339999999999996`, 1.9200000000000002`}, {{
        0.7061961630962715, 0.45550317487848063`}, {0.45550317487848063`, 
        0.2938038369037284}}}, {
       2, 2, {1, 0}, 0.25, 1.7000000000000006`, {1.2720000000000002`, 
        1.2349999999999999`}, {1.3720000000000003`, 2.535}, {{
        0.005882352941176479, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588236}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {1.2720000000000002`, 
        1.2349999999999999`}, {1.1720000000000002`, -0.06500000000000017}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       2, 3, {1, 0}, 0.25, 1.9488690000000006`, {1.2720000000000002`, 
        1.2349999999999999`}, {0.5339999999999999, 2.42}, {{
        0.2794667060741385, -0.4487371906474987}, {-0.4487371906474987, 
        0.7205332939258613}}}, {
       2, 1, {0, 1}, 0.25, 2.405008999999999, {1.2720000000000002`, 
        1.2349999999999999`}, {2.8, 1.5}, {{0.9708005250708001, 
        0.1683652743087449}, {0.1683652743087449, 0.02919947492919989}}}, {
       2, 3, {-1, 0}, 0.25, 2.8820689999999995`, {1.2720000000000002`, 
        1.2349999999999999`}, {
        0.33399999999999996`, -0.17999999999999994`}, {{0.30528207339935326`, 
        0.460526795160005}, {0.460526795160005, 0.6947179266006468}}}, {
       2, 1, {-1, 1}, 0.25, 3.110408999999998, {1.2720000000000002`, 
        1.2349999999999999`}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.6555999548612416, -0.47517223619144633`}, {-0.47517223619144633`, 
        0.34440004513875844`}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {1.2720000000000002`, 
        1.2349999999999999`}, {-0.5279999999999996, 1.7349999999999999`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {1.2720000000000002`, 
        1.2349999999999999`}, {3.072, 0.7349999999999999}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {-1, 0}, 0.25, 3.5900090000000002`, {1.2720000000000002`, 
        1.2349999999999999`}, {0.8, -0.6000000000000001}, {{
        0.06205666893871301, 0.24125844809859817`}, {0.24125844809859817`, 
        0.937943331061287}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {1.2720000000000002`, 1.2349999999999999`}, {
        3.172, 2.035}, {{0.8494117647058823, 0.35764705882352954`}, {
        0.35764705882352954`, 0.15058823529411774`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {1.2720000000000002`, 
        1.2349999999999999`}, {-0.6279999999999997, 0.43499999999999983`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 1, {1, -1}, 0.25, 4.718809, {1.2720000000000002`, 
        1.2349999999999999`}, {-0.8999999999999998, 1.2}, {{
        0.9997404005968455, 0.016109997247186703`}, {0.016109997247186703`, 
        0.00025959940315448116`}}}, {
       2, 1, {1, 1}, 0.25, 5.099608999999999, {1.2720000000000002`, 
        1.2349999999999999`}, {2.9, 2.8}, {{0.5197229826835742, 
        0.49961085251830084`}, {0.49961085251830084`, 
        0.48027701731642564`}}}, {
       2, 3, {1, 1}, 0.25, 5.290469000000001, {1.2720000000000002`, 
        1.2349999999999999`}, {2.434, 3.22}, {{0.2552219850451821, 
        0.4359859210969764}, {0.4359859210969764, 0.7447780149548179}}}, {
       2, 1, {0, -1}, 0.25, 6.944209000000001, {1.2720000000000002`, 
        1.2349999999999999`}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7433508985688652, 0.4367840887277442}, {0.4367840887277442, 
        0.2566491014311349}}}, {
       2, 3, {1, -1}, 0.25, 7.107269, {1.2720000000000002`, 
        1.2349999999999999`}, {-1.3659999999999999`, 1.62}, {{
        0.9791445912628325, -0.14290017726921558`}, {-0.14290017726921558`, 
        0.020855408737167565`}}}, {
       2, 3, {0, -1}, 0.25, 8.333869000000002, {1.2720000000000002`, 
        1.2349999999999999`}, {-1.466, 0.32000000000000006`}, {{
        0.8995394576036654, 0.3006130765914366}, {0.3006130765914366, 
        0.1004605423963347}}}, {
       2, 2, {1, 1}, 0.25, 8.41, {1.2720000000000002`, 1.2349999999999999`}, {
        3.2720000000000002`, 3.335}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {1.2720000000000002`, 
        1.2349999999999999`}, {-0.7279999999999998, -0.8650000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {-1, -1}, 0.25, 12.569609, {1.2720000000000002`, 
        1.2349999999999999`}, {-1.1, -1.4000000000000001`}, {{
        0.44761806035494034`, 0.49724856198788686`}, {0.49724856198788686`, 
        0.5523819396450597}}}, {
       2, 3, {-1, -1}, 0.25, 12.960469, {1.2720000000000002`, 
        1.2349999999999999`}, {-1.566, -0.98}, {{0.6214469553532361, 
        0.4850264292133255}, {0.4850264292133255, 0.3785530446467639}}}}, {{
       3, 1, {1, 0}, 0.25, 1.0947559999999998`, {0.43399999999999994`, 
        1.12}, {1., 2.}, {{0.29262776362952125`, 0.45496896112010354`}, {
        0.45496896112010354`, 0.707372236370479}}}, {
       3, 2, {1, -1}, 0.25, 1.3036689999999989`, {0.43399999999999994`, 
        1.12}, {-0.5279999999999996, 1.7349999999999999`}, {{
        0.7098765100650547, -0.45381918262994664`}, {-0.45381918262994664`, 
        0.29012348993494513`}}}, {
       3, 2, {0, -1}, 0.25, 1.5970689999999996`, {0.43399999999999994`, 
        1.12}, {-0.6279999999999997, 0.43499999999999983`}, {{
        0.7061961630962715, 0.45550317487848063`}, {0.45550317487848063`, 
        0.2938038369037283}}}, {
       3, 3, {1, 0}, 0.25, 1.6999999999999995`, {0.43399999999999994`, 
        1.12}, {0.5339999999999999, 2.42}, {{0.005882352941176469, 
        0.07647058823529411}, {0.07647058823529411, 0.9941176470588234}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {0.43399999999999994`, 
        1.12}, {0.33399999999999996`, -0.17999999999999994`}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       3, 1, {1, -1}, 0.25, 1.785955999999999, {0.43399999999999994`, 
        1.12}, {-0.8999999999999998, 1.2}, {{
        0.9964164850645816, -0.05975511154810075}, {-0.05975511154810075, 
        0.0035835149354183304`}}}, {
       3, 2, {-1, 0}, 0.25, 1.948869000000001, {0.43399999999999994`, 1.12}, {
        1.1720000000000002`, -0.06500000000000017}, {{
        0.27946670607413837`, -0.44873719064749856`}, {-0.44873719064749856`, 
        0.7205332939258615}}}, {
       3, 2, {1, 0}, 0.25, 2.882069000000001, {0.43399999999999994`, 1.12}, {
        1.3720000000000003`, 2.535}, {{0.3052820733993532, 
        0.4605267951600049}, {0.4605267951600049, 0.6947179266006468}}}, {
       3, 1, {-1, 0}, 0.25, 3.0923560000000005`, {0.43399999999999994`, 
        1.12}, {0.8, -0.6000000000000001}, {{
        0.04331842776187478, -0.20357293920881042`}, {-0.20357293920881042`, 
        0.9566815722381252}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {0.43399999999999994`, 
        1.12}, {-1.3659999999999999`, 1.62}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.49, {0.43399999999999994`, 1.12}, {2.234, 
        0.6200000000000001}, {{
        0.9283667621776505, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234957}}}, {
       3, 1, {0, -1}, 0.25, 3.5447559999999996`, {0.43399999999999994`, 
        1.12}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5801121431207111, 0.4935403170204099}, {0.4935403170204099, 
        0.41988785687928887`}}}, {
       3, 3, {0, 1}, 0.25, 4.249999999999999, {0.43399999999999994`, 1.12}, {
        2.3339999999999996`, 1.9200000000000002`}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {0.43399999999999994`, 1.12}, {-1.466, 
        0.32000000000000006`}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 2, {-1, -1}, 0.25, 5.290469000000001, {0.43399999999999994`, 
        1.12}, {-0.7279999999999998, -0.8650000000000002}, {{
        0.255221985045182, 0.43598592109697637`}, {0.43598592109697637`, 
        0.7447780149548179}}}, {
       3, 1, {0, 1}, 0.25, 5.742355999999998, {0.43399999999999994`, 1.12}, {
        2.8, 1.5}, {{0.9748535270192233, 0.1565698817697823}, {
        0.1565698817697823, 0.025146472980776522`}}}, {
       3, 1, {-1, 1}, 0.25, 5.981156, {0.43399999999999994`, 1.12}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8584888941201333, -0.3485480064388891}, {-0.3485480064388891, 
        0.14151110587986673`}}}, {
       3, 2, {-1, 1}, 0.25, 7.107269, {0.43399999999999994`, 1.12}, {3.072, 
        0.7349999999999999}, {{
        0.9791445912628325, -0.14290017726921558`}, {-0.14290017726921558`, 
        0.020855408737167565`}}}, {
       3, 2, {0, 1}, 0.25, 8.333869000000004, {0.43399999999999994`, 1.12}, {
        3.172, 2.035}, {{0.8995394576036652, 0.3006130765914366}, {
        0.3006130765914366, 0.10046054239633473`}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {0.43399999999999994`, 1.12}, {2.434, 
        3.22}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {0.43399999999999994`, 
        1.12}, {-1.566, -0.98}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       3, 1, {-1, -1}, 0.25, 8.703556000000003, {0.43399999999999994`, 
        1.12}, {-1.1, -1.4000000000000001`}, {{0.2703671924440998, 
        0.4441494947582344}, {0.4441494947582344, 0.7296328075559002}}}, {
       3, 1, {1, 1}, 0.25, 8.903556, {0.43399999999999994`, 1.12}, {2.9, 
        2.8}, {{0.6830030607995279, 0.46530622146926465`}, {
        0.46530622146926465`, 0.31699693920047217`}}}, {
       3, 2, {1, 1}, 0.25, 12.960469, {0.43399999999999994`, 1.12}, {
        3.2720000000000002`, 3.335}, {{0.6214469553532361, 
        0.4850264292133255}, {0.4850264292133255, 
        0.3785530446467639}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.8495616018021178, -3.5104291975016715`*^-19], {Complex[
      0.8217097783143046, 0.], Complex[0.5649673106607928, 
      0.008041456330499734], Complex[
      0.01682898343184556, -0.02264104579224511], Complex[
      0.0065016189210481195`, -0.026938329713330007`], Complex[
      0.03207755572133725, 0.02318027702421237], Complex[
      0.04669722449017119, -0.015152926916531504`]}}, {
      Complex[0.5676694647643222, -3.104236606060491*^-18], {
      Complex[-0.4853889013199278, 0.042912801826696656`], Complex[
      0.6844963214104062, 0.], 
      Complex[-0.0008763370450936394, -0.08211978987130358], 
      Complex[-0.06744078053336716, -0.004488688067093435], Complex[
      0.4167198322824345, -0.27809855517077914`], Complex[
      0.021502062518817006`, -0.1767809184772572]}}, {
      Complex[0.5238503981917523, 2.0052430762071276`*^-17], {Complex[
      0.16034059074870893`, 0.18654040906244912`], 
      Complex[-0.30875742780544824`, -0.27148907767826047`], 
      Complex[-0.04266548065851223, -0.041888428642144905`], Complex[
      0.10417963356318057`, -0.0007549241322468911], Complex[
      0.7068705642951492, 0.], Complex[0.4929231577120962, 
      0.11570617309374404`]}}, {
      Complex[0.3986732527191364, 8.107930390811269*^-19], {
      Complex[-0.05131776771602092, -0.0017392089720729418`], Complex[
      0.042683249594644423`, -0.056882481175128445`], Complex[
      0.840923092878659, 0.], Complex[0.49275869547191986`, 
      0.04590664970067801], 
      Complex[-0.11215170848921438`, -0.06453524958265941], Complex[
      0.14985594286630025`, -0.032189704154683314`]}}, {
      Complex[0.3354243682270379, 1.576681144153496*^-17], {
      Complex[-0.09882306301234406, 0.00013071071352070614`], Complex[
      0.11234616641745315`, -0.01710464874457956], Complex[
      0.008581042183298275, -0.14464697474215846`], 
      Complex[-0.3838795592190739, 0.2071817988717018], 
      Complex[-0.4212990134303521, 0.009473305122723921], Complex[
      0.7671068748420281, 0.]}}, {
      Complex[0.20681283292620758`, 1.801165038744013*^-17], {
      Complex[-0.09051758125440905, -0.07903626614951366], Complex[
      0.1389505759685709, 0.07678294847699396], 
      Complex[-0.5101324018644423, -0.022397760098411018`], Complex[
      0.7406776059558371, 0.], 
      Complex[-0.20499400746113025`, -0.10689029902405175`], Complex[
      0.2305877010314196, 
      0.21070866697152024`]}}}, $CellContext`dynMeshSize$$ = 
    20, $CellContext`dynPlot$$ = {CompressedData["
1:eJwVmWk4FF4bhwczg7GGkCRJSEhISJ1DJanw1yZJkmxRCEkUSitRdlmzJGSv
LHGm7LLvW/Zl7LMwxv7O++F8m2uuOdd5nt/vvq/ZZ/XA5C4Wg8GwMc9O5uFl
HlbmEe+X5NFIoaKI3vgDR8k44sLJvBKr4Ekwn/GWdOTOFvLFtgUUPMPCl3Ag
Yv8CGfmeuyHbwE1BHwaq/hHW6eh17yQPbwMJFB50JZ7dN4ryGcbbJg9wkOPn
LXfOqb+g1LwnbFfmIkp8++4eZC1FTR4cPyTCZ0HbjKhIae0UMDWW+tP2BA+P
yQg7f/y+Aqq+m9yM8phHQRWCOnIZNPDdK8NQUHURWNqncygpY2C3UOrj3Mfs
MKLGlyOIHw9fvfq8Ld40g1LvbMxEX8fCIsXCm77ZFLCF80g+fZEA6zHu3u+y
qEhp2ITHaQhHtPS8F18fMAE0/x5YPtixifhl6N1q6VgI+9spGzcpaFBFcZXx
hIJUF3de7HKio8Obd5p33CGBWHdIzusaQQkif9f0vuPg600TabG+aqBcqi6Y
fIuMemYPDg8/yUNRRvvnHgrNgS+iFOo49xTYT6D6ueTg4b4BDf4w4xUw9UbP
ZYltAWWE//b8MkED7Dt23BzeRwaH8OIPbqNt8GsKX/XzETsc5Km61y+BhziW
8kQxtxnEbe13K0wNC5+9DFO6I0UFdi2P2jUFCND84nH7T1I0RE/x9CoLxxED
j8yHnFCdACvCO8MNf20iwpb1i9cLWPi2R37QYYuCqif1Ow3YqMhpRkr+Y98y
2ql4dq/MCgkYfGLftzd9FE1lxNdkjeOg3ZdQGy9CJSCIs3DVfSIj4gkBsvuB
byiF8CANKz8PZDFve2/VTYDuxax3b77goTpb1u53Xiug5rZfXlnoPPpm2Rdd
FEwDPuvjEZ/ek4FCuBcP/6VtEHa17ynpBDu0O7jH65EtHnYrq/3G202j9tA7
d76Ps8EuPC69QYZ5vz3NwzW7CTAlgk44kkZDhZI0eVUjHDH84fFmlv4JcN3b
gsp/eAsJ0c59tNiFgzI6MwU5F6io67lbuJcaFdnGhczrFC+jIge1wTi+GVD5
vT5ubGYMLfbwE8a7cFDfx0ky/k8VcM0N0FwzJSOMaFMIX1oh0vJuzYujzYMf
u/3PteEmwOrva+cCHfBwqSg/+vQOBohrf1Zn4zeHZKUEH99ZoIJaXI3q3ldk
4JEc/ffbw23QsRGncWsdD3u+J2+qMd+ds/yo6vUXJFT9xFFUKJMNhlAmL0sX
UYDpjZ82B6wI8JcH1Ze/gYa4O87EG5zBEV/OUlYslibBJ4vV67NNWyjd5sH5
JhwO+ttvhbByUpFUetNX1ykKKjYriec6QEdPL328TKqZAVuvvg4tR46j2Ye6
T+QicRCWVm53fKoH93q9x40/MfcvZE3i5p9ydB0ei1tqmAfHIxoio29PALqh
S5qiPB5y7JoMmo1mgAKT1Tm/rFmUEBBzUCqACnadHqO+2EEGZxiA+xIbBkqq
HNx1ZRIP9XAPxONK8TBva/J2nD8JCRO1I7/8YIMcD44fjlKmgAZV37trmQSo
sbHnnbk7DfEmnlkV9sUR/UTwFpwxU+CsLrd51K5tFFkye6CuAgsNFMQ83jpQ
UOHcZs6qGQUlteRTRarpyCvyQ1nnmxkQr7ncYiA1jv7Uipo7XMdBycusojGf
m4BTXkN4SdcC4tfcPSB35Q8i635beds5B4p+aTnNfJgELIEq9aNieCiyY1+v
VCoDDOGyjr3/M4vipR9+KP1KBWqBM/fP7l4E8i4uKbsMMLD8+rj/Ih871Gqd
9gr1x0OWlcUNbetphAnW+IvZYoMRhz3+xW+RgcOAQuLuMgI0HROKLSNRUcOc
9r1vzcz59JQnb52eAp0n2/K027bQwYUbn8TfYCH/ETkRRyoZEfDOzW9YKOiN
gLa83K4V1BZGxW+8mgbVrqn4mulRlOQsWblmhIOk61nvSe+bwJt8p1gb7CIi
YmY9R6uJaLP47jWW7lnw65JlVWX8FBB/qygqdQ4Ph+3M31YfZIDHOqGjoXlz
6GISQ9b8JA38evNzY7pxARBu7eH1uYyBCsBuTe8qO2SRUIgOVcFDn+y3x667
zCCv/I7oNT0s9A3rUaUaUIDZ+5OWoa8IcM4b1jdEURH/Kwz5CA1H7I8wNQ3S
mgTuZx8+2lbZQvzP1YKjA7BQ9FOO7jtWCqIzTgzhpClIUV5C+l0fHZ34Kmju
E0YCWt5U7l3zI2ihveDMW38cTGfJXGpwrgcXqVtJ4tuLSO7LS+v+5Z8oSl+6
ojpxFmCWZ/j4vk0BacyM6vFgPGzuFqy3CFwBb3QS2mp/zCNb2Wzv8ToaYD7q
0ObjRXBmPzsWL4aB7xqePeDwZYdRbdJ2zdx4OCKt3PKZ2Q+WIv/ZiF/Fws/V
y+UW3RTwVkyrk+UYAVreVifmVFOR5ZnYlPxGHJH/28Dr7ksTIJxQjEsr20RG
k+nfxH9hobgRKbgyiIIM2cZ9L6VR0M2jK/FnT9BRxh7ZpVp3EogQrz6nsDaC
4JH6L+M1zP77U4n/L7kKRLwWXD3jQ0aJVaLdOLscdMfqSTn3rTkgj6Qx0nmT
4H1x1SBPIR5yQS1TlYsr4M5hixTDzXmUdrDlRXwfDRjI7/uSfI4MHr0KTSgI
2wYOVPFwhXvsMLuueYFHmdkP5IwkQeUZxH4r6tSOvVg4Gi/62O0IFUzKFqTw
8RCgin+lFctFGiL+vuVQ7oMjemMjX41cmADJ4tgHba2bSEPx6RVNDA66mXy8
8VmKiuh3JiV1Jahovxeu4+XvZcQeyx01fpo5nyx7FkzxY+iR0tiugCnmfA4d
eOTAXwmkPuMdJ8PICDrO7P6Ly0HsvmkOFR7zQOHN5n5jzwlgJdg7ERmNh7lV
GR2/ElbAB8JFv6zz86jhqXcyyYoGSqZfXTsTQwYnOwlWDRe2wY66KNECOXao
L+B2OeIZHqa+Oas0JjyN5GgPMgub2KCoWrJVHR8VZJ/xaZs9RIBSP3+YnS+n
Idaurnyf0ziiU7ZMyLVDk0DWOWZb8NYWir59KsVJDAf/hJdcaj9LRbGFZb1C
8lTEyfBvlmpYRiItPvoc12eA8uxthsCxccRqrvEolfl++r9IMc6YGpAodzVA
SZWMXgsTht+8/Yn6e7jtVtgWQKiNjv5zlgnQK3sh1/4KHi4879pVAhnA51og
TFWZQ/bxTc/+q6QCw61VFSUnMvg2GCW/GLENBDhxp2oX8DDdqIA9qoT57meq
CzTsSMj6w5r4izQ2WPmwIbAxiAJqLwkpOHsRoHpBTb4W834MkvNolDGOWDgs
HbmgOQV0vEVEmbuDtr9J/bBYxkLvLzn3OIYoCIaI8x8kUtDq0FUVj8t0lM9Z
aCjfOgPMnjh+wYaNo7fhgXcAc/+iLDeEX/M2gM0XKvF+RosoRX7ZuC+BiG48
tZCNCJ0HifC34vtvE8CvJee+4F48DKOQv61kMcDDJFrgychZpHf8pKiILxW8
uiLoodW0CPSjOzJNd2PgPYGk3QlzePi5pbp8IxcPx4yUlu/lk5CuodRhWMMG
n/objt7fSQG/7r3jTiwiQP34js2BCzSU7sRnrBKFIzrGcadLxU6BR3IAPBfc
Rp9wN/tADhZ6KZhzpZ+gIPFzU5Et6hS082P5iu0sHe0sWhm5c34GvM9u9XrQ
OoaoW6vqI8z85A/76Sgk3gx2+Vw986R2AYlmZ5mGmP9BkvL3VtT85sCBojAL
bfIkOIYnqvyTwkOSi2InCGQAPg8drj2MWZRWlBDU3kgFfau5sukzC+CnKk8s
mZmfxXz2jmv72SFdZf+XKCYXLIY7jmOLpxG2IDv6uDAWvpc7F1nFQQFFkZLp
jQUEWL7KdTacmS/yOrJvycM4YuyHFo45limgqO+Uk/plC0k3qG0f9cPCy23R
zkenyOjt2UCt1U0y6sTs01veuYLq1XMni9WmQcleyxuTQaPILz2OHsHsPw1h
/G/5rEbw4NzD2EtgEfk6xtFW9yG0k9bgeD9rFuTY+D6L+DMFBP4mZufexMPY
r09ttFdXwB5peQsj/DziMPLcp3ifBkZtjuWJTS+AEvWZOaNzGOhZi7Uus2Xy
9fSGWJ0kHj7R4Mawpc2gkM+uOaKXsPDvOaz0flcKWLD3WZp8QIAzcwPNrcx+
mKud8nu3iCO+b3ENXiFNgODLE+Of8FsodNCOWhWChU97pf/ul6Igz1Rjv+VT
FPQEdyfXOY+O7kZnV552JgFXrv18gq0jSLQCM+7B5JcoWghPwkwt2PBOPRV1
kJkvpbn4YI7v6IBz+Xz6n1kgrXGs8vDjKeb8OevGJeDh+Juovb/urYDmOo/P
yRPz6D8vF6LHIA3Eiz5f76xfBBmub13JLBjIuWhwLIfZDw03KycL+fBQ8fGt
iFNFM+gF+5myExew8H4YT8LXdQrI4p7t15EmQMJSJccgs9+lHewPiRfhiKmf
uaKPq08A2djkoM8Fm0hd8w2rTisWmiKrcMdyCsKbpGT9aqagIRGx5ko+Jr9Q
rr2WiCeBIgqy6FYbRba7xsyEunFQOdD9ZtbPSjBaT9tM/EBGynYdNTlG39DA
M0ioyZsDNzsmg3qNJoEl1sRrOh8P3UiapXzXVkCo0LG8XcPzaC5u8qZSBQ2o
+XNdod4jg0JZpTqGyzaIrHBueWLGDuNswvafPYOHOZ6FfyaHp1FgSRgFsmOh
g9AYOnOUCvTrk9qe8xJgYZMB1YfJZ9IBSl+bbXFEh8s/0y2f/L//rsmYUjfR
kGLXPzFeHJTwrprJ16YiathO77uHqah5VdIuv5DJ13Oi4dNR0yBMYshqwnYM
VRYnJUYy/UGScFPD9FkluEzobl/3Z3ojb02QjUoeav6cWTrzYx48+qQ5OqbB
zBel2av9r/Bwa11Ok79hBSyGGe08ujaHBuPu9QWr0ECdfaeuH7Mf9k3duNXM
9Acr51/dp4XYYeG7I0+7w/EQnPqXcr+ZhGYWD/SY/WKDydZmyVgyBZRYvO+1
hgT4WWrsqwiTr8uPPbYQhkw+k9Cz4vGdBDfdp6eTgreQF8xy/bUTB38Zt2fw
qlOR2S0J6poQFelsB911mVlG87diBE+HzQBJEJrB4jyOlC2nojYLmf0QU3Hs
7YNaMOzhLxnFyfQHgqgqf0QJGpjVzDq1OQ8ORGd0p4hMgIH927pvdPDw4Pky
rPU9Jp9lDl4zWpxFbH0n3D0+U0HpfZZXMufJIHFZ9NDq721w+gT7qO4UHso/
ETtXjvCwsW15+KcVCZV8czoZns4G53U++121poBKaRfSyQ8EKCwxv1eU6Ufj
w+9zjW7jiOXnyu+0PZgCf5/7vP6Paxt90FbPnx/BQmz3kvN0DgXFf4mSxkZQ
UJVV+rpaAB0tuFrqXauYAY4rOgSy+zga81o+vIPp786+rNLJJo2AZa9AahX/
ItI3TavbDP+NfDGuUT7n54HtviOuauzM/Cz0nNHZhYd7zIRuqxYwwIimrcBM
1CxqIhRTjF8z/ehAPUPMZxE8tq74cu0IBgYGhH7bz8BDKkmhvjMRD13KnZbN
aCQ0nq7MxzPA7D/W76r8WOb9vqvrKCECFD9TVeTB9NunxIXTdrk44rVTPCnn
Xk0Be/HkpRjMNjL5pIuZimX2X/nrO+EiFPS2e41tdRfzfseyH/7DryAztwCp
6u1poO72RKLfbQwdeK92rOk8sx/Yg4/xKzaDnS1yQsatC+iyTJ2Zz9pvNPXl
eZKnyhw4X1ilaMrk+I+duR49h/Gw3IFCYtgxQFApS6TTiTkkOXHxwP1VKjD+
eqonrGkB2AowUryvY2DN1mO8jCY73KAFnTA0YfLLhsWMJ9cM6tr9B7UoYOGS
1S3+L3sogMCZmluRQoCB2+NznllUpK2rkjEzhyOa3Yr5cKlgEjymD2tqem4h
51v/VklPsfDXgVNC6tNkRFeLVibjKOhRyal2Im4FCU1eniKTSCDk78/80ydH
UalGtwzFFgdfFzzaqezdAM6I7ql6+XoRQV6/CHjxF5IV+xemETkLim8np8Y2
TAGn2Tm3cVemv/tYvVOpWwE57WzStVfnkQzvqYiEaBp4rhXfvCS6CIoU/e4U
amCg1UXtG0bu7NDraNKYjBDTb+fc1eqrZxDpcnYD73UsVH237g9jKUD458p/
L68RmF7Z79V8cRZ1PSqLtKZvo/6jxaYq7My5iL3I9qiejji6WrQ2frFDse+h
wVPWk4ijnHH9TNIk4r/zkK3iKQn9c9mKFnGngURPjfwV9wZUWCemZH+MA3qx
x3qZiEwBVgU+/yP2o+jtjtInpS96wf1fYX0ptktAYDjOT+UuBcxpHMR+J3NA
3mqtqc/HWKCcdpfum5xB5GAQqHrcdhX8bJOcpxkvg53FIveN19mgvVjpfhU6
J7SqbiK+xXFD7cZ9Pb2Zfej5dfvbuVh2+JZTvfv+VzqYEtjdoezJB5esD16H
edPo+cVdW1rxGKK5elMFWzMFZJjzXQl2YqB0+XRvjbvsMC3xVcI2zygyMDVs
PfxhAiW2tBzOOTuPIhs9PYpKqMDurlbmZ8N6xN0eUmktwwEH76m3NYbNgte0
hTanhFG08OTgaDprG/Aykuq5nUED5+lvHvDcoYHLue7v+FQ4oYjd5p2bsSzQ
TOrj8bM5w6ipIrlk0GQVPFXSEBUUWAbflFT/hMvhYHRiM/3sTQJk3aaktTtw
wQE5PxW52n/on9M7m7dT7DD4w7vNUcEVoNcVLs7Gxg+FArPjTH+RkPZDkl9B
OwvxCbr9rYuHAk6+wewrW1pBOr9OnBgwZ4fi+g+qkGc/Klq0yKibnkCE+OxS
m9tkFLBnK2QHjrknd664u2zmIxsnj3c69zngQGxWDKZiDkjVssViOcfRhd1X
L55/3gbqrua9u+xNAy+7LTLKspeBklBROF80JzQOLrnuNouB8Vr5mGGVUeR2
+cBgjdY6wFDBquC7ZUCOsFb8GI+DhGWXRv44AkzXlz90Xp3pr59WnYcpg2hj
tP1tmSgnHDIcCDo/wuQg8fOCIU/4IEmNUv5NfRo5k6pu2CWwEgV/sb0TvU0G
6Y8MKjz+LKNAfWLGzwx2OOA4c2X3TC8STcd5DVpNoRayCIXGTUaKL3ZJKZAo
gGj68FB6YC7w6ohQetDBAc3J0kEpmdPANO2S8rlnE0hu94n/muL6QBeL6gcs
2xKYYOQ7Xbang0kTrezKVk54asggWNZhG3hbZFnlpo0i5ecYnOmHTZDdYiJv
dp0O8DszGyQ2sVBJXCDsgx8BNvBfVbh9hxOm3Fr8aqX+Dxnna5h/SOCEuiqz
oqccGKDpd956yjleePksF+/7XzPoTLDGkWs3WIn54QrjwVfI4P7NRyLLiTQU
b1lad42PA2596Hb2NBtGv86b+OyrIyHpK8fjPnfNIjXe32lhT6ggMdZYJopQ
DMZPJeWm4zihRienU3L7OHAwT0SarRNo7DoHo75/BLyTwKZltywBNlONl3/W
lsCpMGFNxjdO6N/MFmg6twkc2KuSrmaNIAuTqm8V97dAGY0e/7eDDpQqdpo1
Mf0geWjPgMo+Aoy5wPV9JY4TmmaNu4pt9yLfOwTHA7ycMK8/qk0eMMCbZwcv
htrzQI571Q8A/xySAj9fMU6yEDWcjq58XiKD6r2RmdVMr+hoHQwp1eCAMkaf
0nfJTaDTJ5FCLIOETupkPjV2nUIhbQoY+bM0gAl72MTbegNxMITet/RywM9t
HcUBiqPgbZ1hON+vcWR14JLVtsoYaE45Tf95YhnohMrWVARRQep6UHGXAScc
aHiY+TlsCzgHdcIevmHEFu0zEiWxCXb351Kbouig/5p4RsEaKxzsaxjxqeeE
+AGxVqMfBFh00tFueaYbHY+6bLXRxw5xWxZ2+54zc1jF8d3yBx6IPSp1cV58
DsnwnJThUsEQB4+kV2X/ogBof28wgLCM6rsJXHI4DkgPLtP+93AKEaesZePq
p1CPqudjVb9JJL1v6RlbKg0Q8Tuvb76vQKmWN5qT3Djgj1BM8ezIGJAPuWaU
sW8M4dM0ZNu1h4HGVl/ZacoSCJq6F35PnAKeHhKwO7jKAcsVajTIjhiocFhm
sFR3EOVfV/nakL8GDF9G0PW6lkGI1XbhkjYbfD3FOre7khNm8XF+oNZwwSzD
zcfxmT3oB3L/bothhx24dXHrZjoQ2ZuaNJrECzleCLnp9syg3Q6fJIv4MMQU
mn1UFoEKxo9/f0O+v4IMXlhcS41nh5/rDqVUWkwgZ3n1AHh0EgkpkMh1NdPM
3yFUmqpPA+l2R8PyyxrRhF1l0Qc5DjisLxN5JIgEwoaFpryNR5FFUVSffnUX
8Nmqv/f54BIg3+qKLWqnAOXuZQXfdQ54fOdrfhUXFuisufDAV28InTINj/WU
XgUx55raSw8tA8rAxSOhplhISXUJgYLM/Oww/zhM44JRAkG1gin9SCoYO/1a
mR3uiXt70OkHHbCwb/agUj7odji7usNgGjklWt9h0DDEfl/gyJPA7MccJTr5
JQM5drVUlZmyQ6UWWQOdT8NIyfmx0JD/BHITMN33LWYB5aYe+XLVh7l/xRIH
nB9Vo/qc7sVYVQ5otad+Sff2HBBnLxDepo6iX50OnwpUW8EwRZro94YG7FR1
ks5JLIEtubIdNCNOaL/vcviWPws07znLlnZoBOWrHpHXKloFH+PYdA9KLwNb
A8aSow0OqlDE3jg+IkCbvxurF4S5oKdL9a0Yu0H0zCKSJHOaA6p9ONwadmEF
tJY5yfWu8kFJfTw9oIiEJHBNS7XSrERqwP2JgFYyaDs/+PUa8/2U8n8ftXdk
h2p7jUz/E+5DxlICod2nJ9HgoWwOYgAZabjrZFcx8xOqHHxUbRiHRiV8H1QE
ckAzPs/vjmAO8Jt/cf39Yhw1iIWKe1/oAJJmW063Q2lg3G3Pwi4JOvixGDGT
k8cJNw4ZP+4IxcAIX1nFGq9RJHT8bMqX5XVgh5SESquWwYb/e/2otzgYNO/h
thlPgFa1rwzqxzhhx/GfpXU/B5HOnxJyihkn/Dc+TfYWYYCrnbJyoQf54ECp
6/sPUdNIw7H+5++vrMRKQl922DkyULDVKmzhXEbxqaW8iXXsMLAy8v3HQ/3I
cvJjjfC/KaRRfTiYf88iWqdQX+KwVNCie9blXe4PYPH0tKLFLAdMZ48W1j1F
Atp3w6vNyieQUCoxKvjtP+DdIfbuKFgC1bb2B/hV6ODti48H+Jn9gPntLXSs
cQsQ19NkXj0bRXsUHt134dwCdt85f1cF0sFHRqnppy9Mzj+x2l5oT4Bh2ut2
UleZ90sP7dv13wB6ppXuwPuBEzZPvcHVuzBAh9eezfQlHni5dYvFSm0W/Tno
ZxUgzEpMLp7+y+pBBkLLyX2vmfmZl7nlek+aA75nvCQdrB9BjhmDW9NbJJSr
/cHd0GoGxbMR9EaKqADzSp494UshME6b1L3MygnVajSa9meNgaLVAVOtxAl0
4XP4wf78UQCD0/TomGXAwJPLps4tgdP+/VS/MObvwkqNx45sAkOG7wZefQR5
t0XS1XW3gElp1B6hbjrwOv81ycWDDcpPN29usRKgVpz/1ephTmg3OS3mdbAX
Ua0GYrhKOWBbwwXa+A4GuOyXta/vKg9UMN97y1x7DlmnxuzYMYYhenb0rcWo
UIBh/BHM7SQa8o4WuNaowgFNrtxpFjs+iYpqTl+RLCehwZPNFXPfJ9HLNm2d
5Yc0IDltOTXy7gta8zlttVjOAWsd1zyKj40CT4MAs3ndceQb5Ov+pHQUlBgH
95RpLYPso0FDrjQKGN1bV2qhyAkPKnni+qW3wQtNqdboK0PoxGT98UKXDeDb
U4kVtaODWkc0+XeRFcococ0Hl3NCh1KuQyUCXFA7S8ppZ3s3QjxRqdhX7PDV
8Zx22pkVIEC/Yv67hQc6R3JIWPbOohl7qzAaJ4bIstGUkDlBAREO4u5qFcvo
+FGkwjPNDgn99vt2GEyhdLbb8i+NplBsphzHWeEpZO/7UrMhlpkXWhyh93bW
Iq9p1q+7TZn3mxy08d85AZ7+Ue8QrxhFfxYfiunm/gM7FBPo7mVLYDysvNlG
mAJefPFKKFjkgFjOads/NRho6uoeNwgG0ZFbJ7fdBdbA/TdR30/FLIOymxHs
d/3YoN7meLZCBydkrWxzTKdywcvJDtU0615kYXSvf3sRDxu03uyVL6SD4NcX
3+O3mf1wSHqPqPkMYuHg+SaujSHe2jWsdnaTAop+1GFVlpl+1+px+sxzJl+7
v9A5LjaO3r825xn8N4GKHot/6WbONeP2zOoeARoI0d4OlH/QiHbcNrqfuo8D
2mk43PVdnAb+tQ6nPl4fRXha5syUbQf4Im5ufWyRBoKO2cZN2VCB/2u9Y394
mHNWq/3tRxgLDKmXEonGD6NDl/qSzARXwU3PGqfLO5fB7ZQrr8MLsXCj0/iW
hgqTP/mTPQTruaBxNt/+8MgBdPZjYTifCzucu1tFutpOB07nvB9cnuWDDfvG
r51YJ6HAnwORmcYsxIX7g4HKNhSwMJ8gZ870hySPzTTby+wwhUvTa+b1ICpU
UP5rGzGBNASzXx79sYj4CYntC6eZ+/cfwY8S+hs5auq3LZxl9nvyXhjYOgdK
DDl1jM3H0IB//cozpVYwTnVl7PSkgXnlMLmStiVQGb2nn+sBJ1RPkf56yoQF
CuAOc7Z8HkFqx48snj29BuCmXFnCGSaHtx3/hwvGwSvb577xBhJgNt0rn6eE
AN1otZZdzYOo7XD9JXwSB7whKXdB4O0KqOmdnhXp5IO1IpE6Fl0kFPAt8Diw
YSW6Kn8Mef2JDPSxf7yq6uiIXmFTkurPDh3tSUZzrr1olCqmYFkwiWKL9z7V
fERGkoe77rkPUICv5x1Px0NBID3ghE5lJgfU6rrzXclqFsTEaUd7McaR+n2R
9fyULlB9v+ymbDEN/K0+m48s6YBgpjxwlskj+S+bLELUMXCrwjkrNWUUyRAC
b5VnbYDbDbdP1rPRQU7olGS+BQ7KJiP9x1EEOFlAo51J5IT6O17yJ5wcRAnw
g7fia6Y/TE6XuZxiAE/WNWHnJl7oe/eowium318UDsZ9jmEl2taceuqhSwaS
JeQeC8slFB8SLmVMYofeWi4jr0X+oRQcff+7CyTk6ODcIDY0j3q+6KNORSrg
x3LLv5wpBhJiGUN1TB5R73INrGuYBCfXHokqDk6gSXNFn5eHhsF+G11k7bME
PE4418Q0LINJv8mDmFpOWFtr05vw3xbg4GiTXdccRSHfcvabX90CLtE7H/Ux
9+l3wNOIDQMsjBs61Xz9IgHC3ieVFlacMFfi8YqeWT8yw/3MkHbghN/IpeiO
HQM8hYIR9t94YCF67FUVP4vas0vnpSpYiLefNJSEJDP7YU97y0U5GqIyjnQE
MvPT7J9ruzkYQ4nhbv/chabRr2rp0Pf4aSRyXS2lnE4Fklzbs19ZM4H9jRK+
OjoH/NPuPRrbOAquNkHuYyYTaCpvv5jB4TEQxjXybITJI++o+Xz4YBpgMXqc
p/CIE07N/NeSzey7hlnn8rLiYZT591OX3uQmKM9tf/yilg5M0LpyuBobtFDS
bCFNMXk8+X1+PXMPY7naiqWf9qBjpN7Wu7c44MubbmENfStgPO6r5/ubPJCR
5nfF6+wc2sVdiLEMxhAxP6ka3x9QwNyHHfZje5eQoZgI/wCz/0p2m+dabU8i
oqJqpJodCbnNXDxUe20SPXtBU3dn8khItHD3jOdPZBfv/akzkQMaPlNleKeN
gqYuwekv1WNoVEssO580AhL6CX57ZZfB+QuCUi5PKKCkIa4tU5Dptw64xwvN
24DR8vvy3pJBJArzRjp/roPH5yu7fyvRgf5En5DFFiskP08Kai3hhDa6Brk5
tky+7u8RHtzqRslKLr0mOuwwICs/no93BWxHyBVT9/JCNWlBvYPesyhFL/S4
8dI2Kpdf+PySKc1N5+u1bvjQ0f3oYpxNPTuszz/c6Fk2iaLul4jIdUwihYKU
ax6sJCSQYL371Asa8N3VenbU+S+i7+gTXAcckNoZrnbh0ST4XGFv3e8zigw+
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
4uY9DqyTjffvKOaB/wP+Js+0
     "], {6.4, 29.700000000000003`, 16.2}, 3, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 20}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 4, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx9nXVcVVvz/+3u7gZssQs9YmJho1exFTuwFbsDEwssUOy+tnI9BiohpRw4
B4PDAUVCxcAC9fd8rzN73/0Z/fnHfV6v9TrPYu9Zs2bW5733nqk6alrfsdmy
ZMnyNH+WLNn/9799K/pcDjyd85bj7idfMidl6OsE3hlmLpui046n6Et6+XQP
nPxKGc9C/+xbNBiV6z/jPX79Xvdl++AlNuVxngydk93mBV1W8ni6nv9ut/vl
Rr+wTYbxFP3uK2cjSjVPVcb57zpXHpc6P+drZZz/7tWN92evmo/zZOief5qY
+OVBko7///x3l366Wr7VtBQYT9FvnuBhmyP6lTLO/7Y5D/3Ypl2iMs5/dxP8
nv8uz9//1/Xo+O8+o+vRjqfo+fp5nOcbSvfL4/x3Pck+ML+uq8aeOdvx39Xa
n8dT9J+169XuD+vbjv9uKa0/8Py63/tPhr7Bfoedbf9OEH7V6sWplQFZ4oVf
3ex7Mt/2F3HCr4KujW3obW0RfpXfyWP/5UCL8Kuv1q8tx8LihV99fb+w/xSr
eOFXuQ6+s/QNswi/evR40414F5wnQzdnydxNs48mCL/q57nxQY628cKvbId/
3P41p0X41aCv28vHd4oTftUAfs9/l+dHv5pN14N+FULXj36Vk+4X/eo72Qf9
KkNjT9WvtPZX/eqhdr0Uv4L1VfyqtdYfFL/6vf9k6Bd65Xy/KNQs/GqD4eDN
hnlihV+9dl/3cn3Cc+FXLSrVSK9+BefJ0G12Gvf9fZRZ+FVzc/4r4e44nqI/
bf/JteGaOOFXZTLyuNmciRN+tTZqa/lFy8T8ujXlbiw9Ptws/Grr43V/t9+A
4yn6UF3PEgdPPhd+9a3EOc+uM54Jv3oMv+e/y/OjX22g60G/4utHv6pA94t+
dZbsg37VUmNP1a+09lf9qqV2vRS/gvVV/Ar8QfGr3/tPht4mV92iG8fGCL8q
YxfS7dnHKOFX/Z4eC8u6wCD86o7byanfZ5mEXz3tafd33TST8KsJM+0XD/lq
FH4V0vpZ9shiMcKv0ke8XDi9a4zwq9XBp5a1GCXm15Wss6fDqnCT8KsRd3wv
f2gSI/yqiUdYvq+To4RfWX88lDtuZKTwK/w9/12eH/2qKF0P+hVfP/rVd7pf
9KtQsg/6ldaeql9p7a/61V3teil+Beur+FUxrT8ofvV7/8nQ563xw35OkFH4
1c2Ja1ddHftY+FX3Ut2+dKv4WPhVytNL3xymGIRf7X3fMObMyCjhV3YFQw/l
Ky396omH46kNdaKFX/V/dzr7w4FRwq86rxzU17WBQfhVuUJpDa/aRgu/2jan
24VZDdEfUvSvLcYvBYtGCr/qsq7ssHD/Nm3Rr97A7/nv8vzoV2XpetCv+PrR
rwbQ/aJfPSP7oF+11thT9Sut/VW/StWul+JXsL6KX+m1/qD41e/953/n2JX7
i2RPjRB+dXr3zbiVC8OFX63ufubpsiv3hF+V2h6YXL9pkPCrjhtzdoucFyb8
6sLLtc/WDosQfjVJv7Lbnj3hwq8uRW88erR6uPCrUf4ti22wCRd+Nfj2pIZ1
/SKEXw35lvNxYbdw4VcuDRf8pQv0F36V70jM+ZQudYVfTYDf89/l+dGv+HrQ
r1zo+tGvrtL9ol+xfdCvtPZU/Uprf9WvqmrXS/ErWF/Fr8AfFL9i/zn29eGS
Il+y3epkdeuvRT8+6+/nWJxRb2SK7ofhi8PA9llutf7b9/r3LR/1I9u13O12
LEV3bEzXGnZlM/SNdOvKL67+Tp/p9rFJ4FtF7+h7g47j+bv/Ox6sLz2o8OKg
YUnK/L+u84n+9dy3npv6JCvzt/z37ybo7+wKu9S3ozp/jz/Mz/aZU9XqtPNw
dX4ejz52rFDaf+bn8ea2daev+M/8qEN9f/1eWa+sD3JUqzEpWZf5a37Fntcf
vDGPOpysO/LrepTxGQHGAz6xycp18nrlafRPx9Hb1Ovk8bA63W1uXVWvk8d3
WJnyVoxVr5PHWRc7/DtuUK5zxsStr30rp+h6/jv+Qhkf83yCvnB4si7j37+b
powP7Nt+64Klybref9CVWaL+/b2+Aa1739yNfCvnTNUN/DU/rddHfYGBF+fU
fJyic/51PfoO7FdHmnVt6MO629+vB+hx7Tpm6GeS3bTrmKG/QXbWrmOGPjut
S3+IV93g+nl9S/mOr1VseIpy/Ty+fUvVZQXXJCvXz+PFFsUY85xNUq4fuQFf
f9dffq47ULCkjcvbV8r1d/vl57rvlm8p92YkKdff/Jef6wZfNZ+z+qTwAX03
2r/MB3h+3tc1PdIzb75Phn2Uohu0dcsCpyDVPoru2Fzny2ufZNxHyvxsH3va
p0kNZyx6+lW1jwPt0zkdFxXSvVHt04L2afaBaw/4WFT7dCf7bGFOQvOz3544
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
P+K9LzovoU75wzlTz/kCdQrnF9QpnI9Qp+Sg8zPqFFs6b6NOcabzOeoUPzon
o07hczXqlKF0Dkedco70AuqUdNIXqFNakR7hOm+U3/VjF33z9Jqq1A3m/K73
btjI0P9ukjJuS/s95sWEIoXLJGEdOVEvms8z3lk7bd39n/Gu5G91JryKGvef
8Y7kn5fDN1RoLupOX7TDutOcj6YVXnA8tLR6Pf1oXfa99E/b+Z/r5/0b/E/h
FsOnqfdLOkvUr2Z/C79ps3haU3Wc/fPoq48Lr/RSx9mflxS74/Zzglrvmu28
P9utm65/q3Wq2c7v2o4t96Ox+nu2cye3fHPWX0rR9fn/2kHWQ+Nxtv+6rUN3
n52ojrP9F0zKP9xhvzrO9p/U6ZpVXESq7sS//65z/lXqOGnr+120w7rcvC4f
vt0MXThKnZ/XZX1UqfNL9Or98rpU/Xuqx/IKKboTdD5ke3IdJ/49rxfW/eb1
ynqsQd9qPdVxXq/ud3bX11dRx3n+7U+z5nf+qNYJ5/Xq6PHWu25gsjLO65XH
1tq6cnV1nNcr+KHzyaKLknRZKf/yfXGdIv492xPrjfN69X65yqevqzrO61V0
9LxiPvnVcV6viNiJK94eVuuT87pg3XJeF/w9r0sRmJ+vvxddT68/2J9/z+NY
F53Xhe3D47wuucGevC5sf9IL7XhduA4P11HkcV5HHuf14nXncV6vbOQnUKdR
1GPndWH/5HFeF/Zn5XpoXT6S/9P+5Xiu1F0/SvfF83O9Gm09yYt2WAee13Ey
7VMe53V0o33N47yO6ykO8DivF9aT5/Xi+MPjvF4cr3ic12ufJr7lVNZrsSYe
5mzH63JEGz/b8bqEauOtsBuPs90CtfG8Ha/LXm38b8frMlWbL9r9Ib+0YztD
PmrHdob81Y7t7EP5buAf7My/53Gsq8/2f6LNs+2U9+G1ebkd298F8jjb//3Z
uKJxndQ66mz/S7cXbFxhUuvws/3nPi6e13qKOs72x7r9bP89S+u6ZFxT6/Oz
/TPLn+pSf6Y6zvYfeqVOrZF11XG2P9b/Z/svS/2rRHS6Os7277g6T6VyudR5
2P65q1yxGVpKHWc7Yx8BtnNMlfMPx/ZSx9nOyWsyx9WZp46znTPedMn+zlvt
F8B2/lq2z8+yh9V+AWznrwUuld+wQB1nO3/9WaZFZq94kd+1dpB1hDC/+1Uq
d/VlYXWc7b+k25XyI7795zrJ/u3n9F9iSrCI/M71TzC/Y38EXpf5b8qUbZ6u
jvO6pLZq16t8efV6eF2Grxm36me7eJHfuf4J5nfsv8DrdeOHg22eK+o4r5dv
reyH6+ZOUMZ5/o39/ynbZ2CCyO9B3RK/ZU2ziPxun9mu/k8fi8jvV097jczs
ZxH5net7YH7Hvg+8XtdX7f30wRAn8nvHUx0HvTkcJ/J76KPUa69mx4n8jv0j
eF3w98p+gfn5+vl6ML8r9XYgv2N/Cl4Xtg/md7QnrwvbH/M716/A/L6B1hHz
uw+tO+b3K+QnmN+xLwavyxDyT8zvSeTPmN/nkv9jfuf+F5jfuc4D5nfsx8Hr
2IH2Keb3ZbSvMb/rKQ5gfse+Hrxe3yn+YH7PpHiF+T1TE9/U/K6Nh2p+T9HG
TyW/P9HGW2E3zO95tPFcye+dtPFfye+QL5T8jv1H2M6Qj5T8DvlLye97Kd9h
fv+uic9qfsf+Jmz/edo8q+R3yMtKfsc8zvbftGnQ6QQ3tZ+Fot+XnxzfvZY6
zvYf+zqzy5jTap8Utj/2T2H7j16xN4/DT7V/CtvfruHOvsM+qeNs/xKxm/fO
eq2Os/2xD4sSr1rMt/m2Wv27bP+BM5pcvFhCvX62v4PDqf6pY9VxtjP2c2E7
O6Y2uVJar46zncdc7zQ//wN1nO28YK1T65+han8WtvOOefdfjA9Wx9nO74ss
K5E1n5qv2c69j7fu4OkQJ/K71g6y/gbm9zxprT6+2aKOs/1H718y55SXOs72
v9nD/8sE3ziR37luAOZ37FPD6/KxYZ34zFHqOK9L+Pie3R+VVsd5XU4dmHbh
6EOzyO/8nS/md+yDw+u11uZpkzzz1XFer7XzrB09pqvjPP+awOnjKo03i/x+
JJerw8s2ZpHf584851c8Llbk94Omxa8Gd44V+Z2/i8f8jv13eL3Kph9O7z70
ucjvY078iEov9Fzk97PDB149cOuZyO/Yx4fX5Rz8ntfFBebn669I14P5XakD
APkd+wTxuhwl+2B+dwN78rocJftjfmd/wPy+ntYR8/s6WnfM7+vITzC/Y38i
XpfT5J+Y3x+RP2N+/0z+j/md+xBhfufvozG/Y18kXsfbtE8xv7vQvsb8no/i
AOZ37K/E69WH4g/m948UrzC/79TENzW/z9fEQzW/Q/xU8jvEW2E3zO8Qz5X8
DvFfye8h2nyh5HfsA8V2LqnNR0p+h/yl5PcxlO8wv5/VxGc1v2OfKba/izbP
KvndR5uXlfy+GfI42/9Qv+2VR65T+0mx/Sv7ZNZrelrtC8P23/NmjF3eiGhl
nO2PfazY/jY1cky23qmOs/2bFWi9cVpzdZzt3/Gj65mrRrUPEdsf+2Gx/Rus
nHDl1jx1HrZ//rq1DyyZq14n2z/xcfLqtnPU+2I7Y18ttnPXc5t1gR7qONs5
LGFmkR1/q+NsZ6eyg+JGRKh9stjOy8ceO3BNp46znfcMLHy79Gp1nO18sesc
y+yHJpHftXaQ361jfi+9qnI1tyrqONt/ZOjIdtXqq+Ns/5OlfYcFto4R+Z2/
N8T8jv3CeF08M0ovPlhYHed1abOz65JIg3q/vC5xtm5Lc+01ifzO39tifsd+
ZLxeE0fX/Dt4kTrO6+WYccgyzFMd5/kbeVQu/v6iSeT3HXPO5k9vbxL5Paj2
9RGfehtFfv/53P/S52HRIr/z96SY37GvGa/X9JM58jVONoj8fvpuy7xTxhlE
fk96MjXP0QTse3XRDvup8bokw+95XXB+vn5Xuh7M78r33ZDfm8J98bpkif1l
H8zvwWBPJV+Q/TG/8/eSmN/r0zoKPk/rjvl9PPkJ5nfsE8frkkD+ifm9Pfkz
5ndv8n/M79wPDvM7f1eI+R370/E6nqd9ivl9LO1rzO9lKQ5gfsc+d7xelyj+
YH7fS/EK87s2vqn5XRsP1fwero2fSn6HeCvshvkd4rmS3yH+K/kd8oWS37Ef
n8JJtPlIye+NtflLye/VKd9hfg/VxGc1vxeHfn9s/93aPKvk94ravKzk94OQ
x9n+ly+ZH3V2VfMg2390l7ujS5dR8ybbv4jp8MfEm5Eiv2M/Qba/j6FFtX39
1HG2/8p2STeX2avjbP9xJz2HuDTAvoQX7bAvofKcN/eLed3Oq+Ns/z1fl3zt
2km9TrZ/h5RyC7qa1HG2M/Y3ZDsPtGyfMeqEOs52vps4M9ktUR1nO9u+7jtq
Rw01D7KdE+q/eVH7qdr3kO3s3rtQze4+6jjbufGM+hMnuUSL/K61g/zeE/N7
y0nWd/Z8Uq+H7b+r/Y/ok7f/c51k//SyUa9vuEeJ/M7fqWF+x76NvC5Fdg4a
eKmgOs7rEtIq+8n9d9XzCa/LutjTP9bMN4j8zt+pYX7HvpAKn3dpm+/uWXWc
18u2a407JWzVeXj+w3XyLXA5FyXy+/GiZ3IMOW4Q+f3WqaJO9lUNIr9HdZl9
1MYzUuT3hfQdFub3VOgvyes1+c33L9vLhor8nrV0tyyFivqL/F53Sd3ChYpe
FPl9Z9zEsf/ta8nr0gZ+z+uSD+bn659D14P5XfnuDPI79s3kdYkm+2B+R3vy
urD9Mb/zd0aY331pHTG/N6B1x/x+nfwE8zv26+R1WU/+ifk9lPwZ83sx8n/M
79yXE/M7f4+D+R37hCp12mmfYn73pH2N+b01xQHM79hvlNerKcUfzO8crzC/
a+Obmt+18VDN7/7a+Knk90HaeCvshvm9ozaeq8/ftfFfye+QL5T8jn1R2c7j
tflIye+rtPlLye8HKd9hfn+mic9qfr8FfVfZ/sW0eVbJ72O1eVnJ71cgjyvP
rda9XFl9i/reHdt/56b6Xzs0UcfZ/j4ec6aMMar9WxU+DH1d2f4v5gYGHq0Z
KvL79JslwzsNChb5/VuOUVHxawJEfsf+sGz/ExWbVnkddV/k99C3N0YP+vRA
5Pf3t9sfvVsyUOT30tBnlu08atvu9mVWq9fJdj6zZZxX1uiHIr9/3dTsfbJN
qJJH2M5xTx/MC6mn9qVlOxd+nKtEse9qn1m2c5vATmedHoaL/L5GYwc1v2N/
W7b/opwPRu5fpI6z/bd0zzvfZ7g6zvY/uLX7Fl/7cJHf+fsOzO/YP5fXxfyo
xXLvGuq4wlVC4509rdRxXpfmgZuab7MOF/mdv+/A/I79eXm9vDvkGnzBXR3n
9Xp+55HPk3fqOM9fof2BpOwDI0R+t6xI3JaYHCLye6Hid5ecjQ0S+b3Vwf2T
50Y+EPm9H32/gPl9DPT5VfJIl1t5Y+vpRX53rOs+Qhd4UeT36tXOTdUF+or8
nlRr2rX/9hfmdWkOv+d1GQzz8/V70vVgfle+J4L8Pgnui9elLdkH83tRsKeS
L8j+mN/5/XzM7xVpHTG/m2ndMb8fIj/B/I59k3ldWpF/Yn4vTP6M+T2e/B/z
O/dHxvzO77Fjfsd+zbyOh2mfYn7fRvsa8/sSigOY37HvM68Xxx/M7xyvML9r
49t/nr9r4qGa3//Wxk8lv0/QxlthN8zv37TxXMnvj7XxX8nvp7T5Qsnva6A/
Nds5U5uPlPzuqs1fSn5/SfkO87s2Pqv5Hftfs/0PavOskt93afOykt/dKY8f
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
o8PGgLSg1OeCNyr9ff7Qbwh5I9eRQN7oV6do7i9rYwVvvNzpYmyw73PBG6ds
GfKj6ofngjdq+wqpvNEF9gv2FULe2J7yL/LGIMrjyBsnU95H3sj9a5A3cv8a
5I3cvwZ5Y6Un2SrOs48VvHHqnKtWjtGxgjc657h+IqKZWfDG2DzNS2/7zzj/
PsejEmf9lpkFb6y1533nxIdmwRt5/yJv5P5EyBu5PxHyRu5PhLwxjq4TeeMM
ul/kjdXzpC/M3tIseGN1shvyxk+zmryzfRoreOPY3Bcss1qbBW/U9pNSeaO2
n5TKG91AT2E/KeSN46kuCvLGC5QvkDf+oHyBvHEZ5VPkjdaUj5A3OlIeR964
geI28kaO88gbOS8gb3SnPIK8keurIG/kPIW8sSvFH+SNP8kOyBsvk92QNz6k
uIe80Ybsg7yR670gb/xIcVjwRrIn8sbydO5F3mhD5yLkjR/p3IW8cTed05A3
ch8u5I3chwt5I/fhQt7I5xnkjZ4NIycUjTEL3njz2/msdlZxgjdyfRvkjXy+
Qt646m6LKm6JZsEbuR4O8kY+7yFv5P5lyBsv0XkSeWNH4iTIG5mrIG98SOdb
5I2Xic8gb2xD523kjVzPB3kj19tB3riK+AnyRhviLcgbuT4P8sarxG2QN3Ld
HuSN1y/vLz01zix447IlVs1OHzIL3rjl+Okds/uaBW/8QPoReeNu4gPIG9sQ
T0DeyPWOkDcGkZ5F3jiNOAbyRq6PhLzRm/Qy8kauj4S80YY4DPLG88RzkDdO
Jv6DvDGduA3yxtbEf5A31iQehbxxKXEn5I1TiXchb3QmPoa8sceF7o1eNDQJ
3pi2/XulKa1Mgjdadc0za6qDUfBGbX8rlTdq+1upvJH7WyFvjDtTccKjdJPg
jY3yjc5x38skeGP3zECrGnEmwRu5fxDyxj3afkOiPxryRq5nhbyxoE+7p3/P
MgneuO7NseTVu42CN3KdHOSNc96k7s4xwiR442iqt4O8Madd0a+D/aIFbyxR
w6Gc79BowRurFVjS+vWPKMEb37cecNS4wih4Y9Ya7gFVrYyCN8a29hzg1N0k
eCPX6ULeyHW6kDcOHpAzT7HIaMEbuX4X8sYWU4rt6PzNKHjj8sv9L7zObRK8
sbS2L5XoT4e8kfvTIW/UPbj2qU52o+CNzU6n5ij81Ch4Y7+SrpFut4yCN9aj
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

      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1lEdoVVEQhu/LzX03mphmEjsiuhAFEXUhKIIILhRBREEEUVyIBXUhiCCi
YNsIoiKxZuHShW0hmBhNj5rElJeYYhKT2MXEhgUs+P3MuPjf+d9/5syZOzNn
pm3Zs2Z3WhAER0EI7oAYXAePoiBoYp2K8BDeCJ8M/5QMgjJ4FVon+Amfgf4Y
noIPsV/MmgC3wQAYBAuxuej+r4KvXFjIGqUHQQ1rLShi8wl+xsDfs98PL8TR
SfR6eAP6RHgDvB3+grtq4dXwsehdnMmCv2Z9iv4DPj22+3RvCbgX2bfWh8Yv
wbvxU846ClSC/tD4SGj/xZUL3VUlXzhLEPdYeC5rH3ZsBc2sfZA8Yj6ETR1a
RmBnmtD7WefEZv8YPiG2PCiHm2OLW/E3Y5uOj+zAEtkTmN6mWEEmuOU+n7Mu
4OxvxQI6wB+QB76Dc+xNSlicjZ632Z5n1WWe8gZPYLMVvhZ8lh+01ao3vB3e
DdKw2RZbbuV7Y2w9oDxvii1WxTzMd+TCc8BB9FXgI3oK22L4ZPShyOqonpnl
/aPvmwl/5fnvZT3G/ynYv4ysl/S9c9FWgHfKCfpFt3mhfIAi+Cm0R9T1Ajal
aL1gFPo+9OXgLXor2sPQ+iHFzzL0N/AW9TVnS73PlTfl9RVaJfymvjFpb0Tv
Ip9zK8GI90y2vh3+Bf7L30s1ts9ABnt7sV2qenutE54f5flv0vwoV6qD/HxT
TdHvsdZEllfdccB7Xm8nCx56vVS7TPbzA7uvLrI3VsB+T2T6H86Ve/934HsA
Pk5+6JP78MvwzqTlbTQ+TnB2UDbw0/DD3leq4xGvqfKvuqv/l6Bd8/gV64jn
M/U/P2BRbKvOLI4tTr3l0fBf2BUp/nTLm2p3HL0xaXOkLLL5oFqf8V7Qdw2D
9V7HVu8HxXwWbYPXXT3zILI59x5/67wWqrvyE2K/3ftZ72KHvxH1/87Y3oJs
dundhZaf/fAK9Bsc+5C0mal5lRfbTNCs0MyoZ+88/G5kM01zIEdzwOurPmlx
G/Xt+ISd1RzU/LoCutgvwNeEwN6F6iW9N2nfpRgq4U0+i3XXD59x6p8K7+Gq
pPWAat3jva25UgNv87ejPJf4/GwP7W1qjs1H+AfvlOUB
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1:eJwtldlvjlEQh9+vX7/3pXatWlpBEFuIBIkrCUJiC7E0iC0SO5UQ4pJYE0Ls
WlzwB1gTolq6qFb3fV/SnS5qbSut8kxmLp7015kz58yZd+Z8k3YfXR8d5DhO
FARgnOc4mfxN559I9HioR0f4HOc2+g7chSDwQRG+b6z3o4vR39G/4ZfZRsBw
GAlZtu8w9FDzyVlp2BphPGfEYgsNdpwwOI4+BidhIL5K1rS7jtMGHfCM2ERs
DegidBa6Cd0MrfDF1fVP8b3Hd8H2qUJfRF+Cc3AWGuz883JfYgqJybS9G2E6
9mkw01Nfhu0RQkyfn33JNyRY/TNglqc5yR6ie9F9UGx5TsHWg/5JbIA4F3I4
Jxve4L+HLw9dhb8S5rC+BlsTugL7A/Q71lWhqyEcfyq2MvzN0ALXsF2F6zCa
PGtZXyy1glLbIyGgugTK4KHt+xZi0Y/hERTgCyJHHwwP1n447em6GPyf8GdC
FuS7mnuc+SRW6hvp096J8fQ7T4Zu/KVWj6nwh7U9kCw54Ou1b12GLofnkBTQ
esyGuVCLLRvbPKuR6PnoBZCPbsG2FL0MlntaG6lRLr5mfJuwLYQ6dA62Vnxt
fs0hDttXzu+Eb672RiW2CrmX9cEn1qZDoV/XS/7SsyfglPWI9NwV9GVPv0s4
thpsZzytY73VR3pR+nQwehAMsL4/JDOHLkcfQUdDlKe559kdN5uWOy1GL/H0
3jJ7iVI3qY18K9aEYktBf0SHoUdBOXnft56QHqt09Sw/51Zg+8v9+iHJZkpm
LxmdAotknllXHdAekV5JthmV7/UBnepq7Gtsr+CJzWWkvQ2S1wT0RE9n4C62
F/BS3gjiDsqbwxllVo/DsB/2wQHLU+rT52rfpKDjif2LriXvGvgqYOu3/rxn
e6e72sMfsCVYrRIttjCgMas4YzWs8XRv6U/piR/wE27Yd5U5u4m+5elfmb06
bEOoydBgPUPykpgu6AaPda70in2X1IC+rZ2OnrcW1sFe2GP3DrJa7ETvgF32
psg8jUVn2Nsqb3oEbPG0R2QmPuPbit4O2zzdQ2axBF+B+WVWVsBKSKNuH/36
fkiPxLPmn6t1LLQ8ffYbIL8HkusG2Ai5xOX49d2XnKr92n9p0n+QbPeVc7+g
O6Dd8pM3ol++A3RZflLnsdx9DIyyOfoPpoQKVA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlIV0EUh+ev9+/cTCuCItLMNZfEjcoUilzKNkktCc1Io6wotcDKh5aH
hLaHFrCCzCijIIJooaeil6gIeiiIgughaNFcsjTLSus7nHkY5pvfnDN37plz
TtzGporGEGNMKyOUMRQ0ZnXAmGFrTHiYMRfgHb4xl1jPhD+yPx69A25Af4pe
ACd7xvSyNw9+jBaBTRbn1aI/Y12I3s9+pPPdju9z9CL4K3oY+mzsy7E/jHaE
UYyNh34UXgwH4WNwCbyBcQWehNaFfzS+UZ7euR29nn0fPgXXwRY+CdfC7/ju
XjiAlo7PSvgT2gjn1MMTsJnBaIT/or1lbw9ssP/Neha4EL8taFsZk7FtYz7D
mAL3YDMXfoTfetad8ER8X7AuhgfYT0TfCY8F9bubYR+tmnFZ7oD9Kr6Rybdq
mHe5c0Tv5JxYuTN+V+E4+DMcwt5+OBfbbtbx8E32Q9EPwHm+vm8F3GM1thLn
RejJvv7jv6DGP5nvFnj61pID29iPZTTBo9jksRePTZaLg8QtnP2f7FXDHjwM
V8EhcBSjAf4T1HeUNy1E+8I6Ab7FfQbhcrgb/g4vhz/A3+Bl8Hv4LPM5xjRf
4y3rqXA2c4rRd2hyMdzkaYwlr5qZM90d5E3FV2wr0fpY58JPOD+DdYvLjTRf
80TePQneLXfmzDkuDmMubyUni9CaXU7KW+e4/JFYleCTwTFVzGWe5mQF++PC
9F+q4NPunicCep/5zB1W4yy5EenrOQfhfDgfTjIaz153/3arZ6ajV3qaq5Kf
EdjXMicaPbcuoL7yNpIbcuYYvhcD6iv18wvfdcxBfFuZ04zm1nGXG5Ij8g2x
lzhLfcndS319E4nvWpeH8r53reaGnPnA6rsnwvesfqsGfgjfcLkt+dzlcviO
1VySvLoPX3e9SPI/3cVB4hGDNh3OY17AiDVah0kB/dZtqyx6iqf1InUx6mpI
9FSpafZyjPaWQ6xTjd4v1dnIGa9cT5Pedc3qt6U3Rnvai6QfDrpaG2J/RUD7
zIDVviS9qIz4vLGaV1J3kvNi14/2A14Dj8CvXZ+UvtHm8nwJ5790vVf6aovT
9wXUV3p4r6sdqaM+uJQ5zmgtSR+S+l3KnONqWXI729MaHLTax6Sfn7eqx2CT
4KmP2Mv9/gMNf7LV
            "]], 
           Polygon[CompressedData["
1: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
evbjzub7XC0+wz6ec5Tf39a19HS8Qdj4Dy8EwfM=
            "]], 
           Polygon[CompressedData["
1:eJxNlGdsjlEUx5+3nrfPRZT4JKiiqIq9qhWrRpGifY1EKdUYFdoSM7ESI8EX
64vEKK0VxB5frMQWEiNWkJDYqkaXze/knA8+/J788z/3nufec+89zXILIwVR
nueNgTD84pMf8rxGzvMaQyzE+57XHN4FnpdJrBO6I34Hp+ML8Dqj68AU9He8
GHRd+Mic4XjDYAh8IXYGLxc9CcZCFd4LvOfwEobauN/oVeiVsASioslDznTI
gPV4Ad5xxjVHv2POCfRJKEP3w7uGvg43oBHrbgiHbfxbxpTbnsrRFehK2AK9
8XpBN/hAzPG/AGrBVNvjK2iCToYU2Mm8B3AfPhHrj/cQPVXqAtNhG14t1jzT
dG10ProAjjL2CByDFsTek2MrOgn9Eb0dXWTr645XavFtUJc8JXizyTMH5sIk
2ICXwZ6zYYLt/VCg/4q3muVYLV20zsmFe8TvWh1TQ7onWX8ezIDttvY3xJuh
E6E1HGTcAdgPr4k1NW8f7A20ZnEhjddj/q6QrnUaa8uDGLxivEK8WU7388by
lDBnN+yx3HFW8+JAYwMYuxrPJ8dA9CC7JyMgYrWQPcr9y0JXk+Ms+hyM4d+j
YbKv/89yGhuH/sa48+gLcAkuwhU7A7kbqYztB/1hLV6Yf6SZjkZnkjPi652Q
WspdvAm3Ar2v8XbWp9CnA70PUt86ch7My5Wzw8t2es5Ss4noq4ydiM6BHnZH
ZF2XA40l2R35bHdR/ncb7gR65pvwNsI6e0d98fo43c8aq2MD9GZ0zWitj9Qp
Ga8HpMAyYjWIfSDneyiFkXgVYX378pa/osvkTUAXp73iN14hsa5O56ShB8Mo
qAxrr3kbaN6IvU+P/8xHJzAnEdpACG9BSHU7aO/0be3AK4Kt9t5iWXdjSPC1
L8jdfgyP4G9Y8z6R83Z69jH2nqTmPZmTAj+tN0rf+4OeJXcX5tg+kqC70/os
tX4lueehW+K1crp2OY8Btt806xEdyd/B1z4jPTTZ1/631Or7R9YZ6H+lbk2l
L0MLp30rYjWvQlcHWl/py9K/45yOD8NyvBUw3u51lZ2X1Pw7+gf4jKth48fZ
O4mSWjuNZVnP7sIaO0Oqr3uUWsp5LEQvhkXwDO9poLX17KzEqy+9BP2DPL2Z
3wc+46fjtbV6S91l33LH0tBjIcvXt73mv3c2GP4Bnk3ZxQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlLlVEUhr9jp8P+KiqH1Cyn1EqtrNRMmwczEbroJ/QDspsGsKDAgigl
gowKotkso4EiITOhyYzKBmikwSK7qIzIgubnZe2LxXrOOmuvvb+137WzV9Qu
XxkXBEE9NgjbFw2CKvwp/FkXBN2RIBgbC4Jz8G+4EP6HX6B8FrYS7+J3GvHT
8C14DLyK9aXk1OEvEP9DfBLxjfx+CHcS24A1wwnEx2Gv4RfEwjAIvsETif3A
L6bOL3wRv2Ps+YScYeQMEMsnlkEsE/tKfDP1y8hfix9OzndyCsgZjXXAB8m5
iP2FJxPLxp7DD/3aJ/AdeAs8izpN+NsR43v4IeyzEH4LH8fK4TP4JOq04Buc
/Va8Ff8Iq4B78DnkvMG/dFZLNbX3g4j1pJt4JjlP4btwOnwfvglnwc/gHjgj
Zmu64CnwYM702Nm3KOeGsz7PpX4jvo/YHPgKPj3O+vWFnFzye4m9Uj+c9Vq9
0rfo7mpZ2+w1oDv96ayf6nk0tB7qTiOh3a+0kYpdhg+QOzbOdLKXOoe8TqSH
MnJy+W8R60rgFLgArsEK4Api4/GVrM3BLyNeiJ8Vs/OrblFo36Hf0+BynzOb
nAFn+pkA18HH4Hjtg7XD+4kd8VqVbvOwT/AH9c3ZvSbqDNg8zrAzantqr35n
8X5y3sOfI8Yf4RkxO+/80O4lCsfDo7w2tpJz0pmeNFMutFmSDov8PSYSq8by
4TZpWPU4wy64zc+dzjKV/BH4NHKnwSPVF/hDxO5ds1RMPJn4BO3j51d6nuH7
vyQ0DUjLe5zp9SS23bM0vJ78meRUw+f93eWxtsp/1wnyGp2dU+fJCO1sOk8m
PD1m83s0atrWfF31Gpa2O5zNvuaiCS7x3y4NSP+am0vEy/2+lfw/VNoJrL/t
1K0J7N5TvPZWO5t36X2dM01q9tfAyf7M25z1R9qroOYPZ++J3hxpMlV6I17m
NSntaa36s4Pcw+y7VLMfNf18JN4rXUVt7SR/L/FwNryJ/456HWb5Gb+uc8ZZ
f3RPDf7NqY/aO6y3Lim0GdadSs85fmZ3643y76e0WhqzeWkhN8FrZrivqbP1
+f2LiXdGTLfS/Dtna/V+FrPXNX/vmhPVUk3pcLr/lnRy6v1M6d3+DzKwtXQ=

            "]], 
           Polygon[CompressedData["
1:eJxFl+m7VmMUxvd+bae9FaVJSYmkjJlKqWiQaPDBn+Cb+TJWByUlpUgz0uyQ
5nmklBIahBJCptKAToWklPtn3S4f7vddz7Setdazpn3BnQ/ccX8pSZIaaZJk
+n9ZPy8JVxZJ0kKYlyfJZq1tEuaI3iTsEP2Z8IHor4RvRd+os8N0brrGSzW+
QeP+Gr+Zxxz008II4aYkeMDrFeFl4VXNTxBm5HGGvQOyuIO7tgsb8hi/L2y0
LBM4K0wSJguLhEQKtdPfEJ1vLR0W6Ox8oVURd/0gulMSd76Shc7oep7OzcxD
Bu4eKMwXvSUNG8zz3Z+I/tAyvC5UWEfkfsNzb5rPeOuIbhOzsOFsYW4e/M7V
vdV171nCOaK/w57IKPwoNNbc+cKFQhPhWsba20i4poh3ukK4SrjagGaNPXX1
X0eoJ9QXLhcuE6ZJltdsc+xQXXM1hFmiZwoti7BXC98B34almMOWtySxF3nq
aL6Lxi3LgveZGt+axB1DheeEL6XLTuGAsF/4RfgVu2VxFh7o95rmptmm2HGY
eey0r00VPUW4WHubFSHrDOG6ImSeaJ3Q5ewi9k4WmhZx5hKhuW2ALbB5XduG
t0CmI9LvcBqyNrHt38hC1qqizxCqoaffBNlrl+Kt2HuB8HoWZ9qIXpiGD+KL
T4lnP6GP1sqFzeiltetlg2esJ7b6WvhGeEf4NA2fWy36izzsW03YIfpjYauw
TdhuQD8rXoOzOL/B8fmUxms1XiOsE9bnYcO64nVzErbtJ/QVVmhtpfCY6Ed9
7l3H10JhsbDE8nwuzNGeuT77pLA8Dx5vC2/lITs6fGYZkY34XOU9rDWS/3xi
ndjD3n3CXvvMAYO3OZTGGnmC3ELMfOe4ZQ76e8cQsbQbf9OZn/Rfqf+20vd5
y4yvYlN02SMcTGPvbo/JVeSsi8tCp+WWeZVl3KX1b9KQHdt/KgzK4g2gd/q+
QbblI1m8wVrrxV0/OyaWCiXJkpbCvkP8jgtt+8Hmu8Dv0Mp+f30R/tWXd8LX
dF/vLHyNOWh8jpjIxLtzErHyPHy1v6XGtaXfM7ylxrOFAaJHC6PyeFPelrmn
hYF57B2MrwnPCUOd7w7o7H7hJdE36b4bhU5CZ2EQuS+NOziPzbDd18JHeext
L3T0GXI8efZF1w54jssjp463bLN09gn7HTF5TOM/04jVkVofYT3GGNSnJWms
DRde8J6R9vmtrl/9zBPey/zu7OHs4jTOjjHvvo4d+LxouZgfZn3npSEn8mOb
fcJY60YtGZ6FjtgAW5ATNvvOZY4hfI71LY4RbMedyIpOY/wWs21f3uRv4UQe
OZBc2E42aaD3P1e4oQhfbJVEfV/je9aLfs/5Bv+jlu5y7CLLujT2sJdcvdj2
rHCcc5acQ+6B5ybXT3IOgKamvpdH7aEWNy5FDarIIhfVL4Uf9Ld+29KI8Qrb
H32puY9n4bv48FSNa5J/dfZCcnIRPOHNHGu8ZZskdECXqfZ/dEAXaj6xujGN
XuBPvxc+fTwPGba5H/kvr9CfkCPIFeTuKrorL0UOZ89290vsfVJ4wjHZz+8y
SbioiBpFrvvF+YfcwBqxWrUUe6il7ZO4g7uSInIhObEkeqzlJ8ed0vofefga
OqALMiFbIezKI+dj76NaP5nHmUrnV3jDE97UxNNF/671vfZfeI+w31IT/403
93fEH30H/VVHjU9pnGtcrjN98qjp1HbGG+xvvWybtWnkMGxU7rxFnzfRY95v
ehq1FF6987ALPKFXp2Ej5uD5mPeVm8dbafCA1730DknEzLOO3ZmOVWIYGamd
yFjuPEdsEdPE9l30QFqv0Lg//ojPp6EDukz0++E/5Ktejg/i59E88jK5+sc0
+lgAvTuNnvY2+ha9VTOhm3u9mqJrlaLPq+d895fQQPQ48euQxJ4r3OvQK1Df
6HngAa/mQo8ifKqq+wn2NisLfXlj3po35C25o557y1rud+gxkRFZ9whT8ojZ
+s4v5HBkQrbjQkPnddbIQTeLbqf7uifRI7Vx3wpveip6y2XuD7EBtjjL/JCH
XI/vkTsL92VH7fP4+jHhPr8xb0utmu6+jLrUoYierbbt2cg1BxmRrYvwkPY+
KMzKo2/v4rXWkrtNWdDoclsSc/Cm96OOcQc6ozsxdo3W/7JcJ5ybq9q+xAyx
dNLz5Gpi85h1Oe4zA5zf8dl7ssDdWdTkAd6Hr+Fz5I4TnpvkPhidm7hfxxYL
s5AdHdq5byUHt3fdbmofae7eubt9CN/pKdzu/xU6s9J9eVPvvVS4VegqLNHa
UmGM/ZN8Qq+NDbHbIs0vdqwTE8QBMd/Tdy3P4o5G9r+a/mbiG4bvjHnCfNe3
tsIC68a3LDFBLPAdQ09Fb8U3Iv0U8jV3fN3i/p8+bLRl7eH1bknIgA7QzHH2
IDWaWpLG9yM9Kbmz0r0mvOjtRmXBs75jlrg4r4g7mOc7BH1Oc84l15YVcY6c
ShzyncJbk3PINbx5Ddc4alstn8O22Bi9yzw3zrYgB1cp4puX3FzF97DGXFaE
DGXeN9z1nRpJrzjH9Zye4eEsaiy1tqvG4zVOi//rBnzQDR2QHR3vzyImicUh
2EpYkYYNseUR4XAe33R82/0memUae9j7m/ewNsvgW5Q9rCETMTvbslbm8R18
2Oe4g+/YSt99yHuOmPc/TvRWMA==
            "]], 
           Polygon[CompressedData["
1:eJxNlFlvTlEUhs/Xnn7OMbaKTrQ6q9ZcYyWEUEO4cOEH+AHKhSKIeZ5JjDHT
UlNbaYlqTaVKtAShZiVoQiRCxVD1rKx14eLJefOutdfeZ+0hcUbetJkhjuNM
hzAY4TtOLEYMdINBQccZjJcNI9C98Yaie6G/BRznu+c4zfAD0vHToDdE2dgP
+J/IS0V/RDfBHLiBVw2XIIrYObxSyES34JWhx1MnnTppkAxDiFXgX4QquE9e
D7zR5I2CsZBieXmu48yEteSdIK8L3mN0e+LtwIW+eHfxnhBPQNeh62Eu4/Lh
usVWojdana7kbUJvhlj0LbzD6CNwFGrgEd5DuGfrm834WbDA1fxT5IzEz2QN
U1lzBf4laIv2rbffyWvv635IL7PxctAjIcf2YTJ6iq81JBaNd5Q6JVAK8Xid
8PqTn4DuaT0aA+MgVfYyqH1OMZ2LnmB7nYE3ET3J17lybcxwYmXUL4ciOAEX
XM3Ptv3PgCxbU7bNH44egE5EJ/n6jcAbiHeM8QUwzNfzlWP9GS61rB9yxn7C
LzgE7/E+wGWIkZ5Ac0DjLfAXujM+DnrYXDL/ZubZBOl2hqXnHXztd4bV6Iju
jC5AL6DOQlgE+XL2bL556Pl2nivxooManwt90H/xXOq0Ac/X9f3A+y1rtDli
IcbXdYbbXn1i/BfiaehtrHM7fMVLID44qP2WvmfZXQkwNtTXuSJl3dAFguT3
IydCalsszM693LM/jG2lruNrjUb0G3gHn+3OHkQfsH5X2T/GQW1Az3sBFMIr
8KndFt4SS7H71IDuib4n9xVWsO7lrs4l78JG9HP0M3gp8+MlBVW/sLqNeMl4
5Z6+C1nW2/PW51Z0KPOGhKgn9/aavDE2v9ztCDlj6Ctw1fa0xt6QeLnH6Fq4
CXV49fAMEondxnuAXmLnRs6P1K62/Kf//eNTG/MA/RD2wz5P+1hpb90TT/dm
L3VOwxlX35Qi4t2Ib0FvlbMrcwe0v0VwEnZaP6S/u9F74LSnb0qs7ctZdLGn
3zirUWL17ti/1Zm3UvbE07NeiLcKHYk+ji6WWubJO7oG1ts65R3cYfsleyPr
2mXxdbBB1mv/s5r/WwU7XD1z8s4vg6We7ovcsRU2r6xB7tliWOLpmx1m51j6
1uDpvE3kfYTXdl7+Aemg1hg=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlGtoj3EUx589/vvnmUuEN0osKS/cvfCKmbFh2N/YZjf+29hmL1wako3C
KLc0NUaxuWus8EKU5JZyqVF7MZRCLZfMG7El5fPtnBen8/19n/Oc3zm/c0mv
3Jy/KQyCoAkZhDRzKEXXobuiIGhAr4oHQTd4N7gAXIacBP+CO4guwf4wehH8
InQD/KdYEBQF9m8eshF+K/whJAHOgXuKzQpsutCVnDvgx6bBgWvAd+QfyQNn
wx0BrwQvjttd2eB8uA/IAfAauE8eUzG4RRr/X/Gf5NzGeQz+t6O3IQ/kD74e
fB/8EbvV2Peg18Gfgx+N/XDkJrgaLhG3t6nH/g92FdjHUoNgoeeegH+PNIGL
4MqRU+DfcKXgo+Af4BH8s55/a+He4icBfonO4rwQmzxsjiL73Y/epBa8BW5+
3N7tCfaX4S4hQ4ixAv4KeBi4BLvp4Ay4IvA08DzwKL7dDu3ef/y/Fj9DiWWJ
7OBbsF0ProQfnGq+LyIR/3WGZq86ZWIzA12FfTu6HP4s+rS/eYv/p97o454F
2M/kvCGyWl8HT8BnFfgGOD3NbGaB67wWqssjcAEyFTyX7xO9Foo56Xkpx0z3
Xwu31u2V7+zQfFbD7fHeUy9N9neoAU8C3/L6qu7KI8VjU5zjwD+J5xi4LzKf
+eT1Gq6U8xSPbaT7kc8Nntf4NOsN1XQXtsV6E9UssjdfAz4PXhq3bxfAy8BJ
cJvXUHfNCU2EdX+uYkWfxWY5uALc7v2s3n4Mfuf9/A2d4bVQTbp9NjWjjT5f
mkHlsQw+B93sM6U50rzsQJ5F9q/iP+N9qB6oiWy+NC8x8s1XXvjpjVleyrE1
sv5U/6jvEr4T7kVmL/8PwSU+I7fAm0OLU7tAS6owsJk/gZSBj4SWeyW6M7I5
0ptclc/Qci/UPtMOC6y/c/1tr/k76906wLn+tlmh1ToJTkm1mVXdb0fmSz51
n+ZUtjvVb+BW8B+9md+tHfXFd2YheI/PyD70G/hG+YLvj9leiqfZXtWuGIhs
b8jn38hmXHP9CrzXd6D2p2ZT315EVledn4M/+96W/16/S3v7re8T9YNiVjwD
MdvP2i13+X7cd5d2aU9kcSt+1UXv/T2y2db+7wf/B+5mvg0=
            "]], 
           Polygon[CompressedData["
1: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
ibeJ2a1T5EkeMzOz87qYY7dELv0H++V20g==
            "]], 
           Polygon[CompressedData["
1:eJwtlVlsTlEQx2/rc5NzI3YSQqglPNgfeFJbq0XpQr+2lGppawktFbvGUhVK
7MuDpUWoWmKJLURifUCCaEIJiSUltT3Yqpb4TWYefvn+/c+5586ZO3MalVOQ
MjfS87wwNIYfzvO+w0/YQ2Cy73mH0RPR1SHPew1v4B7chX3EsojVoD+hP8Jn
2IQ3iWd3onfIXpCONwqvdeB5+9FT0W3QbeEt8TcwAW85sVr0dShCJ+PdQN+E
q3AFrsECi/1C77Zcf6P/QIW9bzTeQfQhKIdUvDDkwFhiz8n7GdTBGryNTveQ
s0+RvfEbYAveZtkTby2xregMdCl6A6w37wDst3dl4yX4WqO9FpuKNwYvHlIs
F8mpzKmXjF6FLoG18AHqnNZ2I7GJrNmAXg9xtr7MdBK6GL3S6R7zYCZeErEi
qResg1IYaetln1Sr+SP0Y6iGxbAIlkIMsRGsCUMxerXkCO8tvgSWQSxejK96
DloaayTE4tXj7UJn2vdqgDuwEC8Fr5Yav7Pekh4bL/tEak98g69Oe3O37ZGL
ng55MABvuPXSAXQ9zzemmX0I4TUC32LScxNs7wc8+9DpuQthBl6ir3WbD5kw
CQbj9ZZ+kDXos+ie7NeM/ZtDPt4ZvO54PQKNnbUZ+EIuEayJhCyne0Szvo/k
gh6C7oseBAPNS4QE6ROpu9V+Gl6O03P3xxvm67oYq3kSOtnpb6zVPAU9HlqS
T4tA85TcWwV63kJ0AeTDOGIX8M7DJauFeP/I/y80If/TeE0D7Z1E9HLWrXDa
czdZcyOkefYjNpQ1t/n7FjwI6fpSO6+cPU3mR+4VyLdn5EwzpGdtfjPlDpG1
dm9scjqfaeiSSJ3HMzYXctdIzc9BZ3I8hXcSqmTWiV3G3yIzCrNsJqLtu6YS
CzvN6Sm5PgnpPSN3z6uQ7nccPY31Uegu0B7aQUeLyTskl+3obTKTNqtH7X6U
ma9EH7P6XnSa00zruQy7V17ivYLXTt91Ai+XmKP+AbxzejfKzK6wGZQcOkAn
Wy95So3kPqsh/gyeQwRxL9CZkPs3y9fe7oWOg3irRbrVV5554TSnPF+/f1ee
7RZor1fafSZ3XBX6uNPfbLtbT6JPwX04gpftay9JT8n/gAq8cthnuTQLtL/y
bJ6kZ8N2TrmTnsj3cdoj/W3mZ6Fnw3+h2dxh
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlFlsTlEQx2++z/0StzxYEpWgRG3VEkspia08WR4I0oREg5KqLqpVtZRS
aqldRPAgIRKReLATRCSW2ELFFrHHFlEklmgJv39mHk7md//3zDlzZuacLjOL
JxXFgiCoYcQZJYkguIkwOQqCWrgtYh28Ge4PN8KjwyCoZO4U7Fr0Nugb0bfC
S9Gnoy+Dv7LODvQq+C+8B66EP8K18DZ4AL6/4cXwB/QauDdaGuMN3AFbyprD
fK/WfF9B/8TIgndoT8YXfLejbfE1m+Bx+CzBNye0syjOa+jr4I7wHbgO7g5/
gTfC3eAGuAJ+z5qr4PGhzXnp8SvOJfA57FnGSHg9egpzHnjMWr8e3oC+iBgm
hMaacw/9JCMJXo12Bm4B18B/WK+JsRstE59CfNOxn/kewpydzLkMN4NXwZfg
OFytfRgv8V2GVg6/gJfCPfEvYZ1Bof1/xajyPHTC977nTfX9BV9gxOCVaGHc
4m+OTY9bbd7y/wNjMLydOTPgJ6xZlrA9tNcKeBOjAp6IFkuy+FWvi8wtCCx/
8tMZn2EzWec4Np85ffzsw0PT8uA72FPuqzX+eQ8ohnrXb8jfc6t8DlWu9Q/+
GbPYGlQ/75mxXkf5pmpP1YPvbPQf2GL02zHrMfXzuMh6+xs8AS5KWA+MgefD
p+FR8AL4FjwFLvD6rklYLZT/ssjOrDPqPsxGXx5Yfdd7Xe5GlsMM+H1keVQ+
c7ED48b9sMmMssBiUs80Yvd6b6ufn8Od/R6pN3t4TVOx7Rnlgd2rDHzf4VvN
/JZ8L0Rvhc3j+7HXdw4ced/mwg/RSxN2XuUpPbI3RGdPg19j57POc+wsvh9h
F/K/2N+ZXv6e6J25Dk/zvTQnCz4Bz0vYe6DeO4B2xHte/ZmM71zW74rt57XW
/OUJu0f7IrtTen/2q788fvXV1ZidUWsfi6zXdaf0Xi1AH6o8R95zaDkev86r
/lEfbUU77PdFPX/U76buY6H3wzB/W5Tvp/7W6W2p9J5R/O1C6yX13ojIYlJs
2aGdW3fvoN9r5bI4Mk29cSiyfKr3J0VWx3x8U0J7E/QOlEaWE/XGLniq1055
O+/1Vn/qnVdPfUf763dc/ab3UL1RgdbX66J7+h8AXMqi
            "]], 
           Polygon[CompressedData["
1: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
0Gf+B/maO9A=
            "]], 
           Polygon[CompressedData["
1:eJwtlWtMz2EUx3+q/388sblNZZOZW1SIilxyf+PSVhQy18IqyjWhcr+X5DYb
Nq9sGBuhjCzmNpeiyK1y28hQTJgIn7PnvPhs351znud3nuec8/y6zE2LSfVw
HCcOXDDSOE4hhkVuxxmFHg050N4TTUAsxEFn8IeV+N4RH4zeie5InB+0hS3s
8QFbLexBD8L20di4duitbrt3LviwvgMM0+8vxHcAvR8Owm9sWdiSoABdCmXQ
F18apMJSeIltBTHj0D/RP6AOVmPbqzn8w9fM23E8vG3+6bAK3hO3kpjN0Iq4
NtAaUvD5kZsvdIVK4mZj6wUV6HK4A2msW4BtPmxEe7M2CT3H2Pil2J4Ql4CO
gWiYDHd17Rr0W/QbqNFzJBobvwz9FNs8dLKx+27C1lLz24eO8LRnSiDHRJf9
nuQah38KTIXVUIWtGj7AKmIasfVnbR76N/oPLEc/07gq/a7UcCBxTei/xt6j
xA/Alo9vBt+cCX2hD0SC8bT3sV77RO53g9wPfDK2H/Zq7p/RL+A51EB3bDvd
9o4mQSzcY4/Fbqsb0N/hPizBdgPbdbil/SX9twG80KexnYGzMJC8wmEtPg98
xZIf2hN9En3K2PjNer9F6EtwGVKwned7IXJuCJV6YDunvdjPWJ/UX85egD4H
5yGIbwa6bF83Eh/msrnehNs6YzIT49Ff8GeiJ6KjpF+IjYbZLlsDmal66IGe
gG0axEOd3luO2/q/SN0gX+5Z912j9+IirgU0h2v4dkOextfrzBxFN6Gz0YPZ
f4jL7uPDGl/4qnnKW1GETkWPQY/VHpKenY6eCbOMnct6zUHOOQGOQTB75brt
GeWsvbXWUtcg8cNVKNFaeWnODfBNZl17eJf2l8xyBnqT1FFnReZR6lBobE2l
78OwhUKIrs3G9pq1Adoj0ivyNmTo7NTqvhVof9ZsRz9GVxp79wHYekI37V3x
dUbvkFqyV5TL5voDfuns5Onsy9uVjs5EZxmbe63O6Fb0NjikvSNv4WH0EQiX
cxj7NkofDkI/gDJ4qN+XPEvR99UnuW9z2zfsrs6U3HkgDIdIGAEXtabl6E66
Rs7+CK4YOzvrdHZKdD4usOYKFMNg9cucHUefMHbGZL6r4ZX2sPRrhLG5J+uM
yVr5HwzVnIr0v7RM31F5z+KN7a//F2HkqA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlOtrj2EYx588fk/pKUpKDilF3ggpL8xhlrxQqJ1EzjJnI2yTtrWxaeez
3w6GzQ42+82YYcYOlPBGCUn5Y3y+XdeLu+tzf5/rue/ruu7rvlefvpqVPy8I
ggpGyJiIgmAAGI2D4HEiCFrRUtjPzGfRZ/n+CZ6BZ+AF8Db4PjzMuAMXok3C
KXgSfgbXsE4D69xFq2DcRt+PrUN/iX2DzyB2BL0Hv1F4Cv7r+2qvf/CcxyD/
Rv7txXcankL/6fvq32/wF/efQ3vt64+hvfXYvsLjoe0/7XEqtpvwEFwEX4Fr
2KOavUbQ3jGa4AG0Hr43wJ3Yx4x6+Ba2mm/l2AL+fYL/WXhfbP9OwB/hcnyu
wEfgp9ha/u3D9kWmZ6K34/MAfuJxvmKUxhav5iWxaeJZ+L3X4bfr2qtM6zCq
4RTf60KrWxO2S7nprNGL2es8fADtA/M2fF6gTSln9F9aM7J4zsLnQvM/5Dlq
fhDu9XxzY6u5eulZbLkpx+aErdPFvDe2fVVb1Vi9148+hD4AX4NPwf3wVfh4
bPXJh4/Cbd4/HdjdzFuwL/i+B27VuUa2jv7NQUtnnIB70MYjPze0HYzjYrTL
xFHGmkXYNPRj6I/Qn3vdRrAPmWdjN/K9LraaPldOjF3wKrRGj2cMLSM0fTla
J/N0eGVsuu7drYSddQs8nLBzVM1/xBanapWn9Twv5aj+VK+tQ0t6LZTvYr+P
ycjizIEjtLveA+rhRXCa39luz2U+2hLGdrhd58zIgkO0QbgQXqNe9XuxNrbe
mIS/w92MWq/DLrjZc9ddU81ex3Yv7pFjGbYYrSqw+PQm6N247r2tM03is1Bn
4/FU+frq1djjVI793g/ZaCWh9VKB1vO9WhIWs+K/jM/J0PQz2I7IzvpSwvo2
D22v56s1LsKbvTfUA5u8H9Qbh/3sMrF7nDN8zZ3YFR67dH1X/6u3U177UvTc
0N5MvRXX/E24g35DPRDaO6P6/vH3dgJ9q+egHt7i/ay+1Xskf/no7BTXer2H
zJOBvYH1fi6qSZf34TK0C9jKwPLv9nPfEFuNVCvdw07Payl6pb8bek/+A1Hd
3DI=
            "]], 
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJwtlPlLVFEUxx9N86IeLVS0LwRaQXsUlKYWKRT0Q05qq1qWlrsUarS6FOWS
pmVjWm6528yoaS6VitEKRdFO/TF9Dvf88GG+8z3v3XfuveecVUnZnqwplmXF
gRtSHMuqd1mWlz9d0A178HZDwLasamJ70blQiO7Cy0PnQw5kw3ko0tg89Fx4
gN6FNx/tRYehoyBSvWSoQz+zTQ5n1WvGa4KH0E8sk3wyIB/i8UJ45jhkop8Q
P4GOhxg4jXcGcqCNWCxeGjoVkqEZbyleuKyPXoZe7pjnUvBa8OLQhyEIruFd
hVxoJ1Yre4Gn6FK8OnQ6eaXBQl23VnPKQreiE9CJjvlWhLyDtwK9Ei7w3nmI
1v0Uoo+gz6GvoEuhDPbj7YMDmqfsYxA9AMOSD96Qfitb934KnQSLYREskTvV
70uuCzQWoWfRYJvz3Yy3BbbqPkvwitE34Ca8hkkYIzZO7A3aB23oQbwAulfe
hVa8AdvE/VpPVXh30BVQCR/kfblz9ukDP/Rq3Um8Cqrhve5z2DbvfIRxzeEP
+i/8g+8wgveC2A/0T8f8juK9wutj/X63yX8M7xex345Z4yt8gW/6vKzhhzL0
bbwyKIcCOXu8EWJtrNUOLrxjeEchGuqJNeI1SE1rrffreuXou7I/eERsDsyG
GmKhLtM/9Y6pL59+X54r05ro0Xvx6tpN0KJ9LP3Uie6Abr0XuQNZOwQdC3Ew
ndhbx9yfnOME3jt0H/qey5x5jfSxrtMFPdCu9+zTHpCauOWY8wlo/DmxZvJs
cZv6HJLz1HuW+5PzknMbcJs7mNR5Eap5zQAHNsIG2ASH5Axsoy9Lf0AMPMYr
YJ3rbjOPZEaVoKfqOxK30dPkP3h0VmRrf3p1Tsn3ZsIsSINUyIA87f316HWa
k0fvV+Lp0ruQj9dhmzrwaK6Sg1vjDXiNcBE6iV2SnkJ3oyvItxJCHTPfpBcT
iIWhP8MnrU2p61HbzIuDup8snYPFvF8E1W7TYzK/m/BP6kyU2RiBF+6YdRuJ
JaoX6ZgZ36t3H6V1cF/mmdSZekF6HrLPYPRqXUdylXmxDbZrD76U/pH71pyl
fwNoP/TovArWc5PzWINeqzlLXrLODtgJE1qf0t9DUlPwHwCS4/g=
            "]]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0DtSQkEQBdBWBOEpCjwUDFmQiUtwAbIoJBFNFBbgF/yBJirb8BOIBp6p
smrO3JoOurqns9/dO1iKiF367NBcichpUKettik3qLJOS21NZlQos622KksU
2Uq9NM9pUPP+5YcF36kHc9545YUSI4accUqa8bwQccEly95X8pobxjgxcd1y
xz3GiAf5yJQZRbUpM554JuOdDz75SjtzxIBjTtI+9Dj8/68/dZYmRw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DtOQlEUBdBLwhRAfD5AxAJFRJQGcAo0JPKVjxg/ldQChcookMm6XixW
9j37Jqc4peWq95EKIXS58riV7+kQ3njlhYbuWS55YsGNbi5nTHmkrpvIMSOu
zQc7f9lzYd7JH7754ly3kHNmTCnq7mWHNi0iXcbOLEecmHPymCiZiXWxzFOg
mLx1p7LEGeXkT/dgZ58BQ8q6T7lmw5aKrpHchDua1HSXspr6v9cf3HoXMw==

          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0D1SwlAYBdCX6IzoKsAt+FtogQUIDo1LsAM18d9VISYiGrAQ3AZKo7IN
j0Nx5r7v5s2XTCon6XEShRBaPDkcybflEEYMKWjqXuSAZ/o0/u/LnIxHDnU9
+UCXunk9DqFCmQPzmlylxAr7urn3/vLDN7u6DzlhzDsburadHU7ZNJ/JcxJS
tnQX8pIrrtnW3chb7rhnRze185MvZuzpgu+JiFmiqnr1rGDIiJouk3m0+F9/
aBEn/w==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yQmEcx/F/x8nrhFtwF7QpNl4GxQwLFnqRDXIZyiJ1FbgISiJyUz6m
xWe+8/wWZ57nrNXujpuZiDggn0Rc6mo2YoVlctRtS7rIAvPUbHM6S5aUqm1G
EzJUnF9885knzp172uWRDqe2pt5ywzVHtj3dZYdt9m2vacQb/XR634G+M+SD
Q9tIP/liTMn2rT9M+KVsq/+/lQZXnNjutUWbB85sBS2yyRYXtnXdSKb/6w+/
xiDj
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0yQnEcx+GfjG0UlZfSuAHciE0zpBcZhbCoRRYJ14YN2pDbSDbU3mMs
nvnO/3Nm/ufM2Wp2S525iNjjKRFxb08XIlo0OeFOO7YNjqhzq9VslQqHDLSy
PWCfG+fd+Ygdtrl2XrU5smToajPvnfLDN1fahx3xzhtnWsqdaZY5d16xGbLk
aP/db9dYZ4MLLW8LbFLkUhu785MJX3S0pO9ZZIkUPe3ZsxdeGdLXHuxj4v9/
/QKpjSK+
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LtOAkEAhtEhGx/ElwEbLyFRqU28IAjurg1qvBZaQKGAUnipURGVsPh4
nA3FyZf5i0lmlnea5UYhhLDKShTCk/4vhTAjY0rfNtE/fvmhZxvrNyO+6No+
9YMhj84zd2ZM6Ti/6xuvvHBvO9czTmlxa6voNltscmHbdece+1w6H2iVQ2pc
2ep6RIMm17ZjjUlIubHF7kxIOeHO1s/fzzMD2vm/6BrrbPBgK2opWvzXHI6l
KpM=
          "]]}, {
         Line[{963, 1743, 1745, 1746, 1467, 1740, 978, 1770, 1471, 1729, 1731,
           1734, 996, 1832, 1482, 1762, 1764, 1767, 1014, 1885, 1494, 1827, 
          1829, 1031}], 
         Line[{967, 1468, 1753, 1755, 1758, 1761, 983, 1799, 1477, 1811, 1813,
           1816, 1001, 1879, 1881, 1882, 1490, 1866, 1018, 1907, 1499, 1926, 
          1928, 1035}], 
         Line[{971, 1786, 1788, 1789, 1476, 1783, 988, 997, 1843, 1845, 1847, 
          1850, 1005, 256, 1898, 1900, 1903, 1024, 1932, 1502, 1938, 1940, 
          1039}], 
         Line[{975, 989, 1817, 1819, 1822, 1826, 993, 1792, 1794, 1795, 1493, 
          1876, 1010, 270, 1851, 1853, 1856, 1028, 1922, 1924, 1925, 1508, 
          1044}], 
         Line[{1029, 1011, 1888, 1886, 1883, 1012, 1765, 1484, 1835, 1833, 
          1830, 994, 1732, 1473, 1773, 1771, 1768, 976, 1738, 1736, 1735, 
          1465, 1741, 961}], 
         Line[{1032, 1019, 1911, 1908, 1904, 1015, 1863, 1860, 1858, 1857, 
          1487, 998, 984, 1804, 1803, 1800, 1796, 980, 158, 1752, 1750, 1747, 
          964}], 
         Line[{1036, 1504, 1936, 1933, 1929, 1021, 1498, 1897, 1895, 1892, 
          1889, 1002, 1486, 1842, 1841, 1839, 1836, 985, 1780, 1777, 1775, 
          1774, 979, 968}], 
         Line[{1041, 1944, 1942, 1941, 1040, 1025, 1501, 1919, 1918, 1916, 
          1913, 1007, 1873, 1870, 1868, 1867, 1006, 990, 1823, 1481, 1810, 
          1808, 1805, 972}], 
         Line[{1047, 1961, 1963, 1964, 1511, 1958, 1062, 1988, 1515, 1947, 
          1949, 1952, 1080, 2050, 1526, 1980, 1982, 1985, 1098, 2103, 1538, 
          2045, 2047, 1115}], 
         Line[{1051, 1512, 1971, 1973, 1976, 1979, 1067, 2017, 1521, 2029, 
          2031, 2034, 1085, 2097, 2099, 2100, 1534, 2084, 1102, 2125, 1543, 
          2144, 2146, 1119}], 
         Line[{1055, 2004, 2006, 2007, 1520, 2001, 1072, 1081, 2061, 2063, 
          2065, 2068, 1089, 391, 2116, 2118, 2121, 1108, 2150, 1546, 2156, 
          2158, 1123}], 
         Line[{1059, 1073, 2035, 2037, 2040, 2044, 1077, 2010, 2012, 2013, 
          1537, 2094, 1094, 405, 2069, 2071, 2074, 1112, 2140, 2142, 2143, 
          1552, 1128}], 
         Line[{1113, 1095, 2106, 2104, 2101, 1096, 1983, 1528, 2053, 2051, 
          2048, 1078, 1950, 1517, 1991, 1989, 1986, 1060, 1956, 1954, 1953, 
          1509, 1959, 1045}], 
         Line[{1116, 1103, 2129, 2126, 2122, 1099, 2081, 2078, 2076, 2075, 
          1531, 1082, 1068, 2022, 2021, 2018, 2014, 1064, 293, 1970, 1968, 
          1965, 1048}], 
         Line[{1120, 1548, 2154, 2151, 2147, 1105, 1542, 2115, 2113, 2110, 
          2107, 1086, 1530, 2060, 2059, 2057, 2054, 1069, 1998, 1995, 1993, 
          1992, 1063, 1052}], 
         Line[{1125, 2162, 2160, 2159, 1124, 1109, 1545, 2137, 2136, 2134, 
          2131, 1091, 2091, 2088, 2086, 2085, 1090, 1074, 2041, 1525, 2028, 
          2026, 2023, 1056}], 
         Line[{1131, 2179, 2181, 2182, 1555, 2176, 1146, 2206, 1559, 2165, 
          2167, 2170, 1164, 2268, 1570, 2198, 2200, 2203, 1182, 2321, 1582, 
          2263, 2265, 1199}], 
         Line[{1135, 1556, 2189, 2191, 2194, 2197, 1151, 2235, 1565, 2247, 
          2249, 2252, 1169, 2315, 2317, 2318, 1578, 2302, 1186, 2343, 1587, 
          2362, 2364, 1203}], 
         Line[{1139, 2222, 2224, 2225, 1564, 2219, 1156, 1165, 2279, 2281, 
          2283, 2286, 1173, 526, 2334, 2336, 2339, 1192, 2368, 1590, 2374, 
          2376, 1207}], 
         Line[{1143, 1157, 2253, 2255, 2258, 2262, 1161, 2228, 2230, 2231, 
          1581, 2312, 1178, 540, 2287, 2289, 2292, 1196, 2358, 2360, 2361, 
          1596, 1212}], 
         Line[{1197, 1179, 2324, 2322, 2319, 1180, 2201, 1572, 2271, 2269, 
          2266, 1162, 2168, 1561, 2209, 2207, 2204, 1144, 2174, 2172, 2171, 
          1553, 2177, 1129}], 
         Line[{1200, 1187, 2347, 2344, 2340, 1183, 2299, 2296, 2294, 2293, 
          1575, 1166, 1152, 2240, 2239, 2236, 2232, 1148, 428, 2188, 2186, 
          2183, 1132}], 
         Line[{1204, 1592, 2372, 2369, 2365, 1189, 1586, 2333, 2331, 2328, 
          2325, 1170, 1574, 2278, 2277, 2275, 2272, 1153, 2216, 2213, 2211, 
          2210, 1147, 1136}], 
         Line[{1209, 2380, 2378, 2377, 1208, 1193, 1589, 2355, 2354, 2352, 
          2349, 1175, 2309, 2306, 2304, 2303, 1174, 1158, 2259, 1569, 2246, 
          2244, 2241, 1140}], 
         Line[{1215, 2397, 2399, 2400, 1599, 2394, 1230, 2424, 1603, 2383, 
          2385, 2388, 1248, 2486, 1614, 2416, 2418, 2421, 1266, 2539, 1626, 
          2481, 2483, 1283}], 
         Line[{1219, 1600, 2407, 2409, 2412, 2415, 1235, 2453, 1609, 2465, 
          2467, 2470, 1253, 2533, 2535, 2536, 1622, 2520, 1270, 2561, 1631, 
          2580, 2582, 1287}], 
         Line[{1223, 2440, 2442, 2443, 1608, 2437, 1240, 1249, 2497, 2499, 
          2501, 2504, 1257, 661, 2552, 2554, 2557, 1276, 2586, 1634, 2592, 
          2594, 1291}], 
         Line[{1227, 1241, 2471, 2473, 2476, 2480, 1245, 2446, 2448, 2449, 
          1625, 2530, 1262, 675, 2505, 2507, 2510, 1280, 2576, 2578, 2579, 
          1640, 1296}], 
         Line[{1281, 1263, 2542, 2540, 2537, 1264, 2419, 1616, 2489, 2487, 
          2484, 1246, 2386, 1605, 2427, 2425, 2422, 1228, 2392, 2390, 2389, 
          1597, 2395, 1213}], 
         Line[{1284, 1271, 2565, 2562, 2558, 1267, 2517, 2514, 2512, 2511, 
          1619, 1250, 1236, 2458, 2457, 2454, 2450, 1232, 563, 2406, 2404, 
          2401, 1216}], 
         Line[{1288, 1636, 2590, 2587, 2583, 1273, 1630, 2551, 2549, 2546, 
          2543, 1254, 1618, 2496, 2495, 2493, 2490, 1237, 2434, 2431, 2429, 
          2428, 1231, 1220}], 
         Line[{1293, 2598, 2596, 2595, 1292, 1277, 1633, 2573, 2572, 2570, 
          2567, 1259, 2527, 2524, 2522, 2521, 1258, 1242, 2477, 1613, 2464, 
          2462, 2459, 1224}], 
         Line[{1299, 2615, 2617, 2618, 1643, 2612, 1314, 2642, 1647, 2601, 
          2603, 2606, 1332, 2704, 1658, 2634, 2636, 2639, 1350, 2757, 1670, 
          2699, 2701, 1367}], 
         Line[{1303, 1644, 2625, 2627, 2630, 2633, 1319, 2671, 1653, 2683, 
          2685, 2688, 1337, 2751, 2753, 2754, 1666, 2738, 1354, 2779, 1675, 
          2798, 2800, 1371}], 
         Line[{1307, 2658, 2660, 2661, 1652, 2655, 1324, 1333, 2715, 2717, 
          2719, 2722, 1341, 796, 2770, 2772, 2775, 1360, 2804, 1678, 2810, 
          2812, 1375}], 
         Line[{1311, 1325, 2689, 2691, 2694, 2698, 1329, 2664, 2666, 2667, 
          1669, 2748, 1346, 810, 2723, 2725, 2728, 1364, 2794, 2796, 2797, 
          1684, 1380}], 
         Line[{1365, 1347, 2760, 2758, 2755, 1348, 2637, 1660, 2707, 2705, 
          2702, 1330, 2604, 1649, 2645, 2643, 2640, 1312, 2610, 2608, 2607, 
          1641, 2613, 1297}], 
         Line[{1368, 1355, 2783, 2780, 2776, 1351, 2735, 2732, 2730, 2729, 
          1663, 1334, 1320, 2676, 2675, 2672, 2668, 1316, 698, 2624, 2622, 
          2619, 1300}], 
         Line[{1372, 1680, 2808, 2805, 2801, 1357, 1674, 2769, 2767, 2764, 
          2761, 1338, 1662, 2714, 2713, 2711, 2708, 1321, 2652, 2649, 2647, 
          2646, 1315, 1304}], 
         Line[{1377, 2816, 2814, 2813, 1376, 1361, 1677, 2791, 2790, 2788, 
          2785, 1343, 2745, 2742, 2740, 2739, 1342, 1326, 2695, 1657, 2682, 
          2680, 2677, 1308}], 
         Line[{1383, 2833, 2835, 2836, 1687, 2830, 1398, 2860, 1691, 2819, 
          2821, 2824, 1416, 2922, 1702, 2852, 2854, 2857, 1434, 2975, 1714, 
          2917, 2919, 1451}], 
         Line[{1387, 1688, 2843, 2845, 2848, 2851, 1403, 2889, 1697, 2901, 
          2903, 2906, 1421, 2969, 2971, 2972, 1710, 2956, 1438, 2997, 1719, 
          3016, 3018, 1455}], 
         Line[{1391, 2876, 2878, 2879, 1696, 2873, 1408, 1417, 2933, 2935, 
          2937, 2940, 1425, 931, 2988, 2990, 2993, 1444, 3022, 1722, 3028, 
          3030, 1459}], 
         Line[{1395, 1409, 2907, 2909, 2912, 2916, 1413, 2882, 2884, 2885, 
          1713, 2966, 1430, 945, 2941, 2943, 2946, 1448, 3012, 3014, 3015, 
          1728, 1464}], 
         Line[{1449, 1431, 2978, 2976, 2973, 1432, 2855, 1704, 2925, 2923, 
          2920, 1414, 2822, 1693, 2863, 2861, 2858, 1396, 2828, 2826, 2825, 
          1685, 2831, 1381}], 
         Line[{1452, 1439, 3001, 2998, 2994, 1435, 2953, 2950, 2948, 2947, 
          1707, 1418, 1404, 2894, 2893, 2890, 2886, 1400, 833, 2842, 2840, 
          2837, 1384}], 
         Line[{1456, 1724, 3026, 3023, 3019, 1441, 1718, 2987, 2985, 2982, 
          2979, 1422, 1706, 2932, 2931, 2929, 2926, 1405, 2870, 2867, 2865, 
          2864, 1399, 1388}], 
         Line[{1461, 3034, 3032, 3031, 1460, 1445, 1721, 3009, 3008, 3006, 
          3003, 1427, 2963, 2960, 2958, 2957, 1426, 1410, 2913, 1701, 2900, 
          2898, 2895, 1392}], 
         Line[{962, 1742, 1744, 1466, 1737, 1739, 977, 1769, 1772, 1472, 1730,
           1733, 995, 1831, 1834, 1483, 1763, 1766, 1013, 1884, 1887, 1495, 
          1828, 1030}], 
         Line[{965, 1748, 1751, 1470, 1756, 1759, 981, 1797, 1801, 196, 1814, 
          999, 1877, 1488, 1859, 1861, 1864, 1016, 1905, 1909, 1912, 1020, 
          1033}], 
         Line[{966, 1749, 1469, 1754, 1757, 1760, 982, 1798, 1802, 1478, 1812,
           1815, 1000, 1878, 1880, 1489, 1862, 1865, 1017, 1906, 1910, 1500, 
          1927, 1034}], 
         Line[{969, 1784, 1474, 1776, 1778, 1781, 986, 1837, 1840, 224, 1848, 
          1003, 1890, 1893, 1896, 1497, 1901, 1022, 1930, 1934, 1937, 1505, 
          1037}], 
         Line[{970, 1785, 1787, 1475, 1779, 1782, 987, 1838, 1485, 1844, 1846,
           1849, 1004, 1891, 1894, 1496, 1899, 1902, 1023, 1931, 1935, 1503, 
          1939, 1038}], 
         Line[{973, 1806, 1809, 1480, 1820, 1824, 991, 1790, 1491, 1869, 1871,
           1874, 1008, 1914, 1917, 272, 1854, 1026, 1920, 1506, 1943, 1945, 
          1042}], 
         Line[{974, 1807, 1479, 1818, 1821, 1825, 992, 1791, 1793, 1492, 1872,
           1875, 1009, 1915, 271, 1852, 1855, 1027, 1921, 1923, 1507, 1946, 
          1043}], 
         Line[{1046, 1960, 1962, 1510, 1955, 1957, 1061, 1987, 1990, 1516, 
          1948, 1951, 1079, 2049, 2052, 1527, 1981, 1984, 1097, 2102, 2105, 
          1539, 2046, 1114}], 
         Line[{1049, 1966, 1969, 1514, 1974, 1977, 1065, 2015, 2019, 331, 
          2032, 1083, 2095, 1532, 2077, 2079, 2082, 1100, 2123, 2127, 2130, 
          1104, 1117}], 
         Line[{1050, 1967, 1513, 1972, 1975, 1978, 1066, 2016, 2020, 1522, 
          2030, 2033, 1084, 2096, 2098, 1533, 2080, 2083, 1101, 2124, 2128, 
          1544, 2145, 1118}], 
         Line[{1053, 2002, 1518, 1994, 1996, 1999, 1070, 2055, 2058, 359, 
          2066, 1087, 2108, 2111, 2114, 1541, 2119, 1106, 2148, 2152, 2155, 
          1549, 1121}], 
         Line[{1054, 2003, 2005, 1519, 1997, 2000, 1071, 2056, 1529, 2062, 
          2064, 2067, 1088, 2109, 2112, 1540, 2117, 2120, 1107, 2149, 2153, 
          1547, 2157, 1122}], 
         Line[{1057, 2024, 2027, 1524, 2038, 2042, 1075, 2008, 1535, 2087, 
          2089, 2092, 1092, 2132, 2135, 407, 2072, 1110, 2138, 1550, 2161, 
          2163, 1126}], 
         Line[{1058, 2025, 1523, 2036, 2039, 2043, 1076, 2009, 2011, 1536, 
          2090, 2093, 1093, 2133, 406, 2070, 2073, 1111, 2139, 2141, 1551, 
          2164, 1127}], 
         Line[{1130, 2178, 2180, 1554, 2173, 2175, 1145, 2205, 2208, 1560, 
          2166, 2169, 1163, 2267, 2270, 1571, 2199, 2202, 1181, 2320, 2323, 
          1583, 2264, 1198}], 
         Line[{1133, 2184, 2187, 1558, 2192, 2195, 1149, 2233, 2237, 466, 
          2250, 1167, 2313, 1576, 2295, 2297, 2300, 1184, 2341, 2345, 2348, 
          1188, 1201}], 
         Line[{1134, 2185, 1557, 2190, 2193, 2196, 1150, 2234, 2238, 1566, 
          2248, 2251, 1168, 2314, 2316, 1577, 2298, 2301, 1185, 2342, 2346, 
          1588, 2363, 1202}], 
         Line[{1137, 2220, 1562, 2212, 2214, 2217, 1154, 2273, 2276, 494, 
          2284, 1171, 2326, 2329, 2332, 1585, 2337, 1190, 2366, 2370, 2373, 
          1593, 1205}], 
         Line[{1138, 2221, 2223, 1563, 2215, 2218, 1155, 2274, 1573, 2280, 
          2282, 2285, 1172, 2327, 2330, 1584, 2335, 2338, 1191, 2367, 2371, 
          1591, 2375, 1206}], 
         Line[{1141, 2242, 2245, 1568, 2256, 2260, 1159, 2226, 1579, 2305, 
          2307, 2310, 1176, 2350, 2353, 542, 2290, 1194, 2356, 1594, 2379, 
          2381, 1210}], 
         Line[{1142, 2243, 1567, 2254, 2257, 2261, 1160, 2227, 2229, 1580, 
          2308, 2311, 1177, 2351, 541, 2288, 2291, 1195, 2357, 2359, 1595, 
          2382, 1211}], 
         Line[{1214, 2396, 2398, 1598, 2391, 2393, 1229, 2423, 2426, 1604, 
          2384, 2387, 1247, 2485, 2488, 1615, 2417, 2420, 1265, 2538, 2541, 
          1627, 2482, 1282}], 
         Line[{1217, 2402, 2405, 1602, 2410, 2413, 1233, 2451, 2455, 601, 
          2468, 1251, 2531, 1620, 2513, 2515, 2518, 1268, 2559, 2563, 2566, 
          1272, 1285}], 
         Line[{1218, 2403, 1601, 2408, 2411, 2414, 1234, 2452, 2456, 1610, 
          2466, 2469, 1252, 2532, 2534, 1621, 2516, 2519, 1269, 2560, 2564, 
          1632, 2581, 1286}], 
         Line[{1221, 2438, 1606, 2430, 2432, 2435, 1238, 2491, 2494, 629, 
          2502, 1255, 2544, 2547, 2550, 1629, 2555, 1274, 2584, 2588, 2591, 
          1637, 1289}], 
         Line[{1222, 2439, 2441, 1607, 2433, 2436, 1239, 2492, 1617, 2498, 
          2500, 2503, 1256, 2545, 2548, 1628, 2553, 2556, 1275, 2585, 2589, 
          1635, 2593, 1290}], 
         Line[{1225, 2460, 2463, 1612, 2474, 2478, 1243, 2444, 1623, 2523, 
          2525, 2528, 1260, 2568, 2571, 677, 2508, 1278, 2574, 1638, 2597, 
          2599, 1294}], 
         Line[{1226, 2461, 1611, 2472, 2475, 2479, 1244, 2445, 2447, 1624, 
          2526, 2529, 1261, 2569, 676, 2506, 2509, 1279, 2575, 2577, 1639, 
          2600, 1295}], 
         Line[{1298, 2614, 2616, 1642, 2609, 2611, 1313, 2641, 2644, 1648, 
          2602, 2605, 1331, 2703, 2706, 1659, 2635, 2638, 1349, 2756, 2759, 
          1671, 2700, 1366}], 
         Line[{1301, 2620, 2623, 1646, 2628, 2631, 1317, 2669, 2673, 736, 
          2686, 1335, 2749, 1664, 2731, 2733, 2736, 1352, 2777, 2781, 2784, 
          1356, 1369}], 
         Line[{1302, 2621, 1645, 2626, 2629, 2632, 1318, 2670, 2674, 1654, 
          2684, 2687, 1336, 2750, 2752, 1665, 2734, 2737, 1353, 2778, 2782, 
          1676, 2799, 1370}], 
         Line[{1305, 2656, 1650, 2648, 2650, 2653, 1322, 2709, 2712, 764, 
          2720, 1339, 2762, 2765, 2768, 1673, 2773, 1358, 2802, 2806, 2809, 
          1681, 1373}], 
         Line[{1306, 2657, 2659, 1651, 2651, 2654, 1323, 2710, 1661, 2716, 
          2718, 2721, 1340, 2763, 2766, 1672, 2771, 2774, 1359, 2803, 2807, 
          1679, 2811, 1374}], 
         Line[{1309, 2678, 2681, 1656, 2692, 2696, 1327, 2662, 1667, 2741, 
          2743, 2746, 1344, 2786, 2789, 812, 2726, 1362, 2792, 1682, 2815, 
          2817, 1378}], 
         Line[{1310, 2679, 1655, 2690, 2693, 2697, 1328, 2663, 2665, 1668, 
          2744, 2747, 1345, 2787, 811, 2724, 2727, 1363, 2793, 2795, 1683, 
          2818, 1379}], 
         Line[{1382, 2832, 2834, 1686, 2827, 2829, 1397, 2859, 2862, 1692, 
          2820, 2823, 1415, 2921, 2924, 1703, 2853, 2856, 1433, 2974, 2977, 
          1715, 2918, 1450}], 
         Line[{1385, 2838, 2841, 1690, 2846, 2849, 1401, 2887, 2891, 871, 
          2904, 1419, 2967, 1708, 2949, 2951, 2954, 1436, 2995, 2999, 3002, 
          1440, 1453}], 
         Line[{1386, 2839, 1689, 2844, 2847, 2850, 1402, 2888, 2892, 1698, 
          2902, 2905, 1420, 2968, 2970, 1709, 2952, 2955, 1437, 2996, 3000, 
          1720, 3017, 1454}], 
         Line[{1389, 2874, 1694, 2866, 2868, 2871, 1406, 2927, 2930, 899, 
          2938, 1423, 2980, 2983, 2986, 1717, 2991, 1442, 3020, 3024, 3027, 
          1725, 1457}], 
         Line[{1390, 2875, 2877, 1695, 2869, 2872, 1407, 2928, 1705, 2934, 
          2936, 2939, 1424, 2981, 2984, 1716, 2989, 2992, 1443, 3021, 3025, 
          1723, 3029, 1458}], 
         Line[{1393, 2896, 2899, 1700, 2910, 2914, 1411, 2880, 1711, 2959, 
          2961, 2964, 1428, 3004, 3007, 947, 2944, 1446, 3010, 1726, 3033, 
          3035, 1462}], 
         Line[{1394, 2897, 1699, 2908, 2911, 2915, 1412, 2881, 2883, 1712, 
          2962, 2965, 1429, 3005, 946, 2942, 2945, 1447, 3011, 3013, 1727, 
          3036, 1463}]}, {
         Line[{165, 1925, 285, 1946, 1945, 1944, 282, 1940, 1939, 279, 1937, 
          1936, 269, 1928, 1927, 266, 1912, 1911, 255, 1829, 1828, 248, 1888, 
          276}], 
         Line[{173, 1856, 1855, 1854, 273, 1919, 263, 1903, 1902, 1901, 259, 
          1897, 237, 233, 1866, 1865, 1864, 1863, 221, 1767, 1766, 1765, 213, 
          252}], 
         Line[{178, 151, 1741, 1742, 1743, 159, 1747, 1748, 1749, 155, 1753, 
          166, 1774, 186, 1784, 1785, 1786, 190, 1805, 1806, 1807, 202, 1817, 
          206}], 
         Line[{209, 1826, 1825, 1824, 1823, 205, 193, 189, 1783, 1782, 1781, 
          1780, 169, 1761, 1760, 1759, 158, 162, 154, 1740, 1739, 1738, 181}], 
         Line[{214, 1768, 1769, 1770, 174, 182, 1796, 1797, 1798, 1799, 194, 
          198, 1836, 1837, 1838, 222, 1843, 226, 1867, 238, 1790, 1791, 1792, 
          242}], 
         Line[{245, 241, 1876, 1875, 1874, 1873, 229, 1850, 1849, 1848, 225, 
          1842, 201, 1816, 1815, 1814, 197, 1804, 185, 1734, 1733, 1732, 177, 
          217}], 
         Line[{249, 1830, 1831, 1832, 210, 218, 1857, 230, 1877, 1878, 1879, 
          234, 1889, 1890, 1891, 256, 260, 1913, 1914, 1915, 270, 170}], 
         Line[{274, 1883, 1884, 1885, 246, 253, 1904, 1905, 1906, 1907, 264, 
          267, 1929, 1930, 1931, 1932, 277, 280, 1941, 283, 1920, 1921, 1922, 
          163}], 
         Line[{300, 2143, 420, 2164, 2163, 2162, 417, 2158, 2157, 414, 2155, 
          2154, 404, 2146, 2145, 401, 2130, 2129, 390, 2047, 2046, 383, 2106, 
          411}], 
         Line[{308, 2074, 2073, 2072, 408, 2137, 398, 2121, 2120, 2119, 394, 
          2115, 372, 368, 2084, 2083, 2082, 2081, 356, 1985, 1984, 1983, 348, 
          387}], 
         Line[{313, 286, 1959, 1960, 1961, 294, 1965, 1966, 1967, 290, 1971, 
          301, 1992, 321, 2002, 2003, 2004, 325, 2023, 2024, 2025, 337, 2035, 
          341}], 
         Line[{344, 2044, 2043, 2042, 2041, 340, 328, 324, 2001, 2000, 1999, 
          1998, 304, 1979, 1978, 1977, 293, 297, 289, 1958, 1957, 1956, 316}], 
         Line[{349, 1986, 1987, 1988, 309, 317, 2014, 2015, 2016, 2017, 329, 
          333, 2054, 2055, 2056, 357, 2061, 361, 2085, 373, 2008, 2009, 2010, 
          377}], 
         Line[{380, 376, 2094, 2093, 2092, 2091, 364, 2068, 2067, 2066, 360, 
          2060, 336, 2034, 2033, 2032, 332, 2022, 320, 1952, 1951, 1950, 312, 
          352}], 
         Line[{384, 2048, 2049, 2050, 345, 353, 2075, 365, 2095, 2096, 2097, 
          369, 2107, 2108, 2109, 391, 395, 2131, 2132, 2133, 405, 305}], 
         Line[{409, 2101, 2102, 2103, 381, 388, 2122, 2123, 2124, 2125, 399, 
          402, 2147, 2148, 2149, 2150, 412, 415, 2159, 418, 2138, 2139, 2140, 
          298}], 
         Line[{435, 2361, 555, 2382, 2381, 2380, 552, 2376, 2375, 549, 2373, 
          2372, 539, 2364, 2363, 536, 2348, 2347, 525, 2265, 2264, 518, 2324, 
          546}], 
         Line[{443, 2292, 2291, 2290, 543, 2355, 533, 2339, 2338, 2337, 529, 
          2333, 507, 503, 2302, 2301, 2300, 2299, 491, 2203, 2202, 2201, 483, 
          522}], 
         Line[{448, 421, 2177, 2178, 2179, 429, 2183, 2184, 2185, 425, 2189, 
          436, 2210, 456, 2220, 2221, 2222, 460, 2241, 2242, 2243, 472, 2253, 
          476}], 
         Line[{479, 2262, 2261, 2260, 2259, 475, 463, 459, 2219, 2218, 2217, 
          2216, 439, 2197, 2196, 2195, 428, 432, 424, 2176, 2175, 2174, 451}], 
         Line[{484, 2204, 2205, 2206, 444, 452, 2232, 2233, 2234, 2235, 464, 
          468, 2272, 2273, 2274, 492, 2279, 496, 2303, 508, 2226, 2227, 2228, 
          512}], 
         Line[{515, 511, 2312, 2311, 2310, 2309, 499, 2286, 2285, 2284, 495, 
          2278, 471, 2252, 2251, 2250, 467, 2240, 455, 2170, 2169, 2168, 447, 
          487}], 
         Line[{519, 2266, 2267, 2268, 480, 488, 2293, 500, 2313, 2314, 2315, 
          504, 2325, 2326, 2327, 526, 530, 2349, 2350, 2351, 540, 440}], 
         Line[{544, 2319, 2320, 2321, 516, 523, 2340, 2341, 2342, 2343, 534, 
          537, 2365, 2366, 2367, 2368, 547, 550, 2377, 553, 2356, 2357, 2358, 
          433}], 
         Line[{570, 2579, 690, 2600, 2599, 2598, 687, 2594, 2593, 684, 2591, 
          2590, 674, 2582, 2581, 671, 2566, 2565, 660, 2483, 2482, 653, 2542, 
          681}], 
         Line[{578, 2510, 2509, 2508, 678, 2573, 668, 2557, 2556, 2555, 664, 
          2551, 642, 638, 2520, 2519, 2518, 2517, 626, 2421, 2420, 2419, 618, 
          657}], 
         Line[{583, 556, 2395, 2396, 2397, 564, 2401, 2402, 2403, 560, 2407, 
          571, 2428, 591, 2438, 2439, 2440, 595, 2459, 2460, 2461, 607, 2471, 
          611}], 
         Line[{614, 2480, 2479, 2478, 2477, 610, 598, 594, 2437, 2436, 2435, 
          2434, 574, 2415, 2414, 2413, 563, 567, 559, 2394, 2393, 2392, 586}], 
         Line[{619, 2422, 2423, 2424, 579, 587, 2450, 2451, 2452, 2453, 599, 
          603, 2490, 2491, 2492, 627, 2497, 631, 2521, 643, 2444, 2445, 2446, 
          647}], 
         Line[{650, 646, 2530, 2529, 2528, 2527, 634, 2504, 2503, 2502, 630, 
          2496, 606, 2470, 2469, 2468, 602, 2458, 590, 2388, 2387, 2386, 582, 
          622}], 
         Line[{654, 2484, 2485, 2486, 615, 623, 2511, 635, 2531, 2532, 2533, 
          639, 2543, 2544, 2545, 661, 665, 2567, 2568, 2569, 675, 575}], 
         Line[{679, 2537, 2538, 2539, 651, 658, 2558, 2559, 2560, 2561, 669, 
          672, 2583, 2584, 2585, 2586, 682, 685, 2595, 688, 2574, 2575, 2576, 
          568}], 
         Line[{705, 2797, 825, 2818, 2817, 2816, 822, 2812, 2811, 819, 2809, 
          2808, 809, 2800, 2799, 806, 2784, 2783, 795, 2701, 2700, 788, 2760, 
          816}], 
         Line[{713, 2728, 2727, 2726, 813, 2791, 803, 2775, 2774, 2773, 799, 
          2769, 777, 773, 2738, 2737, 2736, 2735, 761, 2639, 2638, 2637, 753, 
          792}], 
         Line[{718, 691, 2613, 2614, 2615, 699, 2619, 2620, 2621, 695, 2625, 
          706, 2646, 726, 2656, 2657, 2658, 730, 2677, 2678, 2679, 742, 2689, 
          746}], 
         Line[{749, 2698, 2697, 2696, 2695, 745, 733, 729, 2655, 2654, 2653, 
          2652, 709, 2633, 2632, 2631, 698, 702, 694, 2612, 2611, 2610, 721}], 
         Line[{754, 2640, 2641, 2642, 714, 722, 2668, 2669, 2670, 2671, 734, 
          738, 2708, 2709, 2710, 762, 2715, 766, 2739, 778, 2662, 2663, 2664, 
          782}], 
         Line[{785, 781, 2748, 2747, 2746, 2745, 769, 2722, 2721, 2720, 765, 
          2714, 741, 2688, 2687, 2686, 737, 2676, 725, 2606, 2605, 2604, 717, 
          757}], 
         Line[{789, 2702, 2703, 2704, 750, 758, 2729, 770, 2749, 2750, 2751, 
          774, 2761, 2762, 2763, 796, 800, 2785, 2786, 2787, 810, 710}], 
         Line[{814, 2755, 2756, 2757, 786, 793, 2776, 2777, 2778, 2779, 804, 
          807, 2801, 2802, 2803, 2804, 817, 820, 2813, 823, 2792, 2793, 2794, 
          703}], 
         Line[{840, 3015, 960, 3036, 3035, 3034, 957, 3030, 3029, 954, 3027, 
          3026, 944, 3018, 3017, 941, 3002, 3001, 930, 2919, 2918, 923, 2978, 
          951}], 
         Line[{848, 2946, 2945, 2944, 948, 3009, 938, 2993, 2992, 2991, 934, 
          2987, 912, 908, 2956, 2955, 2954, 2953, 896, 2857, 2856, 2855, 888, 
          927}], 
         Line[{853, 826, 2831, 2832, 2833, 834, 2837, 2838, 2839, 830, 2843, 
          841, 2864, 861, 2874, 2875, 2876, 865, 2895, 2896, 2897, 877, 2907, 
          881}], 
         Line[{884, 2916, 2915, 2914, 2913, 880, 868, 864, 2873, 2872, 2871, 
          2870, 844, 2851, 2850, 2849, 833, 837, 829, 2830, 2829, 2828, 856}], 
         Line[{889, 2858, 2859, 2860, 849, 857, 2886, 2887, 2888, 2889, 869, 
          873, 2926, 2927, 2928, 897, 2933, 901, 2957, 913, 2880, 2881, 2882, 
          917}], 
         Line[{920, 916, 2966, 2965, 2964, 2963, 904, 2940, 2939, 2938, 900, 
          2932, 876, 2906, 2905, 2904, 872, 2894, 860, 2824, 2823, 2822, 852, 
          892}], 
         Line[{924, 2920, 2921, 2922, 885, 893, 2947, 905, 2967, 2968, 2969, 
          909, 2979, 2980, 2981, 931, 935, 3003, 3004, 3005, 945, 845}], 
         Line[{949, 2973, 2974, 2975, 921, 928, 2994, 2995, 2996, 2997, 939, 
          942, 3019, 3020, 3021, 3022, 952, 955, 3031, 958, 3010, 3011, 3012, 
          838}], 
         Line[{164, 1924, 1923, 284, 1943, 1942, 281, 1938, 278, 1935, 1934, 
          1933, 268, 1926, 265, 1910, 1909, 1908, 254, 1827, 247, 1887, 1886, 
          275}], 
         Line[{171, 1851, 271, 1917, 1916, 261, 1898, 257, 1894, 1893, 1892, 
          235, 1881, 1880, 231, 1859, 1858, 219, 1762, 211, 1834, 1833, 250}], 
         Line[{172, 1853, 1852, 272, 1918, 262, 1900, 1899, 258, 1896, 1895, 
          236, 1882, 232, 1862, 1861, 1860, 220, 1764, 1763, 212, 1835, 251}], 
         Line[{179, 1735, 152, 1744, 1745, 160, 1750, 1751, 156, 1754, 1755, 
          167, 1775, 1776, 187, 1787, 1788, 191, 1808, 1809, 203, 1818, 1819, 
          207}], 
         Line[{180, 1736, 1737, 153, 1746, 161, 1752, 157, 1756, 1757, 1758, 
          168, 1777, 1778, 1779, 188, 1789, 192, 1810, 204, 1820, 1821, 1822, 
          208}], 
         Line[{215, 1771, 1772, 175, 1729, 183, 1800, 1801, 1802, 195, 1811, 
          199, 1839, 1840, 223, 1844, 1845, 227, 1868, 1869, 239, 1793, 1794, 
          243}], 
         Line[{216, 1773, 176, 1730, 1731, 184, 1803, 196, 1812, 1813, 200, 
          1841, 224, 1846, 1847, 228, 1870, 1871, 1872, 240, 1795, 244}], 
         Line[{299, 2142, 2141, 419, 2161, 2160, 416, 2156, 413, 2153, 2152, 
          2151, 403, 2144, 400, 2128, 2127, 2126, 389, 2045, 382, 2105, 2104, 
          410}], 
         Line[{306, 2069, 406, 2135, 2134, 396, 2116, 392, 2112, 2111, 2110, 
          370, 2099, 2098, 366, 2077, 2076, 354, 1980, 346, 2052, 2051, 385}], 
         Line[{307, 2071, 2070, 407, 2136, 397, 2118, 2117, 393, 2114, 2113, 
          371, 2100, 367, 2080, 2079, 2078, 355, 1982, 1981, 347, 2053, 386}], 
         Line[{314, 1953, 287, 1962, 1963, 295, 1968, 1969, 291, 1972, 1973, 
          302, 1993, 1994, 322, 2005, 2006, 326, 2026, 2027, 338, 2036, 2037, 
          342}], 
         Line[{315, 1954, 1955, 288, 1964, 296, 1970, 292, 1974, 1975, 1976, 
          303, 1995, 1996, 1997, 323, 2007, 327, 2028, 339, 2038, 2039, 2040, 
          343}], 
         Line[{350, 1989, 1990, 310, 1947, 318, 2018, 2019, 2020, 330, 2029, 
          334, 2057, 2058, 358, 2062, 2063, 362, 2086, 2087, 374, 2011, 2012, 
          378}], 
         Line[{351, 1991, 311, 1948, 1949, 319, 2021, 331, 2030, 2031, 335, 
          2059, 359, 2064, 2065, 363, 2088, 2089, 2090, 375, 2013, 379}], 
         Line[{434, 2360, 2359, 554, 2379, 2378, 551, 2374, 548, 2371, 2370, 
          2369, 538, 2362, 535, 2346, 2345, 2344, 524, 2263, 517, 2323, 2322, 
          545}], 
         Line[{441, 2287, 541, 2353, 2352, 531, 2334, 527, 2330, 2329, 2328, 
          505, 2317, 2316, 501, 2295, 2294, 489, 2198, 481, 2270, 2269, 520}], 
         Line[{442, 2289, 2288, 542, 2354, 532, 2336, 2335, 528, 2332, 2331, 
          506, 2318, 502, 2298, 2297, 2296, 490, 2200, 2199, 482, 2271, 521}], 
         Line[{449, 2171, 422, 2180, 2181, 430, 2186, 2187, 426, 2190, 2191, 
          437, 2211, 2212, 457, 2223, 2224, 461, 2244, 2245, 473, 2254, 2255, 
          477}], 
         Line[{450, 2172, 2173, 423, 2182, 431, 2188, 427, 2192, 2193, 2194, 
          438, 2213, 2214, 2215, 458, 2225, 462, 2246, 474, 2256, 2257, 2258, 
          478}], 
         Line[{485, 2207, 2208, 445, 2165, 453, 2236, 2237, 2238, 465, 2247, 
          469, 2275, 2276, 493, 2280, 2281, 497, 2304, 2305, 509, 2229, 2230, 
          513}], 
         Line[{486, 2209, 446, 2166, 2167, 454, 2239, 466, 2248, 2249, 470, 
          2277, 494, 2282, 2283, 498, 2306, 2307, 2308, 510, 2231, 514}], 
         Line[{569, 2578, 2577, 689, 2597, 2596, 686, 2592, 683, 2589, 2588, 
          2587, 673, 2580, 670, 2564, 2563, 2562, 659, 2481, 652, 2541, 2540, 
          680}], 
         Line[{576, 2505, 676, 2571, 2570, 666, 2552, 662, 2548, 2547, 2546, 
          640, 2535, 2534, 636, 2513, 2512, 624, 2416, 616, 2488, 2487, 655}], 
         Line[{577, 2507, 2506, 677, 2572, 667, 2554, 2553, 663, 2550, 2549, 
          641, 2536, 637, 2516, 2515, 2514, 625, 2418, 2417, 617, 2489, 656}], 
         Line[{584, 2389, 557, 2398, 2399, 565, 2404, 2405, 561, 2408, 2409, 
          572, 2429, 2430, 592, 2441, 2442, 596, 2462, 2463, 608, 2472, 2473, 
          612}], 
         Line[{585, 2390, 2391, 558, 2400, 566, 2406, 562, 2410, 2411, 2412, 
          573, 2431, 2432, 2433, 593, 2443, 597, 2464, 609, 2474, 2475, 2476, 
          613}], 
         Line[{620, 2425, 2426, 580, 2383, 588, 2454, 2455, 2456, 600, 2465, 
          604, 2493, 2494, 628, 2498, 2499, 632, 2522, 2523, 644, 2447, 2448, 
          648}], 
         Line[{621, 2427, 581, 2384, 2385, 589, 2457, 601, 2466, 2467, 605, 
          2495, 629, 2500, 2501, 633, 2524, 2525, 2526, 645, 2449, 649}], 
         Line[{704, 2796, 2795, 824, 2815, 2814, 821, 2810, 818, 2807, 2806, 
          2805, 808, 2798, 805, 2782, 2781, 2780, 794, 2699, 787, 2759, 2758, 
          815}], 
         Line[{711, 2723, 811, 2789, 2788, 801, 2770, 797, 2766, 2765, 2764, 
          775, 2753, 2752, 771, 2731, 2730, 759, 2634, 751, 2706, 2705, 790}], 
         Line[{712, 2725, 2724, 812, 2790, 802, 2772, 2771, 798, 2768, 2767, 
          776, 2754, 772, 2734, 2733, 2732, 760, 2636, 2635, 752, 2707, 791}], 
         Line[{719, 2607, 692, 2616, 2617, 700, 2622, 2623, 696, 2626, 2627, 
          707, 2647, 2648, 727, 2659, 2660, 731, 2680, 2681, 743, 2690, 2691, 
          747}], 
         Line[{720, 2608, 2609, 693, 2618, 701, 2624, 697, 2628, 2629, 2630, 
          708, 2649, 2650, 2651, 728, 2661, 732, 2682, 744, 2692, 2693, 2694, 
          748}], 
         Line[{755, 2643, 2644, 715, 2601, 723, 2672, 2673, 2674, 735, 2683, 
          739, 2711, 2712, 763, 2716, 2717, 767, 2740, 2741, 779, 2665, 2666, 
          783}], 
         Line[{756, 2645, 716, 2602, 2603, 724, 2675, 736, 2684, 2685, 740, 
          2713, 764, 2718, 2719, 768, 2742, 2743, 2744, 780, 2667, 784}], 
         Line[{839, 3014, 3013, 959, 3033, 3032, 956, 3028, 953, 3025, 3024, 
          3023, 943, 3016, 940, 3000, 2999, 2998, 929, 2917, 922, 2977, 2976, 
          950}], 
         Line[{846, 2941, 946, 3007, 3006, 936, 2988, 932, 2984, 2983, 2982, 
          910, 2971, 2970, 906, 2949, 2948, 894, 2852, 886, 2924, 2923, 925}], 
         Line[{847, 2943, 2942, 947, 3008, 937, 2990, 2989, 933, 2986, 2985, 
          911, 2972, 907, 2952, 2951, 2950, 895, 2854, 2853, 887, 2925, 926}], 
         Line[{854, 2825, 827, 2834, 2835, 835, 2840, 2841, 831, 2844, 2845, 
          842, 2865, 2866, 862, 2877, 2878, 866, 2898, 2899, 878, 2908, 2909, 
          882}], 
         Line[{855, 2826, 2827, 828, 2836, 836, 2842, 832, 2846, 2847, 2848, 
          843, 2867, 2868, 2869, 863, 2879, 867, 2900, 879, 2910, 2911, 2912, 
          883}], 
         Line[{890, 2861, 2862, 850, 2819, 858, 2890, 2891, 2892, 870, 2901, 
          874, 2929, 2930, 898, 2934, 2935, 902, 2958, 2959, 914, 2883, 2884, 
          918}], 
         Line[{891, 2863, 851, 2820, 2821, 859, 2893, 871, 2902, 2903, 875, 
          2931, 899, 2936, 2937, 903, 2960, 2961, 2962, 915, 2885, 
          919}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
dUpXimF2sCklzzwF5o/MbWTE36N7szp5+VaNUBjc39crUwDU6jF6h/D5IZD5
2LReigs6Yn93t3xZInI0dT1FrN/48l2PwlZtITZeZ8/AjVDEs2rCR/ib8Qmp
OxZ7wiFNZfjFsoETkmcUjXXA9hOk8bL6/vd4vxSb788RTkL1sdmLjDdDIOn5
wRzie3RtRl1guSsVOVrKPfI47grxT7rLpLH9uf9MlaBhJrr50r15S70wymZ4
vK4ez8uw2OtBz98lsCnnycmsp5HA5TrmzofHJTR04niR6iXY4nrh273idBAv
sGEpx37Bh/db1Y8eawapKc+8IPtCWAg8RLv2Df5euHGoBtkXg7tfEHNoXBhi
dRPMksc6pGZTF3rOUwNdWVZ2aigD+Z2U6lfGuuqdbMtWmm6ECwpJ3NOni5G4
ZFF6Pj6Hr5mP/nyHKgNsE0665hnpIcoTRV6EvxCtvO28TkE2uGy4rebt5op2
+Ul4Ev6F4EZes2sy+WCan4OG7gaiW9cmwgh/5L3U6S9PzwQBM7f+m/zAUriR
/iZyFx5X2vPThcXiQXBWmO2eB3UJMIwWvd2I+/kiNuaODU0QUG+70n0ksgiO
spqmfFz5T1xghSwuwLUpsJ5JIxKZ3vOJS7COhLM/KAIGMc9hbOmMvnvckbTF
ja0LT5NBovWiThC2G9+ychvkNITrO1m29npkgWGPBrU77v8+Ev4SGX7Um1NB
k3yySNbKQIQ5vQJsD5Zaq+N1dyOGb5eotBXsOC+UPclUBoUMq/a0eFwcDxsz
Q6fcgY7VNSE6oRguzCsGBBD7zL/0/05b6ywnVzy6/370jXJuHtrip8zQgO0T
4jI+U9NR6PDGyz/Y9xehR8Y2B68R8Rq351sirochFWtGwZ8ZJUildH1zFP5f
c0/JnxXT4ehpX42bl48LcJQ5Hz2LdbszSHV46Lgj0prns7a1doArRnH73mJ7
m/P2J3fYHSB86OV9u2fWMPZsq8YU8f0lxVmukcVZlDgSqjm2HIbJ/P0aHPrF
qLPv9ul23J/DMsG3/czckeCFl7dLjAqRTEiFRjPu/+Uu68z+oHCkxFv27t3t
XHT30ddDR7EetpDiFOZkcYob+qOPpgJ9QXWa3+7LUCH8Xj7gZYpxKE/e/xKl
4g4aL1KbHtUUwUPvvbKU2C58WKDm0M4L8CB3NqTOtxje7HUcy8b9OUGK78iS
4ju9pPhOmbTVSb/rYWAy+1yNKrMEmHLbGwjett4d2DkyHQV2Tc+E+PcXQZnm
9f0EzzQfhYRZueLh7o1cIZ3cPNBd2ETX8J84C9SSxa2cmywg8ZELHE63mf65
sxDY1msxDuH2zAO5a9ZIakJxOuPApEgh1HJuanmP7Z/XFHXsX2eDapTYL3Uq
FILxlE7kC2xfPvh/x6EY4oSSsyZiUFfS3F6Xq3Zo9KWPA3FPMiuzgZqvOwi9
qZCE5dVI1ChfvsyC7d5LNAvGkRfQFVqq0GdhaShMfQv/Lqz/IVK8TJAUL0sn
xcska2rjNJ+noePSG/Rcd6aiz5Gf/eOx3Xeix+XVsVhU0jnjlZaRgfy/qB9l
wOtFRfsb+nTXGxnpCYnpM+Ugi4Y9F4j7tD6yeNxffP0l1Y0P2XxhMs++bNPP
YOjtPLLiifsZ9PC1pP+gBShlpTNbHUgCdmrLC09wP8vPzXzWCTJDPdVqMz8/
ZgLt7MrXePy/SyR+dpPxw8vnz/KIPhRi3aT6a6+IgGCxQVgOEa8ZHHm5vTkI
ao+Nv87YqYcolvXe12O7wfYi/a5Wf0ji5C5bs2SD3tpltxH37YukeN8LUryP
lxTvs7lOJT5+OAcF8tlENNAUIbqqdaMJS3h/vst89nhXEhIdaKs+4lKILClT
pKOxfvZ7NO6yDg5EWuVjTZ+vFSDJ2VTlPtzPThI/ImT8nA3fGyLzMRfNu9/f
27++BNmW2qsy4n1mSOYuryhjGnpSQrOS6VeKuNl/5jRju7H9bTGH89HIlV7P
cv10GVKxU4aH2P6YFPe8SBb3XG32mXW75oN8LgfIHltbDHeE3y4h3M/MBdO4
6RBfZKJXwrrYWgJbRlanW/G6CNKgPHRS0w+F2T9hTncqA80RS5v8pf8dx3xC
imNe922I3/MyGiLUaw+WHsmFhxRuTcJ4XBKNX5epTEMghWng11JzATi/CEsm
9gcDAf89Tvc8gdmY4dLGlCIIyi58SIvtOmTx2b/r99hRtqodl86iGsH4s71K
hfDzkOqxp7j9lez1c6zfFSH9YFznsnQhnN/BK/MG29v6HegGdZ1AZA118E7R
QhDiczUZxHZXUrx1kRRvrSPFW68fejTiFmEF1FU/D3ygzkRP7z04fw3rbfzq
PkXBjY7AkilqP+KXhGzZa1kJf41XcT/NiV43YDvsxrTvYxiy4FFbsCfWI0k/
78n0U9n3JexTkDhKDXSOC3ybjyqHvmYS+6FA0k2k2GWECj6ogYlMAWoSP3Va
hIjjHPkiRJVsizbSTkocTCpA51j15DZh+yop7ixOijvnkeLOnDf3iMJrX+Sd
dFtl+8UsyJYaqDmK+3/Qu0lEsf8iSm4bdKk/nQxvo6hjifNJpPPkwiQKQP3f
Ihl+OobDWz427iPEuZ0Udz5EFndup+9z/yVrA6aSkn2bTS1Q36w/xTdsj+vi
y5WJ0UA7NqQ7xXXzoXplY8bf2P5KjGXrkw4X5HofqNjUTYH+jLL4JLZvJOHz
kuGnUEqrW7lawYhGyo+8yEJ0cS6+lZiXZyk2LzkmL0BtCYXIRG8RYrTrs/yF
9eBVc1POptYNTMdobvBsKEEdx0/OS2G7Nin+rkAWf/9qxZahK2iJtNP0845m
lqNM0V8Cv7Fu/d9CktGiIty/PMV05lkZMmjiWBeLdd7XZTgXwWsP4ypDQuZM
ZejS5ZAeSoyj8S/xfUHjkZ1f78XB5JVvShXBhTBjGm82ivvzxC93ml80HXb+
4i+fGCsEB9s3DQW4vWiCQAKbdx5cuftzdUqhCO6naFbN4/5Inf4kZfSOF00X
NTUoHC4Fcea+yjTcfm9x/r3lo1ZIKrqx8LNUGdjduCw/g/u5vdi9cyAfn8Nq
fN0SRcshakZ7tyS2/x75v9dpH72I2uvBSFiRtZtMHsiFvP6+IP5V4h6DY5pd
PglyOb2dvU2yMM7DdTrEffIjsx3CG9MhZT7AifdjGtQ0qB6WxvZhigmDhwse
KENw2w2Hj+nIIT553ROsN1PJ6a93o3zQhLMr4+mnMYjuvq4hE57f6EF/+qPs
/iialeG1VLUrcjRX4a//H3rbRKaHbUn96yq+eyCPpXCvjfMFaK3xEhrHeniU
fdV4OM4HDYmvW6WhKESHH5uXDmC7wIqY+yZef/SgJ+wzzbpCFPNaZPoWtmv/
S74Ec0EmV1G9NBh+Le/gbvaHpZhdU934f6lp5I44uAbDZn3D1YKocNj4imZC
iLhX5LB2TFmfDPZnTLNvXYsD3qafmiN4vMsidzprIywRlXuPxkENJTRGJ1+y
jNs/NwjS+KhlDxu6jRcc8X68fpZi4Dm27759bWiIPgTkvtD0evCEojG5nDnA
9pn1oi6JP6zh0oHx2DKFEmTdR+W3F+sneSHmJIW2JuJe60sxJFKMYjY8v/wU
24VoZ83Unrig+vYL71Z2FqFF33wmIr6mQRrvBrLxvrNQr+1+7QCFJimjj7vL
wLlFryoK62Svxbzw7otxoDfy+VuXRSlEyb1xrMB2JnPqPdSdWRDj8F2GnqIE
fu5WLr+F9cNUo2/6KN0SKbzi2jXZnYMi7h9oW8R6KF0pkb+vYg/rUjw7Tjpn
oFjtj6/7CP993yhlOl0IrPQEslmxp6Bv/FPfDxLnEB5hqJ5yR3QTj2KCE4rR
k+CgEOKc/FRgXXSKtBXa2Hdqagivu8vbelyJc3XNae7NsTyykDE6sIchvQI1
iabZEefwMzbhJdhfQJbFyVGHI4vQMNWGVMJf8Gy77Iz9C5Q7McfrTl2CPmrk
vSP8i8XHVvexP4LKWZUq8gJLkXV/XRThj9DI6vapv01EQfvkhCZoXSFlQxj3
A9xPQ+GEtCs80eg+y2TN1msO8GBtgClxT/LYr0mqOTAYrZnzeHjUxBpa++OU
S7D9ESnP5ABZnknTQ7XKpe15iEdhbZDKt+Po65Th73rMGzqqEatwMA1Vb9YO
nI751v749elBefy/NKECrw6XR6O64+rz7a2qMFcp9ECd0BUJX5AMX96igzXE
pxixXOn6rmWfArOCfGJieFzX+Zrn3rlmo/7bbMO2q9GgHjm5hjjXzR16T6n8
NgHVcExuWq/gD7EJx3Lu4v99RcI/SYZvFflyhv+JDVDeLjEb/pwF/Q5BF07h
+aXOpVPfkRsE9N+e6Wu2xMOvsLjLdzCOmX9mjGJIHDyei68Y2O4KdsnR9owY
51Lk96pP7hlISCXvrlylA7yvnei5T/i/u9B48mAIWuw4fnFMIBjWKvNxnsDt
H6gENVct20PZ4VVB2vexkB0kSLsL28tIeTuZZHk7H9nlJ7apeaGa2dlZZpMP
7dJ9gtuJe6dFFskyAz03dCZwwv6XViRQ3wo7pk3k29x3OdNj7IQ4nqcmPtbN
hI/qygIFGIedlPdiQpb3wunhWzZXfhjoY36Fs/d4QMupK7IEP5N7s7qPWPvA
YtgG9R9hIRAZ+krAHdvfyyp8aZOJwro2eXegMgZCt/vnFhH5OaR8IW2yfKGi
7zaTEyFx6IHYXrWYra6I+lDoOYI3yoKmoMXcINTxPqX/3uV49IvP7BbBc+iv
9UXXntqgjBQGw+Ofs1AEx5FoYl74SXlQ5mR5UCUq+p/P1ZijX8lLc99CnMA2
eoHpE8Z/uwdVNsNJCNTcz9EU5gOdb5YpBrBdnX5OOWnBCRbn8mZrjwTDPdvF
gmxstyblNRWR8ppmSHlNvH733YMWM5HKgVapLGVTdMJe7Gss7g937rlNfENR
qPxZ//p738zRvqXBJzqEbiOkPH76qyFzzotqdUesUNTl871L2D5Eln+1QMq/
Wu+1QrPtlzdUh/RE3tifilq5GLKJ9dIqe9Ekf2sglA3tqvR8HIvoLkWlzxD5
nyKxYYz7QmCzQb7jHtkgtPneQhlx//k3v8uYDH+O8zJNuE8cnKcoqKK4kwTJ
uYK9n3D/LX74P/pSGAkUjwKOS7slwNWCXT+cML5Ku3CSck8IPN9SvMfIKAbe
SMzTvMV2RxI/ZWT8xP+gPzUVHAtjlhqj7RuSQOWtzdvNuH2LqpRHbWM41PV7
8fOkxMLUnS9bLmP7TRXJXp2xQHALFP5RSR8Bqg6/Nx7AOAKk/LFEsvyx6Bit
/WuigyCWvnKrEcMRxCyoc7MJ27kfbrG4xxkCrkOvYxut9VDWbPWdYmz/co/+
YGJLKPS/fzP/stgMRd4ycUv8H/yokvETlr+6yGzvC83Fs95GgXrg9+izeD9x
Doy5ON404wGO62xKxHWsgK1btZrIDzlzTiVR3dUF2uqZHfZNOsBtL+vOYeIe
m5RH95Asj65BzY+VtskaGO3YNrLpRECh0OUiJ2xX9vPMiNE2Qw3sjq4F5hHw
OJFb0BXb99yqjEgS8kVPH66Or3OKgG0xo2HHsD2DlBcXTsqLqyXlxXXo+ViG
zvhC0kDyouyHdJTel3CuC8/vzEiz2Lm2MHjuELs4nBeMhBusZfdjnDsGgwt7
A+Pg12DazSJhZ+i5lrjCTKwL0vrVIFu/1ky/FDJLjMAerDgP4/NM+9pI7mki
j87no9oqsyP6Fmj7oaXLDrGufB95R+TFxacGWHOEoCs/710IYAhHHU8XdhLn
jaOk/D0TUv7eCVL+3uUPIcnqfljP08b7M/yZoM2Gj6kIt/foyz5wsC4QDunv
WnzcehYO6IrXNmJ7nfXB43vafCH8wMGaASdPOM5ik1qH7Xwk/UST6Yels634
c4slLOocYoxQDEIDqxZ+xDltu+FcyudxLxRm5r1H/HUsutbO9Y2W+F8TJWPN
/jjU6xK/wiGfiiyuy/JG4n72kPIYd5LlMTo/FBcoGtUD8fzlMJlOf1hdn0VF
5Kex9seltUy5oFfnHlJTzDnAFnnOPEIPJrYRpfkVYeiI4Qeutq+CKLZs/3Ui
fh1MymPcTJbHWHf41MR0DCs62Lq0zguPL//emP04bn9damuqQ68Hinh/VKHX
3gJY8k7KviJ0Ml2QqlwQjqaopZKvhKsjTSHZA8R9VwgJn5kMf1i4lu+BmQ/8
oFfM/Fjmhp4XaY1cx+1zWDhcjumZQbd3MtKh9EedxYsxxLhOcd/4AWxWaIrF
WOJ4fQjiyQp/nIntm0j5nFxk+Zyvu46sfj96AhTLTGhSFpXga6DIC+Ke3KlC
9dl8mhH6mPiRhueXPZIsCa+dIeIpvSEeVy47I/7SQJrp3AB0/V3rN2J+WUn4
HGT4bLQXc54+j0b2PYUNrjMxqFZw7i4Rj9j07uWhbZIRqG3jOroX14JRrx1N
DTfxvX6pEHcwLQRVK346Ik7tinptxsKIe3KJ2MnvFcLhsEFquG/qTCJYTNPb
eWOcSy86dakN7YHl+lVNtrI4yC+auM6G2x//EEB9jcIJrftUfvFtUjRYly/6
E+feFNI6jSRbp5bbduYecw5AnEcZH2qHRKN2yrMehB+xY5+okLwgIP/u0gCO
jgB0WyGzk8g7DeCZk/WM9YVPn6ives1aoVuvXK/cI76/vCbnpKfTkKei0b7m
pFTEE12xwwuff76FJsNTxVT0pJElWVQ8HjWava0MwroVKeybPpKRjBZP3emo
UwhBV7MY21UJf5mkBxEyPcicE3Wt1EtEAXLDIehrCiq67e92loj/Bn5laRMI
RvoFXK3FtTFIyjmQ+Quxz5s/Nr0lbIwilL7xb/7ij6i3/R4n+i9Kyr+VE/vv
/NvhVbaJN4rBqFuKYSfLRUuU0ct8o5zwm2y7WDi19JDq8itHFX4VNOOVd/kn
4UewmqdEDXmDt3rGRHSlJoxvCJJ9RsRNxprpXt1bCxK21y9xmWuB+Hb/x4Su
9jW9O1RGlQQ2LjQDY6reYCQmHHaFiCe2cV95/bMQmhKeVuxhjwDTqB9C3/H5
QfETl5ZmmCN6YVgWcWZLCOKyEbdKwzjvnl+R+Lr9OOoR8Uwtz/dF9vITFcR3
oeHN5m1TnhbwdVHqiusmZ/QhJ8frA7bLkcbLQjZeF0envqMaYUiqsnrn95gg
cE7ZHqWI7ffOPpYvDgtBx0vW1vPt94Q9tfosxDr1sNS1mGsLQlyhbsIZuTaQ
zOVjWEXct5xosDn1KBG+MtWIVzw+C3OxC+eGibyjwZvdNeK5EP5bLY1Z1x/O
SJ93rMF6oF1ppd5yrwSMKeOPKJtGQpXyhRk1fH72HhF8y/8mAUz7aCd75PzR
Vd35RuKcPLL8MJXPNRsqHozeT/4RjdZ/f3WAOFdbi9SclvUphoPPdq9Q2Keg
tzKT1sQ5/PQeLYqqwGCgS/GNkjaxRqj/5z/+QqLHWEEFTzTcyNx+kvaaA8rv
0DIj/ItIUVXxY28T4YrKR9pRWle0zKu1i/BHXo9tdq1dCEI1oV47f1qmwr57
ohGM2L5wancE83wA2v7YwKjzRzIsK72/fQrbbSUTX/es+qLHdZ6LQSlJ0EIl
zkbEc53+JW95Plr0ZW5kHkp8VDknJ2GBMnc62iTjcen9fPHIsjENld4VCD30
4wJQVnww2o7bP+z1iGO7HINc3n5Nm6APhaUzJW1E/N2HhD9Jhl/y4RAL1+Y8
xDKqZkd7sASuU777Pk3kyxWeMOgzT0M6Y/n8OlQFsOfe3TA3rLdKhY8fYi1j
kGnwG5+8jAwYv3Oxje3nf/CnyPDHOgMt3zqfhhuFlb1q70Jg9quqAXFe3bfj
WLZRszOc5+hp/ayrhEb97dYQ3+VXviYXJu77gWHSYX4xx3D0npPvlAa2G55l
FJDOzERxKYbccZTnkTVTi3wW/t9SlxG66IIIVG95upzXwhwWNV26iLj8mnM5
arvENaGvz50x+O1FOCN18GAPoVtSHvg+sjxwCwcqZ57ajbD+kU+E7Hwy4t4/
0JJJxIX5Bi/ZGUqg6s76ox57PVFCgb76a+I+5Niwx68jKqi2juH9No+LMECz
LEXsbztJedRlZHnU94eR9h5KI3T/VAfzbcF0QN7TNcQ5U3yqb50NnRVsWX4s
wyKQC5+kHO+O4fllWB8RMkWHz3VzFeI0zEUg76M3cITI+yLln8uT5Z8r1k6+
NH/gh/ItXiWyO4VDbfHP4wRv1qMLUZQtziheXpv26jklONyy7zcRV3I33Hjo
metpFC0oa2r6NgSZntxpTszLW1JefS5ZXr2jtJ70MOsFZFp61M/SIQUOVefY
eGH7YAXlLUlFA0QfOfrcsz4dOCbCKX/geZGfLPD6oK0Cv9r3p3vOZkFX6l5N
E2zfRsqT/0SWJ6+5r8ZkyT8LiT2dj2uKiEAtvzZYTWH7XW0nJgXZGOTpyNfa
LhGPKp4anbfA/1tkZT1+9doZ9Ga/aoS1czL69vvxQCW2i5Hy+enI8vk/rrNw
lPI/D3umTzBonyxG9vyjz65iPfsJa183ovUAyYk3hW11BcjekPP1AnF/lajb
6qcVALzTNnpprdlIZimWc4mohyLhryfD39+ru0DFHQ6sc5Ezg2OJcO3pnioi
DyGrTtdKpS0QwkNi87xXUyFRWSFgDcFnL+PPV5c8YEXsx9VfbFmwM/grvS3G
EfoXfn59aUpP442EtsdB80+ehUK224u2NcR5KaylK+xWKFAcbojT5g6Efafn
BQk/TjH4pICtRRBs79o4lfjSA7hdnPqJfLwyUj1CCFk9wsjkQEemih1U86dt
kqmKQG+6H5w9R6yXqzSXUKEHNGc9f8R2Ih51fopPWMH9f2kqfL8wLwA+WEwe
cvBIRsbJDAX2v/7DDzn/W59devvUSQEqnxXlCtwPRIoGB5SIc5qikD21ApsQ
6ji/6rU2IRANqGw7d4Pwp85/SKXrVkM0nwoGxrUDUfvMlhQiHuT4L3UZKotL
QtV1MuhJRP9jffY8aOjK+EXc58hI+sWHuV9AQblal2Vo8uDDuvyGcmwfr7v7
orTXD1H/5r9EN5sLv88aWhL50kX/UmfhmHIe+rvsgb9Vv1vP2R0N5/noE/eH
fjwUd4+oeMEsn/Lzm3khcCuffsEH21VTtyut2RIEWZdMPOaWM+G0zylWFSLv
i7R+ZcjW77e6M7/F2/TRs+2Bdzy90sCssn5WDPNZ1fOmx+CIJ9rMT32B0icG
zJ+n2hPnQO1bLOiSXSialOq0ekjtBULnpRsI/+s0qR5k6d1/14PE3hwp8GsN
hmzj1LRDP+PRC6FL+69hfKvbzxTSdgfBfOLyvRy7YLRc3pRpjtt/2xfTsUYw
AHIrtIXf2ZxFknfvd7ZieylJPxZk+rmSlprjF2cLBTPlOyl/Z6NA7nnGnXi8
P5+Hnzq8wx7l0TvfFt9RiKQ79Dsm8PqqszRz+N0QimQtRLbnXylGX+Tiq3fg
9fiGVBdjQFYXE2jzyXqHsAEyajij97UwA8JG+XX7Mb7M5/QWqR+eiHHzOU2+
jcnA/EOdlsjrS716/WjeQigyK/wiJboYCTrf5SwXiXw8Ul2MLFldjBKLqp+Y
iAGMl9M9ObvqBDkbd9QT+2RP+I1crReOyLRX+b1SpBsgrqMPifNbo6skW+9s
MDrW6N38k9kLaMpv0QUT/j4JfzcZvv8DhU8r7/2Bp/0S93mjTMRx6fFNF9z/
Gxv29bpKuIN9v/T2sNlslBJn1rcB25v0jdwa1p6F5oNi87HheShV4fvtBKzD
RFJ90Aay+iDBWZFjY1Ja6Hdpq5QIZyzK8EngJPyLrl0yVb1ch9HEB5r1bcyp
iEF8TRyxTuWot6bFLa9H7dyvU1vZshH73Z6NxD2V5L/gxz3corzsF462nIsz
5co9Dk12NGOBxL1Qw+Z6hqgAxFg8qDXCYwdbFRv1iPqgI6FFPCtsLkhVkPal
5iNPONAus5XIy2ULKua+6+YBb2PXWc1WFkNE46i0I5539doTkXvUhIBWLjTn
IxRBJN/H84b4f/fRxYdzdbih02sPqjnVFcDT8zymy9ieT1qneWTrdNev4JX8
UG+0dHyp8sG4E/CEUV68jf/X5oiSz/EYY+hx2WaufSoUvEbv8hHnZF35TyeB
LxTuyM8ONXAkgrCrbSWhn4+ZYwWVhYmoW535hurhfORw5HXqKfy/yjutHiox
J6LH+W9Lk0aT0ImHS+uJ/Y3h26n0CPoEtD3atPvujDvKvtNKPYtxUkh6oCbT
A2+3q9Xm7nDU/ym/QpyqGH0QFOWzJ/KBRYMunTH0QEJzMpqJ5/KQ88vxGwF4
XGGvAhQXO/eAbcnwAkdvOhJPdopYwv9LRarn6iGr52ocTRFPyPRBUiYTg7us
w8DrMoMhsa5PhA14KtachunmzYXSK7Gw4XCLKnG/cf8o64r49xDwfZjgbqOS
DLwtgns1MM7OKzcHPzfpAk+8ofip28EwpPVdjvB38hO7vGnjk8De+8d7itYI
OHx4lp7Ix9N7IGfI/aEQdhpw7ztSFwulAYoFrXhcuyYecR/xMIYdJyLW5XHm
onUbDkYQeeljLOlPBp+dh5cVI5WZPJmoqZvt/iU8Lj2LJ0jWywVs2ob2e+5O
RZVcLC66hF9MGu9tsvGy9Zm+WfAIRK0SVlqHb2fAFeNdWyMwTvymdF6mIE/k
KZHAHlmfDMYXTY4FEv7CZen9lAL2KJfWzPnY/hg4slpYIoPH9bHPdkhpXRJ4
GDF1FDYHoG/vJDSJ82E304WP7+hz4eu+SftMuwOQ21tk/Bn3P7BykVk+ogS2
Pzz+y5I7CCIlp3M78H4+UGkt8sEiBqq3R39Xz8hAuue/DxDn5PW6F2JNzdPg
Mnus8EfKAsRx7Wkjca4+NKV8q29THpS5TDSNSZYgrvW+uz7jc7ijmE33nVVf
eGBimIz9BURZcPgff+Gz9uxGpvkAqNEcft7xIxlRzVLcIfwLjpBfEzULQaCy
x+jaqmUq+lKv9I8/Iiiv8ZGuKRaZbeW9X9lTBXI39Lv75mfg3O6+LFudMBTS
c/079f5yeKhcTfMK77eFDr769z/4opZFy5rfecXw9NEFByvC3yTVwWmQ1cE9
cdTcXf4lHVX52Tdsd7kIJqr5gzeI+7HLM/XrLBNRx4g+D+VIHKj59rqzEN+d
L67qL+pCkPftaw0SgelAF3GyvxS3P07CP0aGr7MQveE8axG6LNTYvj+2Asx6
GN/dmsP6H0AC42MZSOfQTQ7rK6Vw7GNBzCbc/02GfoWfhGLQTG+g6OBoEbgN
W80ew/03IOGrk+G3OnSdTVz2RcOhVueLEnNQmsCT7US9/7kdUpV6yXpwxxfK
NFeKUZ9JL6MxUQfNlKSVax4CVx1tmjKFKhFH3K7XAXi+GG6tT25d0YLfIdZS
dZRpIK+je+gocV7awvfhU1cBVMa4fHVmLwMnu/fLrAv4+z6jVXtcrB7W8Axk
7W2uh9RExkS68RlwI9UV5pPVFaY1et6+4xCKZkuMNdjx/tCuzNMgifv5okxA
xHswAjVxFHkI6mahww9c938l/Ig3c5GbFGOQ9jPFvSyH0pC2vGFRMFG/QKrL
+01Wl0f1xWp8wfcUcOtxep/MzAdYUEzTwzh+lFHjxh+84KLrytmtnAXwwXqz
E5H/sFU/hePpUhiIXLHjaC4rgI+XGNzziHrVf6ln/B1lIdFkEYK0es/unhGq
BOV7UskEb/OnfWQ/5ekhh2PRa26tFIP7dZN7Rri9pr92ptV3XzgreihaIykH
rIPZfz7H/2tFqtOUIqvTfLEaxMXHpoPuiMvl8HZhnWuzT+Vjns8rq6xOrFEH
1S/nGubkmmDHp2vGe6dm4LvOMeqK9efgm9jYvo0ZV0FxSn7LzhHMM6nu0ous
7jLFxPnAd6tY5NSzdoV2Jh5Ns50SUsHz63JahI09QAscOozGEq/no9Xcl8ka
uJ8hQcXeHJaJkPr7UtvF1XJkzBhd2IDHq0yqD40hqw89OHEjfpE9FFjjor4G
sJagbqr1bh/xfhLH/czuyxG83163yH80XY7Wqcap5WOcrFW12mCvTEg8Qn8u
4VY18tvFyuaO14UqCT+WDN+Azs57sqMRamnlHZS2XoW2wKFXvb0zYLe4aPop
shKYt8k4V224DtEsrIek+rF/USywdevWHEjXOtAz/LsVOIR9gh2wvYPEjw8Z
P7t2XT1T9LARRiMUkwOpGkCl5OxJ5uEZmOzcEHfvRiUkp38xS+0uA84IC561
MzPw7on56OmKHLgQdlHRZykduGRlpb/head98ae+tYGsvjV03ys6mlJ3aGY9
OF5CWYzcshgHHhF53QO9lCf1YmHolGdxh0Q50guSXB+E94F2i9tM81PpIN5P
z857rhopqu5sov+G9f8v/NzW9avjeGWOpK5UU33YlI/6ppWHXIj3K25M7KUd
00IlbvRPXyoWojWsNidGsM5Tzd573o7raV+X45Ek5VuELOJdFaWx/cW/1Pny
y2cjqTNWcF0nw2py6zVYkd61nDWE9/NX/QY17bPtAaFiP7IOXQaDDbW8fR/w
eT5r6gp/iRXaYma+I/JBLchV8Yutwf3PI9XtfiPV7UaQ6nZ15C4LWI3GA1t7
5CzjdCrsuqwzdgavi98hZTf4WRJgXeTv50K1mbCjY0dBHR5XgEci/cNjCXDl
gH7Nfvtc4B+pknj74z/1yGpk6/frng2UpvnW8EnIZe1r/SvQS7d46drYDHgf
7DyQtboPzuWWNl10qweGuocXw7/OgP7C7VG1cTNU2629p+JAMTi1P9XvI857
pPpiK7L64qxqPyUNqSyYXb4/oVpVjpR2u7L54fX746vx3fedyVCuyzWX7pCH
Xjwc7JUn8gxrx+4PpkTCGOVG6icMMegdWrulCa/HaVJ9tACZfjqDfqiGSQZD
7I60PInIFiTmlR9R9gZ/l92rzpv/jEYjPNMnrdENdPrSycC1WOfVE/c8qdcX
o29dcYuj3ztQgRRLdGLTDFwg1VmLkdVZDz1tKhiciEKFBjpM691aoMv25GA4
xg/2OdbBj7/3dMr0lAPjNRD8g/c1C+YnTyNS0SKsEnkOKRjfL8qCR1EHSmjw
d/koqc46j1Rn/ZZUZx3GSXf09v1I1Dlxtl1s3VGIHYRX1nhcN7bvuKKWl48e
+9EOPhHQQpU6/NbEvr3LlUPO5zz+PhkFH5aztUFxAvC7fPE/+Atk+GIhaD9F
cRoYn2lp3M1bg4oSUXk53k8uF5Q5vRCOAMbT9G/z6ipQ8FRRRwvG8R04rfG8
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
mpIGxDd17txrmAoGWN1edRL/l/zT1iOCzhngzzrfda8UUwCt9OcpmR//eqXH
sX4rqlMc3bM+C7zkUnbl6QoBoazvBUk/AuNba5+UskzwwuP0sUP7DUC1wvGU
GOK8KHOXJjmvZ4IPy7WSeXEecHzCX8mCaH+M/NSKyE9tj/zUysOvjFM/J4PT
pbLp93hS4cHDEot3yPzR88/KeTASjOSMmuzTy4J3aJgXFYjtr8ZY6SQe9QZH
njJINRDvF3r7Pu33Jca9Tav0sxvyX8th/utNgQ4iDT/Ega66DU+hUD5cUB4B
5DxrnXGq6mX3KbjLnKpGLTgThqwZ9iXnZWmZ92uEO9Vg6dQhF+fXyZCRe5GX
nMcVkS9bYBVftjXyZeciX/Yo8mVPMf31Zc8gX7YQ8mJnIC92CfJisyMvdhfm
xWZAXuxizIuthrzMk5iXuQl5mTUwL7Mp8jLLYF5mGeQvNkP+4rvIXyyF/MWn
MX9xMvIXJyB/cRbyF6/mEd6EPMI3kUf4FvII1yE/bx3m5+1Gft5k5Of9hfy8
51Ad8iesDvwk5s9NQv5cSeTP/Yz5cyOQP/cX5s/9xydLhflkIaqvXsLqq5NR
Xfc+rK77GfK9hmO+V13kexXCfK/syPcagPleLZF39STmXT2OvKvzmHf1OvKu
qiLvahfyrv7jPx1axX/6FPOf/uMJDUCeUFnkCfVAnlBTzBN6AtUtm2N1yxnI
48mMeTxTLvz1eOpiHs/zqG52N1Y3O4i8lszIa7kfeS2PIK/lNsxr+QjV95pg
9b3jyHcphvkuqZGn8jHmqQxGnkpvzFN5FHkq7/x/9FRGIU+lPvJUbkCeyl7M
UymLPJUcyEepgfko/ZGP8jjmo1RAPsoqzEdZvYoPkQL5EC8gH2Ib8iEeQj7E
VuRDHEE+xHXIGziOeQPHkTdwCvMGqiBvYC3mDbyC/H1fMH+fyyr+Pv5VvHii
q3jxIlfx4q3mrYtF3rqbyFvHinnrvDBv3T8eNxbkcTNEHrd/fG0fsfpMiuP/
uy50P/KsWWCeNVHkWfPHPGt+yLP2BPOsJSPf2QDmOxtGvrNCzHfmjHxnt5Dv
7CnynQms4h3rXsU7dhP5uYYxP1cA8nM5Iz+XKfJzrVb3uCblrz/rBubPokf+
LGbMn3Vhlbo7eswn5YN8UkXIJ7UO80ltR/WBd7H6wCOYZ2oOeaY0kB9KF/mh
+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
ToGP63Sx51ksWGUp99QD3mp6hx7hHFSwVtPah59fYogtpTgaDi+/RG26eTEN
PJykh2mx8X5Q4ODUAlMSTOuw0TZdzwLZkBv+OL9xKZPrsGxPKsRODk5z2WfA
Zvrv1epYOdeqj0j3TWc44Enp0qlRDTeml/r0sH2USmlh/+6LpyAu/1qZ0K4a
EDBr4Cr/gK2bhF+ylOSXtDxw0n0jvzUaapVQ9pivhDT9ki2d2Hj5THgn80ne
yQ7COxlE8k5Of7i+tXzjbbh5W/GoZGcGLFoy36vE6s3pq/DlV615MPr5Xvud
RSfIUpg+w449fzSFodLnPxnwmz0/JlsxBhU3PdLBeXS1LOcaDBtz4d1SZ1O3
Uhyo3khrlMXjSKc+WST/TIOzb3SbTOas0M7Xl3rw85bBHUYSJxZS4MzLO0/0
6nzBeqNHSztWzkD4LhlIvku/4+Zhd83igF+Stf2RZT46kz7wUgTrD4uENzOD
5M2EhGmG/g5bWOqLUFFtKEVFcdEz+H7JwzKjIcnGGM59PNfmcLcAKRX6Z3zE
7rNzzTt461Z/1NPf7KVMXY2eDKbnTGHtcqlVUunY8Uvw/Ht68b4rmWgh0vaO
IJ7H0XkwtHRXMIpIDHoXTlGOFoYaV9Sw+ZPVMqFucEMKqltpiI4QqEP0R5/G
PR6dg7bw7DhY54g6ZUKfpDwvRE7XDg+uYuPCWLzWz1DPB/m6eM8uxuUhmtaT
Fxmweqb0FWt3PuuJ/E0yTzkKZaPbxUqt/Nj/ukP3/d3nM8HIN0EhgvV6Npr8
rteB71f7ysXvyfsFILaLLtt7R1KRRZX2fnx/W2LIfdKgxRdxcLbZbqaNR9/7
2hrx/fAk3f67wusMkILEaG5IbhUMJWW/lMDmSa6zZetrja1Rgd2+9CbXEnC4
wCh/EptnbqcvPZWZDEeG2pRr98RvA3xYjNPG15dNE4VtPU6Ie99Zk+nSXBDL
Sxzqwp6fDQ1W+nVEoccVh9kqzLD959NB2X34Plb51Onj2qnocKuM5L1LGcDS
wtrril3Prv6Tf3mHF/KgFc7b8ygeRC9sif2Ae5Eyr+dvy45BO8RttnYcjoYW
HoYeN6y89tKRbSZH0pG6Oe07N5VgoNxmz0SHv6/J3BFxfZeL9l3x5bWS8YKJ
l2uqEdj9S/euHVt+4QopD0OURvSr0Ormiwr52P+VkbRsS6HxRtbTm4aigmtR
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
dZX2xYM71ih3rFyxNDAHqQlKxuHxsf8H5Eza9g==
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       3.2923347510350757`*^-9, 0.9069184891932128}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    3, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$225077, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    5, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {6.4, 29.700000000000003`, 16.2}, "numberOfMasses" -> 3,
      "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.5560251046025103, 0.6402092050209206}, {0.7451046025104603, 
      0.18920502092050206`}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {1.2720000000000002`, 
      1.2349999999999999`}, {0.43399999999999994`, 1.12}}, 
     "pointsDataTable" -> CompressedData["
1:eJxTTMoPSmVmYGAAYT4gZgJiE2MQ+Lx/1kwQYD2QBgbP7NPB9L/9Z8+AAIsD
RP7jfhgNkf8G5b+0h5jzeP9MiDkOM8D0Sfv/YPB+/wIwfyfUvDf2MHsgNJsD
Axj8sD8Nkd9vDHGXPUT8A5RmcICIszvA9EHse7kfIg13J9RcLocnF5Ru/6x7
tT94h1zr60DGA1//Xql4qfbR/sbiAluu61/3622a+375MXYHsXXuD6tEHu3f
AOJ6P9+/AcRd93p/3/Q8oeYDn+w3gJQv3rD/V13WnpLJHA4trwOBJj63rwFx
JZ7svwI277a9hiHHGpmoL/aHvmrE9B/6bH/c27zTMYHTwQNknDuDgweI+/TB
foj8b/tDpxa6bvv81R4iz+IwRYIljE+XywHsnHVcDjog41Ju74fIczhEp1jf
9+/9bg+R53Pg1wV54Nd+O6DrCmyZDuwDm3cWKv99P1Ax0AeMDhD7nu4vnQyy
4Od+IAco8n7/MbD7rtpzgLRzHd8Pss36PqMDJHwe2wMDD+jD7/trREAmXrHX
AYfXbfs3IO+//mgPDEygj5kcdoKCd8c/e6DngCH+dT9E/qe9Jw+TdrvYQ3uI
fcwObts+A2OA2eEw2D2cDivADvgCdQ+7Q429adwuzyf2EHleBwAL8kwW
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {-0.7200000000000002, -0.5999999999999999}, \
$CellContext`qPlaneLoc$$ = {{-2.709857394019914, -1.7138642998702553`}, {
    2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {6.4, 
    29.700000000000003`, 16.2}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.385, $CellContext`tabNumber$$ = 
    1, $CellContext`tauSliderValue$$ = 13, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {
    1.2720000000000002`, 1.2349999999999999`}, {0.43399999999999994`, 1.12}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    456., {224., 232.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{856., {262., 269.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 
        2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellEditDuplicate->False,
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.60556556683035*^9, {3.6055656089337587`*^9, 3.605565728453594*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.5700000000000001, 1.7000000000000002`, {0.9, 0.7}, {1.,
         2.}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.5700000000000001, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 1, {1, -1}, 0.925, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.925, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.55, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.55, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}}}}, $CellContext`dynamics$$ = {{
     0.5029915762963041, {0.8598893082995838, 0.5104805358405581}}, {
     0.4380369729670709, {-0.5104805358405581, 
      0.8598893082995838}}}, $CellContext`dynMeshSize$$ = 
    7, $CellContext`dynPlot$$ = {CompressedData["
1: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
nl0=
     "], {16.2}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 7}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 20, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyMfXVUVV33NQYmdheKHdgJokdMMBBRUbG7u7vF7sAWu7AeW/QCUgIicOm8
iNdCERUsFH9+3jX3fu467zPG5z+OMcce6+6z5tr77JjzYDFmptP4vCYmJrWL
m5jk+/O/UzX32088TL0c3BK+/Zyao+k1vlfQ6oo6BXh3m5Hdf3l80/jsONL1
d1qywDvqnu/59SFbc79KnqjjnZME3mbdhNRfzT9rXI8vHPn+bILAm9R/2yR3
bqZm3pOG2zf2jBd4n7+/m6456Vp46M7qcSy+XvPzalD3tDKxLI5O87l5Md+Z
dWMEbvO3fZTm4GPn/BvHRAu83V/cT2Nmfe3BxeQogZv8/XfN5lALv/vaRxK3
M7RXfqyqUHFJMxmnkyG+EjzHovJtO/m7zQz9UY52qOX1OiqWtdcrqXkinzZZ
LJ/X0fC8SuIQpaRJWgKLk6ncOj9iY8aLRNl/Qz6V106Brm+nJLH42crk6S0y
O86TuJ2BL6X0k4l1ypZMYr+bo8T2mfjVe2iicuDp8NrP1uQTvDsu2zfDs6NO
4OA9e96QibmHUwQO3qfscrVYFZYscPB+wP2b6+HKEgfvmfriCdf+9BM4eD9X
bX/RJimJLL5e45o1Y/6sUYksjk5j+aHHgmH5JA7eJ3q1PFUxOkHg4L3D95Tw
Va8kDt53mAbrfnaSccB77Z6mpacnShy8f+1fsEfbo7L/4L3GF+cSXZ2TWXu9
stZ6adC+OImDd+cwe71n/hQWJ1PZ3CCPzQY/2R68b+lp+mFEZR4/W+m29Ona
HqVlf8D7iayzVWeFJrDfzVF+br+09Ob6eCVheeXdkYPyCN6dGpfe8625TuDg
/dCzkyfGFJU4eO+/bMmg+LgUgYP39FK2Zfqdlzh472tXeuGJdRIH7yWcuhW/
MD+FxddrvnyMneG8jsfRaayGPJ304a7EwbtZOTervf/qJ3hvq7M8c7G3xMG7
ucNVx1P7JQ7egzPLHCyYIHHwnl4jvMOwwqkCB+95F1QILVYmlbXXK+32/JjY
OEPGAe9ml4O9Lvzrd8G7k2ntERuL/6v/xHt6L8cR7R8ks/jZytUekY3iLJJk
/4l36zIbhpnNTWC/m6PYt+6cczkqTuk07Mrvf4bkasB7cpnQa44WKQIH7yts
LpTZ4yBx8J4T38YnfaPEwbuPct/vcITEwbtnVZfJwyvpBA7enZYFFu8yWMfi
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
v0GPIXjPIT0GcPDuTvoN4OC9C+k9gIP3zaQPAQ7eoScBDt4HkP7EOL5eA72K
cRydxoL0LcDBO/QwwME79DPAwTv0NsDBO/Q5wMH7VNLzAAfv0P8Yt9crG0gv
BBy8nyV9kXGcTAV6JNF/4h36JeP42Qr0TqL/xDv0Uca/m6NAT0X6K8F7HOmv
gIN3ptcSvDN9l+Cd6cEE7zeN9WOCd6Y3E7zrjPVpgnemZxO8M/2b4P2rsV5O
8H7AWF8neC9qrMcTvDP9nuCd6f0E77+M9YGCd6YnFLzPNdYfCt43GesVBe/3
jPWNgvdHxnpIwTvXT4L3mt0HWocUkro+8N53cVlPv4pSBwjeH5pv6ffMV+oh
wfvpjUvOTgiS+kPwHnX4bE/X0lLHKPbvPUp0N0kMV+kq7V1nmGw0earSVc60
e/9sUaq/Slf5Ye+Tc8M9fFS6yl1B9RafDvBW6SpbZbTc1Df1sUpXeXf62FuB
P2V88H6m/uZyEZueqHSV55qund+tTrBKV9m04pWrTcxDVLrKfK02zT8aGsLi
ZCoL891PLDhBPi94d09t0ar5x6csfrayJbRKw+CJoSpdpU+VXmWK3Qplv5uj
dGmTvWHcw1CVrtL25MqV910SVbpKD/vFM4bcj1fpKrsXm34naFGsSlf55PC7
R+u9o1S6ykL5BnXSRkaodJX7FfM51nnDVLrKqhWWtm49LFilq9S1Wl94+/ZA
la6yy/bu5qYVA1W6ykbDAvLe3vZEpassfir12rP0YJWuMuDI2sFr+4eqdZWJ
fgH+lmEqXWWAa2nvK1/DVLrK9I/mPdMOhKt0lafdn3+Jrxqh0lXaFm95zXVn
hEpXWfPbsWufsyNUuspJ+w4M7WavVekq089EH12+QqvSVfp8qxVp9Qfnusqo
xXe7ORRLUOkqLScMW1j9XaxKV3m1d/yjokujVbrKoHvpIctztSpdZW7JrHkv
vcJVusrB95ZlWhUPU+kqXfQL6wd1DFXpKrteWeDS+utTla5y0ImSZdxSQ1W6
yncnZx9r1CpMpaucXWrYz6BC4SpdZfG8q1JtQ8NVusrdr9pt6L00QqWrjBz9
w/xuaa1KV7n50rRamYe0Kl3lnXYp24IqRap0lZctP/zTb0+kSldZs3NCapUi
USpd5fMN+fYMWBWl0lXOeVjL/Nu3KJWu0sxr+6t6i6JVusp5WWeXbukn9Zbg
fUFSTu8THWNUusotcXun3OsYpdJVjnErt7fkTq1KV7muXpnVt0ZFqHSVfQOu
LXbzDlfpKi37FHk04kQ4i6PTWBXpbWeqlTh4D51stmZrYxkfvF9bvc7UdJfE
wfumJnazymZIHLwP8h/tatlJ9h+8pw1puzTSVeLgfcuOHTVT/Hl7vaLzf1Ex
Ilfi4L1b2NBJhZtHqnSV9YpGF+o7SuLgvcVn14iHeyJZ/Gzll9u2ZsXiJQ7e
L2w+/2VMzyj2uznKxKAONltzo1S6ys49Zk12zYlR6SqH3a41+NqSaJWu8rjP
gHdl+0SpdJXRQ0v7L1wTqdJVlszNzlldMlKlqyw6OuZOgUStSlfZr5Wl1aoA
rUpXWbxFq8h+D7UqXeWzPV6noq5rVbrKTZuPrptwQqvSVVpO3fHilKtWpavs
dqbwqw8TtCpd5djIkke3ddCqdJXZZVvGzCjK2+uV+++utNdrI1S6ypA2C/VV
TkaodJUnAxs/2bItQqWrLOFdv/LNexEqXeUTn0WvTXtrVbrKb19K1W3pEqnS
VWZkdq6RmIj1ldRV7lndyKn53hiBg/dFP/KlfHsSLXDwvn9OhaH+LSQO3pN3
dT9ayVPGB++LMueYNxwocfA+vUvfQ90+R6p0lfd/ffj+amcki6PT2H5//tGp
kcTB+8gvyshZXlqVrjLfTp9ns/tIHLxbDLA5Piw0QqWrPFGwUuu8isTBe5lx
rjbOx8IFLvZxO0b/+pIVptJVLvJ5cOrScImD9wZXW925XDiMxclUdnwcFduu
jcTB++jft5tZlgxn8bOVgfbVp7x0+1f/iffmXq6tks9Est/NUT7nN+21NDta
6O7AexWXzR+XrY0UOHj/ZB0/6ecPiYP3Yu+yf7X6InHwPu+1adNjVyUO3gOG
e+8+3Vvi4D3SwtJsd4KWxddrcjemeZiN1rI4Ok3eCVV83BMjBA7eAyblNtpk
L3HwPvm6pn/IsXCBg3fdwt8V2oSHqXSVy+oNvNz/5jOVrtJtcp6gQ1ueqnSV
fbas/+WxKVilq7TbbR+hHxek0lUWz/e7Ue+3QSxOphKjU57ELJDxwbt3h7wd
uyaEsfjZyu2rg1fsWiLzA95TNj+OLt0xmv1ujqLTl83YHBur0lXq8xyt3nZA
mEpXueOsY/6ogDCVrvJkKdMHPb+FqXSVTVasutL3U5hKV1lyW+rn+f+KA97n
nVppFrKex9dr7lU6dKFpax5Hp3GZ+LVyuUvPVLpKnzzvUkvdDVXpKr3DFoxv
PvqpSlfZsVDpPBkTg1W6yrO7H74p+zBQpavc4GZx0/+1n0pX2TqtZO2cdr4q
XWVgVJUOZer4qXSVWT83TL+QEajSVR6rdTVx165Qla4y95hX0ZPzI1S6yjpP
Pr+asydKpav0z2Pz/nY/rufMUdqWbDj5wGypVwTvkW0nrro0MVjg4L2UJrCn
WS2Jg3e3VA+7igeDBA7e1+xsv7tV4hOVrnLnsnEtbppKHLwrv0znNmwWqNJV
ak2H9Sg3J0Clq5wZu8DVN9Jfpasc33r3rj62EgfvFTSHLVsO8VPpKt3PBV+8
MOSxSle5brf90BslvFS6yqzQbQ/6j3yg0lWWKdblZKm3j1S6yn0P66T6FJG/
C96jzebNDPyzr+e6yjlValj8c1jqNsH7SsuSFvMPR7L42YrDwEGBC85LHSl4
r3V01rhF5WPZ7+YoLy3Khd1T4lS6SiVm9/hu40JUukrzsrsmP9gapNJV9nCf
+OzDokCVrjJhwKQO1q38VbrKdm6jWuYPf6zSVb7Q93z/boq3Sld5v8rT642d
H6l0lSaR1qUnuN1X6SqvlF5ZdEONuypdpV1597wv02+rdJX5Tv62jcx3U6Wr
7L7roseGY5dUusomDR6lnp9zS6WrrNmzauWui7gOU69svTewWnRKoEpXWTPl
8Zdx+0NUusqDnQcOXBT3TKWrjMvjssNycbhKV/nL/Ne7aZkRKl3lhudNR6/u
G6nSVY4akdLy0R6p6wPvs376rk+cFC5w8N697/r8O6qFqXSV5zb2yzk59qlK
V7nizahbHR2CVLrKlRb+V7b+9lfpKq+3/ZS2ZPljFl+v0ezRVCt7TKPSVU6d
sbBes293VLrKQS6vSo2qfE2lq3yhL1h2fuMT/9+6yvesPXh3YfHB+wLWH/D+
mPUfvN9kzwve17D8gPfVLJ/g/QLLP3i3Y3yB99nEL9dVDqd64LrKtVQ/XFf5
k+qN6yqjqD65rnIn1TPXVVan+ue6ys00Xriu0oLGF9dVWtJ45LpKaxq/XFf5
090w3rmu0obmB66rPEXzCddVftca5h+uq7xJ8xXXVb6h+Y3rKm1oPuS6yiSa
P7mushfNt1xXWYPmZ66rtKX5nOsqX9D8z3WVFvS+4LrK3vR+4brK5fQ+4rrK
2fT+4rrKKHrfcV3lfno/cl1lMXqfcl3le3r/cl3lGnpfc13lcXq/c11lGVoP
cF3laFo/cF3lJFpvcF1lGK1PuK7SmtYzXFe5ndY/XFe5nNZLXFe5l9ZXXFdZ
gtZjXFeJ9RvXVWK9x3WVvrQ+5LpKrCe5rvInrT+5rvIgrVe5rvITrW+5rtKP
1sNcV9mS1s9cV4n1NtdVnqb1OddVdqD1PNdVamj9z3WVXrRfUOkqaX/BdZV3
aT/CdZXYv3BdZQna73BdZWPaH3Fd5QnaT3Fd5Xbaf3Fd5Qvar3FdJfZ3XFeJ
/SDXVd6i/SPXVXrRfpPrKrW0P+W6yqK0n+W6yu60/+W6yp60X+a6yv20v+a6
yiW0H+e6yhTav3Nd5STa73NdpT+dD3BdZR46T+C6Spw/cF2lls4ruK7Sl843
uK5yLp2HcF1lETo/4brKj3TewnWVFeh8husqcZ7DdZXN6PyH6yoH0HkR11WO
pPMlrqvcRudRXFdZj86vuK5yIZ13cV1lIzof47rK0nSexnWVOH/jusoadF7H
dZU43+O6ylF0Hsh1lTg/5LpKnDdyXeUMOp/kusrFdJ7JdZU4/+S6SpyXcl0l
zle5rnIvncdyXeU7Or/lukqc93JdZSCdD3NdZXE6T+a6yhN0/sx1lcF0Xs11
lTjf5rrKLDoP57pKnJ9zXWV3Om/nukqcz3NdJc7zua4S5/9cV1mC7gu4rtKJ
7he4rtKM7iO4rrIU3V9wXSXuO7iuEvcjXFeJ+xSuq+xK9y9cV4n7Gq6rZPc7
UldpfB8keGf3R4J3dt8keGf3U4L3VOP7LME7u/8SvD83vi8TvDsb368J3tl9
nOCd3d8J3tl9n+C9nfH9oOC9kfF9ouCd3T8K3tl9peB9nPH9puB9m/F9qOCd
3Z8K3hfQfSvXVeJ+lusqcZ/LdZWpdP/LdZUWdF/MdZWX6H6Z6ypxH811lbi/
5rpK3HdzXeUeuh/nusoSdJ/OdZW4f+e6yvd0X891lUPpfp/rKruRHoDrKoeR
foDrKqE34LpKk1IGfQLXVQaTnoHrKqF/4LpK6CW4rhL6Cq6rhB6D6yrfkn6D
6yonkt6D6yotSB/CdZWdSE/CdZXQn3Bd5VvSq3BdJfQtKl0l6WG4rhL6Ga6r
NCO9DddVWpI+h+sqe5Ceh+sqn5P+h+sqzUkvxHWVB0hfxHWVRUiPxHWVQaRf
4rpK6J24rvIK6aO4rhJ6Kq6r7ET6K66rZHotwfsmY32X4P2EsR5M8L7IWD8m
eM9rrDcTvDcx1qcJ3pmeTfB+2lj/Jni/aayXE7w3M9bXCd6ZHk/wnmms3xO8
zzLW+wneexvrAwXv8431hIL3WGP9oeD9nLFeUfCuMdY3Ct4djfWQgnfoJ+3+
4lFi/v/965Ll9BVJyvnvIStLfsvr1Xu1jdlyzx+amuEVc/TNdQJHPaxfGVnt
2v0UgXf6unrV8uNfNIllF04uVVPiqJPavfNfjS4t8XaHTUOXp37WdK8Y137q
5mSBo34uPwx6W2iFxFtND8havuaTpltRzeOq8yWOutr4qITP5W+y//38K0X8
DHqn6Vd//tnNGyWOevN+axsSsk7inYtbTP/l8ErzZsvpw4/qJLH+6zVpc598
ntxA4i2c6xfKjUjVJDedlnUoLZH1R6e5av+mhXemxLv+zVus5kjdQwNCQyWO
utXGtzgw7KXE7f72M1gzz7TV/SmfJY56Ljw190N2GdmfGn/xM5oeN5vklB4k
cdS5dfoHxxLLkpTcqG92gzqbeNlPOVr9l9kPzaa4wt+LHJG8YB7Yef7mwi3t
daI9eI+bvrDh5Rv/4vHv83opF48lzD+VKX8X48gks9ihqNLJIk6Xv3n+qqnY
4dHq2GcpAhfn/5dizcZel/Gt/taDVhm58Jnt9FOSd4zHmSWa7D1wX8a3unH6
/q+dWZq5Xx5MOeYm4wtd0Pnl0xY8lPEHZw269LNBslL8yeSGo7tJHOP64Oet
n6x6yjjN//L+UVOo6wTzY5ckjjpM65R22iNBxrH5258XSlrd1x3vXE5h/dcr
K27FFe1xSMZx/tufDE2HsPpn7IvJ/KNuPXZnB20pLMdjV0PdKq9tO7dbP0PG
xzzTvcXwrc+3y/iGOnytObukcq22/4qPOu+8boBfaisZf1jN/et+bvygNLk1
YdvikTw/mUpYaunESVVk/NZ/85ymKXMsPF+hzjqWH51mSfzmsedmyfgtlE1V
VtT6qNT8tHfdZx/JL+a9tCKxRfZ3lvz2/PtcCZob22udbb1Rxsc4ujN+0Pzk
ezJ+xyddzi3vlK3MaDpjybplSSz/2cqoJs/eNyqfxPoZppmxvk7Dsa9lfIy7
/OkfRmYUSpXzhmHeUzq759xbdPFf45fm4e6exywP3EkQcer+jXNL89Xi+q23
jVMFjnF6t+6K1i2cZHwHwzysmDV7PreIdzzjN0fZ0W7X4RtD/uDj7GvbVMrR
9KJ523TBmO+jusjnEjrqtovTT/ikiPYY12FdZ9Qaf0u2dzH0Uym+6NqQcfNk
PzGuP3x/XsJ0Y6qI06WO15DluV81My+X6pvzOEngGNdX0vI0mtxd8tjKkGfl
9y7bMU2Py/gY1yvGdRx7+aiM397Ao0bn+bxR1OBkgWNc7+xc1dn8k4zvZKgT
pciO0Y3Wn5TxMa7rtp537tcmGb8lvV9yvVwq1S0i84Nx7W3XaILNI1nnhnkp
TfF+PH7etoW8/3rlStbMpT/sZPxBhnGk2broeburSTK+8AtPiDrvOUDWm71h
nCoVV8eea1dNxse43vd9QeqgRJ2IY/d3Pn+r+Tzl0/ddk3Qs/3rN7qJ3GiqR
Mv4gwzyj/GPlouu4Q8fyk6kMnFCgaZNeMk47wzym8b+wJ357uo7lR6d5caVt
1uD+sp+tDfOk4vC+5NXZepk3jOsTY+4+DreVeehnmIc1Ew6FD208TeYN47r5
AvcVDfxk/A6GeV5ZPWrJxRrzk1n+s5WBQWvuREbLOmxueI9oim0oFDc1UcYX
+wKLYjfSqz4XcboZ3lNK5WsJfWf8TpT1T+N6VMXLLVvPThRxahreg5r6pz/P
LtH0ucAxrhu2e15hrKOM38fw/lUmNiiydv3JBMZvjnK5XsSIjfUTlAFGesU/
9U5+Z8THuE66dGlUyXZJoj3GdQb5ptF+kWGdoFRZnDOnpYvsp9Ch3bpR9sCQ
5yJONxYHOMa1B/m1EWeYYd2ieJo33xc1WMbHuL7RLt8xr7Yyflv2PUzgGNfZ
hIv5zbCOUry3mCUuayTjY1xPHJ5VcPaHVBGnNYsDHOPaj/zpiGNN7+u3VUem
N3dPZf3XK6Nbv5jxepOM35jFMeZLfrdTzLf0vj4++5+iiybL+BjXp8yLHlhS
RsbvSXFmUhzj/MvvfyKOs2Hdq1x/tKx8xjsdy0+mMrr5id6lDupEHBsWxzg/
8juiYp6k9/Xt4kH9Gsz61/yA73QlFTw+o46MY8niGP+u/B6pmOcN+wKlZ+ae
rndyUlj+s5W6vd+cW7JC5qEtiwOcf9dUvKfofW23KrzSiLYyPsZ17LdbD1qG
Sx4N43enJ76rYIzL7y2I+uyf22L58O/Kj68HG7Tem8z4zVFerlr+NVuR8R3Y
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
9SdT2UR+IjF+aR2eOavKG7c8/+KX6s2D/EpiPqH3AvxNxv3PVuCHAo57k5Db
o8fOvyRx1AP8VmIepnX46CZmFXKepqj8XBM+9HhnXidE5eey0S54WGZlgsrP
9bTkjcyg7tJfAD/XqrRJr47vi1X5uWoMt/vu8j1G5efKW+h1x1d/+Od+Lvux
03weO0ocfq7yi2e8G+4dqfJzbei+oljsjgiVnyvzH+0c/ewwlZ+rQPKtftam
EoefK88VF13XrSGs/3rN5Z7Wc+LLShx+rlydbamjP56o/FxWe7yT7ryWOPxc
XfY7NQ7fIXHMJ4GlFydMDpI4/FxtPOI2XHkepPJz7Xd26Deia7DKz+VV9Pme
j0Weqvxc+brEdLad/1Tl53L0WL04yjxO5eeqG1ts9siCUscO3sMtLJ+PLCf5
hZ/L4dFOk0Jdnqn8XEdu15z7+MwzlZ8r8fi3WdPKxaj8XNX23Nn7PFHyDj9X
hwmtttfZF8b8OFHKseNj2k7yClP5uS7aex0+fCxS5ecqf2FVsx4BWpWf6371
YS32Dw5X+bl6rthacfaKcJWf61rkunVLz0eo/Fy2R/LlPC0p6xB+Lv3TgSvd
voSz/uuV/qPmrDpbUcaBn6vuNKeFirf8XdRtf6/yrd+8knmAn+tYvhJVhreL
YH6fdGVygHti+SMyPs69fw374r9iVhjLv17zrnqtN6kjZXz4uZIrHpsY+ymC
5SdTSSxXs7l1Ka3Kz1U34uStn33CWH50Go9rj3/0nSjjw89lVeWo57smkhfM
kyeLZHj+WiLjw8/VovHb86/dZXyMo5/DgrpZPpPx4efav6r+ryX3tCz/2Yr/
rjkNCsdoWT/DNO8nbXB9bSLzj3HXp3ROP7cxkkf4uaYctzZrkS3jYx5+mv6m
Q9Vqsg7h59ppn2nyOkTGxzj9Vd3p9swcGR9+row3pya8qRrJ+M1R9l7MHXzL
JlLl53pm2f9knxA5vjCu69y5qpvWVPo7hI7Ua8jAy5eiVX6uXhVf1G80QtYP
xnWLF7NatXWNUPm56v3WHLnRKFrl53IJfFF0hX2Uys+V5fx0g2dSBPPjRCn3
a9xdtTOPVuXnKvGta7Q2ST4vxvX3hnu+J3WTeYafKyGpYp/ufSS/GNdXv/me
CJ4m42O97b09olXBHxLHuJ5m1yFp+2kZB36uzdVyT766pmX91yut79U3Tw2R
ceDnGnlt3OGAZRLHuD58v0/9qQNlHPi5Qn6P7u9gFsn8PunKinXVcibXkXmA
n6tM1XH3qvbRsvzrNa73x8bf6SDjw8/1wd0l2KxDJMtPpvL28JgRYYtlfKy3
gxpkLRvdk+dHp6lY3/r6o87/mgdovX3m7OD5rW/J+BjXFw81j38XKuPDz5Wr
XFw5aoiMj3HtsKn/0MeOMj7W20Ue+rUoXCSK5T9bydwRmNqscZTKz9VjR/Nl
7pNlfHG/bBdTe/swGR/r7XaXBp9bM1nGx7guXnvCZg93GR9+rk0tN/4Onyvj
i/fvkeUFO42W8bHeHnqmysxuqVGM3xzFutvLUi7to1V+rt30nSXu59rx6df0
Qv2kH4R/D5/7ub7m6VrMf77sp/hOkUf1EspwrcrPtZDicD8XvhPF/VzTS5cz
azBTy/w4Ucrj+YcGVHfUcl+G+A4/93MlEc79XI3XzspNHSnjY1wfblnkbU9r
Gb81i8P9XAvpu1jczzWz3MRbp0ry/uuVrmN/zjlhLuM3ZnG4n2safY+L+7mO
1onv3qSRlvl90pVGw5t1jzGV8XuyONzPhe+AcT9XWrrDlfOleH4yla5xFQ7a
5JXxbVgc7ufC98e4n6tH/3W9Kpb41ziice22rdPGNs1kfEsWh/u58HcQuJ+r
6FfvkUG2PP/ZivO35fddr/6rflgc7ufC99a4n8vnZn7Lo8H/qn8a1y8Ot62s
7Jf9NIzfnZ74+wvczwWc+7ki049MtX8cyfjNUXqfs61np5d1wv+eBfdz8d/F
OHWn785xP1dZ+k4d93NxvNt/4BhHjek7eNzPxXGMi8X0PT3u5+I46rwhfZeP
+7k4jrrdSd/3436uMfQ9QO7n4rjVf+D871NwP5czw/nfreB+rhYMB++f6PuH
3M91/d3m8r3CtSo/V0LUnR0tMiQOvdnVQ1t/H3krcczD825ZTb//ReK45/K+
Yer0xFvimFdfbHuxvaeXxHHP9bzO9SElFkgc8+ThyYXTB0+VOO65Ti+rVGBL
eYlj3uuQ13ZrjQISh97s6I7N620uRqj8XE0ah08rt1/iuOf6WDqnvV+LCNYf
nWbG4s9ZCZUlDr3ZmgfD1226HK7ycz1zsKnWYHs487NoNVfPexTrM/ZfOM0b
9Y+vmKqkhan8XHnmXXlU3F7imAc+xls4vfxTt9zPtazzOt+LS0NVfq4S+Uss
v7RQq/JzVS5wq8HQIaGs/2eU5W4zRpSf/Ezl57LvfDVn7ZenKj9Xk9mTdWGb
QlV+rjl5h6VEd5XxcZ+VNDez3/dBISo/16D5m3z1J6UOH36uV3E1849/KX8X
dTW3+7Gvk3VPVX6ufHbrdZ/aBKv8XD1H1++x+tYTlZ9r4MDfNjtvyfiow2HB
ZYo59pTxcZ+1YcKDuulxgSo/V8NauZYfy8r4uM/ySr1e52whGR91W/Fk3u6p
R2UeoCvTtO2e+WvRE5Wfa2Oe0cvGTg1S+bmGVayW1rVPiMrPda6qXR/rDJkH
3GfpzvVrETIghOUnU9l4vYrDhoeyn/BzHbrdoPm+7cEsPzrNm+ptw98pMj7u
s/x2V5hyZkEYq//PSsno2dcTbKWPA/dZVadfbzXVXz4XxpFbFc29q8uCVH6u
jZduuA+00rL8ZyulFmhin5hIHwrus8qvXbdUCZe8iPusHoXtWwyXecZ91uxD
JRKmlJHzJ+Zht/OjE3N8pB8Hfi6PtOj9O0cFqvxcn2MyooJHBaj8XPGXk99H
3Y5l/OYo85vFm4V2lLp37K9b9tOZfy0j+cW4jjgalmJWKFTl50rITXbve0Pm
E/dZdY927TmyqPShYFwf3L325NgJvio/1/Ieg90jdkifBcb1sOb33n83kfmE
n2vjvluuNj99VH6u/J2y7NqFeKv8XOWPVjXxDg9U+bn8ax2NaGceoPJzDdWn
r3LK8lL5uZ63OvgjT4yMj/31kxHn7ru9lj4XjGvHXRYtm5n7qfxcja6YFyze
h/dfr1x9UqNEegU/lZ9rd69dj471k/4FjOuHl+452FR9rPJzdR/uXO/2T3/m
90lXXqxbnnF3g8wz7rOeN36W7847H5WfKyl97bxoG2+Vn6u9W6m6jQc/ZfnJ
VI5HPyjYcc6/fE+0v153YnPXNeW8WX50mo5bJoZfGaZR+bnaDZ+1/2KhCJWf
69H4Sfu3bJR+E+jK7lrNd/5cWqPyc3lOmtSvqNVDtZ/rx+r88ypwP122YrWj
TmxWNek3ga5sb+P35rm+nio/l9217hU3JD1Q+bm2XHoSX3659LsJv3zf6PMV
WkkfEHRlW0+PGOSddF/l5xqyTV/g5tW7Kj/XFeenLwt2jWP85iglDh4/cj42
TuXnmkF/n4L7ucbR/QjaY1x3pb9zwf1cgWtqj7xb5I7Kz+Wj8b3Sa+wNlZ/r
jNHf0ZB+rtOEcz9X/Umfo2Oq3VX5uU6WbuGmfX9b5ec6xeJjXC+jv+vB/VwL
PhbYUq27rEOM6/YHk3rMv+Ot8nMtMfr7INLPtZz+ngj3c5mcSw5Oq/qY9V+v
bLtv77DrrfSjwc+1zOjvkkg/1zX6Oybcz+XpPGz2sn+CmN8nXdnx9kPk8kWS
R+yvrxj9PRTp53pEfz+F+7nKZZ+0P9MxlOUnU4n+3eP14sFhIg78XJ5Gf4dF
+rmm0d9t4X6uKvm7TppSUdYhxvW6rQH/PLKNYL6YKM1wo78LI/1cwwjnfq67
zger/faNYPnPVnZf1o6dmaxV+bmGsvgY19n0d2q4n8tK8/3+I730jWJcNyll
UlOxlT4j+Lk+Gv29G+7nOqvyc41q8WbZji1RjN8cpcuzd5UfrohW+blmGP1d
Ienn+sF+F+M0i+Hwc/1kOMYdzz/8XBMYjnG0wujv9Ug/lz+rE4yLpwyHnyuc
4ajze6ye4edaz8YR6taV4fBzbWQ46nADG+/wc21kOOrqCpt/4Oe6xnDUSU+j
vx8k/Vy9GA7e5xK/3M/lQnXC/VwNqA65n2tdblzQByvpa8A8vIPGBfdzXadx
xP1cK2iccj+XzcbglqGrZT+FnofmDe7nKk7zDPdzbaN5jPu5hjkkXd999YnK
z7Wd5lXu5/p11jAPcz8X5nnu57IYk1JqbdgdlZ/rEL13uJ/LnN5T3M91jd6D
3M/VIWi9c49CN1V+ru70fud+rhBab3M/1yV673M/V0eaH7ifaw6tN7if67fb
04BFV++p/FzNaD3D/VyutJ7hfi6sl7ifazmtl7if6zStx7ifK5zWY9zP9ZDW
e9zPdYbWe9zPVZ/Wk9zPVS/ln4LVP0kfmfg7C7Re5X6uRAuX5oMuaVj/9UoU
rYe5n6sNrYe5n0tP623u50ql9Tb3cz2g9Tz3c3Wh9Tz3c3nQfoH7uXbSfoH7
ufrSfoT7ucY7Hs6b4u6r8nMl0H6H+7kCab/D/Vy+tJ/ifi4n2k9xP9dPxbBf
436uCrRf436u4bQf5H6uNbQf5H6unbTf5H6uB6+VjAW15HyC+TmR9rPcz1WD
9rPcz5VO+27u52pN+2ju5ypM52PczxVH+3Tu5ypG63nu5zpI5wPcz3WWzge4
n+slnT9wP9csOn/gfq7SdL7B/VzF6XyD+7m20/kJ93NtoPMT7ufC+Qz3c5Wi
8xnu50qk8x/u53pM5z/cz7Wezpe4n2sXnS9xP9dROr/ifq5mRRu5VYuUOMb1
Ojof436uIWcbX4vuGKLycxWn8zfu57pL52/cz1Wbzve4n+sune9xP1d/Oj/k
fq6VdH7I/Vyd6XyS+7l60fkk93NNpvNP7uc6sN2y0TwLyTvGtSOdr3I/V9aM
mIiEjqEs/9nKJDq/5X6uWDq/5X6uznQ+zP1cdeh8mPu5ytD5M/dzXRi5ztba
XeIY1xl07s39XAvo3Jv7uRbQeRr3c+XONZyrcz9XHTqH536uS3Ruz/1cIXTO
z/1cK+legPu5ptI9Avdznd/zpI7liggWX680onsK7uc6RPca3M9lTfcg3M/l
Tvcm3M+1n+5ZuJ8rie5luJ9LR/c43M+1a2fFi+2ztaz/2coMuififq6LdK/E
/VwxdA/F/VyX6d6K+7l2kg6B+7mGDUqM6nA3SuXnwn0r93MtTrl2vsESiWO+
HUj3v9zPVZjui7mfaz/dR3M/V1e6v+Z+Llu6H+d+rlS6T+d+rgZ0X8/9XEfo
fp/7ubqQfoD7uWauPn6uhx3vj05zkPQM3M8F/QP3c0Ffwf1c0GNwP9dm0ntw
Pxf0IdzPlZ90LNzPBV0Z93O5kL6F+7l60T0493MVI10N93NBV8P9XP1Jt8P9
XG1Jt8P9XB9IF8T9XHakC+J+rr6kO+J+rsKkO+J+rguka+J+rt+ka+J+rsqk
m+J+rg872j923ROp8nO9IV0W93OFkC6L+7k2ke6L+7kWraizvfEYGR/1DF0Z
93OVHtLHvkB3Pt7TlWOkW+N+LujWuJ+rDeniuJ9rDOniuJ9rJunuuJ9r6N4P
Vfw2all+dJprpOvjfi4f0vVxP9cP0g1yPxd0g9zP9YB0idzP1SWnRdON1yNZ
/rOVoaR75H6ubNI9cj9XS9JVcj9XA9JVcj9XTdJtcj+XPj3Ze2ltGR/jN5f0
pdzPFU56Ue7nqkM6cO7n+kB6VO7nsiLdGvdzQQfL/Vy7SAfL/VyOpLPlfq6p
pLPlfq4A0vFyP1cm6Xi5n+s36YS5nws6Ye7ngg6Z+7lakQ6Z+7muks6Z+7m6
ms5t3mu4jI9xDR0193PVJx0193NlkE6b+7km+tY5u+h+hMrPNYV04NzPZTLc
oAPnfq4BpDPnfi7z2qadRy2LYPnXa6Bj536umZkBdxe2DWf5yVQ6k06e+7mg
k+d+rl6kw+d+rnOzfp892FTmDeO6Aun8uZ/rAen8uZ/rOPkIuJ/Lg3wE3M8F
nwL3c3UknwL3cx0nHwT3c5Upl24anSjHL8Z1GPksuJ/LkXwW3M+Vn/wd3M/V
j/wd3M+1n3Tj3M/lQ/4R7uc6TH4T7ueyJn8K93M9Iz8L93PZk/+F+7k6kF+G
+7nypRr8NdzPdZX8ONzPZUr+He7nKkh+H+7nOjJr1DvLWhGsP5mKK/mJuJ/r
QbNlaR2qy7pCvcGvxP1c+cnfxP1c1ckPxf1c0zbvyrvhouRL+AjIb8X9XHfL
2Z8u/yxe2eCeEbitWH6vrrR+Pjvisc9Z0xRl3vyV03u75feypnXLIreVXrfb
J+HvfIn2XjduTTq3NFngaH9iuM0h/3mJylj7kqWL1jL1akbr5+XKsd7bOoq/
Fybw77nLfdzd4wXem+afk66Fh+6sLv7umBfG+2LHKhM2xMYoBwx/b060P1tt
f9EmKeLvzXnhfMz/R/MXS32jBW5L69uZiXHFTv6OUlwpD4ivW1vePrOU7Kdh
vHjaHGrhd1/7KEqZT/lB/FFD+nb41EL2czjV+cxfBytuWiB/15nm/9aDa07v
WyJWGUf5QX/cq+xqvWGY+PtrXgqt08LDJvYcXlLmpz/VZ9IQpaRJmuwn6q1z
GauN0wtIvjAvNRj168HemRLHOqH+nMqx5g2SFDfKJ553m2mw7menRJFn8F76
54so88kpSlC/S232PM8jcO8qzt9b+qWI9qiHVZW8IrfNTxb1hvz0HmA2YOXC
BNEe9RA/wH5Do2NJyr06Ngn9pucVcbK33/tg/SNZWUD5Rz4D7Pbl22mVoKqH
c1QP6Cfiuyf3al+9oewneG/W8sz8RvaJghfk/8OjVubzZsn44P1JzMOt999J
HDwWSm/lX/cPLwmGv4Mp+lPcqVvxC/Pl7yLPOyjP/Ri/ycQv2iNvB0O6HT9u
lqQE03Oh/52v38yscDpZtEd+zOo0vfTwe5Koc9RJ6udPDikzZHs879QGN4Z6
301W7lP+8bzPtpoUWBeQJOofdfUj4fAHhz844qD/zmH2es/88nnxu0HNfSZ5
HkoWeUYdHm+d59eJkjIO4r8eM9mq/36Jo739/llfxldPFHlGHXacOrmLXz6d
wFE/1QOG3yrnnSJw1MPtH9WObd2WovwiPwXaw5fNeSxBPAJH/gOKOnss25Wi
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
CJXOH3/357945Dr/vQe+Zr34M764zv8F+RC5zt/h3OPbE6aFqnT+Ng5t7/XP
F6bS+fcNuLbYzTtcpfOfXWrYz6BC4Sqd/8z2Vzav+x6u0vmf3xF9r/HXMJXO
/5/TB53yBkSodP7VKjnWfL5Iq9L532mXsi2oUqRK5+84f73/l8Bwlc6/SIsp
Sv7rkSqd/5pxM63bdYtS6fxDrw5t/yw+SqXzX1p1zN6zj6JVOn/8vRiu8//S
buDvcRMjVTp/z8fablsvR6h0/vBrc50/8s91/jM9D40q5BGu0vlvHtc6Lf2M
VqXzz29tqbcziVDp/O8uPfui7qIIlc6/6OiYOwUStSqd/6YmdrPKZkSodP7g
hev8rRsNWlfeSavS+d+ZlxY65JxWpfMvurjv0KhMrUrn3y1s6KTCzSNVOv+G
6zs/aDg9UqXzH9jq0ZgO16NUOv+K/ptX629HqnT+HUMt1vdpEqXS+U//3nS5
fdNolc7fekfLIf6vIlU6f3ynguv815RbPuO3ZaRK5/+1edjINmu0Kp0/8s91
/l4tM45n+WpVOv+MMT8e7LmjVen843tP6O1zWqvS+U+nv8fBdf6WU3e8OOWq
Ven8zWZvGXBgmFal87+cZWG9orZWpfN/8mXHyYDUCJXOv2DjoWd0T7QqnX9I
m4X6KicjVDr/hxumJe1zi1Dp/G+4Vf0n+P8aO/OwnrPoj5clpahs2cIkjH2Z
LBGpGYZM9rUJLbYhClmyZouMsbQQMkgIYSylTUqhvb5bi/ZUlBQjk8T4ze+Z
c+5nOufp+f368z7nud177v1+7rnv+7rnJikZ518VO1M9v5mCcf5vrt3IvNpJ
yTh/92zNCYMCMxnnn3vol7LqKSphL8a92dDPznUqxvl/7PDLjsRaOeP85dn9
/i5bp2Kc/18Tfrfut0jFOP8DZvmeJXOleuh4Uc4/9bqDak+Q1C+cJ/5RVQ/2
blEyzn+hb7fg/rZS/Th/MracCCr+oGCc/5mKixuHr1Ywzl/5zSAdr1zJHucP
vvdBOX98F4Ny/g9/rx2V1UnOOP/krE9rMntL/UL/nHer9b8yVcY4/1md9F58
N0TqF/b38sg+23bty2Cc//BbN/U8pysY59+p+JROl//Ug+3vD+2nnL+Jh+zK
Fh3JD9ieFps23wpxymCc//FpHesKKyR7/L+2xmusPZUyUY722wPeWFwwUjLO
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
sIk80liO42UBcWNgE/mcsRz9j/Eqlov3MqzWbP1ySSpHP9dD/BzYRL5i5MGw
/eGw38Ryob9B/I/1iHMl2C+gPfZrH+QNRnvxnizsO9Ae+3vj+2Emk42k/tL8
wGgv8rPBfgftRdwL+yO0R/84DK7z+d9+ob3YH8H+q6m8vmiP82HzS/m708EF
wl68Cwb7QdQr0J9moD9gOfrzLexDsR5xPgX7VrQX+jnsc5vK04v26M92lQrN
82+ldqI/cd+N9uhP3KejPfoT9/VYjn6b9r46+fQ/+wKsB/3mAXoClqN/toIu
gfXg78jocguX9ZcKmc6zGfQQLMf+zgL9BMuxX7+B3oLl2H7UZ7Bc8Leg81xp
4nyK6kgtvs+ytNiUynSke+o1litDc5iOZG+suTPsXCbTkUKDe99sMU3BdCSN
gpBZY1tmMB2pu9zsqot9MtORKs2NVm28mch0pFGgj1Ed6UvP2aHODTKmI2Xa
efVf4ZvFdKT3SzaoXWqfwXSkG5DXjupIGh80TfL6yJiO5DYm/lGgrZzpSGWQ
147qSHNiOo2seJnBdKRfnl3M6+QvZzqSVr3DjJr5GUxHMv0/zumojjRp0Wqv
K4EKpiOdexjjFPNPfEh1pOB+NoPTdJVMR2ruv7PVRHsF05G+hfxyVEfyNjyf
73ZXznSkxUvuHxl0Q8l0JOSQqY5UsDR+hk6sgulIdmu87UqjFUxHOhth/e2a
eQqmI+3ab9jwSx8l05GmXMyv2HtKyXSkdQt/27hnvoLpSIGtL1RV2CmYjnRp
ZWFnvwMqpiPhuRvVkXbD/Y6m8rNRHQnviVAdaXb7+p9s5iiYjiSDeyhUR3KG
80eqIznBPReqIw1cPGxyVksF05Hwfg3VkTBPF9WR3OrmKZasUDAdCe8BUR0p
Z7os6d5sJdOR8F4S1ZEuwD0mqiNdgftQVEfCfF9UR2oJ97aojoT5r6iOhPmv
qI707vk3s8v/qZ/qSEaP/76v9kbBdKSr92JbOisUTEcqgXxTVEca38ziSC8N
BdORnI0L73xylTMdSfap9NoMmYzpSF9/Onqxuo2M6Uh/ZlWrku2eMR0pcJxu
y5Pr05iOlD67a9w8p1SmI72E/EVUR1o3c8XNLaFJTEdadFyrz9vdqUxH8oD8
RVRH6hzQbHLxuRSmI3mq2+9wXJPEdKQLFWMerYxOZjqSSXbKtg2paUxH6g73
hamOpK17btbeE3KmI+0rm1wy5lQi05EW/Famcf92GNORMF8Q1ZH0fLp3nHkn
julInxP9z3pPTGA60s+QL4jqSG7ul0K+hD5hOlJNZM9fd9yNYzrSwxvh0826
xzEd6eX+ndVhHklMR6rq0mmG63gZ05GWTX06t8E1mulI9kN3db01IIrpSO5f
0i1OZWcxHSnhZs60EKfrTEfShTwYVEd6WbdLv89P95mOpA/5NKiONHKKs0Vc
cDTTkXZCvg6qI4Uu2Z4aPPMp05FuQz4QqiN5V9Yod25NYTrSKshDQnUkO8hn
QnUk9R7NRqYbKZiOFAD5UqiONBbO66mOdB3sqY7k2ijfi6Qj7SDtxH5FQn+p
jnQQ/EZ1pG6N8plIOlJ3GEeqI/0IvxeqI02xe99iW4WS6UgNhv/6h+pIH7I2
qp+MzGA60hEYF6oj3YHxpTpS+eed5Z9uRzIdSQbzjepIVfD9pDrSTpjnVEey
gt8F1ZHkkI+C6kgz4fdFdaQXzx8cHDJCxnSkwoAT7oZPYpiOVAq/a6ojRcJ3
gOpImm0KNMvy4pmOtBW+M1RHwu8V1ZG04PtGdaR+AXMjbQcnMR2pGtZTqiOt
h7wQVEfaBt9hqiO1hu821ZH04TtPdaRhsC5QHekUrCNUR9oH6w7VkdrCOkV1
pBmw3lEdaYDHtCU1F5OYjpQE6yzVkfxhXaY60hdY36mOlAbxANWRgoAboTrS
WIg3qI4UfMz2L98XCqYjGUKcQ3WkFrCPoDoS3lOmOtJWiBupjvQD3BemOlJ/
iFepjjR7bX7O3kEKpiPNgviZ6kgYh1Md6W/Yb1IdKQDif6ojXYb9AtWR8F4q
1ZGcYd9BdaSqjul6wR5KpiPh/VOqI+F+h+pIv8P+iOpICX11DBXXFUxHKoL9
V1P3RqmO9JdP3NahpUqmI/nAfpDqSKg/UB0J96FUR7oA+1aqI+E+t6l7oFRH
mqs3frjvAAXTkbRh3011pNWwT6c60lzY11MdabOHuuy7C3KmI7UCPYHqSLWg
S1AdacNZ7dqubllMRxoLegjVkd6CfkJ1JCPQW6iOpAX6DNWRHEHnoTrSOuCR
/geMChPa
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
wYwY8yr2lbxynyntPBacF1L+U7mLmfCrKoca7eTtJeff9A2D3ilW1Td7Gsct
JX93J5nRlKkFf3envI/yP8qXjk+dF50Q8wD6vuKTzHll8fVe/0V5ODmeyrkp
L63vPhRP6Zs9fdtxReocnfJ+t/E8peBvDvXNwIuJc7GKuWYU/I3fU5m/h3ki
c/5ZeSfdC4+IvpB8In3DNiP65OMyfwu2n/zVSuuedFD2ULZd55z25kLWZFVu
mdnQK6B/r7S+ae9rL8sOzAVnFR2rynb8W2mfa3XuvvSd0q2Z62rf3xvPH8Xs
c6S/wXZA59GcyFd/rYLbXpmbPgh+Z/C14PsR3bPoG6UFiiOUa9BZW/B5qe85
dWY9llleOf4qZctJXt96at4Wgh+A7ZHZP/F3mIoN6TL5Czu8Z/R7FUe2irGk
aPmL8hv1DeeiaCs0X8/EPaI9O7noeEH3c4/Jr5Vu69ylnKO+ZJcpxyf2n3rF
MWgs9xdtn7WXlDvqC90T/ppoPztHeysbsrroGF8+ofwy+fCydfIbFU/1gt4f
+S2V3teyOW9G/03yIbdv/kxuenQ89z/i3ZFxb26b+l6mZuo4s18cT43I13vF
OPo+q1vZeQ/Jvpe7X50JD0GXcp9pr4DHIbMV+g3lPov+78qDvRz/o/7rkqLn
eZnOpKJt77KoY4Ohj4x+lHyqY8GLM3933KnsuGBY5CvGrwb9Z4XzWJWJn6dk
zvd3LTs/oJg6IF819/q8mrtNxac3Z461tRaKN3aK7ag9+bq6t301de5CMXc5
OH7XWbxtcIyvXE31YJ9H+tADrJI7vnkxd+zzBfRz0D8UvX/X69yhHB5pKefA
eJZp/PqmVN+a6oyTLjyQ++xT7KMYakCwz6h81L06X+NZpvhoSOL+JKO4ag11
Dw1uvxDzZxrnuqLHqfOoT3AMq7nNwWOC4w7FI1uKzndpXV8oOl5bE2ntX51t
OrsV3z1atD4oH9WPutun9qnrxTb/5P1rOrNS+1bqa01sU/Kbi/aZ5d8od3RK
4jrST+nDoHjuaM89mjtHdyL8gfIFgv+7voHvU/L35PpG5RFkj07sZ0gHtDf7
B+uqYvODg7+lPFM2ObN/pTP9iOBcor4FmhEcx9VFplXm77CkMy8V7Rfpfz+s
3Emwr/ph7lzccGROCOYrxzUT/D+LZOoY
            "]], 
           Polygon[CompressedData["
1:eJw1m3fgV/P3x+/b+16fe/vcT0VJJMmKUqKUyigqoWGFSClbywz5RpFkz0KU
EaIlGmZW9t57Zo/slfl7Pnqe3x/n8znnvtYdr9cZz3PeLYeP2Wf0GkmSzK4m
Sar/z+vPmpUkqRG9IH7buiRpniXJppJ3KJJkC8n/6npzya3LJOmoaxuI30h9
NlfblqKq+C11bWe1bSO5meStJfcpfI22nUS7iF+ZJ8lHWvdXUUXyn5J/Ef+h
6CvxfXWtLX1Fw8T/qmufqe1P0VqS/5NcUdty3VMjrbUHa0ruLTqA+9U9NhT/
q9o3U/tB3AP3HutvLWoqvqHusVHm9T/Q3D+LatTWSWPa6vrG6rO95MGi7uLb
iHqJ30TtKzV3fcmba63mupaK/0bXvhNtI3l9yd+H3FH9W2m+DrrWT20/ab1P
tNYfonqSa0W/if843sdG6v+ZxpXqv5nkrPC9cY+/aWyDwt+L77au+l4teYTk
IVqjT52/Cd+Gd7KN7q+D5E0lbyt5T/VtzD1orhc1vmGd52CuH3WtqraGolXi
P4374x3yLv+S3Ehye8ZovnaabzfJA3VPQ9XGZlqu9Y6WfLzEX7S/npP8S3y/
u3lnGru1aJ0s3h/fX9dbid9C9Lf48eo/Uf1Hig4Vv0r0tfiH1La2xvbUmK3U
t4dod/HD1X6o2jO1v6z16grvFdZk7YW6/rz450R3pJZ51ytEd4rvUvhbt2PP
Zh7Ps/MO1ha/ntZ8Q/3+k7yO5CaSn5H8g+Q1JO8r2l7j28f4ddT+lNq/551w
r5ILXW+hPp0l/633cqKaThL9J76d2tdi3fjezMnc74q+0/3/K1op/nHN2Vh9
W4sy9d9Q/Tup76aSf0q957blbEp+L/X5Kgp/Z74335fz3Urt/zGX+m+p9jaS
c83XRPJWen/NJL8Z7eupvXOdn41nHCj5KN3P2ZprtOgw8U3V/ntqnbClxn+Z
+33zbku17Vj42+6IDuBs6Nrrasslt1T/jQvz6Bh0DXuMvfZ5nPeNCusm1mCt
tqIy8x7ooLahhXVF29gPe2n9gzT2W73bZzif6v9hap3RVO2HqP0o9InaX1D7
Sv0/TPLhvG/xK9T+Nrzoa/EPaOw/4v8VLRN/huhV8a+JJohvpznXrfieuLdT
2ROSu0ruxv1qjk7qu0Rz31Nap3G/B4iOET9WtI/4LurfVf0nST5Y8h6Su/Bu
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
D3lvyYMlPws+KhqaO1afkBhv51tiT5qE/XlI8z+t/3tJ/rvWGMcTknsnxj7A
oB6s2saBTT0s+cWqbeY/tbah2FLwih1z21xs7/aSu0qeK/nSeN4fa41RXCa5
XWLsAkxiarwvsAps7MxYv11uH6Jd6LTrJL9dOg7BxzgjdwzfJXUMTmxPjN0h
tc9H7E1M+oXmG5U4VsXHXzt1TIHvTw7jZ7Uflzh+ADNeJfnIxFjy85L/kHyI
5DVL+8T4xsSbN+WOub8OzAjf4iPJB6aO8W/NHeNskNpGEPuAAb6v/nsmxgbx
SfBNwFs75/Yp8C2IyYjN8EnwTbDJv9YakyO3h40Cq3uSe6ra5xmQG+PYOLXP
BvaBz4fvh494eW4fDl8OH/fi3DYL23UVPkHumPaMqn0IYt2r49uyf/FnwJHw
tfC5wJfqZcauwLDqMucswIvWzJzLIP8DdgGGsXHmfCH4Upo5t7gal6gY7weP
WBb2ZlzgleBPzM865FoWxfthz/9Wax2M7vhf4I/kPFiPXBO5kPqZsYXauD9y
MMhcJzdDjorczNqZc1fkvMCqm2bOhf2meZpVnP8gR0HOsz1y5lxoi8wy+Tjy
ctuB84vvJlqVOse6mfgNM+de6c9czWKOlqK1Ks5p0gefa07oLHwx2hm/OXhi
6v1wi9p3S+y74qPgh+GP4buACZ4fPiy+70bhzzQSbRD6/yy1b5jYN6zmjv1b
RTv27sKwLz/U+vxeUTU+0jTO67TwQX+qtX54KPbEX3G+wSJ3kbxZ2KdJsX9b
h/3Cj8Sf/EP909z3xj22iPOwNMZz/+jLJXFeVtVav94X+hbfG/16fdV4TvM4
X2Dt5Cz/q7U+ekBy38SxAe+Id9U41kP/XhX6qn3o3+kRU7QJfXRj2EtiAXJu
5LPfTp2LW5E6Vq0E5kYOKhH/QWr8bfvM+Z+9RZ3JUYiOFH9UyOTcurB/It+w
bWl8uXXgrewnvj17oKP4KwqPBevZRe37F95vtG0v+TLJwyWPiHwImAL4Nzg4
WEO/yFdskTl3TQ6cswuWTW78lML5mK6Rr9pZ/4+tOAcNBjWucG5jB/E7RDv4
1EDRTtjtwrmvXcTvVOf81IH4kpx9ybtnzh2BUZEDA7/ieXgnYzO3kx87SNRH
/ImZ/Ydxok74rZpvFP0ZW+d8BNgXGNgM8ZeofZj4w8XvWefxRyCHD0L+kfzx
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
MaNO4Q==
            "]], 
           Polygon[CompressedData["
1:eJwt13e0VcUVx/GL3Af3yRMQRJpg6CDS26NKx4IKiopSIgQwoIBliWAiSlEM
TQEpoT+aVFGRIigCGopgwSBqYkliYklisBAlRsXPXuf88V1rfr+z59yZM3v2
zK0xdOx1Y87JZDIvIw8t8zOZasUymZ+ymcyPaFCQyRTmMpluns0tnsnMQR26
C67ibaefw5lSmcwpzNKejUae1YwY3KS9k7cDbeinsYnX3PubYSndFIW8F8Xs
Q0e6CdrwnqdfQDt6qfGNMb6eBtsDM+i26fj2iNmL/xtHW34tcReKqYDG5lEf
p/3eVyjjWX0xtXn/pP+FLO8i3qXe19r7ZnrXDPzH+9rzevKW08vQkF4sdrQ+
3b2/G6bRrVCddw5dDJd4/9O8ybzH6Lnowqutf+P0m87H136jCq8W7wl6IerT
r+q7RN8V+i2P3ylIvkthGjcPX+lbV1xpcV+Yx79RR1xD3gXFkoUtjoa85rwq
vEp0VTTldeQ1SOPO6nsJ/STG8+bzFmE3vR3TeEX0Khyg+6CZdnPU9qw9vROP
aq/mrcFB+r5YJ+1C3ObZPLoxKml/6jc/wcV0PXNrbiiTzOshVKR3RM7weorp
gfX0d+a8yfP1kSueteJt0H+i993oN27AQnoXZvBm0TPR2Xw3pXEP0pNxGW8V
7x7eJHoqttJlcMzvHUWeZ9Xp6Ris3V/MACyhi9K+4d2E1t63iHcHr2usN6bQ
WzCJN5QeEutJd0Yd7bp5Sd5E/sS6VdD+s9/9EyrH+qRr+Q59EhfS6/EA7zp9
++KJyHmcy/tAzPuoaSx9eW14jcU0QouCJC4/zdO88OlC/nDtEXlJXkd+r8E4
7WG8X6GNmLWxnrxfx1qiLa91mvcxj3qRp1FH8pPvFt/vVRSk3+pu3gNiHsJm
ej5G8jrQ7fEbukN+kk+RVy3QLz/Zr7Fvq9DV0C6+S5ovq+TBWvxXXqzg3yWu
j5hr0dL4mvEq8y6gK6JJePq213elfivwjb7leNV5U+ip+IK3TN+x+l6uXy/M
pptHvnm+DpeLv4w+Gmvi+Ya8JOci97bhEe0JvPHo4HdLi71fvwnFkxoQtaC7
uEbiyoopE3OO3xDbQLt+zMGza3hXhq9dm1cLzaI+82ryytHnx1ryNvJ+m5d8
5/jeK+ke/KfoLbF/eSfjG6f5UoKXH/WAXoBRvE50R0yMmpjmZJYuiUu96+WI
5c2gp+NZupO59DKno+b2On70/Ubw7uR9SZ9CP/oX+hfJieV407N3eBX0P6v9
Em8vzvAqi5uiPRX7PHuF9zye0b6HNw4VxdRLcyNq+5eoy9snbre4u+g7UYG3
K60lY+m7Yx/xqmNJnEM46NkxMX/IJb8XvzsNVcRs5a3j3UuPx356NO6N0hnn
B3LiXoox8kbTd+CCgqR2xF44RX+NelF3cX/ke16yj2M//x435yU1LGpU1Kq3
ve9179um33NR3+nP8Gw28eLZiVySg5GLb/jGb+GnUsl3je+7U9wufJNL8jnO
0FGxz2PPGcfxOGvEbRKzGR/FmZqe8R96119xNV1R34y++2M98ENad2P8MY+J
6JTeGbqm5/5ufG8sG3lFvCH6DcNOehs2835JD0V5fY/wXuHdTo/CbvpdrNfe
gCMxR/pjPEVvxTHeW/RruWQNYy1XxJnifW/mkj7Rd2PURfok3oj7C70Dp+J7
pveSAfRglCtI7gNxLzhCH471jTqME9pvx/eMtY+6K/Yv2aTuxn6KfVUzrbHv
8d5FDTEH0pxcTC/DH+mzOJBNvml820r6tRN7e15SY6PWrstP7hFT0nUbidX5
ybrH+i/Qdz4u0m9N3JN4V9JXx12nIPle8Q0m05NQiXeQ97D2I9ju2QuRA+m3
f4K3ENWiZqR535u+CqVjrrz30rh5kYP03jiredPpWXFu0h3SehD1uSjqHX0I
+3mPipmBqt53mPe7bNI33vFiLhlPjGsQbyDOF7eBtzL1bo39QC/BAl7V2KeY
SA/Gbbzysf8wgb4eg3hn4o6Ikt7Xi9eX9xp9DD/I0zm8mbxC/dpjFd0HA3iH
xBxEZ3o5FvJai2mLUgXJedQiPT8moyp9A25N99EHOFsqua/EveU4fSLOELqq
9fwwm5z7UWuj5u7hPyfuZl5/lC1I7tQ38t7X7yNkeF15h7WPFE/OtDjbBmGE
9vmRy7iXLib2YzF/R/9Y05h/Oreoz98gT8wKXqtsckePPRF745pc0if6fopz
xJ2LNmJaZpN1ifW5Etdpfx/1HwNDYyDvNP0dSuhXxfyKm+ehqLtRP+NuIK5s
NhlzjH1ALqn5+9J9eQueifMSvXl/865/4Fp6PupHbc0m+R/7YHW6F8Kri7n0
LRjO+zruzsgWJOdjnJP97Kvr0Yp3RZob34r5H26m94ibGXU57i44HnMQ+7nn
n2Co+P7i6qKZ9oO8iShPN8ol/2cepx/Dl/LgJt4QXsmoLRie1t3e6f+eXfHb
4lbyFvNqxZ0u9gl9mr+6eHJ/iTVvwTtmPEvTO/pKdDe2ZWmeVov6gMl0yzT/
4v78JL71rqLYS7w6YmpjNj0UJbLJ+GKcN6Z5v0j7Yl51PExvwVre5XQvnOd3
N/PW8LrT3VDA287byutKd8Fa+sl0T0cOtUC+uMW8JtpNY66ezUjXbZj2eVGD
MCbqjfk+bp5z0joZd9P43xn/P+8zr3Gxz3PJuf9MWhOviJzOJesU65UfNRsj
6Vq55E4Wd7PxKBX90ro7z28sQFfjq8H7TJ/PcUZ8afpnRm7SxA==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
+5Pbwn9pTylfxFW8O0npR96ryJ9zk9oxcf00T+wn0d7sjMjn+n21z0+8Pzwg
/G+DkI7Skw9B/659We/Ee6ehgevsMlR+icjnDu2TtCe5Gv6G5rPSMM+Wes7S
WqY5bArPG4N+Zqnnc813OnOpzutHnv83hLmiR+K9ysuJz0TyLehMJb3OUq/I
ZxLZ/6Ezi85oDeBDEvuytOe8LPFZRnXzIvZvJt5DDgRbk9fz6N9E3zbyt9pP
3h1579Qu7KPuBd/OvZ/UOa0feHvmM5rOjJ8m3vu9mnhPqb2lvpGN9oPDcu/B
bkP/MdgF3Q3wbtq7Rt779db+NjN+jP1bifdx7+e+270Rmw/QPR65nuUvk01L
ncU0r0Y+O6oOdRa4Cf4h+md5vgX+Ebx75L2r8pWf4S7405FtLg/7z/dVL/BR
4B/Mh1/RFlvATWGdK018P6i7Q90Tt8+cjuyHR/72Q9Wh6g0+Hv3HPHeEfwZ+
HsojPlF9KZTtS6ULn6765N3D+q/I+mHg6Nzptg574Hak3wE+IbEfYC3vZue+
l5ys84jOhal917oPkg9Z+lrw/YIPtmawkS92mfoGadyjPbPGYmz/ba3Yvgn5
JQ4CD0Dmw4+Wjze2XjbSy2f8a25/h/we3cjzgOD7lQ/4Lp6HqA6w+YQyP4B+
ivY1kf088m8uRnrCF6HvjH13+Az494l9OA+iWxPZb6N/Xh24dHOwWQB+Q/qd
sHsS/cKQznfop+VOv2Ootx9Dvsr/W9UjOAObH9Q/Cn5+UeuYxmDk8dIWPgbb
QZH784DI/jHNS5qf5B9rWvB/6nyhNn0bbJv5rPEZNuMj//u4oJePbST5vhu5
n6v+5UPTGHkPnBzZt/NN5DsC+eoPo47PoE5nF3znIn/gV/D95P/meVjB/jit
iTqLPEz6Jal9ZosDl/+8Zmr/vvz8ZeCjme8Mf8amEjiqYL965dj++b3B3aVe
O7RutmQctEKaIBtj3xPpjunH1Hd2ul+bn/o8pfvHb5E7dZcXuO6PpuneAGkE
nwpm4e4jj31H2DTcN+m+rUOJ79+UfmvwN/Dn1Pd6cwK/C74ydZmUvspYN9x3
HIe+KLZ/T35H3SmoDuukvjuRb/yY2PdWCwu+86id+p6lR+a7D71fHe59NM7W
574z0n2X7vueynxv+XvufMeHdlHd6h7qRHj12L7WauHuQ7gU+38T+0G/E4/s
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
e63NHfemc9nK3DFt8jn8H1PXYK8=
            "]], 
           Polygon[CompressedData["
1:eJxNm3W4VVW3xs/Zh72WzLX3sQvFxG5R7A4UUQRRMT4VUZESMbEAUbAQFVts
xS5E+AxEQhpFykYBRRADbMDgvj/fcZ97/5jPHmPNWGvWGO+IvfnZ3dtcUKqp
qXm6rqamgX7/k9fUfKsHS1TOED021dRcKvq/WU3N29Wamq/0e7P4W1S+Ft28
cPtT1fZX1V+s31/E/6qyl+j9VP+F6NNF/6b6J1W6ql8HPRussY9U/WLRJ9FP
dS3F/yD+PPF/iH9C5R61b6dnQ9R+L9V/Krqz6leo7pZKTc2P4s8Xv1z8LJWq
6NF6tqnaDhHfQ/0PFz9A/Z8X30v86eLPVd/HxHcQ31b8HcnznyN6dsxppup/
V/3DzEn1z4nvLf4E8Y+I/0z8ntGnr8ZroXd+L7qDnv2uumlq00f8cPUZKf5u
1W+htb5X9Q3ra2oW6Nnmoj9Qm01Ud6DKAtF/qBxSeM1OU/3cktfyCZWd1X+i
njVS/8fE7yT+AfFJ/Cnil6vtV9H/Yz0/UPUHqMyJNT039zey1j+KPl11/1F5
VfSnKk1F767ykejT1GYFe61yuOjhKruobqrqNtL7JohvLX6G+I3FvyW+efTd
RPy24qep777il+jdz6pcqbU4Us8e09p8p/oL1f40lUWiX8+8XteqvCH6c7Vf
R31fF7+O6ucUbkufJaL3V5mvut9VDhB9dOGzu4ozJfpM9Z0ienKcwb1zf89U
lbNij87W73cl791ElTaxVo31/c3Ef6K6o8QvVdtHVdrH/t+q798j91lh/zkH
fdR+TfXvK7qk/oPEbyZ+gPhyvc8AZ6GL2l+o8/KS+OvFdxL/nMYbo3KJ6GF6
9qrKi6rvq9//cCfU/gXxfcSfL/5ptd2t8Pt30/iLVPeAygmq31zPeqr+BtWv
p/cPUv1q9T7DnOVhKmuo7ubc37epymuie+nZGqL7iK5V+xeS3/28xnxTY08V
31v8UPFviV9L7V/jLsR4yAhkxVniR6ttWz37WXR3jbdSdS/q2RniX4753ZL7
3XzDpaJPLCw/LhL9p9pfpt9CdSnqeSfv7syYFcubL0uWMfThG/nWi8RfoPoj
c5/dhSpHi75BZR2NtbZKf9HPJ8uCp9XnjarPX9eS94d94vwwNu+oZ3w9a1/y
/JjnOPWZrN/bxH+usbbS908Qfbza/qy6R1TOUv2BenZd8jniPCHDjhH9jOov
V/254l9V/Z7cWe6a6n5A3urZneKfUflBdEs9Hy/63ej/oNqcrP7Hib+GvUVe
iD9e/PXi7xV/rPhNxHdLnv+2mvt2KjeKfkj1p6p+P9X3Uv3Q3HcfGXCJ6PtV
f7zq91D9Faq/L8ZrKv5y8bPF/yX+Ce6g+GbqM7zkM9FU9D2qP1r1GyOjVX+3
+ObiNxJ/jvgmhefDvH5S3Xcq+4v+kPWqWH5xH09Q+STuYPPca8TdRN4cqbrv
9ayJzusHGvN61U3UO8ZWfeYuYOySzyL6ZpHov1SOE/2Y2l0l+mqVJ0Vfpmeb
a7ye6vO3+m7MmVbdduJ3VJmu8a8TP05tR6v+0+S9nyB+TNVntkfuM89Z3owz
K/pNlcZ8t9oPFD1G7d+pWn+i//5WaS36GJVvRP/JGUN2ql0/0f1VpmfWD8j2
Q5Hh6r+EPRH/InMSPUzP99T376HymehzC8tCzvwloj/QGD2QPTHejOTxec+7
Gq9N4bVizbqp7Cp+lvidYv7vZV4r1mxKZv52dKfK+6L3VvvPRHeN/u9q/CvF
P6S61zT+qOT38x0TxC/PLDseVVmRWUccwHtK1h3M8ZDcOpG5LxS/vfhXxa8u
/mvOFPdffadwVvVsqfgGmu95oj/Ss7rYgzrxH4qvFT9E/Er1XU3PXhJ9f6wf
9+0u0Z9ovElq+w13SPw34keJ/1gly30fV6mug/r/UzIGYv8OKyxrVqIzRF+j
MzxS9FbIIfWdn1m39YlvHhvy/kvRU1W/IM7vd+LfF/928l49If6/0Z/53qOy
QHRV7xgq+kGVcpy36SXjCXDFSPXvjnxW2+GB3y4rGdPNy3z/kFdbq+1Xqv9E
ZTXRz+pZLfpW/N+Z9e+fyKLAbmervJ0ZL6Dvj1K5SfQrhbHGC6LX1H28XfxG
4p8Vv4b4weK3Fv+k+NXF36H12Ur8o+Kr4ndW/QzupvjWuXEN+AbM85Dowehw
0fuoPCh6gNpvKPph0ZV6/8Jv8P/aNxG9pcp9McctQ4Yyd+7P/bHe71Uts09Q
/cSSZfkIlUPVd5yebVBvmXyY6I9KltVL1X+w6Fdi/WeonKL236jNFmr/Y9U6
iD3pp7kOVH0j1T+uZ/WqX6b6FrnPzO6qe0/lJNXPRy/XGxOfmFtmIbvGiD5W
9cepvBsys1XuPWQ+76ucrLqv9Gxz9T+jsCz5Js4jmLlL7jsKlv62apwPZrq5
4vvE+Wf/l4keiUzSeK+rzdoab33xb6huY/Hzqr4/yJ710cPih4k/WO3fRM+q
/RXi6+uMIc8srF82Ed9Y5SXR36jPDrHevfX+kto8V/IZ5/1XV6zrNlWb+Wp7
deAT5nROYcyza24ZBRZivty91etcv3rcj21yy47TxVfrjJHByjP07Dft/U3i
f0zGxGDjWjCx6FEqLUW/rf7raj6Lq9Zr6DewD5gR7FijNqeK7li4L2PAv6Zy
iPh31Ge9ettIp+SW+cj+l5Pv093gIXR5YSwL5mknupNKqc42Ed8zUu16ontV
ForeRf1/rpVcK0tOqP81uefOml/NXdA7J+l3X+6k+t+p9s1LtoGwhR5Ptn3A
oGDR9dV+dO45v1MY7yArkBlvIXvAMCVjUrApd/yFwBR3aa8eTcbGYFSwKjYK
tsphqr9f9ReBWUvGBGCDG8UfLP488Y+DJ9X+c7U/CHtE778jsCSYa1DmOzgu
ZMJLqn9X5XjR74HrY41Z6x317PnCe8be7YXNpfefrzEO1ViHqHQU/UAydsIm
xTal/iTxJ6t0ynw+ftXvQ+J/AQsnY+v99ezOqu3DP8Im/ll1nQOLHatyV2b7
cD+9f0zJ9ui+hW25dnp2ssrWhc9+2+CvUp826BKVnpn58/hWlaszy4OT4rzf
qPm8noxVB6juFdU9KL6V+IvFP1W1jYatdjh3WO/qkYwFwXBgOWQQsgibbpDG
a6vnW5Q8R+wIZDSyej9klvr3ScaKYEywJjYSthIyf3DFNjq2ejfVD+Zb9buP
+L1VumSW8Y/GeXxR4x2rPr/p/C7Q+b0E3a/+tWr7tfhLA09dFBj8BLW/Onk8
MC/Y939lPvrhdo31ZuDBWXo2U+XSZKzKfMHC/ZKxODYcthw2K7br/tjQ6n8Q
36j6Suwx69EMWalyYmaZimxFJ4wvLKOR1dzxMdiyGn/XkjEuWPdAzizyUeUA
0Zuq/Re5ZSSy8gK130V1h6vuLmzj5Pex9thyZ2Q+C5yJMzPzB/BtyAPRN6j9
QSX7MPBlYHN/FBj+DY0/RGVX0dNjPZ5V+9NKtsGxxT9Q+UX0jejAwPN/gjXE
/5Gsv47IjTkPLqyvjs2to3cqjMexaZDRu4Q8xhZ9Bxmg9eykMXYQ3QycyFiB
v9uEfkd/gf2xh/qr/RFgMtE7qv3AqvEfWPd9ZFTF+hfbaBxtNNZ2areN6G1V
thd9esW2xraiB1RdvzayGowj+gs92yC3DlsPWz95b9ZU3fVV6zB02Vg9u0pj
rZO5nj1cN7MOQhe9LD6p/1nqvzX3BR1StT+nSW7MtyH6CJtQ9CbsFe/mTomv
RwZl1knbhP7uVTFG3CrWFyyEftw5t72+Jra8+izXfflDZe3M31enulLMgfPL
3eUOHyz66OSzTNt+Gmuuynq5dXYG1ki2xZogw6rGA+1z219NC+NxfDf4WLZj
v3UvV+rdK1Q2DIwKdgJDfZ+Mtxuo/dPi/xbfWmU90VW1uU51u4v/VX1z8X3F
T1SZI3qQ2sxX3eEquehVek9v1dVk3jv2sDYz/4/6/01Rm4HJvr1L9fzpqvHq
P8hyPVuejNfLsR95YXyb57bpCvGd1WZH0fvyDaqbrPJZ3Ic5yTYKtgr216Xa
n8P0LBP9p959TdXntSFrCa4P/Hh84Ksb1H7P5PX6Se2vrNqftWZuH9S6YIey
9449/L5s+/egOH+bq/4HPfsK+aiyRPQO3Mlat+1cdX/4H1QWi56mZ4sz2yyL
k20i7AzsjZ4VY1z2CxvjC9Ufo7Km6BXqe3XV54vzggxcX/Rmqp+vsb9VfU/u
k/jvxS8Sf3nVNi+2LzbexRp/QtlngzlPEv2P6q/IjbkuR96Jf1/Pl6m+hdpf
Jn5h2e/YVGN3Ez9d/CLxWyTjGvDNLyqfiJ5d9t5zBj4SvT4+2FqPydjoDHQH
33hcxed97dC/V4pfkzOhunGM0VBzFT9H9GiV38VfzB6p/yrxOyXrJHTTPPGN
2WuVmaJf17NzVbe1+CW17kPf7iqzRP+lZ3urbmOVL0R/qmcXVf0LPzfmwx7+
rN+ltd7bN5mj6Fkqb5S93uztONGdqi7QzOHIis8HsgCZ8GPZ/RezXypviV6D
NRT9jujz1beryntlr9m6quuIjVn2HNYTf474EWXPMU8+v3+KnqpnXaoeg7G+
07NGqquP9WMMxjpPZWTZz1hbzsNC0V+rLAuMyp4y/23wBXDf4v1biX9d/DOZ
/ZuvJX8D3/K2ytKGxjgDAqOdr/m/LP4m8S3E35uMoe8OjPyK+GXq85b6fsD6
NLSPD18fPohu6j9ZbXqJfhG8mhk/YytiM/bKbb9wdq8UvUp9b8uMt/AR3p4Z
n7YUfYzKwMz1YMeTApOVk989THPsAFbUN4yp9Z78KXoo66l23dT+zeR2tJ+u
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
EfId/ICty3/lyI39H+zY1s4=
            "]], 
           Polygon[CompressedData["
1:eJwt13e0VsUVxuGPyL03fvcaFQFDMxQp0sFCVRQEbMClqRQLUuwFCwQjERDB
Eg0ggnQEpNgLTaVbAemgSQRRkkAUTdQoJpGgz15z/vitNe87e8o5Z2bPnBrX
3d7jtl/kcrm3UICXi3O5tsflcjuKcrndmFGSyw3EPYW53J3oI3hxPpd7CYOU
7+Ddjhn0ZAxRHoze6ubT63GX8p94H2MnfQBfKn+FB9XtoGdHXGHqL/p9hb4K
1ZW783rgt/Ri8zvH/F43t1WYam7PRay4MWJGx/i84fiz8l9wv7rNYt7Fvcrv
8jbibjHP867mjYu5YAhvXj7NP55jECbSpxi3nPFOwfPqytJTxK4sSnOJOS3i
zRHbU/0A7a7Fw/R0dOP1oa/ESPqDfJpXzG9fPJu+9vAe4v2b/g7/pOvo831e
E2M0xv3iqvHW8BrRTTGKN5NX1xwW089hMu8s3kfizqfb4QHeBH125A3T/wg8
TR9DTv1P9OvqTtVuBe8m5Yd44/EsvZnf2xj7xX6CWfrbxh8j7pCYf8Q3pndj
PO8b+lscpu8Te5o2VfCWulr6qoLVykW8QhTFfMUeLEz9Rb9b6Tf4HY37uZgv
sJ2ujy3qz6MvwFj9zxJbyrtb2+Hx7XhLeTfwRsU6wAJ6ZhbXj+4ba4aurL+q
+qmEreoa0DWwId4HryLu1d+bYmPDzNBuOm7ijcB+5b3xvdV9mE/PF895oXad
0YRuip28HnRvPKRd3ez7Xkn3Q6vi9C3red5x9IN4jD47+5aD6MFoX5zmGHNt
T3eMWP114B3kdaW7oDk9Fw31N4V+En8U9zDv1Mybhun0gpgjbyH9DCaJq5m9
g1hDHdCQnh3vX9zjMbdAXAvex+JK6W4Yx2vJ28vrRffEeN5LWX6JdboI8+gn
+EuK0rgx/jO859FaeS5vTqy14rS/Yp9NiGfAE3Q7DCxK7yXeT6z5873/srGP
JLRv0V3/l/BO4n1Pf4dz6IX5lM8irw3FdeIa874uk8v9IOZ/aBV7F+XFFYgp
i3b0BShULoq9Kr4pPQ230rehg/hH8mncE5Ur86pF/jRGX9RQromT1V0q5mLz
Pqx8necYgEdi//KP6PtEceXQOct/LbyDyfH8mEKfG/tX2+PFlOBybXvxKvGq
0lUi7/Dm8nrxBsaz4jG6E/K8YjofeVvcRMzX9wLUMdY0Y8xHE+V5vKcxQcyM
LOeMjdwSc6Y3ohdvH70XM8XV5r0Xe4quj9/zfsXLKx9flHJZ5LQVuFDbzbxN
sS5jXfDeUH4TDdTNoUfy69FnFKX8EXlkNK95UcqTsZ9iX8Vaa6PNlsgZscbF
tOUdyPLGudEH3Qg7eLXp03FacVr3sX8jX1XG77Qtz1vJ+7/3dBQ/eHf1sjxU
QUx5VKCro45yXbyi7gT6THyo3JbXBmP0t5DXzPx20R/GOUK/Gmuat4JeHvu1
JO3fePZ4B2sivxenHBO55nvzOBJ5NtYp/3b1d2Cfutbx/MWpHN7Q2If0psgR
yoeK0vuO916Kr8XdwrsZfzDuVF5t9aPi3Ik508MwXHkYqqubRE+O96V8L29E
5MlYK+bzjbX7oz10DG3p5fwLxH0m5gDeiVxinC+VD0f+U7cn8g26KW+Mbxnv
kH46y2Fr6Q14ka6EVbEv6bI4jn422x+r6XV4Sv8Vi9O5FufbMfxoLlWzMzTW
3y9RTC+N3JGdb59iPd1S7FHP8V/PcBS9IsfyCrStrq9a6EoPwIXKHVFZXW96
bXb3eYn3YuQFbc/jlYk1QZ+EK0rSGRdn3Tp6beSiyKe8H8ukfPUf9OS9w3tL
/duF6QyKsyjO6RuVX+C9HHcxcRdle/osukXsfbp/nDXKp0c+UHcF70Vco/wa
bznW0SfjI+OuN+YGdMrmEu9gO70Np9NrcKe2z8XdALeKa5+9l8idR9Aj88pm
eeg3uCxyLqpF3gsdbekG+JcxNmm3EZ1L0j2zT3bWzsZr8fwYwZtGPxXPTL+K
wbxZ9Fzcou2hyOOF6Q4Sd5FddDPfc5fy5b5tHzws7kleLd/8vtjjGEk/yr9e
eQi+Et+Ft1/7Sco79bcDW+iNGJl5ezCsJI0T4+2md+GeyFVx383e6TpUzqec
Grl1jDFGx3lJP4WpRSm3xxqOtfx+NsYSfS2O+xm9BH15c+h58e3o7XiA9zn9
BT6h3wuU3491oW5V3KXijFKeypuCG81vdT7VR9xmbMqnPBs5Z5K5TMTj4pbF
fUN5W3ZOx32hcbbPd3quHbgke97DvE/pv6JrSfrmpxmjqf6b4CpeaXauNqab
4eq4T2f3zlfopfE/wOvOq8BrTp+Na3hvZ+tgA/0O7uJ1yafzNM7V2ujHG8w7
IxujEXrGWYtiXku6TcTRy7J9NJZ+AIvoW9CY14FujwH6G8rrqtwt1rO6vrEP
+OsL01xiTrFG++dTfcSV4u582nOx9zrTF+GGfLqzduddRffHWPryfMohkUs6
xT021i4OeZd/K0j5I/JIzfC85xW85cjn0z9X7+ze/miMYW6VeHuzb7QHdemG
2T1nK70FF4trzfuJt5f+GPXpE7CyII0RY9XKp7tO3Hk+4e3DZdrWyb75WnoN
KuZT7KEsb+zCpZGbsFn5AxxUV0PMmdk95yDv7+gW3xKfFaQxYqzmYl7I8tUj
cc/G9XG34H2hfrW4VShHl/I/L0j9Rb9xj4pxYrxlvKUopHugov7O0VcrXKtd
m+wuFWt3Pxrl07/ooCznzMTNJen/I+7e8b/w64D+GbYR/PY=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ktLVGEcwOHXvGbeZjRb68LAcNvGQPcSqIx+gEBBF7lQWhjqWlok2Nad
zcVbOloaop9BdKOIUmKMSi6MkgYv9BwI5jfP/8A5vO97OA2vhrpfF4QQ3mm4
MISYi52iEJqYZys71afnxSGMsoPvOcJZftWGLh+GsM6f/MILfuY517iqnDnL
H1zhKZd5wk9c0nfzIr9xgcec5xHnmNGhOc0DprjPJD9qSjP29pZv2M+X7OIL
PVWj6zhvnPHO2Xd5xj2lzNucYIa9/MAWTnBQheYeHnpn7czyGSdZz+idPtBV
qXv5ix4Jv2npUKI/Zr9w7a+Mf+kYIc9yPtKNuYJ3rOQ9qxg9UI2aaC1zLFqP
8WhvrGUR6/hYzVq2kTYeMBHdb0MDfMJxTithTnOMW0xyl5vM8fb/d/IPeIBK
Xg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0k9L03EcwPHPJiVTGt7Ci6E+BIPZLW8FdQk8VnP9d7alSD2GWKfoAdhD
KLRDa1lqaa0/x8KSTTalKMRwI42iXtLhzevz+50+v+/3158rnikkIqKkBwci
Xicj0p0RNWbYYqojok/Tnod4myf4kGc5pUl97464wW8s8isL/MLrnNCmOc8m
x9ngNa7zKq+obr7MGi9xjRf5mReY06p5jB+Z5Qee5zmd1Ce7HeUsj7DELrZ9
T11Zz1Ue4yP28D7vaONgxC1WmOM9nmaewxzUiDnNXu45wG1n1+Qy3/Oxyvvv
UxFP+IMV7vAp59UyP2Obz/mTC9zlIpf0y/yCv/mSf7jMv1zhq/3L63JvTLDK
JN+wg2/5Tg1t2W2Xh+18yO7HOcBRZnhKd81jLPMmmyxxjzOcS/7/T/4BCQ5X
EQ==
          "]]}, {
         Line[{2033, 2031, 2054, 3232, 2055, 2082, 3055, 3240, 2102, 3255, 
          2103, 2123, 3072, 3268, 2143, 2144, 2173, 3289, 2174, 2203, 3297, 
          2204, 2224, 3311, 2225, 2244, 3097, 3324, 2265, 2266, 2295, 3345, 
          2296, 2325, 3353, 2326, 2345, 3367, 2346, 2365, 2366, 2392, 2393, 
          2422, 3386, 2423, 2451, 3394, 2452, 2472, 3133, 3408, 2493, 2494, 
          2520}], 
         Line[{2034, 2032, 2056, 3233, 2059, 2083, 3242, 2085, 2104, 3066, 
          3257, 2124, 3073, 3270, 2145, 2148, 2175, 3290, 2178, 2205, 3299, 
          2207, 2226, 3090, 3313, 2245, 3098, 3326, 2267, 2270, 2297, 3346, 
          2300, 2327, 3355, 2329, 2347, 3115, 3369, 2367, 2370, 2394, 2397, 
          2424, 3387, 2427, 2453, 3396, 2455, 2473, 3134, 3410, 2495, 2497, 
          2521}], 
         Line[{2036, 2035, 2058, 3234, 2062, 2084, 3058, 3244, 2105, 3067, 
          3259, 2126, 3074, 3272, 2147, 2151, 2177, 3291, 2181, 2206, 3083, 
          3301, 2227, 3091, 3315, 2247, 3099, 3328, 2269, 2273, 2299, 3347, 
          2303, 2328, 3357, 2331, 2348, 3116, 3371, 2369, 2373, 2396, 2400, 
          2426, 3388, 2430, 2454, 3398, 2457, 2475, 3135, 3412, 2496, 2500, 
          2523}], 
         Line[{2037, 2039, 2061, 3235, 2067, 2086, 3246, 2091, 2107, 3261, 
          2112, 2128, 3274, 2132, 2150, 2156, 2180, 3292, 2186, 2208, 3303, 
          2213, 2229, 3317, 2234, 2249, 3330, 2254, 2272, 2278, 2302, 3348, 
          2308, 2330, 3359, 2335, 2350, 3373, 2355, 2372, 2377, 2399, 2405, 
          2429, 3389, 2435, 2456, 3400, 2462, 2477, 3414, 2482, 2499, 2505, 
          2525}], 
         Line[{2038, 2042, 2063, 3236, 2071, 2087, 3248, 2094, 2108, 970, 
          2129, 3077, 3276, 2152, 2160, 2182, 3293, 2190, 2209, 3305, 2216, 
          2230, 1134, 2250, 3101, 3332, 2274, 2282, 2304, 3349, 2312, 2332, 
          3108, 3361, 2351, 1299, 2374, 2380, 2401, 2409, 2431, 3390, 2439, 
          2458, 3128, 3402, 2478, 1422, 2501, 2509, 2526}], 
         Line[{2040, 2044, 2065, 3237, 2075, 2089, 3061, 3250, 2110, 3069, 
          3264, 2130, 3078, 3277, 2154, 2164, 2184, 3294, 2194, 2211, 3307, 
          2219, 2232, 3094, 3320, 2252, 3102, 3333, 2276, 2286, 2306, 3350, 
          2316, 2333, 1262, 2353, 3119, 3376, 2375, 2383, 2403, 2413, 2433, 
          3391, 2443, 2460, 3404, 2467, 2480, 3137, 3417, 2503, 2512, 2528}], 
         Line[{2041, 2047, 2066, 3053, 3238, 2090, 3252, 2098, 2111, 3070, 
          3265, 2131, 3079, 3279, 2155, 2167, 2185, 3295, 2197, 2212, 3087, 
          3309, 2233, 3095, 3321, 2253, 3103, 3335, 2277, 2289, 2307, 3351, 
          2319, 2334, 3111, 3364, 2354, 3120, 3377, 2376, 2386, 2404, 2416, 
          2434, 3392, 2446, 2461, 3131, 3406, 2481, 3138, 3418, 2504, 2515, 
          2529}], 
         Line[{2043, 2053, 2068, 3231, 3054, 2092, 3239, 3064, 2113, 3254, 
          3071, 2133, 3267, 3080, 2157, 2172, 2187, 2202, 3288, 2214, 3296, 
          3088, 2235, 3310, 3096, 2255, 2264, 3323, 2279, 2294, 2309, 2324, 
          3344, 2336, 3352, 3113, 2356, 3366, 3121, 2378, 2391, 2406, 2421, 
          2436, 3385, 3124, 2463, 3393, 3132, 2483, 3407, 3139, 2506, 2519, 
          2530}], 
         Line[{2045, 2057, 2070, 3241, 3056, 2093, 3256, 3065, 2115, 2125, 
          3269, 2134, 2146, 3281, 2159, 2176, 2189, 3298, 3081, 2215, 3312, 
          3089, 2236, 2246, 3325, 2256, 2268, 3337, 2281, 2298, 2311, 3354, 
          3105, 2338, 3368, 3114, 2357, 2368, 3379, 2379, 2395, 2408, 2425, 
          2438, 3395, 3125, 2464, 2474, 3409, 2484, 3420, 3140, 2508, 2522, 
          2532}], 
         Line[{2046, 2060, 2072, 3243, 3057, 2095, 2106, 3258, 2116, 2127, 
          3271, 2135, 2149, 3282, 2161, 2179, 2191, 3300, 3082, 2217, 2228, 
          3314, 2237, 2248, 3327, 2257, 2271, 3338, 2283, 2301, 2313, 3356, 
          3106, 2339, 2349, 3370, 2358, 2371, 3380, 2381, 2398, 2410, 2428, 
          2440, 3397, 3126, 2465, 2476, 3411, 2485, 2498, 3421, 2510, 2524, 
          2533}], 
         Line[{2048, 2064, 2074, 2088, 3245, 2096, 2109, 3260, 2117, 3273, 
          3075, 2136, 2153, 3283, 2163, 2183, 2193, 2210, 3302, 2218, 2231, 
          3316, 2238, 2251, 3329, 2258, 2275, 3339, 2285, 2305, 2315, 3358, 
          3107, 2340, 2352, 3372, 2359, 3381, 3122, 2382, 2402, 2412, 2432, 
          2442, 2459, 3399, 2466, 2479, 3413, 2487, 2502, 3422, 2511, 2527, 
          2535}], 
         Line[{2049, 2069, 2077, 3247, 3059, 2097, 2114, 3262, 2118, 3275, 
          3076, 2138, 2158, 3284, 2166, 2188, 2196, 3304, 3084, 2220, 3318, 
          3092, 2239, 3331, 3100, 2260, 2280, 3340, 2288, 2310, 2318, 2337, 
          3360, 2341, 3374, 3117, 2360, 3382, 3123, 2385, 2407, 2415, 2437, 
          2445, 3401, 3127, 2468, 3415, 3136, 2488, 2507, 3423, 2514, 2531, 
          2537}], 
         Line[{2050, 2073, 2078, 3249, 3060, 2099, 3263, 3068, 2119, 1013, 
          2139, 2162, 3285, 2168, 2192, 2198, 3306, 3085, 2221, 3319, 3093, 
          2240, 1177, 2261, 2284, 3341, 2290, 2314, 2320, 3362, 3109, 2342, 
          3375, 3118, 2361, 1327, 2387, 2411, 2417, 2441, 2447, 3403, 3129, 
          2469, 2486, 3416, 2489, 1450, 2516, 2534, 2538}], 
         Line[{2051, 2076, 2080, 3251, 3062, 2100, 976, 2121, 2137, 3278, 
          2141, 2165, 3286, 2170, 2195, 2200, 3308, 3086, 2222, 1140, 2242, 
          2259, 3334, 2262, 2287, 3342, 2292, 2317, 2322, 3363, 3110, 2343, 
          1305, 2363, 2384, 3383, 2389, 2414, 2419, 2444, 2449, 3405, 3130, 
          2470, 1428, 2491, 2513, 3424, 2517, 2536, 2540}], 
         Line[{2052, 2079, 2081, 3253, 3063, 2101, 2120, 3266, 2122, 2140, 
          3280, 2142, 2169, 3287, 2171, 2199, 2201, 1103, 2223, 2241, 3322, 
          2243, 3336, 3104, 2263, 2291, 3343, 2293, 2321, 2323, 3365, 3112, 
          2344, 2362, 3378, 2364, 2388, 3384, 2390, 2418, 2420, 2448, 2450, 
          1391, 2471, 2490, 3419, 2492, 3425, 3141, 2518, 2539, 2541}], 
         Line[{2544, 2542, 2565, 3427, 2566, 2593, 3144, 3435, 2613, 3450, 
          2614, 2634, 3161, 3463, 2654, 2655, 2684, 3484, 2685, 2714, 3492, 
          2715, 2735, 3506, 2736, 2755, 3186, 3519, 2776, 2777, 2806, 3540, 
          2807, 2836, 3548, 2837, 2856, 3562, 2857, 2876, 2877, 2903, 2904, 
          2933, 3581, 2934, 2962, 3589, 2963, 2983, 3222, 3603, 3004, 3005, 
          3031}], 
         Line[{2545, 2543, 2567, 3428, 2570, 2594, 3437, 2596, 2615, 3155, 
          3452, 2635, 3162, 3465, 2656, 2659, 2686, 3485, 2689, 2716, 3494, 
          2718, 2737, 3179, 3508, 2756, 3187, 3521, 2778, 2781, 2808, 3541, 
          2811, 2838, 3550, 2840, 2858, 3204, 3564, 2878, 2881, 2905, 2908, 
          2935, 3582, 2938, 2964, 3591, 2966, 2984, 3223, 3605, 3006, 3008, 
          3032}], 
         Line[{2547, 2546, 2569, 3429, 2573, 2595, 3147, 3439, 2616, 3156, 
          3454, 2637, 3163, 3467, 2658, 2662, 2688, 3486, 2692, 2717, 3172, 
          3496, 2738, 3180, 3510, 2758, 3188, 3523, 2780, 2784, 2810, 3542, 
          2814, 2839, 3552, 2842, 2859, 3205, 3566, 2880, 2884, 2907, 2911, 
          2937, 3583, 2941, 2965, 3593, 2968, 2986, 3224, 3607, 3007, 3011, 
          3034}], 
         Line[{2548, 2550, 2572, 3430, 2578, 2597, 3441, 2602, 2618, 3456, 
          2623, 2639, 3469, 2643, 2661, 2667, 2691, 3487, 2697, 2719, 3498, 
          2724, 2740, 3512, 2745, 2760, 3525, 2765, 2783, 2789, 2813, 3543, 
          2819, 2841, 3554, 2846, 2861, 3568, 2866, 2883, 2888, 2910, 2916, 
          2940, 3584, 2946, 2967, 3595, 2973, 2988, 3609, 2993, 3010, 3016, 
          3036}], 
         Line[{2549, 2553, 2574, 3431, 2582, 2598, 3443, 2605, 2619, 1544, 
          2640, 3166, 3471, 2663, 2671, 2693, 3488, 2701, 2720, 3500, 2727, 
          2741, 1708, 2761, 3190, 3527, 2785, 2793, 2815, 3544, 2823, 2843, 
          3197, 3556, 2862, 1873, 2885, 2891, 2912, 2920, 2942, 3585, 2950, 
          2969, 3217, 3597, 2989, 1996, 3012, 3020, 3037}], 
         Line[{2551, 2555, 2576, 3432, 2586, 2600, 3150, 3445, 2621, 3158, 
          3459, 2641, 3167, 3472, 2665, 2675, 2695, 3489, 2705, 2722, 3502, 
          2730, 2743, 3183, 3515, 2763, 3191, 3528, 2787, 2797, 2817, 3545, 
          2827, 2844, 1836, 2864, 3208, 3571, 2886, 2894, 2914, 2924, 2944, 
          3586, 2954, 2971, 3599, 2978, 2991, 3226, 3612, 3014, 3023, 3039}], 
         Line[{2552, 2558, 2577, 3142, 3433, 2601, 3447, 2609, 2622, 3159, 
          3460, 2642, 3168, 3474, 2666, 2678, 2696, 3490, 2708, 2723, 3176, 
          3504, 2744, 3184, 3516, 2764, 3192, 3530, 2788, 2800, 2818, 3546, 
          2830, 2845, 3200, 3559, 2865, 3209, 3572, 2887, 2897, 2915, 2927, 
          2945, 3587, 2957, 2972, 3220, 3601, 2992, 3227, 3613, 3015, 3026, 
          3040}], 
         Line[{2554, 2564, 2579, 3426, 3143, 2603, 3434, 3153, 2624, 3449, 
          3160, 2644, 3462, 3169, 2668, 2683, 2698, 2713, 3483, 2725, 3491, 
          3177, 2746, 3505, 3185, 2766, 2775, 3518, 2790, 2805, 2820, 2835, 
          3539, 2847, 3547, 3202, 2867, 3561, 3210, 2889, 2902, 2917, 2932, 
          2947, 3580, 3213, 2974, 3588, 3221, 2994, 3602, 3228, 3017, 3030, 
          3041}], 
         Line[{2556, 2568, 2581, 3436, 3145, 2604, 3451, 3154, 2626, 2636, 
          3464, 2645, 2657, 3476, 2670, 2687, 2700, 3493, 3170, 2726, 3507, 
          3178, 2747, 2757, 3520, 2767, 2779, 3532, 2792, 2809, 2822, 3549, 
          3194, 2849, 3563, 3203, 2868, 2879, 3574, 2890, 2906, 2919, 2936, 
          2949, 3590, 3214, 2975, 2985, 3604, 2995, 3615, 3229, 3019, 3033, 
          3043}], 
         Line[{2557, 2571, 2583, 3438, 3146, 2606, 2617, 3453, 2627, 2638, 
          3466, 2646, 2660, 3477, 2672, 2690, 2702, 3495, 3171, 2728, 2739, 
          3509, 2748, 2759, 3522, 2768, 2782, 3533, 2794, 2812, 2824, 3551, 
          3195, 2850, 2860, 3565, 2869, 2882, 3575, 2892, 2909, 2921, 2939, 
          2951, 3592, 3215, 2976, 2987, 3606, 2996, 3009, 3616, 3021, 3035, 
          3044}], 
         Line[{2559, 2575, 2585, 2599, 3440, 2607, 2620, 3455, 2628, 3468, 
          3164, 2647, 2664, 3478, 2674, 2694, 2704, 2721, 3497, 2729, 2742, 
          3511, 2749, 2762, 3524, 2769, 2786, 3534, 2796, 2816, 2826, 3553, 
          3196, 2851, 2863, 3567, 2870, 3576, 3211, 2893, 2913, 2923, 2943, 
          2953, 2970, 3594, 2977, 2990, 3608, 2998, 3013, 3617, 3022, 3038, 
          3046}], 
         Line[{2560, 2580, 2588, 3442, 3148, 2608, 2625, 3457, 2629, 3470, 
          3165, 2649, 2669, 3479, 2677, 2699, 2707, 3499, 3173, 2731, 3513, 
          3181, 2750, 3526, 3189, 2771, 2791, 3535, 2799, 2821, 2829, 2848, 
          3555, 2852, 3569, 3206, 2871, 3577, 3212, 2896, 2918, 2926, 2948, 
          2956, 3596, 3216, 2979, 3610, 3225, 2999, 3018, 3618, 3025, 3042, 
          3048}], 
         Line[{2561, 2584, 2589, 3444, 3149, 2610, 3458, 3157, 2630, 1587, 
          2650, 2673, 3480, 2679, 2703, 2709, 3501, 3174, 2732, 3514, 3182, 
          2751, 1751, 2772, 2795, 3536, 2801, 2825, 2831, 3557, 3198, 2853, 
          3570, 3207, 2872, 1901, 2898, 2922, 2928, 2952, 2958, 3598, 3218, 
          2980, 2997, 3611, 3000, 2024, 3027, 3045, 3049}], 
         Line[{2562, 2587, 2591, 3446, 3151, 2611, 1550, 2632, 2648, 3473, 
          2652, 2676, 3481, 2681, 2706, 2711, 3503, 3175, 2733, 1714, 2753, 
          2770, 3529, 2773, 2798, 3537, 2803, 2828, 2833, 3558, 3199, 2854, 
          1879, 2874, 2895, 3578, 2900, 2925, 2930, 2955, 2960, 3600, 3219, 
          2981, 2002, 3002, 3024, 3619, 3028, 3047, 3051}], 
         Line[{2563, 2590, 2592, 3448, 3152, 2612, 2631, 3461, 2633, 2651, 
          3475, 2653, 2680, 3482, 2682, 2710, 2712, 1677, 2734, 2752, 3517, 
          2754, 3531, 3193, 2774, 2802, 3538, 2804, 2832, 2834, 3560, 3201, 
          2855, 2873, 3573, 2875, 2899, 3579, 2901, 2929, 2931, 2959, 2961, 
          1965, 2982, 3001, 3614, 3003, 3620, 3230, 3029, 3050, 3052}]}, {
         Line[{883, 1272, 1269, 3365, 1268, 1265, 1264, 3363, 1261, 1260, 
          3362, 1257, 1256, 3360, 1253, 1252, 1249, 3358, 1248, 1245, 1244, 
          3356, 1241, 1240, 3354, 1237, 1236, 3344, 1231, 1230, 1229, 3351, 
          1228, 1227, 1226, 3350, 1225, 1224, 3349, 1223, 1222, 3348, 1221, 
          1220, 1219, 3347, 1218, 1217, 1216, 3346, 1215, 1214, 3345, 1213, 
          1212, 1234}], 
         Line[{905, 884, 885, 3232, 886, 887, 3233, 888, 889, 890, 3234, 891, 
          892, 893, 3235, 894, 895, 3236, 896, 897, 3237, 898, 899, 900, 3238,
           901, 902, 903, 3231, 907, 908, 3241, 911, 912, 3243, 915, 916, 919,
           3245, 920, 923, 924, 3247, 927, 928, 931, 3249, 932, 3251, 935, 
          936, 939, 3253, 940, 943, 944}], 
         Line[{946, 904, 906, 3240, 909, 910, 3242, 913, 914, 917, 3244, 918, 
          921, 922, 3246, 925, 926, 3248, 929, 930, 933, 3250, 934, 937, 3252,
           938, 941, 942, 3239, 948, 949, 3256, 952, 953, 956, 3258, 957, 960,
           3260, 961, 964, 965, 3262, 968, 969, 3263, 972, 973, 976, 977, 980,
           3266, 981, 984, 985}], 
         Line[{987, 945, 947, 3255, 950, 951, 954, 3257, 955, 958, 3259, 959, 
          962, 963, 3261, 966, 967, 970, 971, 974, 3264, 975, 978, 3265, 979, 
          982, 983, 3254, 989, 990, 993, 3269, 994, 997, 3271, 998, 1001, 
          3273, 1002, 1005, 1006, 3275, 1009, 1010, 1013, 1014, 1017, 3278, 
          1018, 1021, 3280, 1022, 1025, 1026}], 
         Line[{1027, 986, 988, 991, 3268, 992, 3270, 995, 996, 999, 3272, 
          1000, 1003, 1004, 3274, 1007, 1008, 1011, 3276, 1012, 1015, 3277, 
          1016, 1019, 3279, 1020, 1023, 1024, 3267, 1028, 1029, 3281, 1030, 
          1031, 1032, 3282, 1033, 1034, 3283, 1035, 1036, 1037, 1038, 3284, 
          1039, 3285, 1040, 1041, 1042, 3286, 1043, 1044, 3287, 1045, 1046, 
          1047}], 
         Line[{1069, 1048, 1049, 3289, 1050, 1051, 3290, 1052, 1053, 3291, 
          1054, 1055, 1056, 1057, 3292, 1058, 1059, 3293, 1060, 1061, 3294, 
          1062, 1063, 1064, 3295, 1065, 1066, 1067, 3288, 1071, 1072, 3298, 
          1075, 1076, 1079, 3300, 1080, 1083, 3302, 1084, 1087, 1088, 3304, 
          1091, 1092, 3306, 1095, 1096, 3308, 1099, 1100, 1103, 1104, 1107, 
          1108}], 
         Line[{1110, 1068, 1070, 3297, 1073, 1074, 1077, 3299, 1078, 1081, 
          3301, 1082, 1085, 1086, 3303, 1089, 1090, 3305, 1093, 1094, 3307, 
          1097, 1098, 1101, 3309, 1102, 1105, 1106, 3296, 1112, 1113, 3312, 
          1116, 1117, 1120, 3314, 1121, 1124, 3316, 1125, 1128, 1129, 3318, 
          1132, 1133, 3319, 1136, 1137, 1140, 1141, 1144, 3322, 1145, 1148, 
          1149}], 
         Line[{1151, 1109, 1111, 3311, 1114, 1115, 1118, 3313, 1119, 1122, 
          3315, 1123, 1126, 1127, 3317, 1130, 1131, 1134, 1135, 1138, 3320, 
          1139, 1142, 3321, 1143, 1146, 1147, 3310, 1153, 1154, 3325, 1157, 
          1158, 3327, 1161, 1162, 1165, 3329, 1166, 1169, 1170, 3331, 1173, 
          1174, 1177, 1178, 1181, 3334, 1182, 1185, 3336, 1186, 1189, 1190}], 
         Line[{1191, 1150, 1152, 3324, 1155, 1156, 1159, 3326, 1160, 1163, 
          3328, 1164, 1167, 1168, 3330, 1171, 1172, 1175, 3332, 1176, 3333, 
          1179, 1180, 1183, 3335, 1184, 1187, 1188, 3323, 1192, 1193, 1194, 
          3337, 1195, 1196, 3338, 1197, 3339, 1198, 1199, 1200, 1201, 3340, 
          1202, 1203, 1204, 3341, 1205, 1206, 3342, 1207, 1208, 3343, 1209, 
          1210, 1211}], 
         Line[{1232, 1313, 1310, 3378, 1309, 1306, 1305, 1302, 1301, 3375, 
          1298, 1297, 3374, 1294, 1293, 1290, 3372, 1289, 1286, 3370, 1285, 
          1282, 1281, 3368, 1278, 1277, 3352, 1271, 1270, 1267, 3364, 1266, 
          1263, 1262, 1259, 1258, 3361, 1255, 1254, 3359, 1251, 1250, 1247, 
          3357, 1246, 1243, 1242, 3355, 1239, 1238, 3353, 1235, 1233, 1275}], 
         Line[{1273, 1333, 1332, 3384, 1331, 1330, 1329, 3383, 1328, 1327, 
          1326, 1325, 3382, 1324, 1323, 1322, 3381, 1321, 1320, 3380, 1319, 
          1318, 1317, 3379, 1316, 1315, 3366, 1312, 1311, 1308, 3377, 1307, 
          1304, 3376, 1303, 1300, 1299, 1296, 1295, 3373, 1292, 1291, 1288, 
          3371, 1287, 1284, 3369, 1283, 1280, 1279, 3367, 1276, 1274, 1314}], 
         Line[{336, 335, 2420, 334, 2419, 333, 2417, 332, 2415, 331, 330, 
          2412, 329, 2410, 328, 2408, 327, 2406, 326, 325, 2404, 324, 2403, 
          323, 2401, 322, 2399, 321, 320, 2396, 319, 2394, 318, 2392, 317, 
          316}], 
         Line[{1334, 1395, 1392, 1391, 1388, 3405, 1387, 1384, 1383, 3403, 
          1380, 1379, 3401, 1376, 1375, 1372, 3399, 1371, 1368, 1367, 3397, 
          1364, 1363, 3395, 1360, 1359, 3385, 1354, 1353, 1352, 1351, 3392, 
          1350, 1349, 3391, 1348, 1347, 3390, 1346, 1345, 3389, 1344, 1343, 
          1342, 1341, 3388, 1340, 1339, 3387, 1338, 3386, 1337, 1336, 1335, 
          1357}], 
         Line[{1355, 1436, 1433, 3419, 1432, 1429, 1428, 1425, 1424, 3416, 
          1421, 1420, 3415, 1417, 1416, 1413, 3413, 1412, 1409, 3411, 1408, 
          1405, 1404, 3409, 1401, 1400, 3393, 1394, 1393, 1390, 3406, 1389, 
          1386, 1385, 3404, 1382, 1381, 3402, 1378, 1377, 3400, 1374, 1373, 
          1370, 3398, 1369, 1366, 1365, 3396, 1362, 1361, 3394, 1358, 1356, 
          1398}], 
         Line[{1396, 1456, 1455, 3425, 1454, 1453, 3424, 1452, 1451, 1450, 
          1449, 1448, 3423, 1447, 1446, 1445, 3422, 1444, 1443, 3421, 1442, 
          1441, 1440, 3420, 1439, 1438, 3407, 1435, 1434, 1431, 3418, 1430, 
          1427, 3417, 1426, 1423, 1422, 1419, 1418, 3414, 1415, 1414, 1411, 
          3412, 1410, 1407, 3410, 1406, 1403, 1402, 3408, 1399, 1397, 1437}], 
         Line[{1457, 1846, 1843, 3560, 1842, 1839, 1838, 3558, 1835, 1834, 
          3557, 1831, 1830, 3555, 1827, 1826, 1823, 3553, 1822, 1819, 1818, 
          3551, 1815, 1814, 3549, 1811, 1810, 3539, 1805, 1804, 1803, 3546, 
          1802, 1801, 1800, 3545, 1799, 1798, 3544, 1797, 1796, 3543, 1795, 
          1794, 1793, 3542, 1792, 1791, 1790, 3541, 1789, 1788, 3540, 1787, 
          1786, 1808}], 
         Line[{1479, 1458, 1459, 3427, 1460, 1461, 3428, 1462, 1463, 1464, 
          3429, 1465, 1466, 1467, 3430, 1468, 1469, 3431, 1470, 1471, 3432, 
          1472, 1473, 1474, 3433, 1475, 1476, 1477, 3426, 1481, 1482, 3436, 
          1485, 1486, 3438, 1489, 1490, 1493, 3440, 1494, 1497, 1498, 3442, 
          1501, 1502, 1505, 3444, 1506, 3446, 1509, 1510, 1513, 3448, 1514, 
          1517, 1518}], 
         Line[{1520, 1478, 1480, 3435, 1483, 1484, 3437, 1487, 1488, 1491, 
          3439, 1492, 1495, 1496, 3441, 1499, 1500, 3443, 1503, 1504, 1507, 
          3445, 1508, 1511, 3447, 1512, 1515, 1516, 3434, 1522, 1523, 3451, 
          1526, 1527, 1530, 3453, 1531, 1534, 3455, 1535, 1538, 1539, 3457, 
          1542, 1543, 3458, 1546, 1547, 1550, 1551, 1554, 3461, 1555, 1558, 
          1559}], 
         Line[{1561, 1519, 1521, 3450, 1524, 1525, 1528, 3452, 1529, 1532, 
          3454, 1533, 1536, 1537, 3456, 1540, 1541, 1544, 1545, 1548, 3459, 
          1549, 1552, 3460, 1553, 1556, 1557, 3449, 1563, 1564, 1567, 3464, 
          1568, 1571, 3466, 1572, 1575, 3468, 1576, 1579, 1580, 3470, 1583, 
          1584, 1587, 1588, 1591, 3473, 1592, 1595, 3475, 1596, 1599, 1600}], 
         Line[{1601, 1560, 1562, 1565, 3463, 1566, 3465, 1569, 1570, 1573, 
          3467, 1574, 1577, 1578, 3469, 1581, 1582, 1585, 3471, 1586, 1589, 
          3472, 1590, 1593, 3474, 1594, 1597, 1598, 3462, 1602, 1603, 3476, 
          1604, 1605, 1606, 3477, 1607, 1608, 3478, 1609, 1610, 1611, 1612, 
          3479, 1613, 3480, 1614, 1615, 1616, 3481, 1617, 1618, 3482, 1619, 
          1620, 1621}], 
         Line[{1643, 1622, 1623, 3484, 1624, 1625, 3485, 1626, 1627, 3486, 
          1628, 1629, 1630, 1631, 3487, 1632, 1633, 3488, 1634, 1635, 3489, 
          1636, 1637, 1638, 3490, 1639, 1640, 1641, 3483, 1645, 1646, 3493, 
          1649, 1650, 1653, 3495, 1654, 1657, 3497, 1658, 1661, 1662, 3499, 
          1665, 1666, 3501, 1669, 1670, 3503, 1673, 1674, 1677, 1678, 1681, 
          1682}], 
         Line[{1684, 1642, 1644, 3492, 1647, 1648, 1651, 3494, 1652, 1655, 
          3496, 1656, 1659, 1660, 3498, 1663, 1664, 3500, 1667, 1668, 3502, 
          1671, 1672, 1675, 3504, 1676, 1679, 1680, 3491, 1686, 1687, 3507, 
          1690, 1691, 1694, 3509, 1695, 1698, 3511, 1699, 1702, 1703, 3513, 
          1706, 1707, 3514, 1710, 1711, 1714, 1715, 1718, 3517, 1719, 1722, 
          1723}], 
         Line[{1725, 1683, 1685, 3506, 1688, 1689, 1692, 3508, 1693, 1696, 
          3510, 1697, 1700, 1701, 3512, 1704, 1705, 1708, 1709, 1712, 3515, 
          1713, 1716, 3516, 1717, 1720, 1721, 3505, 1727, 1728, 3520, 1731, 
          1732, 3522, 1735, 1736, 1739, 3524, 1740, 1743, 1744, 3526, 1747, 
          1748, 1751, 1752, 1755, 3529, 1756, 1759, 3531, 1760, 1763, 1764}], 
         Line[{1765, 1724, 1726, 3519, 1729, 1730, 1733, 3521, 1734, 1737, 
          3523, 1738, 1741, 1742, 3525, 1745, 1746, 1749, 3527, 1750, 3528, 
          1753, 1754, 1757, 3530, 1758, 1761, 1762, 3518, 1766, 1767, 1768, 
          3532, 1769, 1770, 3533, 1771, 3534, 1772, 1773, 1774, 1775, 3535, 
          1776, 1777, 1778, 3536, 1779, 1780, 3537, 1781, 1782, 3538, 1783, 
          1784, 1785}], 
         Line[{1806, 1887, 1884, 3573, 1883, 1880, 1879, 1876, 1875, 3570, 
          1872, 1871, 3569, 1868, 1867, 1864, 3567, 1863, 1860, 3565, 1859, 
          1856, 1855, 3563, 1852, 1851, 3547, 1845, 1844, 1841, 3559, 1840, 
          1837, 1836, 1833, 1832, 3556, 1829, 1828, 3554, 1825, 1824, 1821, 
          3552, 1820, 1817, 1816, 3550, 1813, 1812, 3548, 1809, 1807, 1849}], 
         Line[{1847, 1907, 1906, 3579, 1905, 1904, 1903, 3578, 1902, 1901, 
          1900, 1899, 3577, 1898, 1897, 1896, 3576, 1895, 1894, 3575, 1893, 
          1892, 1891, 3574, 1890, 1889, 3561, 1886, 1885, 1882, 3572, 1881, 
          1878, 3571, 1877, 1874, 1873, 1870, 1869, 3568, 1866, 1865, 1862, 
          3566, 1861, 1858, 3564, 1857, 1854, 1853, 3562, 1850, 1848, 1888}], 
         Line[{777, 776, 2931, 775, 2930, 774, 2928, 773, 2926, 772, 771, 
          2923, 770, 2921, 769, 2919, 768, 2917, 767, 766, 2915, 765, 2914, 
          764, 2912, 763, 2910, 762, 761, 2907, 760, 2905, 759, 2903, 758, 
          757}], 
         Line[{1908, 1969, 1966, 1965, 1962, 3600, 1961, 1958, 1957, 3598, 
          1954, 1953, 3596, 1950, 1949, 1946, 3594, 1945, 1942, 1941, 3592, 
          1938, 1937, 3590, 1934, 1933, 3580, 1928, 1927, 1926, 1925, 3587, 
          1924, 1923, 3586, 1922, 1921, 3585, 1920, 1919, 3584, 1918, 1917, 
          1916, 1915, 3583, 1914, 1913, 3582, 1912, 3581, 1911, 1910, 1909, 
          1931}], 
         Line[{1929, 2010, 2007, 3614, 2006, 2003, 2002, 1999, 1998, 3611, 
          1995, 1994, 3610, 1991, 1990, 1987, 3608, 1986, 1983, 3606, 1982, 
          1979, 1978, 3604, 1975, 1974, 3588, 1968, 1967, 1964, 3601, 1963, 
          1960, 1959, 3599, 1956, 1955, 3597, 1952, 1951, 3595, 1948, 1947, 
          1944, 3593, 1943, 1940, 1939, 3591, 1936, 1935, 3589, 1932, 1930, 
          1972}], 
         Line[{1970, 2030, 2029, 3620, 2028, 2027, 3619, 2026, 2025, 2024, 
          2023, 2022, 3618, 2021, 2020, 2019, 3617, 2018, 2017, 3616, 2016, 
          2015, 2014, 3615, 2013, 2012, 3602, 2009, 2008, 2005, 3613, 2004, 
          2001, 3612, 2000, 1997, 1996, 1993, 1992, 3609, 1989, 1988, 1985, 
          3607, 1984, 1981, 3605, 1980, 1977, 1976, 3603, 1973, 1971, 
          2011}]}, {}, {}, {}, {}, {}}}, VertexNormals -> CompressedData["
1:eJw8Wnc8lf/7NipZTZXVQFYio0m6S9EgKypFKDRUSPNTirL3yN57b8fmtjfZ
qzQoIc4jpJTxe76d/D7/9Po8L6/nnPN+3/d1X9d1X3xXzTSNGejo6HauoaNj
JP9tdi5LU3nphQ1ZTMKbBUtBMYyNu7magEEPtpGiHxEYmFNu0WhaAvO/bdul
yOcHDy2YssZmoYWexPxBZoSprU9VElIJiPXcPSFzAfFc+HXO9oPFkHlfonmd
JwFD//U5+iXU4KWTDH9ibChgP7ykLWNIgGB/cKXAaAP2Ghzmebu9AGK63jyw
3EHASPfq6LjHzVjrKP5HOzoLto0FTnuwE0AU/IwYCG9F458cRdn9aVBZt1hv
2EOFxZpb1ged23F0h7vMFUoshJz8vJU1kArj76OqmEw7UUA/RODopCesUDj7
rUiTCldK+uooS13oyKyne/++D7oEq3meYKWCpl/MnozqbuwRWro0xJ2OCtsG
QzN6JmDF1v90ffd04+XQ4NztCfnIyae/9vbbCfAbGbyltKUTO21lLvJFFyMl
qYk+T4wKKdx8XyWaW7HhjqyBtXUhxt4WHGDNpkK3sFt9cVQNjswKFsylJ6HO
t5MsPpYElA8/Gv/8tAgvujtd66NkYtvn2JOjxQRoBxvm7XiXjrbPTJQ3+JkC
u8GO7xsnCeAzhY1xBRfBLi954oNtLFzVorwq+0WAsMP6p1kXUuALdF9YfTwL
nkcNGDi9J8Ak0NdFOyIXCkBCx2YxFwYdpB5nlRJwqsjdbJvza8wwX8n6ySUb
QneXjN8dJuBo8osHD6XjkXrW4/Qf3jx4Nn81hLObgHdJz5zOt2bjppDyfMOy
LOji06VcaiNgNqvxqX1jCapiMmM6Zyoof/9xdqmQgOtE0xqXVZWYbB0i/MIo
BeIXrm84FkDAnNBr0wvfa/Ajk4fmLWoKZA2c1mG6S4DyJSp/R20DTrMEWKSE
RMNGMbNclxMErL1YJqKQ2IL+Lc1ec0kBcNpI3559LQEuk2fVzeTa8IJU/Nh/
zx/AycUTWjptVDA62S7YONSOO4uG0wf2eGNworxxphcVzjyrSM2Y7MC2tvzw
qrRYvBjy+rmNARW0lzIiZWc6cLy5bq8WfQaq058NajhPhSzPj+nlGe14sN5p
V8+PTBx9qqdVY0eF30dFWV8rtmLZftbrVMl0rH8j47xhiAoRTGGBDLF1OGx/
/VadhD/q7Dv6wM+IgPz733cNn6pEhfhSPdZvt8Ex4tQd8ygCrCVj08VG8vDY
WJ0uw0Q4ZP54dEGml4BEl9vVBx8HoSq4cbWppkO6y0+7iQkCGFmvM/Cou0D9
/MzOrCtFkFf5XEK9lYBxW+2p/rhUuPVKT8PrUyGEnEv6NVhFgOlTysFx1hR4
Pza213VrGczte6V4K4uAx4WRX2yZYuBbT77FPt4QsDBuKI2eJUD20Kk0oWsv
YeZKHCvj1WAI+KNnVTJPQM69h/M+EZF4V83X6oZ2KBy4uSqo9icBhZc2tW43
iMLtW3TRTfQZxDHzaTn8JsDyv/W8r2RzUEnrmbC0iw1k/Xaz2ETW1dkVx2Io
NoiM3l83Lxi+BEunNMdr5QSsZ5131/5TjrMSHh0n9zviEV++dok0Agzbz0cI
v6/GZgFRxltcQag1cHvLgC0Bnrnc445xdZi9/rDp6epYnF2VKMStT0CaueeZ
lZNNeFEybO3geBx6Plqr8kSAgAuZ3OkrOJqw8vGW8xnlicjTaxDbI04Az8CX
uxOTDbhONNLfOSwWE8w8yhiPEdCnHyCYL1qH22+kel396I9Gm5u4790ioDkk
/6CeTBXqrB8t3tdwDxqVH1YeDSRgBa9L6Zwa4sJ6H4WhwgSIOvlQ6G0+AQVL
kbXCUvnIqLE15k59BtwViVuIqCffP9u236k8A0duP7aXVCkG/h9H87aT/b6j
SDvkyGA8pvxa88TNvQQEDXhXyZcR8DrwmfKTS/FYqbXV6QNdBXCpfhubjiVA
qIZTRaotAjMl89LNqGWwtsb7lns2AZ9Wft8nJZqNx06P2VlzloGLdmzkm3gC
1A7QDwrdz4WAgftqR4108GVQ2B7TjwR0HcmWiHXPh70fX6axsQfhtRK1Ifce
ArxX525cpZYCfdEPbM/88cQfmc0SF6YICBN4LW/4NBQMI7YdvdkVhtUpQWpD
JP6sdRf8eHadIxgdaPcZH05AvV7FnSU/CHjAa/WUdTAStx5+vGJ/byzy15hE
OE0TwM/YMrsQkoFxH/Ma2MTT0VTkdOGLDwTcrav3kV2bh1siPrDIHs7Eo5+6
uJibCDhC902/8XceioxIPhSTy8L7Pi4rttQSUHy8TJJ9qATzdu+4sq00BXPO
Pr44R+IPIVS+V+1xIfJOrAzlVIvBUz8GfwY3k3hl4t1cfSMXfflOrup54or7
pHLkKsjPzckymx7lycSqdZt3zHd7QrB50gqfcQIuvniQf14wGpnEzeQ+KCfB
2iDqI0uCANffJi7sX6MxgKdV4YVBNhgZjqqeGSTPP7VrorfVGw1/5jPursqH
h3c6Tu0h+1r4XaW9U2UkKrowMAtZFMHowQ2K3Y0EBJhfZR9NTsBTHDM1HH7F
UB8Tky1ZSZ5nNfujdrdsPJldxCbAWQRTxtfHvxUQEHH95aUNgsV4T/7li3q+
fBjY4FESnUhAiJTEncj4MrRVvc+9hjkLtNk2bOwk6yT849kDD1iqwNg+0puV
GoNXbrJPrX5NgFHwp5JUvkroPeDQ8fVSKqqyi8br+BGw7eh9+nCrUpD3zm6b
DcvG92UyTbfI+X7N+fjFu6XZ8LnWksfhbSY6HfWu9+0gYP5Vx2auX8mQEtDt
VKWch+vVww8WknPhxNj1jDGLQDiec6zwzuYCnNy5oXUVOUdGL8RPCe+9C0pz
TPr8qwrQaWivZS55Pmz3xF5cf/AYWU545m+Ny0W6/XZ1heS9UDfX667YYoY/
LvOdXkni8O3hJbHKbwQMlAqtnWl7DVl3ql41HY/GV1lpPDZkHbJ+im6wv+QF
hpq6r2otvHFq5KL78wXyvgST/jvckgKvJVt01DR9Ya+E0uSR72Rf7K239QxJ
hL4PDFGa0bHgcEnd9RaVAPrq6VW//2TDC/mZlfGnMkA5MeOKLvn9pVUO0dd+
TAHvG/23ju/IBtY3igJM70gcUAtlOrg2EfwsuYl4pRw4UNVueYt8/iM+f95g
LACkYl9eKuLNhH1hFbJAfv/bFwyjPqu9xvoGww6/ddnw9MGN1Kiv5PzlDgwU
2huDatWtidvqk+FJx7YyJxL/lf6Isv2hz8KEkPiHm4LigG0nY1z2EAEGUVfZ
2+uzkU7f42bKmSAY4Ob4WvuZvJcnB/Mi5MvBISpj4GR1Dn7j2fx0SxABaLiz
ZEmqEISyhDhnNueh6Oqk3WYkbryr2PRs/XUKBNj1fW7ZgXh3R0uDRhwB25W5
rkB7FvwYfMkkzIB4ySttvQ5ZD1u8uU/J7UkBNsP8GPoXZfh7q0SYSDrJAzvf
26iqJsDqmTV/2gZLsWohZc1bsh+Zbw9OXrXKgNkvb0+LZ+ThLauGlCqy/l/k
NCeeCMiC/i26Q0khOci8TTI08w0BmUpcnBRKAYT3Um/EX4/Fz72/nl8ln68V
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
VufHGDQHE7BuU8Eu+slG/HE54pFZajbGrP78J56PnL+tq8f5hMi5G9C7hsmn
FFevk+060fy/fRzLrS/8rTgVfFvPPjsdT/m1NHN9pYISjT/gGI0/4DJ/WKd6
2GIn+fe6SZ2O9zeG4d25AI2GaSo8FT8rrhrZgnSPrYOGZOMxwOGj81lmAsSt
9FImNjfhORdRacXJSGzWN00RJvEqmMZ/UJfGf3CZ/xCqea1jzlVowx7AE7g9
Dg+PC+qsJfXglIX0odcelWjZlhlAvyIAecJPvXpB4oxfh4Tu6btkne1oMd8k
HonZ6xc4/+ePHaLxN6Sj8TdY5m/9An/5Hjyg8T24/I/vnabxQxih8UNY5odx
ND4JjjQ+Cct8UneXwGZvgSIQ3uG0V2ypFaQ6X8QTiVTYc4Fi5DKcCfaHTnDl
97dALDEsVztH4sbZ2WTxg06w9l5sht7FZogb/tMjJkjyh69R4q98svDq1+yq
1vlcSBn/wH6onpzXv/MKuV5XIlF08d4NzzDozF9HHSHv15fHI7HhfhOuZN30
5cvpAjyzOD/zmTxnYUV7npLZRpywkuxbM1WKLVMvilzmqfBbY40t++YG9DII
6yteUYBBgb0fGXcTEEvj/1hI4//I94//Z9D0Al6l6QVc1guvmeui8mQb8NCH
M9Fv9sZg2NWQ/mhlcr5PTcddcW5E1U69Zv8r4cj44NIBaVKnvNpRscAg1YQ8
TgJPa7TCcSgxPnxEmuxTmt7B9TS9g8t6h89R9ciFp42o+cEkjdnYGxetV2gE
k597xavvsGtZA4a7UJT36miCiKnwyEbyc5to+gvH9vzVX7CsvyRoeg0FvP/q
NRD9p9cU8jNncuML4NkeN0r6uUY4a1y4eoyc49YqF46fHSmEc/zvVQUNyP6N
l5VXJOu/Rm8hxqaCAg5rcRvvYjMI6gZMmJH8oeEV5/l9XDFgk76/WP5bA7w4
8PKHtgKpo8XW132QC8AvNpztFrHl8I5yTvdhOgFefRe1LXVz0dvK8eNRYfJz
tuQZJFIIOFk7MqzcVo3bmfJWNvO6YouYg/N5BwKyrEKqg47XI6c1Hd/WQ1mk
rs0LiiX5Q36EfWcXM9kvE219c/l5mFmlKXrpDPl7uVpvrTeoxoAFfYr7pjx8
VGLQtdWUxHnFovnO9gp88CPdKfhZNmafB9uvZB9l0PQ+utD0Pi7r/Tc0fwAd
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
OizVTNa5Xe36L3l3f4yb5N7FrpcBzCJiOge7/q+eN3P0RND5SKPofKQ9dD5S
Haf6eyF3QrBC1dLDf3UGJG81ZdEm68C+7ATq/4pG6dc7g3j2pcD8DsPrhaS+
iJ7DazqrZymd17STzmvaT+c13XnjS+W54wm4/sm606aPkuFKkodp+Cfih20T
DGsc01Fo1+FI+cUJsLp6ZORyB6nf6Tyozbo0HlQmOg9qPF3+dY78ZdR6Dtf2
DIx4pspXPREDz7d3P7Qj/vnHIs3AT4JZ6NgIDHmfQ+GTCU9bUcf/tWvLOXad
RNe/TO//1X+czr9K53+AKjr/wzM6/+qSOfyrs3LmOfLndPnKOfIVdL7W5XP4
WpnpcpY58q90Htc/dB7XtXQe1/8lP0fnd62Yw+96li4vnSMfH6fxvlbN4X21
pPO+6s/hfTWly03myI3pcvU58vl0nthbdJ7Yq3Se2MFCmlx+jlyUzh9r3vD/
8sfumZU3/r/yedU0XtmuObyyvqU2/WxrYnD0zZhMml4mXipdecyZ5M8WVy5I
+H6JxmHm+3cH5bLw4jM+wYOtFMR8eWET3BaFKttG5ep2FKCZahtTGombLQbT
B8XfhyFb77G0yHv5uODhuk07SJ7prv1oRfWhUFRpDb1S+zEfpU6/PGFB4m/A
zg8v0zN8kbXb5UX5oQKUzt7U+YH83uLpPXu5dgNIbVp+6JlbHsYF29YeIfmA
8JY3cbd0XWHs1/vjLZiN93TY07TJvrWZguCKdZFwSUDzLntTKmawGA/9ux9R
NTm/MIwvEeLs1jwdlU5G874W0x3Evmx6fiTyc2XBFSMOvgU1QWih+qfY6Q3Z
/xd/PW24nweFKY7FfyQ80e6MVPY6Yr+K3ZrXo4aK4ZrR++Hf8hao/DY0qzyR
xKmDUnfnrS+Dh2tybN1lxUCANW5Ay+9fnmPwrq2nBvbsXSFrphgJ756tYWYX
o+D6lwV5o1gHn4X5VZbdjgPjofi+iM0krh1SFV0j0AB9JZlxt4yiYYhtl/1n
FlJf7L2w2fdyE8SnK6d7iUQDU4rP6oHeAXCdOgS3D7SA79HKQyrbU8ASn245
TOpo3X6NAp+JFgg1lurZypoCPU2Db3RMBuBcrK9eXHYuSuiWegiuTUej3CLm
tyR/OBObE8/IHYKVBlUK3CmpaCv6rdqO1DUrP3q5WqtkY5eIfsNxllQ8davR
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
M3Mjx5byMqhWlBaucaZAMyUo12+C1MlFbdYv95dA4nkrc+VwClTWysO+5flI
JT6K0dNLg8XGXcLvSN03nqXpWd5diLqlPVrnkxPhwnRZ6zmSNx4Jf3tMZH8F
/uiReSJ1zQGlxNdmsFhREOivs3KPYQUm2rbrFBz2wfPWYqOPnlKwtd8h9fTx
avQ263DSgzScPypYYSBF7PqASLTW5mqUin4leW85iS+RTj8Ok+e/t3Er8uhU
4f7ID97jCjlo3ldG3RCloNfih4lmTCVu2BGwwepbNg7HeumIy1Dwkk038o9i
FmjMaB115K4CLss2eeXT5H1vdXFRfPGwLFjs6NX8UjguP9pq7kqBmKffBebB
dHjlu+P02eOV0J6qsfLzNRKXg3D33cpy3P5MMeECSxZyOpy7WXSHxJ01AvNW
LyrHG9vNS1ucM/GPC98+wwdk3+pwWdrIp0D4uzPT1OFKiIjhqh+4TUGOWtCp
qZ0poM4t9OHkqWpYJ6X1K5c85y++g9m/fEsx4wpfSHJsKhYuusR33o7s23eK
52THSvCj+I7UyjWpOPJeuKyN7M91UaV+96Zj4f62Ywdl8itB69Xo1UvkeUyu
1bGFTXqD6OqzrkLby2HXQ4ODI47ETieXLlLULsHK2OeStiYJaHLlaEr3S/J7
KTVVt9/F+FUvtdzHOR7jFihxbAol9eOjM1nda7TxiXGluK1xKZQMmuXbBlNQ
PtS9+DHHSwzflLjo+wuEH3KrD6oXkvX39DU4c6sYWSOe3ivgicYV4ZpnBmMp
YL/jKsVYXIQq0f1NirejMHu7TO8XEvfXC0qo7ccoLHWRLmO8XADqIi9O85M6
Pd9SMVYB0lH0xJ5L+5OygddaJXoZidcS6qxGy6KK0HVzB+OmL5HY2+TrtzGV
fBetV5dZdItx5clXZ3tdI/CGWzHzIZKnWTbu07OaycOuy4+z5Gzioe5oh/CK
EpIXZYglle8pwtivp+xFmAJA5kKezadcUg/aDukeGShG9RSPxRdCQtFbQ5cF
Y8jvS4V0QuOLsYXnXXTz+TBsVvtrE07qd0/902xiMyV4Z1VpcbKjDvIuyMWD
EaTeDFXEfatLcV+fpW3WGRd0c3fkeRBG/EbBmrCH34sx9mlTm5d+KI4M8nsu
/Dcn8TWnQ/jzUlz/t+GkxfZgfHaN1/GvP8krjiWoJPqXYtbkI+6klFBcUnTn
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
Op6C3Y+3nw4QrkCOzurO74coWGUs9ILbJhXnWnqypJ8ox9+elvd8TpM+aLFZ
ebRNCfifUSo9G5sGkd4hMeWkv1hWNjhnXLMM5vez7qm2zwB9FtwdJE/wf1xD
wdmf6cjGugWfpJRjxHH9AWVZClzpvHFg+/wvbxxmeOO36PdHYBf9/gjM3B9h
pd83AWn6fROYuW+ygX4/BRzp91NgLuN+ij/9PgtM0e+zwBnGfZa99Psv8LD3
3/svMHP/ZYp+Xwak6fdlcOa+zBX6/RrooN+vwQWM+zW1onJ+XdsD4L12Wlns
QBFKZL5vZyM4fGQkYAt19wnw/vr9vTigFLXmnIjUI8/NUWZ5OqzkiwN+K5KF
HlbiJlOTt9dJP+gQ917wM3sMztny5A/T9irkr8066kT6pqKNqwY3bk/EVs9n
938cqsbV4aO7m0gfvfYy99O5psnoeLk1QLquGj22bT9nsILU3/BxoXNe6Xjm
U/07LeMaZPpmaSHORAGHlfWdGqMs3M8esD18cS0O2DR8rRyigbdDF/9x2wzc
c2ehgw1vFaq23tpSzE/yf3qMysW3yXjpzeXMabcyNB5wO1ivTMH8Gy0/N/Cm
YNx2958qG8pQ6MY2/2vqFLhJby94Gp2MmiWXzYRUS/FkwlMxfdKHpjXW732U
GYVJJxPnrOTNhObO9RZnSZ7vLLZyfeORiR7C0r/FH6fDr7LX93anULD7cl1q
HHsYSgVZvD7bnAvL37XcfEbygLHvoz4xpkw0+SijYBacC08WBkc8Inlp6z28
sTGrGMsXCxU/KE0GqXLNTC4zCgaLWXeJDxSj0gaZxsc70wGRoyj1LonDdu+i
jd8qsfXq3tXv+TMh5G2dkeE6Cqp4N2yVuFOLJ/JeG5xqSSR4YEVQPbHbuODL
Oxd/lOKX+a6Kt2kxkPzh+OX5ZL+8OpmrU/iqAT99Z1q0+ngUFIN5g3EmDXaI
1Np7/WpCt11Kl8tcPSHq/oi4mSYNcllFVkzdrMYfZ3i3fNMNg12CL7IjhElc
5baVp06/xZdsaqr377ujk7f888PsNHDT7t654kc98gI/B8/8QJh6zNa9pJUG
az2F5/cEtKBdv9tYQnMiflev7/JoGwLz+8JM1ze9xW+nxWSbw7JQ8/2xTYPM
NDg94ZL6IKAJx1sMi1ategZD+997mNynQVWIHPtYQAPaFGva8rBnYwH7sOJN
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
Yiiy6GJIiCzXolzzwUt95qxXbYmAb7lW6paSffFil/ne7mjSzx3RCXsaBk4/
Vx1JJfl5yYs8+aAdJeBmtzDF2iEeRqun9jyIpeBnQM+NJXx5sPaQduqHxkjM
N1yb1UvweMcB09DgQ+WwVOXnytaVUXD+zlHqthupOxerN1d7ZcCGarFqW90I
2LH11rZvBLe2P/V0nPE9CcaTlvE69OagzkOTqmW1/6vrMa783+vX3PszPSU8
A5z/XMI47xjI3nT8audfXpDMGG91ey5UX17ElfQ1DWNNDj/xQbJ/Hwj1sRk6
wcVfZm+vrCtG5I8ZbC2kwLQjk73tiA+Mnxdcnf++GJ/dWRC+h9jz9US5hUVK
JIoavCqxVK1Cr5BZB+KvUeBYeVz6ZHYZXFuo6TbAmQnX15xV2kj6GfMe8XCw
K4crtzNkP/bfQsfR9AOvvEh+NlU9ELa0GiIVZ0itX2WDFoZOfxZepWCrNO/p
wsNlkPLK0VhDxAM2fdeOCAmhoHVB/DvdxDK4X3a/44Z9OnCHhEzefEyB8fDE
9reBxSAbU6HJuSAEtjkpXI4g6xxpqz2fcrEKZspOWIO8GzzQVxcYJ/WRfc2Z
c11NFVByesv9eylp4Ph7ndnUDdKn/R/xU0/rd2xi0e94yG12lPtrMZR2xUU3
uUVCR/s7Q9cUss6S5rJwX4JPg3kHs+yiwfCGw2AlwY/jhYxM3xXFsKjV6t0t
vxhYEtrtuy/zbz19dumqczGEfZ4eO2mXBF6qz21tSB/yUdWgz+JJHWxe8eRE
yvcg4Hd5cWQT6QOf0Ha+wWLnIM6IQTPjfNAuujzzS106ztMeni6aQ8G0YMNJ
gbEKMG1M3/XgdyYst0jzrL9M9rXVSFXa/mp4+nPmYTmrMOg6rmfSQvr5ltbj
i6adrQbHE9KuygIZwA6L5l7WoMBEgJ87cW4YPL+99H1ubikmLNwMOSTewBwH
21QrgW2mxaGGEG84Y2vwItnyL2/nFKh/qwCtXCEFxX3RILorPHa6+d+5l87X
miascStbw+cI/wo8dLUyaoUjqfv0+i+wrD/+6t4dH39UQjijWCl8Uwo4XTzr
d570t/Ze0ab+Mxxh3uKxIqGdlTh8buGnNmKHo7aHRVu7E1EqpelaWlANCkev
Nx8nuPL2GeU/F1vi8XzQmqs8tvX4ovbH7qx1pA85VVNeVJmDqxvDzG2PNmCy
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
wKK7NPmMeR51h+U8KojWV5rBoq+06YSPmMzNEFiziZH8SD8TpMqavHlIHvtM
6yutZtFXWkPrKHGz6Cg9sc+LXT8QjgtnS2um16SDt9B4r1IP+X1aX8maRV/p
IMeXP7Ieafgqyfie3pEk4H1wLXji9d/5hEy9JGNaLymLnhu5gtZFaqF1keJo
XSQpWv/IndY/WkjrH6nRekYlLHpGlbRu0TSt/9YtCqb1ia6z6BM1zmfqE8WL
/Lc+kcmwQaHveCsE39vfu35+KvQ2f3l17QED2idmZI87xmDUo0c7ApVy0dam
NuhRI/H797MhB8rDsGKOw1hJTgEGxe2eUVhJgQKtB5TBogdUPzG9KFwoCWId
+MzHDqSg5VDrQzFiTyjjNuKRLwLpFRDiteAp8suv/nCbxPO82KITvhHVUPFj
vzs1+QwWj+zX2kD68BKGpoBkRxOYF+VONGrGgESjFecoyW9lo/GjTskvIcC9
9ONd1XzgSlvldO3wMHBUbdTMupSF5xae4ViokYpfTDLqkNTZIR42kYKGVjhZ
8X31oqJo2HJtrbasMwMoWl8mhkVfJm+9ufes/hZ4NfMn9WqDF3SZqeUJZzNA
9IJ57/MeH/CXspDWl9aDnRPBdn/5HnG0vozjtJ7/0pdZumCzq8bifLCq9VqS
eyQWdAzaf/eSPHk8nl37waM66O9fnef1whfbxkqEqF0UYPFjucz8KkgY2C0l
/zEffCfz6zXlSX2f7RZkwVkFBUoaRg0ykbjNbrPYLJK3/+m/pLDov8i4Ndw2
nV4Ky4TuGnuLxuKVT7VPnEhd3vyh7FHvknaQ3VqrEWFfCjFNT9yNXw1Do1qH
hOX+VyCywKm2vD8LZkXv/PRwzjBI0HouBSx6LnNsq+Vlz76Ex59u+qzZ/BTk
ExuvWXkNA4PtQ3DTVXe4H1+f3tUdDS3jCTNLv/+vnksgi56LjMWS6MMtWVB4
82eQykQx2M19eTrFm7yXT1z6L/Y2UGy0KRAnebXr4lbvptsM2L/zrkbn2zLg
vqjyfINFBfhl1He+F6aggeN0xbLtjbBsXtiOY+6ZqG3mUhM8ziDxM3PKRKES
NhalTmpMFuGWtpafM/YR/J7Gd1k5pA18uVNW31nTAnVlDWnmO4YBHSLZFnp3
wMX6oYl3aU0wgEvXSyYMAVenqbH5+ggYarIsHuYuw/VzGlX2BpF6Z2h0wF2/
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
yN/O24GKs7rVf8Nxx5S8j2RMuY/0f6VMmg4=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702558`}, {0., 
       0.5750241709462722}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 
    0.5700000000000001, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
    0.55, $CellContext`k4$$ = 0.925, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.5700000000000001, {1, 1, {0, -1}} -> 0.25, {1, 1, {-1, -1}} -> 
     0.55, {1, 1, {-1, 1}} -> 0.925, {1, 1, {1, 0}} -> 
     0.5700000000000001, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 
     0.55, {1, 1, {1, -1}} -> 0.925}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$229631, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {16.2}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.2000000000000002`, -2.7}, {
      0.7, -1.9000000000000001`}, {2.6, -1.1}, {-1.1, -1.4000000000000001`}, {
      0.8, -0.6000000000000001}, {2.6999999999999997`, 
      0.19999999999999996`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.8999999999999998, 1.2}, {1., 2.}, {2.9, 
      2.8}, {-0.7999999999999999, 2.5}, {1.1, 3.3}}}, "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.67, -0.85}, {
    2.709857394019914, 
    0.6299999999999999}}, $CellContext`rawArrayOfMasses$$ = {
    16.2}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 2, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    456., {224., 232.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{856., {262., 269.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellEditDuplicate->False,
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.6055655700185328`*^9, {3.605565787933996*^9, 3.6055658129824295`*^9}},
 CellID->459938742],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    True, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.34621600000000013`, {0.376, 1.64}, {
        0.5220000000000002, 1.0699999999999998`}, {{
        0.06156850058922771, -0.24037017353328588`}, {-0.24037017353328588`, 
        0.9384314994107723}}}, {
       1, 3, {0, 0}, 0.25, 0.42227600000000004`, {0.376, 1.64}, {0., 
        1.1099999999999999`}, {{0.3347952523941687, 0.4719188398109293}, {
        0.4719188398109293, 0.6652047476058313}}}}, {{
       2, 3, {0, 0}, 0.8150000000000001, 0.2740840000000002, {
        0.5220000000000002, 1.0699999999999998`}, {0., 
        1.1099999999999999`}, {{
        0.9941623735789029, -0.07618102479531827}, {-0.07618102479531827, 
        0.005837626421097188}}}, {
       2, 1, {0, 0}, 0.25, 0.34621600000000013`, {0.376, 1.64}, {
        0.5220000000000002, 1.0699999999999998`}, {{
        0.06156850058922771, -0.24037017353328588`}, {-0.24037017353328588`, 
        0.9384314994107723}}}}, {{
       3, 2, {0, 0}, 0.8150000000000001, 0.2740840000000002, {
        0.5220000000000002, 1.0699999999999998`}, {0., 
        1.1099999999999999`}, {{
        0.9941623735789029, -0.07618102479531827}, {-0.07618102479531827, 
        0.005837626421097188}}}, {
       3, 1, {0, 0}, 0.25, 0.42227600000000004`, {0.376, 1.64}, {0., 
        1.1099999999999999`}, {{0.3347952523941687, 0.4719188398109293}, {
        0.4719188398109293, 0.6652047476058313}}}}}, {{{
       1, 2, {1, 0}, 0.25, 0.27978399999999976`, {0.376, 
        1.64}, {-0.0019999999999997797`, 2.01}, {{
        0.5106939639150201, -0.4998856260543848}, {-0.4998856260543848, 
        0.48930603608497997`}}}, {
       1, 3, {1, 0}, 0.25, 0.9781, {0.376, 1.64}, {-0.524, 2.05}, {{
        0.8281361823944383, -0.3772620386463551}, {-0.3772620386463551, 
        0.17186381760556174`}}}, {
       1, 1, {1, 0}, 0.25, 1.1581760000000003`, {0.376, 
        1.64}, {-0.14800000000000002`, 2.58}, {{
        0.2370762302102616, -0.4252894206061945}, {-0.4252894206061945, 
        0.7629237697897383}}}, {
       1, 1, {-1, 0}, 0.25, 1.158176, {0.376, 1.64}, {0.9, 0.7}, {{
        0.23707623021026167`, -0.4252894206061945}, {-0.4252894206061945, 
        0.7629237697897382}}}, {
       1, 3, {-1, 0}, 0.25, 2.182804, {0.376, 1.64}, {0.524, 
        0.16999999999999993`}, {{
        0.010034799276526892`, -0.0996699657871252}, {-0.0996699657871252, 
        0.989965200723473}}}, {
       1, 3, {0, 1}, 0.25, 2.184676, {0.376, 1.64}, {1.3519999999999999`, 
        2.75}, {{0.4360262116670846, 0.4958904661377705}, {0.4958904661377705,
         0.5639737883329153}}}, {
       1, 3, {-1, 1}, 0.25, 2.2789, {0.376, 1.64}, {1.876, 1.81}, {{
        0.9873184431085172, 0.11189609021896538`}, {0.11189609021896538`, 
        0.012681556891482754`}}}, {
       1, 2, {-1, 0}, 0.25, 2.7290000000000005`, {0.376, 1.64}, {
        1.0460000000000003`, 0.1299999999999999}, {{
        0.16449248809087588`, -0.3707218761451082}, {-0.3707218761451082, 
        0.8355075119091241}}}, {
       1, 2, {0, 1}, 0.25, 3.388904000000001, {0.376, 1.64}, {1.874, 2.71}, {{
        0.6621621621621622, 0.4729729729729729}, {0.4729729729729729, 
        0.3378378378378377}}}, {
       1, 1, {1, -1}, 0.77, 4.009376, {0.376, 1.64}, {-1.5, 
        0.9399999999999997}, {{0.8777864685177942, 0.3275322643723114}, {
        0.3275322643723114, 0.12221353148220579`}}}, {
       1, 1, {-1, 1}, 0.77, 4.009376, {0.376, 1.64}, {2.252, 2.34}, {{
        0.8777864685177942, 0.3275322643723113}, {0.3275322643723113, 
        0.1222135314822057}}}, {
       1, 2, {-1, 1}, 0.25, 4.105384000000001, {0.376, 1.64}, {2.398, 
        1.77}, {{0.9958834545075443, 0.0640281152749658}, {0.0640281152749658,
         0.004116545492455767}}}, {
       1, 3, {1, 1}, 0.25, 4.406803999999999, {0.376, 1.64}, {
        0.8279999999999998, 3.69}, {{0.04636103625212283, 
        0.21026576176294653`}, {0.21026576176294653`, 0.9536389637478773}}}, {
       1, 1, {0, 1}, 0.25, 4.517504000000001, {0.376, 1.64}, {
        1.7279999999999998`, 3.2800000000000002`}, {{0.4046269798543619, 
        0.49081970929079416`}, {0.49081970929079416`, 0.5953730201456381}}}, {
       1, 1, {0, -1}, 0.25, 4.517504000000001, {0.376, 
        1.64}, {-0.9759999999999999, -2.220446049250313*^-16}, {{
        0.4046269798543619, 0.49081970929079416`}, {0.49081970929079416`, 
        0.595373020145638}}}, {
       1, 2, {1, -1}, 0.25, 4.605799999999999, {0.376, 
        1.64}, {-1.3539999999999996`, 0.36999999999999966`}, {{
        0.6498111077337269, 0.4770289634808286}, {0.4770289634808286, 
        0.3501888922662732}}}, {
       1, 2, {1, 1}, 0.25, 4.988775999999999, {0.376, 1.64}, {1.35, 3.65}, {{
        0.19016207582781836`, 0.39242892444960453`}, {0.39242892444960453`, 
        0.8098379241721817}}}, {
       1, 2, {0, -1}, 0.25, 6.338535999999999, {0.376, 
        1.64}, {-0.8299999999999996, -0.5700000000000003}, {{
        0.2294592947014893, 0.42048510886425505`}, {0.42048510886425505`, 
        0.7705407052985108}}}, {
       1, 3, {1, -1}, 0.25, 6.584403999999999, {0.376, 1.64}, {-1.876, 
        0.4099999999999997}, {{0.7702297732642164, 0.42068500049510943`}, {
        0.42068500049510943`, 0.22977022673578362`}}}, {
       1, 1, {1, 1}, 0.25, 7.341984, {0.376, 1.64}, {1.2039999999999997`, 
        4.22}, {{0.09337857451064992, 0.29096222492448903`}, {
        0.29096222492448903`, 0.9066214254893501}}}, {
       1, 1, {-1, -1}, 0.25, 7.341984, {0.376, 
        1.64}, {-0.45199999999999985`, -0.9400000000000002}, {{
        0.09337857451064994, 0.29096222492448903`}, {0.29096222492448903`, 
        0.9066214254893501}}}, {
       1, 3, {0, -1}, 0.25, 7.694883999999999, {0.376, 
        1.64}, {-1.3519999999999999`, -0.5300000000000002}, {{
        0.3880479549789184, 0.4873055916112576}, {0.4873055916112576, 
        0.6119520450210817}}}, {
       1, 2, {-1, -1}, 0.25, 10.387624000000002`, {0.376, 
        1.64}, {-0.3059999999999996, -1.5100000000000002`}, {{
        0.044776745866042064`, 0.20681341565693928`}, {0.20681341565693928`, 
        0.9552232541339579}}}, {
       1, 3, {-1, -1}, 0.25, 11.121716000000001`, {0.376, 
        1.64}, {-0.8279999999999998, -1.4700000000000002`}, {{
        0.13034103730035898`, 0.33667826080076124`}, {0.33667826080076124`, 
        0.869658962699641}}}}, {{
       2, 1, {-1, 0}, 0.25, 0.27978399999999976`, {0.5220000000000002, 
        1.0699999999999998`}, {0.9, 0.7}, {{
        0.5106939639150201, -0.4998856260543848}, {-0.4998856260543848, 
        0.48930603608497997`}}}, {
       2, 3, {-1, 0}, 0.25, 0.8100039999999998, {0.5220000000000002, 
        1.0699999999999998`}, {0.524, 0.16999999999999993`}, {{
        4.938247218531167*^-6, -0.0022222112483392697`}, \
{-0.0022222112483392697`, 0.9999950617527814}}}, {
       2, 2, {1, 0}, 0.43, 1.158176, {0.5220000000000002, 
        1.0699999999999998`}, {-0.0019999999999997797`, 2.01}, {{
        0.23707623021026167`, -0.4252894206061945}, {-0.4252894206061945, 
        0.7629237697897382}}}, {
       2, 2, {-1, 0}, 0.43, 1.158176, {0.5220000000000002, 
        1.0699999999999998`}, {1.0460000000000003`, 0.1299999999999999}, {{
        0.23707623021026167`, -0.4252894206061945}, {-0.4252894206061945, 
        0.7629237697897382}}}, {
       2, 3, {1, 0}, 0.25, 2.0545160000000005`, {0.5220000000000002, 
        1.0699999999999998`}, {-0.524, 2.05}, {{
        0.5325419709556899, -0.498939896306478}, {-0.498939896306478, 
        0.46745802904431005`}}}, {
       2, 3, {-1, 1}, 0.25, 2.380915999999999, {0.5220000000000002, 
        1.0699999999999998`}, {1.876, 1.81}, {{0.7700044856685409, 
        0.42082963027675074`}, {0.42082963027675074`, 0.2299955143314592}}}, {
       2, 1, {1, 0}, 0.25, 2.7290000000000014`, {0.5220000000000002, 
        1.0699999999999998`}, {-0.14800000000000002`, 2.58}, {{
        0.16449248809087583`, -0.3707218761451081}, {-0.3707218761451081, 
        0.8355075119091242}}}, {
       2, 1, {0, -1}, 0.25, 3.388904000000001, {0.5220000000000002, 
        1.0699999999999998`}, {-0.9759999999999999, -2.220446049250313*^-16}, \
{{0.6621621621621622, 0.4729729729729729}, {0.4729729729729729, 
        0.3378378378378377}}}, {
       2, 3, {0, 1}, 0.25, 3.5113, {0.5220000000000002, 
        1.0699999999999998`}, {1.3519999999999999`, 2.75}, {{
        0.19619514140062067`, 0.3971178765699312}, {0.3971178765699312, 
        0.8038048585993792}}}, {
       2, 2, {1, -1}, 0.68, 4.009376, {0.5220000000000002, 
        1.0699999999999998`}, {-1.3539999999999996`, 0.36999999999999966`}, {{
        0.8777864685177942, 0.3275322643723114}, {0.3275322643723114, 
        0.12221353148220579`}}}, {
       2, 2, {-1, 1}, 0.68, 4.009376, {0.5220000000000002, 
        1.0699999999999998`}, {2.398, 1.77}, {{0.8777864685177942, 
        0.3275322643723114}, {0.3275322643723114, 0.12221353148220579`}}}, {
       2, 1, {1, -1}, 0.25, 4.105384000000001, {0.5220000000000002, 
        1.0699999999999998`}, {-1.5, 0.9399999999999997}, {{
        0.9958834545075443, 0.0640281152749658}, {0.0640281152749658, 
        0.004116545492455767}}}, {
       2, 2, {0, 1}, 0.25, 4.517504000000001, {0.5220000000000002, 
        1.0699999999999998`}, {1.874, 2.71}, {{0.4046269798543619, 
        0.49081970929079416`}, {0.49081970929079416`, 0.595373020145638}}}, {
       2, 2, {0, -1}, 0.25, 4.517504000000001, {0.5220000000000002, 
        1.0699999999999998`}, {-0.8299999999999996, -0.5700000000000003}, {{
        0.4046269798543619, 0.49081970929079416`}, {0.49081970929079416`, 
        0.595373020145638}}}, {
       2, 1, {-1, 1}, 0.25, 4.605799999999999, {0.5220000000000002, 
        1.0699999999999998`}, {2.252, 2.34}, {{0.6498111077337269, 
        0.47702896348082857`}, {0.47702896348082857`, 0.3501888922662731}}}, {
       2, 1, {-1, -1}, 0.25, 4.988775999999999, {0.5220000000000002, 
        1.0699999999999998`}, {-0.45199999999999985`, -0.9400000000000002}, {{
        0.19016207582781836`, 0.39242892444960453`}, {0.39242892444960453`, 
        0.8098379241721817}}}, {
       2, 3, {0, -1}, 0.25, 6.071876000000001, {0.5220000000000002, 
        1.0699999999999998`}, {-1.3519999999999999`, -0.5300000000000002}, {{
        0.5783840117947072, 0.49381772618544906`}, {0.49381772618544906`, 
        0.4216159882052927}}}, {
       2, 3, {1, -1}, 0.25, 6.1860040000000005`, {0.5220000000000002, 
        1.0699999999999998`}, {-1.876, 0.4099999999999997}, {{
        0.9295829747281121, 0.25584852515452633`}, {0.25584852515452633`, 
        0.07041702527188799}}}, {
       2, 1, {0, 1}, 0.25, 6.338536, {0.5220000000000002, 
        1.0699999999999998`}, {1.7279999999999998`, 3.2800000000000002`}, {{
        0.2294592947014892, 0.420485108864255}, {0.420485108864255, 
        0.7705407052985108}}}, {
       2, 3, {1, 1}, 0.25, 6.958036000000001, {0.5220000000000002, 
        1.0699999999999998`}, {0.8279999999999998, 3.69}, {{
        0.013457245694043513`, 0.11522216901435964`}, {0.11522216901435964`, 
        0.9865427543059565}}}, {
       2, 2, {1, 1}, 0.385, 7.341984, {0.5220000000000002, 
        1.0699999999999998`}, {1.35, 3.65}, {{0.09337857451064994, 
        0.29096222492448903`}, {0.29096222492448903`, 0.9066214254893501}}}, {
       2, 2, {-1, -1}, 0.385, 7.341984, {0.5220000000000002, 
        1.0699999999999998`}, {-0.3059999999999996, -1.5100000000000002`}, {{
        0.09337857451064994, 0.29096222492448903`}, {0.29096222492448903`, 
        0.9066214254893501}}}, {
       2, 3, {-1, -1}, 0.25, 8.2741, {0.5220000000000002, 
        1.0699999999999998`}, {-0.8279999999999998, -1.4700000000000002`}, {{
        0.2202656482276018, 0.41442573814674705`}, {0.41442573814674705`, 
        0.7797343517723981}}}, {
       2, 1, {1, 1}, 0.25, 10.387623999999999`, {0.5220000000000002, 
        1.0699999999999998`}, {1.2039999999999997`, 4.22}, {{
        0.04477674586604207, 0.20681341565693934`}, {0.20681341565693934`, 
        0.9552232541339579}}}}, {{
       3, 2, {1, 0}, 0.25, 0.8100039999999998, {0., 
        1.1099999999999999`}, {-0.0019999999999997797`, 2.01}, {{
        4.938247218531167*^-6, -0.0022222112483392697`}, \
{-0.0022222112483392697`, 0.9999950617527814}}}, {
       3, 1, {-1, 0}, 0.25, 0.9781, {0., 1.1099999999999999`}, {0.9, 0.7}, {{
        0.8281361823944383, -0.3772620386463551}, {-0.3772620386463551, 
        0.17186381760556174`}}}, {
       3, 3, {1, 0}, 0.25, 1.158176, {0., 1.1099999999999999`}, {-0.524, 
        2.05}, {{
        0.23707623021026167`, -0.4252894206061945}, {-0.4252894206061945, 
        0.7629237697897382}}}, {
       3, 3, {-1, 0}, 0.25, 1.158176, {0., 1.1099999999999999`}, {0.524, 
        0.16999999999999993`}, {{
        0.23707623021026167`, -0.4252894206061945}, {-0.4252894206061945, 
        0.7629237697897382}}}, {
       3, 2, {-1, 0}, 0.25, 2.0545160000000005`, {0., 1.1099999999999999`}, {
        1.0460000000000003`, 0.1299999999999999}, {{
        0.5325419709556899, -0.498939896306478}, {-0.498939896306478, 
        0.46745802904431005`}}}, {
       3, 1, {1, 0}, 0.25, 2.182804000000001, {0., 
        1.1099999999999999`}, {-0.14800000000000002`, 2.58}, {{
        0.010034799276526889`, -0.09966996578712517}, {-0.09966996578712517, 
        0.989965200723473}}}, {
       3, 1, {0, -1}, 0.25, 2.184676, {0., 
        1.1099999999999999`}, {-0.9759999999999999, -2.220446049250313*^-16}, \
{{0.4360262116670846, 0.4958904661377705}, {0.4958904661377705, 
        0.5639737883329153}}}, {
       3, 1, {1, -1}, 0.25, 2.2789, {0., 1.1099999999999999`}, {-1.5, 
        0.9399999999999997}, {{0.9873184431085172, 0.11189609021896538`}, {
        0.11189609021896538`, 0.012681556891482754`}}}, {
       3, 2, {1, -1}, 0.25, 2.380915999999999, {0., 
        1.1099999999999999`}, {-1.3539999999999996`, 0.36999999999999966`}, {{
        0.7700044856685409, 0.42082963027675074`}, {0.42082963027675074`, 
        0.2299955143314592}}}, {
       3, 2, {0, -1}, 0.25, 3.5113, {0., 
        1.1099999999999999`}, {-0.8299999999999996, -0.5700000000000003}, {{
        0.19619514140062067`, 0.3971178765699312}, {0.3971178765699312, 
        0.8038048585993792}}}, {
       3, 3, {1, -1}, 0.25, 4.009376, {0., 1.1099999999999999`}, {-1.876, 
        0.4099999999999997}, {{0.8777864685177942, 0.3275322643723114}, {
        0.3275322643723114, 0.12221353148220579`}}}, {
       3, 3, {-1, 1}, 0.25, 4.009376, {0., 1.1099999999999999`}, {1.876, 
        1.81}, {{0.8777864685177942, 0.3275322643723114}, {0.3275322643723114,
         0.12221353148220579`}}}, {
       3, 1, {-1, -1}, 0.25, 4.406803999999999, {0., 
        1.1099999999999999`}, {-0.45199999999999985`, -0.9400000000000002}, {{
        0.04636103625212283, 0.21026576176294653`}, {0.21026576176294653`, 
        0.9536389637478773}}}, {
       3, 3, {0, 1}, 0.25, 4.517504000000001, {0., 1.1099999999999999`}, {
        1.3519999999999999`, 2.75}, {{0.4046269798543619, 
        0.49081970929079416`}, {0.49081970929079416`, 0.595373020145638}}}, {
       3, 3, {0, -1}, 0.25, 4.517504000000001, {0., 
        1.1099999999999999`}, {-1.3519999999999999`, -0.5300000000000002}, {{
        0.4046269798543619, 0.49081970929079416`}, {0.49081970929079416`, 
        0.595373020145638}}}, {
       3, 2, {0, 1}, 0.25, 6.071876000000001, {0., 1.1099999999999999`}, {
        1.874, 2.71}, {{0.5783840117947072, 0.49381772618544906`}, {
        0.49381772618544906`, 0.4216159882052927}}}, {
       3, 2, {-1, 1}, 0.25, 6.1860040000000005`, {0., 1.1099999999999999`}, {
        2.398, 1.77}, {{0.9295829747281121, 0.25584852515452633`}, {
        0.25584852515452633`, 0.07041702527188799}}}, {
       3, 1, {-1, 1}, 0.25, 6.584403999999999, {0., 1.1099999999999999`}, {
        2.252, 2.34}, {{0.7702297732642164, 0.4206850004951093}, {
        0.4206850004951093, 0.22977022673578354`}}}, {
       3, 2, {-1, -1}, 0.25, 6.958036000000001, {0., 
        1.1099999999999999`}, {-0.3059999999999996, -1.5100000000000002`}, {{
        0.013457245694043513`, 0.11522216901435964`}, {0.11522216901435964`, 
        0.9865427543059565}}}, {
       3, 3, {1, 1}, 0.25, 7.341984, {0., 1.1099999999999999`}, {
        0.8279999999999998, 3.69}, {{0.09337857451064994, 
        0.29096222492448903`}, {0.29096222492448903`, 0.9066214254893501}}}, {
       3, 3, {-1, -1}, 0.25, 7.341984, {0., 
        1.1099999999999999`}, {-0.8279999999999998, -1.4700000000000002`}, {{
        0.09337857451064994, 0.29096222492448903`}, {0.29096222492448903`, 
        0.9066214254893501}}}, {
       3, 1, {0, 1}, 0.25, 7.694884000000001, {0., 1.1099999999999999`}, {
        1.7279999999999998`, 3.2800000000000002`}, {{0.38804795497891836`, 
        0.4873055916112576}, {0.4873055916112576, 0.6119520450210817}}}, {
       3, 2, {1, 1}, 0.25, 8.2741, {0., 1.1099999999999999`}, {1.35, 3.65}, {{
        0.2202656482276018, 0.41442573814674705`}, {0.41442573814674705`, 
        0.7797343517723981}}}, {
       3, 1, {1, 1}, 0.25, 11.121715999999997`, {0., 1.1099999999999999`}, {
        1.2039999999999997`, 4.22}, {{0.130341037300359, 
        0.3366782608007613}, {0.3366782608007613, 
        0.869658962699641}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.4130444789719152, 2.7569151748438447`*^-18], {Complex[
      0.5861464486009521, -2.825764865181982*^-17], Complex[
      0.8102051226649282, 0.]}}, {
      Complex[0.3140688520221368, 1.8976567723170987`*^-18], {Complex[
      0.8102051226649281, 0.], Complex[-0.5861464486009522, 
      2.8257648651819845`*^-17]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
lQcK3tGRmWfk0f/KHaQZ
     "], {10}, 1, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 12, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyNvXdUFsnzPYxZURGzYs5xxZwWHVEw55zXhDmBukbMYsIMiopZV8SAAXMY
lJwfHnJUUVHECGYMv/0udXs+U737npd/OKdOn356qqp7qm7d6ao1ad5gu/wm
JiZ+RU1MCvz9f3C1Y9eCzxfy6e+W/OX7rFy1/Z7OVQfPS1Igtx5aYtmPxE9q
h0zvyfs/xQt5a/NOuT96ZKvPj9xJvGgTo+jnyVKPOMQ4RFlHsfHp6hMH+69m
nQ1MblSVHrPXZJTQ5Cb0d9N6ds77nnweo/JrZGRET4sYPr+y+PqaTePttHX2
zVuPEjMk0fpUmSS+fqWzu/Wx/oeThbxr3vMqq7x8PN3eJrPnylXWjl3W8nCn
ZGWeW/IDo3l+obfRP4xJvksShBx621elkPGdfZyQQ29P6k2pMzhfHJsnSzVu
HPv2cwM+Pl2NONDDtEE2lxvV+U0mf7dYq/0u9Lb8YfGiPXcl8fFKj8J+iRaO
KXx+ZVO1nxsOXkgVcujtSIHKB+NiU/n6FY8xpZfeeK/NA73NTimScbO3pB9l
+E6P+hdmJyqVGjQ9fP35dxV6Wxo7p83HmfFCDr11HJ1U8vkaTQ69BWz9Yt9r
WwKbJ0uNbjYsrGvzJDY+Xb1RJKpUxm8pTG5Up08K3lXFPE3IoTevWS2TTUc8
5OOVsetbRXU5x+XpysBqNxyHfNHmgd5qx0RFZtul8vUr3x3XuTUYlSzk0Fuv
eyd+PzhU0o8SW79wmd8N8OePQm+uiUM2TdinyaG3Tje6qi+uJgg59JY41KtG
yzNJbJ4sdfin9rnJV1LY+HR1nIvn6wVKGpMb1eIrpjoseabJobcDGysdO+Io
jVfcLYdWWlovlc+vVDSYF7yoJAs59NblaXxuhbGJfP3KoHHnPV980J4XenO8
n9j86G+SfpSnr+ze/PwUR/p8JfQ2qpRapl/nRCGH3hzPfZz3+lKSkENvZTvX
q/WgYAqbJ0u9dCPguqV7Chufrlaf/NxyQQ0uN6qmB4sc67pOmx96K1ra0e11
+QQ+Xqk55XK/5c6xfH7Fw7/LC6uwaCGH3sI31PtatVU0X79SaPQ5n98WaHLo
LchxRungYTFcP8rsEQ3n9CuCfZci9Ga3fc/v74smCzn0Zmboa/lrryaH3oY2
Xr/MpEwymydL/dL8wglj60Q2Pl1tctB6nZIby+RGNf/ChosPXIoScujNdcWU
mJ1OIXy8MsBl7NbIB/58fqVbzKTCEdMChBx6e9/0vnnyWj5PtuJUJNq56DCj
kENvnZuVn9rwRhzXj5Iw+sn4Cr6JCtYHve1u1j930aRkIYfePt563NPQOEnI
obfPqeEV9k2PZ/NkqYfLhrcdWCeajU9Xr5++0qZYzVAmN6rmYTVmnal1R8j/
6w964+OhNz4/9HboX9eTrfD1Q2+f2PNCb9AP6VOB3qBPyKE3pn8FemP2UqC3
D3r7KtAb8wcFemP+I9bL/A3jFeafmF9h/qxAbx/1/o/1K2y/KNAb21/Qj6Lf
j6+E3vT795XQG9vvQm/sfBB6Y+eJ0Bs7f4Te2Hkl9MbON6E3dh4KvbHzU+iN
nbdCb+x8FnpboT/Phd5w/g/Ne18IvT2j9wXk0NtKer9ADr0NpveRfp4sFe8v
/fh0tTK97/Ryo4r3I+T8fcrGK3j/svmV8fS+hhx6G0Hvd7Z+JZ7iAcihNyuK
H5h+FMQbFJ8IvSE+gRx6Y/GM0BuLf4TeaunjJaE3Fl8JvbF4TOiNxW9Cbyze
E3pj8aHQG4snhd5Y/Cn01kEfrwq9Ib6dmxcPd4HehlE8DDn0NpPiZ8iht7MU
b+vnyVKPUXyuH5+ubqZ4Xi83qj0p/occenOkfIGNVxwov2DzK2GUj0AOvcVS
/sLWrzylfAdy6G0v5UdMP8oYyqco/xJ6Q/4FOfTG8jWhN5bfCb3F6vNBoTeW
Pwq9sXxT6I3lp0JvLJ8VemP5r9Aby5eF3lh+LfTG8nGhN56/Q29j6hft7F1Z
y5eht5j0EsMaWURLef2Q8BOdsp5EsXmy1Bl9lhW6MzlCyuuTzYrZnAj1l/L6
0ZXrOXY64CPl9fX7mVuM9/bh4xX3Oult1857IOX1S7xtYktX95Py+qRRS7b3
+cF/929/W769rnfpICmvv9PY8kvJOiFSXu87qMbLNq9Cpbx+SOagW/08Y6W8
/n5a9VFfBsVIef3cpV2uptWNkvL6DGunW2M2h0l5/XzfFLsEu2Apr/8yKaVK
xeAgKa/P8T1h13eiNF7ZM2vRQZ9pIVJeX3LJZ3f3a6FSXt/3c6p1DdtwKa9/
fbdK36yvEVJe/9b9y5fXwwxSXl91aOK3IuaIf7S8voj5xf5zgmOEHHqb4FQ2
9kCBaCGH3o5fcty5shmfJ0vNMpuzKzErUsrrJ0wa8+TN+ggpr/dbmHb1vH+4
lNc3Sg38YLYunI9Xjl43fZ1xjcvTFbeJF46OH6/ND73ZDb9Qqqo9X0+2UnWK
pYPPYoOU188/d+PA9uWSfpTOlax7JxiMUl5fvtr1m5kemhx6+/n94Lk+P6J4
XqzW/6PpoJEVotg8WWprO99651sZ2Ph0tcfoQ05TQyKY3Kh+KpNWvveccCmv
H1Op6DujXZiU1/9Q/EPP+4RKeX1cG9+jU7dpcujte88H3/dV5PP8HYdkvzk9
o5q2Hujtzx3thkysyp8rV6mdUn6aZbyWz0JviaFng7sujRRy6C3XYvCs0/si
hBx629k0a0OXGuFsniz13bIVk5eMDJXy+ksuPp+WrAuW8vqDsevijkQESnn9
xKMW6/Z1C+DjlfI7zmX8Fe0n5fVOZX4/3KSFJoferBfHrVxzi8+TreR0r+Zk
aamtH3rreq/pov0ORq4fZfJ9n7N2Q7AftbxeWbLCelWtUCGH3gpl1BvknxQk
5fXjnNvNjK8ZwObJUuet9Fpj29RXyuvDauW/fm+Yj5TXdy2bf+iC4nekvH5c
3YoFXWfckPL6Y1f8RkeaXpXy+irmw8Yu8rsn5fUNO207Hz5TWr9ytWLhY44t
wqS8/u3sx+0ddkRy/SjDV41p7zQwSsrrCzwacrmfU5iU128rab9/Q2aQlNc7
VijU88BNPymvP1swdtbqIj5SXn/3wOsKrolXpby+kFv9CQvr/vX/O6/n46E3
Pj/0du5f15Ot8PVDb7vY80Jv0A/P66FPnte/0utf5AvMXiJfaKS3r8gXmD+I
fIH5j1gv8zeRLzD/FPkC82eRL8zX+7/IF9h+EfkC218iX9DvRy2v1+9fLa+3
1u93oTd2Pgi9ddOfJ0Jv7PwRemPnldAbO9+E3th5KPTGzk+htzf681bojZ3P
Qm/f9Oe50BvOf57X433B83q8X3hej/cRz+t/0vuL5/Xx9L7jeT3ejzyvx/uU
5/Vf6P3L83q8r3le34be7zyvRzzA8/pfFD/wvL4CxRs8r0d8wvP6efp4RuiN
xT9CbyxeEnpj8ZXQG4vHhN5Y/Cb0xuI9oTcWHwq9vdTHk0JvLP4UemPxqtAb
4lue11ejeJjn9YifeV7/luJtntf3ofic5/VmFM/zvN6F4n+e13+kfIHn9bmU
X/C83oHyEZ7XI3/heT3yHZ7XIz/ieT3yKZ7XI//ieT3L14TeWH4n9JaozweF
3lj+KPTG8k2hN5afCr2xfFbojeW/Qm/T9fmy0BvLr4XeWD6u4SGUv3t8DVtl
/iW/T+/ABpUde3xTBy8p3qnDyAQh77xu5AHHqx/Vs9+zo49mxAo59GlSyv6T
RXSc0u+f+Z8Jf37Uv1GDI3WSxHjoeYrNN0Oj3do8zZXNVVbWea+W6dDls32U
th7of8PajgPnvtHkPT4t6PCjdqa698HjS47nY9j86Wq0eZnCtWy1+UeneC7+
/uOh+tLf/EVc+1g23qhOdjiVGj4lTsjz9Byq5revd8twRZPDjqZfnqxtqSQo
Pf953ljxvPPbrp01uEay8jP2S88RXU1onV/VTUtuFljwJo49V65qTP9t1rRP
mp7b/7Oey0rK3TsdNuUkiHmg5xe33r7N+hon5B0vn7z1Y+cH1azLETf3+3H8
uZQPSYVHTJ2i6T/PH+KUPQ4L/Ju009YJu8SMvBDSr0e8kI/9R29v1dGeKYtD
KiVwPSsFCh7p3rdqipDnreepUiXrw4dDgSliHthxcHLCuGpNtefKW0+G6he4
99ebxolM/3/HjRWDbUyfafMP7djtxnfv10pgoxPuH3qksvWnq10HldhWeGei
kOfNk6y6VLZwMhkp+aESPqtagTR3bf72j98lOc7OUQ43d9zQ/FIKm9+oZnWv
0KNKL01vlv/IH6jvj74MuzQwhen5k9KidNt97xckC3mfvP2l1HS7EDi9ZJKY
B37lUu+IfaMPKdxPlIkFDjV6+ehv/UzpVdeqcq7al/ZpY7MnFS/fFfUC5B2i
Xq/Xf646c0bNTSnvNft2yFu/ktt+eVKZl6lifvjbLfvWy55HaPNzPgDGt83T
m/q0Qh9b+30C51e7/Md64J+D/JfHni+Xxu2lhJa+1+T6LW098E/TzlMPdSsn
6iBCnkB1B4wfkucn6tAbTY6t7C/qEWorGg/eAvMfZXa15DWLh6SxfZehLN45
vUT5aWlifvjzlZpmlRpFafNDPozqIxjfIW9fqH8UOLtl8gBRN0FeKfgSej1k
KY9nLbr69JDm52Py9qPybJ/9ydgmXD/p6uOZPTb2upzC9JOujqU6DsZ3yjsH
1GcX7nu8ryLqO2pLGg+eBjsfFOPskKLz62nrtMo7f5TW523Vd4OS2XqMapTH
u2AH2zS2Ho3vgfH18s49NWDery5/dXwoxluy8fpz45MyJjx2p+eAJH7eKsfy
FVmxbJu2X7C/PLPPlrhYU5sfctTF2H5R9o4Z4b7wcIJiEvd/8ndqL9p3u78+
/NGqaiLzh1x19fAGpuZ/xjN/0Hg1GD887/2iNPVvusFtAl+PtxXWg9/Fvpv9
Nqjbq5ZJQm5F72WXCk8P3vNK4vpXfvPKTd9u+pDrXzlE9UGM/yPv/ag8qfXH
U/d1mr06AD+n8fhd7Ds/38CaaeeThdyS3uN1m3ru29Q8hfunUqB3/yONTbk/
pCuVqI6J8T3z3u9KzT2Pq05K0fy5LRuP38W+s+h5IsjieIqQ21CccMhL8Tcp
pD0v9lfjkdFJyydL+1GxpnorxrfIey5l276R9k8Spf0uxuv1k67OtRz5x4LT
2np60r6bMKr5h/4OfL/8vb8+lkytuDqJn28K6sIY347eU6lm++/Z/s/5Rn6i
oL6sX49R7Tvkj/KGg5rerCnOsYwr/jhxjbYe7K8KyvslKSEJ/P0i5mfvI2VV
ydujXE5r/t+N8anwu9h3Xm9OWCR5SftIGVWperFX+6V9JPhXI/LiTLU7xVf2
h/yGzUtNYv6Qqz63rvtuV0wCf14l/+utk/yC4sU82F+2nY8N+LNuspB3oPiq
dJEOHo/Ck7k+lfzxo31uOcRz+yo1f/Va3vOrtk7sl9beMf0mbtXmH0nx1Tr7
epUrxfP505XuQa29Kp+JFfJOFF8N3FZ/TqvmsWIe+H/cwlu/rXmRJOQ2FF+9
a7T+0PU+mn/Cz2dXMy4dczeG719lr9XiUtNfx7D1p6sNVrmMGlUyUch7UnxV
9WDdMtZKAj8flKQDTZe779Hm70B++/TK9bEhE/n8RnVzkUrOcy00vVlTfOX1
yn2D7ZNoMQ/88Np228R7xWP5+ay8u1Suerq5Zl/42/nTI/IdPGfkfqKE3Fkc
3qFAvDI2L55Xu9XzGeX487Pq1aBfespm8Kz87vRl/Cu9/nPVNMp32PqV9oOy
kx9PixLzC/6M6eVFOb9r80MOXhPGK3TObyn7WyO7rUlifFvyqy/Ej2L6VBqO
uLj5fVsDt5dS97l9wxYTDGJ+Udfet7fWXw20+Vuz+TF+EMVX7av+6eN7P0GM
b/n/uZ50xWDpkFXHJFLIu1F89eHt8O8FpkWI+eHPJzMXFXW4GC/mh/wo8cQw
vg+d81crL611pE+cGN+O/FYlvhl+F/5fz8y3i21HTT/jKL6yXuJ0st9orp90
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
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
FmfWTv8DQ2HsJQ==
            "]], 
           Polygon[CompressedData["
1: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
An+zY/pRf53t++8s+Z2Ja4DvqxqD9h9cDfwO
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
dktwe3HV7VDeAj6Kzo/RruTXlMspX3s85p7K8X6WDUSfqFx0eIyVQ1PPRXb3
GPUnU+6WrSNbF2xLui8chGxO4hy9elxb5VCbqZsC3p97Tb9DfhftTuT/Xant
v1k8U82jvmz2LupfDj5T32feA+3FTO2D7lHw/sH3osnwa2Sn0W88HTzGPfD7
tL+U5fHMdqbfk1L7lqOi/D34mTp78BPAqZnzwwfgr1BWwz8BO9L2BNrMov7F
4NjeJreOzn1r+Gm54+5SdE6Nc9RaPRznojndr/1XPglOTp3vaY2aUr5FfmDq
/hfAHwenZL6X1M6dZ8rWDoXPzuyTDoGfntu+f0P2LaUDvHnuu61810DwreCc
ZAb1tVPnq3XAYfyfzzpu0X2UNsekXmedd+3/Tbn9QDXlXeCs4LN4NfJHdA+R
DcGnBucb84LXSf7tZPBv1D0FrqDP1qn3qB14czzni4JzbI1lf93RwJR+XgVf
lk2g/zz4e+b84mJ0bsztK3UGx1K2J5777GA/sEZxNXNuNj44DsqeF8L/yJy/
/D0313cu0foF77vuCzqjuksuke+Pfm9R9AM6R8vgd1K3Ff3TwE6p7wLto7+V
7U2JPkp+7xftQ+a76RW511Br9XVwfib+KLgssw8+C50zc9uKbEk5mGKEYkUh
dU6onF73XNnP1uB4pP3VPh9O23PQm0u7sng2ddfXO4TeCmZG/6Cc6EHl5+DU
xPerh+TjUr9XzIz6s6NfUu69gf73imdZZ3ptZj9/fe41Vy5xQdxz+UnlhrL/
JvJNyMdnfnOokrut/Pxc6p+Rb4K/CNalzKf/+qnvehlYLff6aJ3OgU/ILK8E
7095MtqY7mi6u9VCFsBxid9ufox+e1qwLcmmLow5keJm3aJ9sXyyzvi5sU/l
w2nu+4beKORvFWOflg0qBqF/bPC7kmKNYs4Pmd85uivnYY9+o+35wXsiWz1f
/jzze47uaENku+j8pZy6zP7tzzK/U6m/CfTTltIntT/U21Ff2vaAd6b+yEJ8
M8qcE14v/xRzGtnAacrf6G8r7RZGnynfuYi6G9HpEu/9k5DX5P8SxXL4mGB/
Irs+WHn1/++Emf2o7lCnpM7ldN6V18zP/H7TM/oonY8jcs9Zc+8PnpfaVs8F
h6IzGN432Bfpvn+6/B/fGZ44Nium6x56YfCdTu9G1WNMUcy9IjiOD5CfD86R
FNeSzO8GuuvXQL9Jbh80PbPvkg3fAbbSfTm1b5RdyQ/frtwsron842XBZ+RG
sEXU132tGM/X/cH+RX5mebBtzKTdBsZycfC9rSz3XnyKfr/gfR+knBa+qeR3
k1HxvjBU/hM8mjISfja4reQ74XCdXekmthvp6Fvr9W6g84i8N7Id0fZGZJbr
HWVdyfdq3a/7BHPd/c8KvkuOhp8XHGdlM5tLtifZlWxY73LKFUfE2KQzWjd3
/NW9oVPuvFc5+afg9ch2JbazOWXuf260PeX1x+deW9l7Au+R2z6Ue8uWlIcP
p/5Y5Jekzn/axTiiOPdN5tyhMfWtol9qCd4b/Zju7NJRnDpAOVXmGFtPd8nU
cbZx6vOgdTgj5gDyV41y5wZ6N9rOOjSL35ge8zflj02RXZT7fWFV5jcn+ZA2
4Pm5/ZreB24NfifR2bkydWy6Grw197urbOanzHeXY5BNDF439bk4cxwcFeOI
7hEzgm1CtqH9vSbm2Yq/8j86Z32QtY9+Q/cjzV1zbYDssBjrdaf7hfmNTXzP
lB1oHWRjslu9zZ4S/AarO9dLsiv0vkr8lndV7jxeMfcmxenEdyrNRfPrF/NW
zVfz1vuD/MCXwX5Gd8RTpJM7D1ZurHux/PYlwXPXO80JuX2FbGcje9Er2oPe
gf8LIEYb+A==
            "]], 
           Polygon[CompressedData["
1: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
c2XESGOla/yyMnKYbvk+5jbGwFOLiIHGRj22vvuFMry3GqVW7cv9OjdifW9T
hEdxPavZO2f/qeVeq3c35/AextzTi/D89+X4OdaO+awqYuaORXgQY6me/sQi
Ysyk1MMeRXhQc7v1Uh/N8V6owkPppdbh/ZYaO9n2yHjaJ2Oq+x7bogoPohdx
zbp2x6SfPIxj2xsfna+cvznt7RoRA42Frpk77D/uMYS2NTnnoWZ4BL2COZC5
kPF4bvoHx1cP9WwRMcnYdK4xyLkDL+Ze49XTesRgY7EapBbtBXdqhMaoNT7T
Z0+Et6pHDBlUhUapVXvDazQi5u+f68P+tg821WNk3xiTjc3GRL2yfmpDtivL
yN0GpP714LrHmuF59kx/dVOOp17KmD67Cg1erx4xTm3u4pimXt3TDE1W69Q8
tVrNa9ZDk9QmNWxxEf2ttl0ETy3C833F8y6Gp8Cd1bQyPJfea37O19uaoYVq
YlWFp1Kf5uR8ergZXkpPtQHtj6hpcF9jShWeR94y+/9+uB08yPdrhKfeK+Od
/vI+Y06u79U5/1/wD0V42qoRGr/U+NwS2m/f9ivCU9rH5kCXF+FBzI3UYP2s
ObPabL76RWvERGNj3ZhQhGaqnXqMR4vIsfQepTGqNfTyqSre1/HSc95eRk1i
cean5q7Hwf/K67+uwtNMUJ9bwuvo4T6CN2gJb6eH+Yrrn8580ZqGtY7na1Hb
aAe3cH4rW72InNTc9FHaj9BL0d6miHzWfLyDMTn1ehLPbw+vaI317Po2f/8y
89NxVeSk5qbm4CeU4bn0WnouvZj5VQ2eUIt8Wg94G7x6S3jD38N3FlFDeL2M
nM7czpxuRhk5n7mfOdn8KuaYc+0hjv2Btj+phXm+uaDr2dzEGL+oihxFNmea
mev75byfuaA508QiPLK5lDmoXlVP+WYZHvf6InJeve+Rzch11UdjoznqLUV4
VL2qnvaufJ56oqe+GV5cC69tDm5ebV5rbn5qM3Jp7/8efHYzvGyn7J+R2W5O
q/d9O/2t/v6IZuTYl2S8N/e2BvcT4/FiLeodPzHen7VG/4+top4yvTVqYM6P
H+B3cv48VkVN6sCMN9OqqKlYWxkFH1RG/eSDHG/rFxeWEfv1pHrTZbR/ks8/
pYwa2CEZ362NWZM6CF5Si1qVOdcJqRfmYt7DeXpB3nuvjEfzaB+d/nZQER7I
9WYOPTT139x6EzURnpJ+/ODUU3Oej/k9ezYj13P9PVyGp9bbup5PKyPnOD/n
o7lIW3hJa/jz88qo0Y0sIkeydmdMOizj4/1l1AD2Tr1Qrx1raynWMF5Jfz05
61nWuqwvvZX1I2ud1rSsbf1X/awiJzQXNCc0V1ye4znamFhGTvRYETUT55/x
cJ/sr3vTDx6d8c/YZ03R2qI1EWsj5phHpD8x97QG2wV+sxa1WWuMXuO51h6t
YR6Z/Wlt8/ucPw/Dj1bhx1+F79dDlZGjmKu8BE+sogZ5XPqj9+Gn4QH18Pj9
q/DAnxURj4w/XTNeGe96Zsxz32O90p+MSL94Q/qdnbK/bobXSD9ujDHWqAGu
TTVH7XmcrXc9c/gq8osd9Ib5PHOadfL9OvDbnoA3ggfD61ZRAx4O79wStWFj
pLFyjawPdKsilnXN/N0YZiwbWA9vsVkV9+oLj2vGOxi7etXj3brn+V5vbOyf
9YfN69F35ksbtURMNDa2yXy2kflWh8wvjInGRvvT2Nk285Xn8v3351iXRtQw
rGXs3hK+RL9sbrwrvJG/pYqah+f1yXfwXfY0J6tCP+9I/zIl9f729N9fVVFT
uCHjg/HRPts5+2OzevzeIZm/yUPq4bN2cC2kvxrGsX30eI3os77pt8zd9ZP9
009YuxlSxXF98jaZs3XI8V6zipyuY45ne+63C8f2Y3/bepzfN+s/ek69p55S
b2nO2jn9Suf0f7671+jDR1RxL+dcl3rkyM7FUel3BqSfWjfHw/nm3PqsjPrG
e/TRFfDXZXit6fDfmuG5jH96Lr3YAWVogZqg1htjJySrFcZ0Y7sx29htDfpZ
+Jv8fqNnUPtdw67lYTkezgnnxlqNmBvD83uHObba5Rp3rQ/K9eKYODZPVFHv
MAYYC/YpQxu8v7HGmGRs+DBr876f2qBG6EXGV1FrsSZrrVwNN3+1xqG2+/ue
yXa9xcj8fe2KyE3Naa1tWFMx1zWG6jXGFRFb55ThrR6Hz4T/WEZt3vzYWo4x
xdhiPqy3078PrcdvVBvMcfV67YvIfX0/Y83qef0PZXjLFfDtal+u/5Xwf4xt
jchdzffN/1eWkRtZE7E2Yr21V9YP9M56FHMTcxK9yypZn/gUvroZnkdv+FwR
XmhJFV7Imq613YVl5DJfwTfArakXX8PXNyOGG8uXZn9b47KWYE3B2pf1ha5F
5Ozm0+p5kV7SWH16Gd7WGoK1hN/m/NND6iWPzPmlB9YLn5LjryfVmxpT9ZbL
WyPW6jHNJfWrek9zVHNVPbHeWA0wl9oytcEap16oTfpNayytud5WaUT+Yl/a
p81G9OlPRdRk7GtrUNaarPFY69G/j8785pMyalKeY1uZ+eDA1PvVG5EvNTK/
aldFzerbIvq4yPzLWtgucM8q1vT7tHdsibXuGHxeRA3JsemY8cOcxdzFMfum
yDlSxpzyw+z6LTHXnFPLitAj55o1Lmtd1phWlFHzb8l8ym8B+gVrqWrMgio0
Z8Oc36s1Yk46N40Zxg7n2Kfpj1fCf4c/Tn89v4zNbw5+a7DNGu7dma84N62x
zStiDlp78/e/l/nXiir88r2Zb00to4Ytt0t/bgw0Fu4Gb1LFmnXt+o3D5/67
GbU7a3jfl/HN5+38ffrlj8vwznpovbY5w0M5X76t4hqv9XvRJc3Q2Jl5f7XX
byDWJKxF+G3Eb1zXFZFf++2rJet/czl2TTM8ufPR+sicKmJsm/QrXbM/ZxdR
E3Ut+812Vs7Hlkbk5J7vPdtW8c3prSLyV79FXZfjo4a0NuKdp2V+8E0ZMX7V
etYoq6gXbJ51C9eL33DezfXg/NcztK/H/He+Xpr3s0+Ww/8DSesGZw==
            "]], 
           Polygon[CompressedData["
1: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
pu9De4P2Pw7qGpo=
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0ckuBEEcB+DSZuw8ACenmTjb9277NoODCweZiyXBiUTixFXwAIwZjOEl
XIi3kHgUXyeS/vX3S+pQ9a/qLZ1sHjeEEI5kSzllHIWQyKW+x1te8541vnM2
G8IbZ1hnwlhe9WnWOMUXTnJCnvVxPnGMVY5yRCr6MB85xDIH+cAPe96xzive
8IyHPEijz3GHfSwyy0w6h/5rrgF+M88qK9KjX7CLJab3kGRCiNK52JjOSV+Y
91sQRwqLbOISm7nMFWnRV9nKNbaxwKK06+vs4AY7eW7DbpaZ4ye/pF//YczI
YQrMMS/b+q61/f/3+gOXUiik
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0bsvQ2EAxuGv2tpJhEEqZlYJrbr3tHpvEbsds/C3EKv7/ZLYWCVMYtCw
skgMjB4x/PK8Jzkn53w5/UurzZVYCGFZ920hpFxcxUO41oDd4jDjiRBy7GWT
hfYQGsyzzog51ewZVjnNCqc4qbI9wRLHWeQYs5q1R1lghnmmGXHIO0eY4iCT
7OObb3tVp33DJLf54ywbXNeHvcgWs3xkD7t1Z3858yWfucMoGcIu89xjgfss
sqQDu8xDVnjEKms6tus8YYOnbHJOZ/Y8z7nAC3565y27fMsD08zo5e9evnON
39zklhLO+OS5jtj///oFu2gylw==
          "]]}, {
         Line[{1090, 1089, 1817, 1107, 1613, 1825, 1130, 1841, 1619, 1823, 
          1148, 1629, 1858, 1168, 1638, 1882, 1192, 1879, 1643, 1897, 1209, 
          1656, 1918, 1227, 1668, 1941, 1251, 1956, 1674, 1938, 1267, 1687, 
          1979, 1287, 2001, 1285, 1313, 1998, 1311, 1334}], 
         Line[{1091, 1609, 1818, 1108, 357, 1131, 1840, 1621, 1844, 1149, 
          1630, 1863, 1169, 1881, 1170, 1193, 1900, 1645, 1896, 1210, 1658, 
          1922, 1228, 1940, 1229, 1252, 1955, 1676, 1960, 1268, 1690, 1983, 
          1288, 2000, 1289, 1314, 2015, 1315, 1335}], 
         Line[{1092, 344, 1110, 1615, 1827, 1132, 1843, 1623, 1848, 1150, 
          1862, 1153, 1172, 1884, 1175, 1194, 1899, 1647, 1906, 1211, 1660, 
          1921, 1231, 1670, 1943, 1253, 1959, 1678, 1965, 1269, 1692, 1982, 
          1291, 2004, 1294, 1316, 2017, 1319, 1336}], 
         Line[{1095, 1610, 1820, 1112, 1832, 1116, 1134, 1625, 1851, 1852, 
          1152, 1633, 1870, 1174, 1889, 1178, 1196, 1909, 1650, 1905, 1213, 
          1662, 1931, 1233, 1671, 1948, 1255, 1968, 1681, 1964, 1271, 1694, 
          1991, 1293, 1701, 2008, 1318, 690, 1338}], 
         Line[{1096, 1611, 1821, 1114, 1618, 1835, 1135, 1850, 1627, 1855, 
          1154, 1635, 1869, 1176, 1888, 1183, 1197, 1908, 1652, 1913, 1214, 
          1664, 1930, 1235, 1952, 1242, 1256, 1967, 1683, 1972, 1272, 1696, 
          1995, 1295, 2011, 1302, 1320, 2021, 1327, 1339}], 
         Line[{1097, 1612, 1822, 1115, 1834, 1125, 1136, 1854, 1628, 1838, 
          1155, 1875, 1164, 1177, 1642, 1891, 1198, 1912, 1654, 1894, 1215, 
          1666, 1934, 1236, 1951, 1247, 1257, 1975, 1685, 1971, 1273, 1994, 
          1282, 1296, 2010, 1307, 1321, 2023, 1331, 1340}], 
         Line[{1099, 1106, 1826, 1119, 1129, 1842, 1139, 1147, 1859, 1860, 
          1159, 1883, 1639, 1181, 1191, 1898, 1201, 1919, 1657, 1917, 1219, 
          1226, 1942, 1240, 1957, 1675, 1260, 1977, 1688, 1980, 1277, 1286, 
          2002, 1300, 1312, 2016, 1325, 703, 1342}], 
         Line[{1100, 1109, 1828, 1120, 1845, 1622, 1140, 1861, 1631, 1864, 
          1160, 1171, 1885, 1182, 1901, 1646, 1202, 1923, 1659, 1920, 1220, 
          1230, 1944, 1241, 1958, 1677, 1261, 1981, 1691, 1984, 1278, 1290, 
          2003, 1301, 684, 1326, 2026, 1708, 1343}], 
         Line[{1101, 1113, 1830, 1122, 1846, 1624, 1141, 1865, 1632, 1867, 
          1161, 463, 1185, 1902, 1648, 1203, 1924, 1661, 1926, 1221, 1234, 
          1945, 1244, 1961, 1679, 1262, 1985, 1693, 1987, 1279, 2005, 1700, 
          1304, 2018, 1704, 1328, 2027, 1709, 1344}], 
         Line[{1103, 1117, 1833, 1124, 1137, 1853, 1143, 1157, 1871, 1873, 
          1163, 1890, 1641, 1187, 1199, 1910, 1205, 1932, 1663, 1929, 1223, 
          1238, 1949, 1246, 1258, 1969, 1264, 1992, 1695, 1990, 1281, 1298, 
          2009, 1306, 2022, 1705, 1330, 709, 1346}], 
         Line[{1104, 1121, 1836, 1127, 405, 1145, 1876, 1636, 1874, 1165, 
          1184, 1892, 1189, 1911, 1653, 1206, 1933, 1665, 1935, 1224, 1243, 
          1950, 1248, 1970, 1684, 1265, 1993, 1697, 1996, 1283, 1303, 2012, 
          1309, 696, 1332, 2029, 1711, 1347}], 
         Line[{1105, 1126, 1837, 1128, 1144, 1856, 1146, 1877, 1637, 1878, 
          1166, 1188, 1893, 1190, 1914, 1655, 1207, 1936, 1667, 1937, 1225, 
          1953, 1673, 1249, 1973, 1686, 1266, 1997, 1698, 1974, 1284, 1308, 
          2013, 1310, 2024, 1706, 1333, 2030, 1712, 1348}], 
         Line[{1337, 1322, 2019, 1317, 1297, 2006, 1292, 1274, 1986, 1270, 
          1963, 1962, 1680, 1254, 1237, 1946, 1232, 1216, 1925, 1212, 1904, 
          1903, 1649, 1195, 1886, 1640, 1173, 1156, 1866, 1151, 397, 1847, 
          1133, 1829, 1616, 1111, 1093, 1819, 1094}], 
         Line[{1341, 1707, 2025, 1324, 1703, 2014, 1299, 1699, 1999, 1276, 
          1689, 1978, 1976, 1259, 1954, 1250, 1239, 1669, 1939, 1218, 1916, 
          1915, 1208, 1200, 1644, 1895, 1180, 1880, 1167, 1158, 419, 1857, 
          1138, 1620, 1839, 1118, 1614, 1824, 1098}], 
         Line[{1345, 1710, 2028, 1329, 2020, 1323, 1305, 1702, 2007, 1280, 
          1989, 1988, 1275, 1263, 1682, 1966, 1245, 1672, 1947, 1222, 1928, 
          1927, 1217, 1204, 1651, 1907, 1186, 1887, 1179, 1162, 1872, 1634, 
          1868, 1142, 1626, 1849, 1123, 1617, 1831, 1102}], 
         Line[{1350, 1349, 2031, 1367, 1717, 2039, 1390, 2055, 1723, 2037, 
          1408, 1733, 2072, 1428, 1742, 2096, 1452, 2093, 1747, 2111, 1469, 
          1760, 2132, 1487, 1772, 2155, 1511, 2170, 1778, 2152, 1527, 1791, 
          2193, 1547, 2215, 1545, 1573, 2212, 1571, 1594}], 
         Line[{1351, 1713, 2032, 1368, 732, 1391, 2054, 1725, 2058, 1409, 
          1734, 2077, 1429, 2095, 1430, 1453, 2114, 1749, 2110, 1470, 1762, 
          2136, 1488, 2154, 1489, 1512, 2169, 1780, 2174, 1528, 1794, 2197, 
          1548, 2214, 1549, 1574, 2229, 1575, 1595}], 
         Line[{1352, 719, 1370, 1719, 2041, 1392, 2057, 1727, 2062, 1410, 
          2076, 1413, 1432, 2098, 1435, 1454, 2113, 1751, 2120, 1471, 1764, 
          2135, 1491, 1774, 2157, 1513, 2173, 1782, 2179, 1529, 1796, 2196, 
          1551, 2218, 1554, 1576, 2231, 1579, 1596}], 
         Line[{1355, 1714, 2034, 1372, 2046, 1376, 1394, 1729, 2065, 2066, 
          1412, 1737, 2084, 1434, 2103, 1438, 1456, 2123, 1754, 2119, 1473, 
          1766, 2145, 1493, 1775, 2162, 1515, 2182, 1785, 2178, 1531, 1798, 
          2205, 1553, 1805, 2222, 1578, 1065, 1598}], 
         Line[{1356, 1715, 2035, 1374, 1722, 2049, 1395, 2064, 1731, 2069, 
          1414, 1739, 2083, 1436, 2102, 1443, 1457, 2122, 1756, 2127, 1474, 
          1768, 2144, 1495, 2166, 1502, 1516, 2181, 1787, 2186, 1532, 1800, 
          2209, 1555, 2225, 1562, 1580, 2235, 1587, 1599}], 
         Line[{1357, 1716, 2036, 1375, 2048, 1385, 1396, 2068, 1732, 2052, 
          1415, 2089, 1424, 1437, 1746, 2105, 1458, 2126, 1758, 2108, 1475, 
          1770, 2148, 1496, 2165, 1507, 1517, 2189, 1789, 2185, 1533, 2208, 
          1542, 1556, 2224, 1567, 1581, 2237, 1591, 1600}], 
         Line[{1359, 1366, 2040, 1379, 1389, 2056, 1399, 1407, 2073, 2074, 
          1419, 2097, 1743, 1441, 1451, 2112, 1461, 2133, 1761, 2131, 1479, 
          1486, 2156, 1500, 2171, 1779, 1520, 2191, 1792, 2194, 1537, 1546, 
          2216, 1560, 1572, 2230, 1585, 1078, 1602}], 
         Line[{1360, 1369, 2042, 1380, 2059, 1726, 1400, 2075, 1735, 2078, 
          1420, 1431, 2099, 1442, 2115, 1750, 1462, 2137, 1763, 2134, 1480, 
          1490, 2158, 1501, 2172, 1781, 1521, 2195, 1795, 2198, 1538, 1550, 
          2217, 1561, 1059, 1586, 2240, 1812, 1603}], 
         Line[{1361, 1373, 2044, 1382, 2060, 1728, 1401, 2079, 1736, 2081, 
          1421, 838, 1445, 2116, 1752, 1463, 2138, 1765, 2140, 1481, 1494, 
          2159, 1504, 2175, 1783, 1522, 2199, 1797, 2201, 1539, 2219, 1804, 
          1564, 2232, 1808, 1588, 2241, 1813, 1604}], 
         Line[{1363, 1377, 2047, 1384, 1397, 2067, 1403, 1417, 2085, 2087, 
          1423, 2104, 1745, 1447, 1459, 2124, 1465, 2146, 1767, 2143, 1483, 
          1498, 2163, 1506, 1518, 2183, 1524, 2206, 1799, 2204, 1541, 1558, 
          2223, 1566, 2236, 1809, 1590, 1084, 1606}], 
         Line[{1364, 1381, 2050, 1387, 780, 1405, 2090, 1740, 2088, 1425, 
          1444, 2106, 1449, 2125, 1757, 1466, 2147, 1769, 2149, 1484, 1503, 
          2164, 1508, 2184, 1788, 1525, 2207, 1801, 2210, 1543, 1563, 2226, 
          1569, 1071, 1592, 2243, 1815, 1607}], 
         Line[{1365, 1386, 2051, 1388, 1404, 2070, 1406, 2091, 1741, 2092, 
          1426, 1448, 2107, 1450, 2128, 1759, 1467, 2150, 1771, 2151, 1485, 
          2167, 1777, 1509, 2187, 1790, 1526, 2211, 1802, 2188, 1544, 1568, 
          2227, 1570, 2238, 1810, 1593, 2244, 1816, 1608}], 
         Line[{1597, 1582, 2233, 1577, 1557, 2220, 1552, 1534, 2200, 1530, 
          2177, 2176, 1784, 1514, 1497, 2160, 1492, 1476, 2139, 1472, 2118, 
          2117, 1753, 1455, 2100, 1744, 1433, 1416, 2080, 1411, 772, 2061, 
          1393, 2043, 1720, 1371, 1353, 2033, 1354}], 
         Line[{1601, 1811, 2239, 1584, 1807, 2228, 1559, 1803, 2213, 1536, 
          1793, 2192, 2190, 1519, 2168, 1510, 1499, 1773, 2153, 1478, 2130, 
          2129, 1468, 1460, 1748, 2109, 1440, 2094, 1427, 1418, 794, 2071, 
          1398, 1724, 2053, 1378, 1718, 2038, 1358}], 
         Line[{1605, 1814, 2242, 1589, 2234, 1583, 1565, 1806, 2221, 1540, 
          2203, 2202, 1535, 1523, 1786, 2180, 1505, 1776, 2161, 1482, 2142, 
          2141, 1477, 1464, 1755, 2121, 1446, 2101, 1439, 1422, 2086, 1738, 
          2082, 1402, 1730, 2063, 1383, 1721, 2045, 1362}]}, {
         Line[{342, 612, 1973, 611, 606, 1970, 605, 1969, 600, 1966, 599, 594,
           1961, 593, 588, 1958, 587, 1957, 582, 1954, 576, 573, 1951, 572, 
          1952, 569, 568, 1948, 565, 1946, 564, 561, 1943, 560, 557, 1940, 
          556, 1941, 553, 581}], 
         Line[{352, 575, 1953, 574, 571, 1950, 570, 1949, 567, 1947, 566, 563,
           1945, 562, 1944, 559, 558, 1942, 555, 1939, 550, 545, 1934, 544, 
          539, 1930, 538, 1931, 533, 1925, 532, 527, 1921, 526, 1922, 521, 
          520, 1918, 515, 554}], 
         Line[{354, 339, 1817, 341, 340, 1818, 343, 344, 345, 1819, 346, 1820,
           347, 348, 1821, 349, 350, 1822, 351, 1824, 355, 1826, 358, 359, 
          1828, 362, 363, 1830, 366, 1831, 367, 1833, 370, 371, 1836, 374, 
          1837, 375, 377}], 
         Line[{380, 353, 1825, 356, 357, 360, 1827, 361, 364, 1829, 365, 1832,
           368, 369, 1835, 372, 1834, 373, 376, 1839, 381, 1842, 386, 387, 
          1845, 392, 1846, 393, 398, 1849, 399, 1853, 404, 405, 410, 1856, 
          411, 414}], 
         Line[{416, 378, 1841, 382, 1840, 384, 388, 1843, 390, 394, 1847, 396,
           1851, 400, 1850, 402, 406, 1854, 408, 412, 1857, 418, 1859, 422, 
          1861, 424, 428, 1865, 430, 434, 1868, 436, 1871, 440, 442, 1876, 
          446, 1877, 448, 451}], 
         Line[{452, 1878, 449, 447, 443, 1874, 441, 1873, 1872, 437, 435, 
          1867, 431, 429, 1864, 425, 423, 1860, 419, 413, 1838, 409, 407, 
          1855, 403, 401, 1852, 397, 395, 1848, 391, 389, 1844, 385, 383, 379,
           1823, 417}], 
         Line[{454, 415, 1858, 420, 421, 1863, 426, 1862, 427, 432, 1866, 433,
           1870, 438, 1869, 439, 444, 1875, 445, 450, 1880, 455, 1883, 458, 
          459, 1885, 462, 463, 466, 1887, 467, 1890, 470, 471, 1892, 474, 
          1893, 475, 477}], 
         Line[{480, 453, 1882, 456, 1881, 457, 460, 1884, 461, 464, 1886, 465,
           1889, 468, 1888, 469, 472, 1891, 473, 476, 1895, 481, 1898, 486, 
          487, 1901, 492, 1902, 493, 498, 1907, 499, 1910, 504, 1911, 505, 
          510, 1914, 511, 514}], 
         Line[{516, 1879, 478, 482, 484, 1900, 488, 1899, 490, 494, 1903, 496,
           1909, 500, 1908, 502, 506, 1912, 508, 512, 1915, 518, 1919, 522, 
          524, 1923, 528, 1924, 530, 534, 1927, 536, 1932, 540, 1933, 542, 
          546, 1936, 548, 551}], 
         Line[{552, 1937, 549, 547, 1935, 543, 541, 537, 1929, 1928, 535, 
          1926, 531, 529, 525, 1920, 523, 519, 1917, 1916, 513, 1894, 509, 
          507, 1913, 503, 501, 497, 1905, 1904, 495, 1906, 491, 489, 485, 
          1896, 483, 1897, 479, 517}], 
         Line[{578, 1974, 650, 648, 1996, 644, 642, 638, 1990, 1989, 636, 
          1987, 632, 630, 1984, 626, 624, 1980, 620, 1978, 614, 610, 1971, 
          608, 1972, 604, 602, 598, 1964, 1963, 596, 1965, 592, 590, 1960, 
          586, 584, 580, 1938, 618}], 
         Line[{615, 675, 2013, 674, 2012, 671, 670, 2009, 667, 2007, 666, 663,
           2005, 662, 659, 2003, 658, 2002, 655, 1999, 651, 646, 1994, 645, 
          1995, 640, 639, 1991, 634, 1986, 633, 628, 1982, 627, 1983, 622, 
          621, 1979, 616, 654}], 
         Line[{617, 579, 1956, 583, 1955, 585, 589, 1959, 591, 595, 1962, 597,
           1968, 601, 1967, 603, 607, 609, 1975, 613, 1976, 1977, 619, 623, 
          1981, 625, 629, 1985, 631, 635, 1988, 637, 1992, 641, 1993, 643, 
          647, 1997, 649, 577}], 
         Line[{652, 700, 2024, 699, 696, 695, 2022, 692, 2020, 691, 688, 2018,
           687, 684, 683, 2016, 680, 2014, 676, 673, 2010, 672, 2011, 669, 
          668, 2008, 665, 2006, 664, 661, 2004, 660, 657, 2000, 656, 2001, 
          653, 679}], 
         Line[{677, 713, 2030, 712, 2029, 711, 710, 709, 2028, 708, 707, 2027,
           706, 705, 2026, 704, 703, 2025, 701, 698, 2023, 697, 694, 2021, 
          693, 690, 2019, 689, 686, 2017, 685, 682, 2015, 681, 678, 1998, 
          702}], 
         Line[{717, 987, 2187, 986, 981, 2184, 980, 2183, 975, 2180, 974, 969,
           2175, 968, 963, 2172, 962, 2171, 957, 2168, 951, 948, 2165, 947, 
          2166, 944, 943, 2162, 940, 2160, 939, 936, 2157, 935, 932, 2154, 
          931, 2155, 928, 956}], 
         Line[{727, 950, 2167, 949, 946, 2164, 945, 2163, 942, 2161, 941, 938,
           2159, 937, 2158, 934, 933, 2156, 930, 2153, 925, 920, 2148, 919, 
          914, 2144, 913, 2145, 908, 2139, 907, 902, 2135, 901, 2136, 896, 
          895, 2132, 890, 929}], 
         Line[{729, 714, 2031, 716, 715, 2032, 718, 719, 720, 2033, 721, 2034,
           722, 723, 2035, 724, 725, 2036, 726, 2038, 730, 2040, 733, 734, 
          2042, 737, 738, 2044, 741, 2045, 742, 2047, 745, 746, 2050, 749, 
          2051, 750, 752}], 
         Line[{755, 728, 2039, 731, 732, 735, 2041, 736, 739, 2043, 740, 2046,
           743, 744, 2049, 747, 2048, 748, 751, 2053, 756, 2056, 761, 762, 
          2059, 767, 2060, 768, 773, 2063, 774, 2067, 779, 780, 785, 2070, 
          786, 789}], 
         Line[{791, 753, 2055, 757, 2054, 759, 763, 2057, 765, 769, 2061, 771,
           2065, 775, 2064, 777, 781, 2068, 783, 787, 2071, 793, 2073, 797, 
          2075, 799, 803, 2079, 805, 809, 2082, 811, 2085, 815, 817, 2090, 
          821, 2091, 823, 826}], 
         Line[{827, 2092, 824, 822, 818, 2088, 816, 2087, 2086, 812, 810, 
          2081, 806, 804, 2078, 800, 798, 2074, 794, 788, 2052, 784, 782, 
          2069, 778, 776, 2066, 772, 770, 2062, 766, 764, 2058, 760, 758, 754,
           2037, 792}], 
         Line[{829, 790, 2072, 795, 796, 2077, 801, 2076, 802, 807, 2080, 808,
           2084, 813, 2083, 814, 819, 2089, 820, 825, 2094, 830, 2097, 833, 
          834, 2099, 837, 838, 841, 2101, 842, 2104, 845, 846, 2106, 849, 
          2107, 850, 852}], 
         Line[{855, 828, 2096, 831, 2095, 832, 835, 2098, 836, 839, 2100, 840,
           2103, 843, 2102, 844, 847, 2105, 848, 851, 2109, 856, 2112, 861, 
          862, 2115, 867, 2116, 868, 873, 2121, 874, 2124, 879, 2125, 880, 
          885, 2128, 886, 889}], 
         Line[{891, 2093, 853, 857, 859, 2114, 863, 2113, 865, 869, 2117, 871,
           2123, 875, 2122, 877, 881, 2126, 883, 887, 2129, 893, 2133, 897, 
          899, 2137, 903, 2138, 905, 909, 2141, 911, 2146, 915, 2147, 917, 
          921, 2150, 923, 926}], 
         Line[{927, 2151, 924, 922, 2149, 918, 916, 912, 2143, 2142, 910, 
          2140, 906, 904, 900, 2134, 898, 894, 2131, 2130, 888, 2108, 884, 
          882, 2127, 878, 876, 872, 2119, 2118, 870, 2120, 866, 864, 860, 
          2110, 858, 2111, 854, 892}], 
         Line[{953, 2188, 1025, 1023, 2210, 1019, 1017, 1013, 2204, 2203, 
          1011, 2201, 1007, 1005, 2198, 1001, 999, 2194, 995, 2192, 989, 985, 
          2185, 983, 2186, 979, 977, 973, 2178, 2177, 971, 2179, 967, 965, 
          2174, 961, 959, 955, 2152, 993}], 
         Line[{990, 1050, 2227, 1049, 2226, 1046, 1045, 2223, 1042, 2221, 
          1041, 1038, 2219, 1037, 1034, 2217, 1033, 2216, 1030, 2213, 1026, 
          1021, 2208, 1020, 2209, 1015, 1014, 2205, 1009, 2200, 1008, 1003, 
          2196, 1002, 2197, 997, 996, 2193, 991, 1029}], 
         Line[{992, 954, 2170, 958, 2169, 960, 964, 2173, 966, 970, 2176, 972,
           2182, 976, 2181, 978, 982, 984, 2189, 988, 2190, 2191, 994, 998, 
          2195, 1000, 1004, 2199, 1006, 1010, 2202, 1012, 2206, 1016, 2207, 
          1018, 1022, 2211, 1024, 952}], 
         Line[{1027, 1075, 2238, 1074, 1071, 1070, 2236, 1067, 2234, 1066, 
          1063, 2232, 1062, 1059, 1058, 2230, 1055, 2228, 1051, 1048, 2224, 
          1047, 2225, 1044, 1043, 2222, 1040, 2220, 1039, 1036, 2218, 1035, 
          1032, 2214, 1031, 2215, 1028, 1054}], 
         Line[{1052, 1088, 2244, 1087, 2243, 1086, 1085, 1084, 2242, 1083, 
          1082, 2241, 1081, 1080, 2240, 1079, 1078, 2239, 1076, 1073, 2237, 
          1072, 1069, 2235, 1068, 1065, 2233, 1064, 1061, 2231, 1060, 1057, 
          2229, 1056, 1053, 2212, 1077}]}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
CfaGgsZK129n46ueoJi9xtmoMCmv9G06watQuxlVujmYy3dP/ihPBqrbnF9T
Tvi54gOvk+HRuVgqm+NgUBCKfCKNux3qKJA/QM/P35swP095Xl1uFxmChyqX
+kz38wEOH/VrCb8oaNhL2wdMsP9s4PToR2wezmkuSjgZn4nURemZMUSPb582
+WTw73yU/cHr+CQyE3+vbHrJEU9wYxeYQLUXun5bsbUuOAwmJ9762k38hLHm
9ndPmNvfUP4jgDfJA+c3907+rRYKp8+nfhj89U9fm57nb2PN829jzfOfquxY
va88Ba0F4iVvO8XhioKyO1oEn5H+fojd9PdDZH8/TPiVXDJ+whduHpGqj9aO
hZa9ms31wwSfWf47Jvj/2LN/H19pHOzc2pnxuSwNNquf4Dv85r/7Be8n2KvS
3zmxjP7OiezvnJX091X8QX9fRfb31S76OypsoL+jAvs7KntPoXzCnoIy/b0X
dOnvvbCc9b3X+1/s3aX+fmcGGfo7MwixvjN70v0XtKT7L8juv0zWPLH+tHY8
2kZN1Uhano5+U7dGfW4lcSL39zsYbqG/gyH7O9gcCe4NvL8iQOPSw+qp98Lg
5Akx81Jyn2I5TKmZ0Sn46/rVlWICmVjcEdo6TPiwMONoZWNPCi5evub06ups
TB8+0mZXQQGYfVoSeiMdXArefAmzZIDA+YKmf+ZzGqQXvN1onwZOC0p5IlYy
wCHvvZkN4VFfvRgqG1Wjcb/Ar64xhww8Ydv88zI5J491tlDc7RjkE3PN/7M/
DT/2LT2uSur7h8Efa+37M0C0zaSG83kauO2X3CNXRYHFzQQdI64cUHgz47Xl
1Szg233y4OpMCtL2hKwtmfsIb704zfdWMQ6dx3t1ZpH3yHT823+BVrr/guz+
i/pHDn/OJ9lQb3Pg7S3fDHAXmJvByCd4eEae76xIDoR7JZ9aMpQO/lqWyZXk
dxu6vwOX6P4OsPs7q+l+E9jQ/SaYwuo3cZn/+hR+NRV21j3nvzueDuUbNc4c
eE6BL93ngvV0nwvYfa4Uup8FB+l+FrD7WW/p/hoE0f01YPfXftP9NThD99eA
3V97QPf14And1wN2X28l3R8EAbo/CBtZ/cFTdB+Z6LS/fWRk95GvH8kQMMmL
wWA7s2ap/Rm4ToknfDZ5XxuXzBJrd0tEhRuvy6oIL+536BBSaCI6V1+Qjzew
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
KsRYTflsNT8Og6a5K70g9mxrPm+iNsSCPVfXGO8Yk4LjU62ELlawwf/G9wnX
/D1hmk5IzV7bfORuEw9aGcaGB1Ibo4qO2sB7bu5NIQdInnHRpDmK5ClPHKqk
1k6wwdnjBK2uTc1Hc5GstLwYNqhWb711gM8KLyT9+MLtiNgfs91zJYkDeUYN
uNzKjaC8eP3EMwE56Mm7eioficem6Wev2XNYG9azVWxrjmbhr6CsAgcynhI5
kx0yo+4Qki43YJ+RgJZPJ2mUkfWmH/5Fr+VONKyZ9yLJ81MejGvrbb4bSPLu
VT7cK01j4ZzU3VJhg3xgycwVE/AmcfiRLNbBx46gq13wNDYqD2JVx146RPKO
dVX7qnxcIvBp59TcrrXZEGSl07yN5JsnaX2TT7S+yVVa3+Q6rReTy9CLmZ+2
TCWGpwS5M/bssch1h/rrSp+7DNjw5WSduv6ESlx8tcnF6aQzpj+/t2d0DsnH
rXt+fdCowe7DQpM+/IjFOnzweW/O/3RkJjB0ZHj0R8qmnK/Fwce/b6Ym5qJG
4jQb16M9kO+vMvO1YzVOSwplp33KxcFQN/Mdvj3wqN93paROGQ7//jhbcW42
Pj9dwto2laxPWl9mDkNfxn5j4uKNK9LwR5fu9dQkf2z0vHGej6y3ZOMj98te
++AtnweL/PY6QVSWRdH6EZIvzL4jWFnjBa9zj7WpEP99vbOv+CeJ0+ZJ6Ju8
Ok++S89qpCw1F8v3bXvw07IHZg7A+kLJh5DYeiZo9rEUqPy17lAH8Q+zTfKD
D4iEoWKq9I39DiEgtHB1wnFyLngqmIl2NT3H90LrBRYNpOHo5Ncf9STJfD2N
Ukk5koW/59RUnio6gDLeOxKdK/43X0OM+aowSHHPUy/FW7eiR60zQrDInHvd
+d3ED9B8Mn40n4wifU8vbemLLFv+CjR84WXZ28xCjYFlT1UF2FC34GfDe/FK
dHRNONR5IA1rsywiub72wOCn+qj+D3k4uNkquo7kK33Oqb0vPdgw5QX4L7/H
wov604pyMq0xYbfXj9PkvOih9W7W0Xo372n+6gV7Q+t924oxfqGX08K5SXgi
6NsKy4NsGMe6VjZbvAA/+6+a3CoXj08ttox2kvz3abTHzTKx+9B5Kv71ZbMY
WNqbdLqCnGuuN3eoOyzIQm9vgZLWk8EIfL4pb4rZYE3r40Qw9HE6vXwHboy/
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
+d/ISYss77RpQOdynnMzRjPAefqXcUfIfky6sGGjtVQGignd3mzFH4hnaj0m
/MFvlWn9aBuGfjRHb3oJo8/dldaPXsHQj86c+a33x8RovNtz4NkiWRZYqPSE
zSDrR0E7NlQpOAXHf1HdlnAlHPkOahjfJe/fovu1a5tZIu4ePqt+3FgH0n/f
XarQ9T9daTFGnfr9dbM3akuTsSg17Qm/bThe2qZS7UL82xmzCSuHQ5JxeLGi
ve3+cHzeXfzreDPxA3TfrjWjb5ejB21P60Gfovne+e0DjdXHesPgy0uaEW5J
cCN/Uc0p8r8jQQpq/P0hUGmWP29KawpkNpy5x3pBnrdS65u4IwrFmlWCxM4+
xqOKU2cZfCX7outF7NJr1rD6lNVHngssqE2q+hL4+Q8fI9XXPI3R1/yWrpt/
YNTNtSZ/7R5ICMc18hMWpvMEYJ7oD4tPf/SjaX3kVIY+MjfdH23I6I8OpvWO
vzL0jgtuC67i2+uMdcpZ5vknnsKhj9sf1Y2w4ck/6u8V/+in3m0oNeS3MADd
2fxhnc/D0ENp0+onxM5fm9Fd3sEB+wZSzSP07OFJtPXzw7/+6ApRfdZXGX3W
o8cqavz9Qv9fYWceTuW2BvDKWJzMTepkO8pODolUkqWUEOmGkhLloMw6zjWU
BtySRIZEGSrTlilj2FibttqOuimETYZODqccQ7k4pHtXfeu7PXc9z37uvx7P
3utZ37vW976v9+cHF1SFnNrJKoR5rGRtS7Q/JtgvPED4hTn9Mwmu+8oA7wnT
S3c6A3jc8rEoQO8XXcyb9xK8uT7mrIcIzvqy5tiLfQFXgAPfx974Zjg8YueY
+vjzN9/uRYITP/eoSoXbUQr2yRq/9BbKBv3vXb3Pou8Vxbz2jPj/8trfD0mG
qrTFAzOFyzPH1BJgRMDm4BOfUB6FvbqPCK+uBua7gwi+m/bqehNeXWND34Oz
stWgeevr83VXssCzDHXlW6heK3G3OSiXXwUGzSdt52WyQOHHqukvf8exwXy6
B8Gn2+H5hL3EfMJ+zI+nEPz4fMyJZxKcOO29nSW48qhcp0iD0d1QfOWhqCM/
lkC5sZWis+j5JmS2S8Q6XIcpXJ5LtmYZPO26c64DnTtZzJubE7z5FJ436CHm
DWjvrSzhvfXBXLkFwZXb9bn1bS8tAqpuHpIsxn0QblG/p7D/m8eWnJf4VXQZ
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
q2wOLmVWwsTOPc5iqH7/D4N0dtE=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {342., 342.}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {0., 
       0.49488850049789845`}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.43, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.385, $CellContext`k4$$ = 
    0.68, $CellContext`k5$$ = 
    0.8150000000000001, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.25, {1, 1, {0, -1}} -> 0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
     0.77, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 
     0.25, {1, 1, {1, -1}} -> 0.77, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 
     0.25, {1, 2, {-1, -1}} -> 0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 
     0.25, {1, 2, {0, 1}} -> 0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 
     0.25, {1, 2, {0, 0}} -> 0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 
     0.25, {2, 1, {-1, -1}} -> 0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 
     0.25, {2, 1, {0, 1}} -> 0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 
     0.25, {2, 2, {-1, 0}} -> 0.43, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 
     0.385, {2, 2, {-1, 1}} -> 0.68, {2, 2, {1, 0}} -> 0.43, {2, 2, {0, 1}} -> 
     0.25, {2, 2, {1, 1}} -> 0.385, {2, 2, {1, -1}} -> 0.68, {1, 3, {-1, 0}} -> 
     0.25, {1, 3, {0, -1}} -> 0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 
     0.25, {1, 3, {1, 0}} -> 0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 
     0.25, {1, 3, {1, -1}} -> 0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 
     0.25, {2, 3, {0, -1}} -> 0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 
     0.25, {2, 3, {1, 0}} -> 0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 
     0.25, {2, 3, {1, -1}} -> 0.25, {2, 3, {0, 0}} -> 
     0.8150000000000001, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    2, $CellContext`m2Sel$$ = 2, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$196824, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}}, $CellContext`moSel$$ = 
    3, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 7.3, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{-0.524, 0.94}, {1.3519999999999999`, 
      1.6400000000000001`}}, 
     "latticeNorms" -> {1.076185857554354, 2.1254420716641516`}, 
     "latticeUnitVectors" -> {{-0.48690474449348065`, 0.8734550759997552}, {
      0.6361029632491598, 0.7716041861898093}}, 
     "numberLatticeLinesToDisplay" -> {6, 2}, 
     "latticeCellOriginIndexes" -> {{-4, 0}, {-4, 1}, {-3, 0}, {-3, 
      1}, {-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0,
       0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.7698663061439087, 0.6346702718942465}, {
      0.44126483400931354`, 0.2459816734264684}}, 
     "reciprocalNorms" -> {0.9977477052652055, 0.5051946529754178}, 
     "qMaxVec" -> {6.269033721994488, 3.1742316208408345`}, 
     "mObliqueComponents" -> {{-0.2486104852035454, 0.5693255220069101}, {
      0.2772269791197231, 0.4935406339191829}, {0.7044840018026135, 
      0.2730396575033799}}, 
     "mPosFirstCell" -> {{0.376, 1.64}, {0.5220000000000002, 
      1.0699999999999998`}, {0., 1.1099999999999999`}}, 
     "pointsDataTable" -> CompressedData["
1:eJw1Un1Ik2EQf9irLvwoWRZRMVZISBEiIRWidyWREVHZPxESIvaBiElIhEQQ
YRBZGbHMIjIq0ggxkZAY3cvMPk0ihY3Smn2ZznJLN7fmVu9zz9vB88c9d7/f
3f3uVlQcKT2gCSHksxnPYry1XTem7j3TMJxTdtEdEnplwaed55vnY7e9wb+7
5yPtf7wt3bLmL4zWZ3VsHf1NB9lSsa4w1XO7dgRKZHpNFywyovVZCarI3Lux
+0UYehg/QIcv/TwB+Sl4iHFhsHceNb6GaTHn/6I3/dImQfF+hypX3eUlSRZU
eAtaHyzfV1kwRYKt03U/+G5HRaYXuHzhH/AOzO75cjcGReynosqLkE3xQ2P1
WKw96KY7tRKRhMPZKaecxdPmPJmYGDo+vipP6AtV/7Asd8TI+EYsR046KnwS
ym7sDcl6b0hGFiC33R+gC801ttO6MOvOUZ9DDpiGDsa7qMlZfK567DVca5Gm
6Q4misKkpPOP0/Pt689uKrdik1sST0COLO8cpNWMj1D2h+jJKlcAWrl/HV4e
e3Jzaa6GpSzQHDQqHCHP/5l28QJ8wPLZg3BFlo/FgcfrSMbN0m0PURv7HhBt
UtByyuIEgarPEKxjy8CifHkBCZphQWagdcuj6fiQjzitxYoRQ/3rTwWq/GSd
5XOmodIvQDNxKXAU2C2LUd48uVAr+nj+h+SV49UNUgkvRNMVXwDUvn6Q4tXQ
K7fr8cPXtysNRSboDO9jllS+D3TeS595PwlQ9zwHcjuvboUowr7PvCMhWDZ3
8H8c1G8KmnjawHq+B5PfvHuBZn1Q95Bhzq3pV03dzP6Jw34r/gOB1q3y
      "], "lineTable" -> {{
        Line[{{0.4400000000000004, -8.92}, {-5.848, 2.3599999999999994`}}], 
        Line[{{1.7920000000000003`, -7.279999999999999}, {-4.496, 
         3.9999999999999996`}}], 
        Line[{{3.144, -5.64}, {-3.144, 5.64}}], 
        Line[{{4.496, -3.9999999999999996`}, {-1.7920000000000003`, 
         7.279999999999999}}], 
        Line[{{5.848, -2.3599999999999994`}, {-0.4400000000000004, 8.92}}]}, {
        Line[{{0.4400000000000004, -8.92}, {5.848, -2.3599999999999994`}}], 
        Line[{{-0.08399999999999963, -7.9799999999999995`}, {
         5.324, -1.419999999999999}}], 
        Line[{{-0.6079999999999997, -7.04}, {4.8, -0.47999999999999954`}}], 
        Line[{{-1.1319999999999997`, -6.1}, {4.276, 0.4600000000000004}}], 
        Line[{{-1.6559999999999997`, -5.16}, {3.752, 1.4000000000000004`}}], 
        Line[{{-2.1799999999999997`, -4.220000000000001}, {
         3.2279999999999998`, 2.3400000000000003`}}], 
        Line[{{-2.7039999999999997`, -3.2800000000000002`}, {
         2.7039999999999997`, 3.2800000000000002`}}], 
        Line[{{-3.2279999999999998`, -2.3400000000000003`}, {
         2.1799999999999997`, 4.220000000000001}}], 
        Line[{{-3.752, -1.4000000000000004`}, {1.6559999999999997`, 5.16}}], 
        Line[{{-4.276, -0.4600000000000004}, {1.1319999999999997`, 6.1}}], 
        Line[{{-4.8, 0.47999999999999954`}, {0.6079999999999997, 7.04}}], 
        Line[{{-5.324, 1.419999999999999}, {0.08399999999999963, 
         7.9799999999999995`}}], 
        Line[{{-5.848, 2.3599999999999994`}, {-0.4400000000000004, 
         8.92}}]}}}, $CellContext`parametersTab$$ = 3, $CellContext`qLoc$$ = {
    3.134516860997244, 
    1.5871158104204173`}, $CellContext`qPlaneLoc$$ = {{-3.134516860997244, \
-1.5871158104204173`}, {3.134516860997244, 
    1.5871158104204173`}}, $CellContext`rawArrayOfMasses$$ = {
    10, 7.3, 20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ =
     0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = False, $CellContext`u$$ = {{-0.524, 0.94}, {
    1.3519999999999999`, 1.6400000000000001`}, {0.9, 0.7}, {
    0.5220000000000002, 1.0699999999999998`}, {0., 1.1099999999999999`}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       TabView[{"dynamics" -> Column[{
            Dynamic[
             Row[{
               OverVector[
                Style["q", Italic, 10]], " = ", 
               
               Module[{$CellContext`qm$}, $CellContext`qm$ = 
                 ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                Slider2D[
                  
                  Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False, 
                  ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
               Style[" 2 \[Pi] ", 10], 
               Style[
                Dynamic[
                 NumberForm[
                  MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
            Style[
             Row[{
               Text["number of time intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`dynMeshSize$$]}], 10], 
            Style[
             Row[{
               Text["time, normalized to one period, "], 
               Style["t", Italic], "/", 
               Style["T", Italic], " = ", 
               Dynamic[
                
                N[($CellContext`tauSliderValue$$ - 
                  1)/$CellContext`dynMeshSize$$]]}], 10], 
            Row[{
              Dynamic[
               Manipulator[
                
                Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], {
                1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                ContinuousAction -> True, Appearance -> "Open", 
                AppearanceElements -> {
                 "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                  "FasterSlowerButtons", "DirectionButton"}]]}], 
            Style[
             Row[{
               Text["oscillation scale factor:"]}], 10], 
            Style[
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
            Style[
             Row[{
               Text["angular frequency \[Omega]("], 
               Style["q", Italic], 
               Text["), selection: "], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
         "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
         Column[{
            Style[
             Row[{
               Text["number of mesh intervals "], 
               Manipulator[
                
                Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[$CellContext`freqMeshSize$$]}], 10], 
            LocatorPane[
             Dynamic[$CellContext`qPlaneLoc$$], 
             Dynamic[
              (Graphics[{
                Lighter[Gray], 
                Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], -Part[#, 2]}, {
                   Part[#, 1], 
                   Part[#, 2]}, {-Part[#, 1], 
                   Part[#, 2]}}], Black, 
                Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                   Part[#, 1]}, {-Part[#, 2], 
                   Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
               ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
             ContinuousAction -> False]}], "parameters" -> Grid[{{
             Style[
              Row[{
                Text["mass: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                  Part[$CellContext`rawArrayOfMasses$$, $CellContext`m1Sel$$] = \
$CellContext`massValue; $CellContext`parameterLocatorDependencies$$ = 
                   ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {0.25, 
                  Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
             Text["\n"], ""}, {
             Text[
              Style["coupling to neighboring: ", 10]], 
             Style[
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ > 1, 
                SetterBar[
                 
                 Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  Range[$CellContext`rawNumberOfMasses$$]]], 
                $CellContext`massLabel[1]]], 10]}, {
             Style[
              Row[{
                Text["horizontal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 1], FontColor -> RGBColor[
                   Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                OverVector[
                 Style["a", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["vertical: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 2], FontColor -> RGBColor[0, 
                   Rational[2, 3], 0]], " || ", 
                OverVector[
                 Style["b", Italic]], " "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 3], FontColor -> 
                 RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                " || (", 
                OverVector[
                 Style["b", Italic]], " + ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
             Style[
              Row[{
                Text["diagonal: "], 
                Style[
                 Subscript[
                  Style["k", Italic], 4], FontColor -> RGBColor[0, 
                   Rational[2, 3], 
                   Rational[2, 3]]], " || (", 
                OverVector[
                 Style["b", Italic]], " - ", 
                OverVector[
                 Style["a", Italic]], ") "}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                  Dynamic[$CellContext`glConstKMin], 
                  Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                 ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
             Text["\n"], ""}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Text["coupling from "], 
                  Dynamic[
                   $CellContext`massLabel[$CellContext`m1Sel$$]], 
                  Text[" to: "]}], 10]]], 
             Dynamic[
              Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
               Style[
                Dynamic[
                 $CellContext`massLabel[
                  First[
                   Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
               Blank[], 
               Dynamic[
                SetterBar[
                 
                 Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], 
                 Map[# -> $CellContext`massLabel[#]& , 
                  DeleteCases[
                   
                   Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  $CellContext`kLable[5], ": "}], 10]]], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ == 1, "", 
               Style[
                Row[{
                  Dynamic[
                   Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
        Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], ImageSize -> {250, 350}]],
       Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 12}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 3}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 1}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = {
    464., {228., 236.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        12, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10}, $CellContext`rawNumberOfMasses$$ = 
        1, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
        3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
        False, $CellContext`u$$ = {}}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         Switch[$CellContext`tabNumber$$, $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], $CellContext`freqTab$$, 
          
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
            Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
          Blank[], 
          LocatorPane[
           Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                 Dimensions[#]] < 3, 
               
               Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
               If[First[
                  Dimensions[#]] > 7, 
                Take[#, 7], #]]; 
            Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
               First[
                 Dimensions[$CellContext`rawArrayOfMasses$$]]; 
              If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                  $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                
                While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                 Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                 Part[
                  Part[$CellContext`kArray$$, All, 1], All, 1]]; 
              If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                
                While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                 Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                 Part[$CellContext`u$$, 1], 
                 
                 Part[$CellContext`u$$, 
                  1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 1], 
               Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                 Part[$CellContext`u$$, 2], 
                 
                 Part[$CellContext`u$$, 
                  2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
               Part[$CellContext`glConstLocDefault, 2], 
               Part[$CellContext`u$$, 2]]; {
               Part[$CellContext`u$$, 1], 
               
               Part[$CellContext`u$$, 
                2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
             If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
             If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
             If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
             If[$CellContext`omegaIndex$$ > 
               2 $CellContext`rawNumberOfMasses$$, 
               1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
               4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
             ReplaceAll[
               "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
              2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
             True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
           $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
           LocatorAutoCreate -> True, ContinuousAction -> False]]]), 
      "Specifications" :> {
        TabView[{"dynamics" -> Column[{
             Dynamic[
              Row[{
                OverVector[
                 Style["q", Italic, 10]], " = ", 
                
                Module[{$CellContext`qm$}, $CellContext`qm$ = 
                  ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                 Slider2D[
                   
                   Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                   ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> False,
                    ImageSize -> (150 (#/Max[#])& )[$CellContext`qm$]]], 
                Style[" 2 \[Pi] ", 10], 
                Style[
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]], 10]}]], 
             Style[
              Row[{
                Text["number of time intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`dynMeshSize$$, \
($CellContext`dynMeshSize$$ = $CellContext`checkAgainstRange[#, 14, 4, 30, 
                    IntegerQ]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 4, 30, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`dynMeshSize$$]}], 10], 
             Style[
              Row[{
                Text["time, normalized to one period, "], 
                Style["t", Italic], "/", 
                Style["T", Italic], " = ", 
                Dynamic[
                 
                 N[($CellContext`tauSliderValue$$ - 
                   1)/$CellContext`dynMeshSize$$]]}], 10], 
             Row[{
               Dynamic[
                Manipulator[
                 
                 Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                   Not[$CellContext`tick$$])& ], {
                 1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                 ContinuousAction -> True, Appearance -> "Open", 
                 AppearanceElements -> {
                  "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                   "FasterSlowerButtons", "DirectionButton"}]]}], 
             Style[
              Row[{
                Text["oscillation scale factor:"]}], 10], 
             Style[
              Row[{
                Manipulator[
                 
                 Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 0.05, 1}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[
                 NumberForm[$CellContext`scale$$, {3, 2}]]}], 10], 
             Style[
              Row[{
                Text["angular frequency \[Omega]("], 
                Style["q", Italic], 
                Text["), selection: "], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Range[2 $CellContext`rawNumberOfMasses$$]]]}], 10]}], 
          "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
          Column[{
             Style[
              Row[{
                Text["number of mesh intervals "], 
                Manipulator[
                 
                 Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 12, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                   True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 2, 30, 2}, ImageSize -> Tiny, ContinuousAction -> False, 
                 AppearanceElements -> {"InputField"}], " ", 
                Dynamic[$CellContext`freqMeshSize$$]}], 10], 
             LocatorPane[
              Dynamic[$CellContext`qPlaneLoc$$], 
              Dynamic[
               (Graphics[{
                 Lighter[Gray], 
                 Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                 Line[$CellContext`qPlaneLoc$$]}, PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
              ContinuousAction -> False]}], "parameters" -> Grid[{{
              Style[
               Row[{
                 Text["mass: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                   Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                   Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`massValue, {2, 1}]]}], 10]}, {
              Text["\n"], ""}, {
              Text[
               Style["coupling to neighboring: ", 10]], 
              Style[
               Dynamic[
                If[$CellContext`rawNumberOfMasses$$ > 1, 
                 SetterBar[
                  
                  Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   Range[$CellContext`rawNumberOfMasses$$]]], 
                 $CellContext`massLabel[1]]], 10]}, {
              Style[
               Row[{
                 Text["horizontal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 1], FontColor -> RGBColor[
                    Rational[2, 3], 0.33333333333333337`, 0]], " || ", 
                 OverVector[
                  Style["a", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k1$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["vertical: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 2], FontColor -> RGBColor[0, 
                    Rational[2, 3], 0]], " || ", 
                 OverVector[
                  Style["b", Italic]], " "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k2$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 3], FontColor -> 
                  RGBColor[0.33333333333333337`, 0, 0.33333333333333337`]], 
                 " || (", 
                 OverVector[
                  Style["b", Italic]], " + ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k3$$, {3, 2}]]}], 10]}, {
              Style[
               Row[{
                 Text["diagonal: "], 
                 Style[
                  Subscript[
                   Style["k", Italic], 4], FontColor -> RGBColor[0, 
                    Rational[2, 3], 
                    Rational[2, 3]]], " || (", 
                 OverVector[
                  Style["b", Italic]], " - ", 
                 OverVector[
                  Style["a", Italic]], ") "}], 10], 
              Style[
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                   Dynamic[$CellContext`glConstKMin], 
                   Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                  ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[
                  NumberForm[$CellContext`k4$$, {3, 2}]]}], 10]}, {
              Text["\n"], ""}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Text["coupling from "], 
                   Dynamic[
                    $CellContext`massLabel[$CellContext`m1Sel$$]], 
                   Text[" to: "]}], 10]]], 
              Dynamic[
               Switch[$CellContext`rawNumberOfMasses$$, 1, "", 2, 
                Style[
                 Dynamic[
                  $CellContext`massLabel[
                   First[
                    Delete[
                    Range[2], $CellContext`m1Sel$$]]]], 10], 
                Blank[], 
                Dynamic[
                 SetterBar[
                  
                  Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                  Map[# -> $CellContext`massLabel[#]& , 
                   DeleteCases[
                    
                    Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]]]]]}, {
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   $CellContext`kLable[5], ": "}], 10]]], 
              Dynamic[
               If[$CellContext`rawNumberOfMasses$$ == 1, "", 
                Style[
                 Row[{
                   Dynamic[
                    Manipulator[
                    
                    Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}]], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k5$$, {3, 2}]]}], 10]]]}}]}, 
         Dynamic[$CellContext`tabNumber$$, ($CellContext`tabNumber$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
         ImageSize -> {250, 350}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`qPlaneLoc$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 12}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10}}, 0, ControlType -> 
         None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left}, 
      "DefaultOptions" :> {ControllerLinking -> True}],
     ImageSizeCache->{864., {266., 273.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, "qMaxVec" -> 
           2 Pi $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = 
          2 Pi If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -Part[$CellContext`qMax, 1]/2, Part[$CellContext`qMax, 1]/2,
                Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -
               Part[$CellContext`qMax, 2]/2, Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}, PerformanceGoal -> 
           "Quality"]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {342., 
        342.}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, $CellContext`k] \
$CellContext`glConstMMax^(-1)/350]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 
        2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, $CellContext`n$] \
$CellContext`glConstMMax^(-1)/500]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               
               Part[#, 
                3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cN$]; If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                
                Part[#, 
                 3], $CellContext`glConstSpringColorsByN$$]]& , \
$CellContext`cOrigin$]], Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                  Style["a", Italic]], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                  Style["b", Italic]], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], $CellContext`massLabel := Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           Ceiling[
           12 $CellContext`scaleKValue 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + $CellContext`t (1 - 
                 2 $CellContext`f) $CellContext`nd, $CellContext`h 
               Sin[2 Pi $CellContext`n $CellContext`t]}], {$CellContext`t, 0, 
             1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`t \
$CellContext`f $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 0.25, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]]}; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellEditDuplicate->False,
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{
  3.6055655730077033`*^9, {3.605565843280162*^9, 3.6055658760500364`*^9}},
 CellID->164495161]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "DetailsSection"],

Cell[TextData[{
 "The positions of masses within a two-dimensional periodic array of cells \
can be described by summing the lattice vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], " ", "=", " ", 
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["n", "1"], ",", " ", 
        SubscriptBox["n", "2"]}], ")"}]}]], " ", "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["n", "1"], 
      OverscriptBox["a", "\[RightVector]"]}], " ", "+", 
     RowBox[{
      SubscriptBox["n", 
       RowBox[{"2", " "}]], 
      OverscriptBox["b", "\[RightVector]"]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", representing the origin of each of the lattice cells, and a relative \
vector to the position of each of the masses. With ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]], 
  "InlineMath"],
 " representing the equilibrium position of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]], "InlineMath"],
 ", the position of that mass is ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["r", "\[RightVector]"], 
     OverscriptBox["n", "\[RightVector]"]], "+", 
    SubscriptBox[
     OverscriptBox["p", "\[RightVector]"], "k"]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887466629201*^9}, 
   3.6012090394184523`*^9, {3.601382475199787*^9, 3.601382478123955*^9}, {
   3.6034732857841654`*^9, 3.6034733217981653`*^9}, {3.6040828844611397`*^9, 
   3.604082966455151*^9}, {3.605368597034162*^9, 3.6053686027610397`*^9}},
 CellID->143536934],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     OverscriptBox["a", "\[RightVector]"], 
     RowBox[{
      OverscriptBox["n", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], "=", 
    RowBox[{
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["n", "\[RightVector]"]], "+", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "k"], "-", 
     SubscriptBox[
      OverscriptBox["r", "\[RightVector]"], 
      OverscriptBox["m", "\[RightVector]"]], "-", 
     SubscriptBox[
      OverscriptBox["p", "\[RightVector]"], "j"]}]}], TraditionalForm]], 
  "InlineMath"],
 ", with direction ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["a", "^"], 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", represent the equilibrium separation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["n", "\[RightVector]"]], TraditionalForm]], "InlineMath"],
 " from the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["j", "th"], TraditionalForm]], "InlineMath"],
 " mass in cell ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["r", "\[RightVector]"], 
    OverscriptBox["m", "\[RightVector]"]], TraditionalForm]], "InlineMath"],
 ". If the harmonic coupling between these masses has magnitude ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", then the system of equations describing the vector displacement ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["u", "\[RightVector]"], 
    RowBox[{"n", ",", "k"}]], TraditionalForm]], "InlineMath"],
 " for the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass in unit cell ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["n", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " from the equilibrium position is given by"
}], "DetailNotes",
 CellChangeTimes->{{3.6008874666091995`*^9, 3.600887467295239*^9}, {
  3.6012090498004904`*^9, 3.601209051237634*^9}, {3.604082974667775*^9, 
  3.6040830798566847`*^9}},
 CellID->185095190],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["m", "k"], " ", 
     SubscriptBox[
      OverscriptBox[
       OverscriptBox["u", "\[RightVector]"], ".."], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", "k"}]]}], "=", 
    RowBox[{"-", 
     RowBox[{
      UnderscriptBox["\[Sum]", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", " ", "\[NotEqual]", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      RowBox[{
       SubscriptBox["K", 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
       RowBox[{
        SubscriptBox["Proj", 
         SubscriptBox[
          OverscriptBox["a", "^"], 
          RowBox[{
           OverscriptBox["n", "\[RightVector]"], ",", 
           RowBox[{"k", ";", 
            OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], "(", 
        RowBox[{
         SubscriptBox[
          OverscriptBox["u", "\[RightVector]"], 
          RowBox[{
           OverscriptBox["n", "\[RightVector]"], ",", "k"}]], "-", 
         SubscriptBox[
          OverscriptBox["u", "\[RightVector]"], 
          RowBox[{
           OverscriptBox["m", "\[RightVector]"], ",", "j"}]]}], ")"}]}]}]}]}],
    TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.6040830936694613`*^9, 3.604083162653059*^9}},
 CellID->1717657707],

Cell[TextData[{
 "In general, we have one such equation for each ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["n", "\[RightVector]"], ",", " ", "k"}], TraditionalForm]], 
  "InlineMath"],
 " pair. A trial solution of the form: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      OverscriptBox["u", "\[RightVector]"], 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", " ", "k", " "}]], "(", "t", 
     ")"}], "=", 
    RowBox[{
     FractionBox[
      RowBox[{
       SubscriptBox[
        OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
       OverscriptBox["q", "\[RightVector]"], ")"}], 
      SqrtBox[
       SubscriptBox["m", "k"]]], " ", 
     SuperscriptBox["e", 
      RowBox[{"I", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          SubscriptBox[
           OverscriptBox["r", "\[RightVector]"], 
           OverscriptBox["n", "\[RightVector]"]], ".", " ", 
          OverscriptBox["q", "\[RightVector]"]}], " ", "-", 
         RowBox[{"\[Omega]", " ", "t"}]}], ")"}]}]]}]}], TraditionalForm]], 
  "InlineMath"],
 " can be used to decouple this system, resulting in a single equation for \
each ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["k", "th"], TraditionalForm]], "InlineMath"],
 " mass of the form"
}], "DetailNotes",
 CellChangeTimes->{
  3.601209052017712*^9, {3.604083852219215*^9, 3.604083862112216*^9}, {
   3.6040839192871857`*^9, 3.604083964988751*^9}},
 CellID->160232404],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SuperscriptBox["\[Omega]", "2"], " ", 
     RowBox[{
      SubscriptBox[
       OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
      OverscriptBox["q", "\[RightVector]"], ")"}]}], " ", "=", " ", 
    RowBox[{
     UnderscriptBox["\[Sum]", 
      RowBox[{
       OverscriptBox["n", "\[RightVector]"], ",", 
       RowBox[{"k", " ", "\[NotEqual]", " ", 
        OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
     RowBox[{
      SubscriptBox["K", 
       RowBox[{
        OverscriptBox["n", "\[RightVector]"], ",", 
        RowBox[{"k", ";", 
         OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], 
      SubscriptBox["Proj", 
       SubscriptBox[
        OverscriptBox["a", "^"], 
        RowBox[{
         OverscriptBox["n", "\[RightVector]"], ",", 
         RowBox[{"k", ";", 
          OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]]], " ", 
      RowBox[{"(", 
       RowBox[{
        FractionBox[
         RowBox[{
          SubscriptBox[
           OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
          OverscriptBox["q", "\[RightVector]"], ")"}], 
         SubscriptBox["m", "k"]], "-", " ", 
        RowBox[{
         FractionBox[
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "j"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}], 
          SqrtBox[
           RowBox[{
            SubscriptBox["m", "k"], 
            SubscriptBox["m", "j"]}]]], 
         SuperscriptBox["e", 
          RowBox[{"I", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              SubscriptBox[
               OverscriptBox["r", "\[RightVector]"], 
               OverscriptBox["m", "\[RightVector]"]], " ", "-", " ", 
              SubscriptBox[
               OverscriptBox["r", "\[RightVector]"], 
               OverscriptBox["n", "\[RightVector]"]]}], ")"}], ".", " ", 
            OverscriptBox["q", "\[RightVector]"]}]}]]}]}], ")"}]}]}]}], 
   TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.604083980046534*^9, 3.6040839935712442`*^9}},
 CellID->779035200],

Cell[TextData[{
 "This describes all the steady-state lattice vibrations, the normal modes, \
that can be modeled by this trial solution. Here ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " is a vector in reciprocal space, effectively parameterizing the angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "=", 
    RowBox[{"\[Omega]", "(", 
     OverscriptBox["q", "\[RightVector]"], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ". The vector ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    FormBox[
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], "(", 
           OverscriptBox["q", "\[RightVector]"], ")"}]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]],
     TraditionalForm], "k"], TraditionalForm]], "InlineMath"],
 " is an eigenvector of the equations of motion of the system for this \
assumed solution, where ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " are the eigenvalues of this system. For an ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]], "InlineMath"],
 "-atom basis, there are ",
 Cell[BoxData[
  FormBox[
   RowBox[{"2", " ", "N"}], TraditionalForm]], "InlineMath"],
 " such ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[Omega]", "2"], TraditionalForm]], "InlineMath"],
 " eigenvalues per ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " point, each resulting in a different characteristic motion."
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556236326*^9}, {
   3.6012090526877794`*^9, 3.6012090538738976`*^9}, {3.6013825361482735`*^9, 
   3.601382742763091*^9}, {3.6034734267521653`*^9, 3.6034734457911654`*^9}, 
   3.603473478525165*^9, {3.604084014742115*^9, 3.604084016176835*^9}},
 CellID->72937650],

Cell[TextData[{
 "The rank of the resulting eigenvalue problem depends on the number of \
masses per unit cell, but the complexity of the matrix expression depends on \
the number of neighboring interactions that are considered. For example, \
given lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", " ", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", diagonals ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     OverscriptBox["r", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "+", " ", 
      OverscriptBox["b", "\[RightVector]"]}]}], ",", " ", 
    RowBox[{
     OverscriptBox["s", "\[RightVector]"], "=", 
     RowBox[{
      OverscriptBox["a", "\[RightVector]"], " ", "-", " ", 
      OverscriptBox["b", "\[RightVector]"], " "}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", and a one-atom basis, where each unit cell contains a single mass coupled \
with harmonic oscillator forces between only nearest neighbors, the normal \
mode solutions follow from the solution of the eigenvalue problem"
}], "DetailNotes",
 CellChangeTimes->{{3.6008875562233257`*^9, 3.600887556623348*^9}, {
   3.6008880360077677`*^9, 3.600888037934878*^9}, 3.601209054354946*^9, {
   3.603473503436165*^9, 3.6034735037001653`*^9}},
 CellID->69846009],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {
          SuperscriptBox["\[Omega]", "2"], "0"},
         {"0", 
          SuperscriptBox["\[Omega]", "2"]}
        },
        GridBoxAlignment->{
         "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
          "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], " ", 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}], " ", "=", 
    RowBox[{
     FractionBox["4", "m"], 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"1", " "}]], 
        OverscriptBox["a", "^"], " ", 
        SuperscriptBox[
         OverscriptBox["a", "^"], "T"], " ", 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["a", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], ")"}]}], "+", 
       RowBox[{
        SubscriptBox["k", 
         RowBox[{"2", " "}]], 
        OverscriptBox["b", "^"], " ", 
        RowBox[{
         OverscriptBox["b", "^"], "\[Transpose]"}], 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", " ", 
         RowBox[{
          RowBox[{
           OverscriptBox["b", "\[RightVector]"], " ", ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], ")"}]}], "+", 
       RowBox[{
        SubscriptBox["k", "3"], 
        OverscriptBox["r", "^"], " ", 
        RowBox[{
         OverscriptBox["r", "^"], "\[Transpose]"}], 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], " ", "+", 
             OverscriptBox["a", "\[RightVector]"]}], " ", ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], ")"}]}], "+", 
       RowBox[{
        SubscriptBox["k", "4"], 
        OverscriptBox["s", "^"], " ", 
        RowBox[{
         OverscriptBox["s", "^"], "\[Transpose]"}], 
        RowBox[{
         SuperscriptBox["sin", "2"], "(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", " ", 
            RowBox[{
             OverscriptBox["b", "\[RightVector]"], "-", 
             OverscriptBox["a", "\[RightVector]"]}], ")"}], ".", " ", 
           OverscriptBox["q", "\[RightVector]"]}], "/", "2"}], " ", ")"}]}]}],
       ")"}], 
     OverscriptBox["\[Epsilon]", "\[RightVector]"]}]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057330604719*^9}, {
   3.5980584907700768`*^9, 3.5980584911520987`*^9}, {3.5991428674046793`*^9, 
   3.5991429352825613`*^9}, 3.5991434894172564`*^9, {3.599143745937928*^9, 
   3.599143747597023*^9}, {3.599144339776894*^9, 3.599144393338958*^9}, {
   3.5999961526324863`*^9, 3.599996166069255*^9}, {3.6000802839234686`*^9, 
   3.6000802840794687`*^9}, {3.600823510848098*^9, 3.6008235167144337`*^9}, {
   3.6012090548449945`*^9, 3.6012090598194923`*^9}, {3.601209092614772*^9, 
   3.6012090941649265`*^9}, {3.6034728607371655`*^9, 3.6034728715201654`*^9}, 
   3.603473513915165*^9, {3.604084056986595*^9, 3.604084142142973*^9}, 
   3.605368685381165*^9, {3.605368716489493*^9, 3.6053687533101063`*^9}},
 CellID->508431597],

Cell[TextData[{
 "Controls are provided to display the dynamics associated with each of the \
characteristic angular frequencies ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]]],
 ", for given reciprocal vector values ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellID->122369289],

Cell[TextData[{
 "Three tabs are provided in this Demonstration. The primary tab displays the \
dynamics of the solution for particular pair of ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     OverscriptBox["q", "\[RightVector]"], ",", 
     RowBox[{"\[Omega]", "(", 
      OverscriptBox["q", "\[RightVector]"], ")"}]}], ")"}], TraditionalForm]],
   "InlineMath"],
 " values. In that tab, selecting \"Play\" for the time control animates the \
lattice vibrations. A scaling control is provided to alter the initial \
magnitude of the eigenvectors, tantamount to picking the initial time \
boundary value constraints. Note that it is possible to select physically \
unrealistic scaling factors that allow for collisions that are not modeled by \
this system."
}], "DetailNotes",
 CellChangeTimes->{
  3.601208839708481*^9, {3.6012090601785283`*^9, 3.6012090619407043`*^9}, {
   3.601382813834156*^9, 3.601382893437709*^9}, {3.6034735604891653`*^9, 
   3.603473590847165*^9}, {3.604084190197336*^9, 3.604084234252029*^9}},
 CellID->476930990],

Cell[TextData[{
 "A second tab provides the dispersion relation, the dependence of angular \
velocity ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Omega]", "(", 
    OverscriptBox["q", "\[RightVector]"], ")"}], TraditionalForm]], 
  "InlineMath"],
 " on all ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["q", "\[RightVector]"], TraditionalForm]], "InlineMath"],
 " points."
}], "DetailNotes",
 CellChangeTimes->{
  3.601209062576768*^9, {3.6013829455216885`*^9, 3.6013829491098933`*^9}, {
   3.604084252220057*^9, 3.604084267745439*^9}},
 CellID->450664638],

Cell[TextData[{
 "Finally, a parameters tab provides controls for the spring constants ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["n", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["m", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 ", the primitive unit cell lattice vectors ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], ",", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", and the positions of the masses ",
 Cell[BoxData[
  FormBox[
   SubscriptBox[
    OverscriptBox["p", "\[RightVector]"], "k"], TraditionalForm]], 
  "InlineMath"],
 " within each unit cell of the lattice. Additional mass position locators, \
up to five total, may be added or deleted by Alt-clicking on the lattice cell \
in the desired location. For mass locator removal, it is necessary to adjust \
one of the other locators so that the removal takes effect. Note that it is \
possible to select equilibrium mass positions that are too close, leading to \
physically unrealistic dynamics, such as masses passing through each other."
}], "DetailNotes",
 CellChangeTimes->{{3.600966198344832*^9, 3.600966236435011*^9}, {
   3.6012090632078314`*^9, 3.6012090644089513`*^9}, {3.601382988189129*^9, 
   3.6013829971846433`*^9}, 3.603472787540165*^9, {3.6034736457561655`*^9, 
   3.6034736467161655`*^9}, {3.604084293130703*^9, 3.6040843368561363`*^9}},
 CellID->557416845],

Cell["\<\
The total number of interactions, even when those interactions are restricted \
to just the neighboring lattice cells, increases quickly as additional masses \
per cell are added. For example, with three masses per unit cell, considering \
only the neighboring and origin cells, there are 29 interactions possible for \
each mass. To simplify the physical constants dialog, distinct \"spring \
constant\" selection is only available for a subset of the possible \
interactions. This imposes the following respective constraints along the \
\"horizontal,\" \"vertical,\" \"NE diagonal,\" and \"NW diagonal\" directions \
connecting the masses across the cells\
\>", "DetailNotes",
 CellChangeTimes->{{3.6008880438402157`*^9, 3.600888044919277*^9}, {
   3.6012090650310135`*^9, 3.6012090662031307`*^9}, 3.6034737026411653`*^9, {
   3.603473825738165*^9, 3.603473830137165*^9}, {3.603473982609165*^9, 
   3.603474006287165*^9}, {3.604081834057509*^9, 3.604081834983363*^9}, {
   3.604084347951393*^9, 3.604084357518306*^9}},
 CellID->204245605],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "0"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", "1"}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], ")"}]}], ",", "j"}]], "=", " ", 
    SubscriptBox["K", 
     RowBox[{
      OverscriptBox["0", "\[RightVector]"], ",", 
      RowBox[{"k", ";", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], ")"}]}], ",", "j"}]]}], 
   TraditionalForm]], "InlineMath"],
 "."
}], "DetailNotes",
 CellChangeTimes->{{3.598056792794958*^9, 3.598056894559779*^9}, {
   3.598056950150959*^9, 3.5980569832608523`*^9}, {3.598057031767627*^9, 
   3.598057031774627*^9}, {3.598057330464711*^9, 3.598057446094325*^9}, {
   3.59805756332403*^9, 3.5980575811080475`*^9}, {3.5980576945015335`*^9, 
   3.5980577077462907`*^9}, {3.5980585058849416`*^9, 3.598058539899887*^9}, {
   3.5982726803130836`*^9, 3.598272680323084*^9}, {3.598396857147249*^9, 
   3.598396862212539*^9}, 3.5983970077038608`*^9, {3.5986527341628847`*^9, 
   3.598652736497018*^9}, {3.599142949402369*^9, 3.599142973472746*^9}, {
   3.599144400390361*^9, 3.5991444194934535`*^9}, {3.599144544232588*^9, 
   3.599144772358636*^9}, {3.5991448024383564`*^9, 3.599144812883954*^9}, {
   3.599996318317963*^9, 3.599996379259449*^9}, {3.600076492258809*^9, 
   3.600076523646064*^9}, {3.6000766422374725`*^9, 3.600076689224755*^9}, {
   3.6000767765225077`*^9, 3.6000772270044994`*^9}, {3.6000776433692303`*^9, 
   3.6000781070644455`*^9}, {3.60007816099374*^9, 3.600078188605788*^9}, {
   3.60007853087039*^9, 3.6000790980561857`*^9}, {3.60007913498145*^9, 
   3.6000792378012314`*^9}, {3.6000792689076858`*^9, 3.600079283852512*^9}, {
   3.6000793585454435`*^9, 3.6000793899326982`*^9}, {3.6000794650156302`*^9, 
   3.600079471318041*^9}, {3.600887622755131*^9, 3.6008876400591207`*^9}, 
   3.6034737205351653`*^9, {3.604081916343145*^9, 3.6040819288437138`*^9}},
 CellID->325571302],

Cell[TextData[{
 "These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "2"], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "3"], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "4"], TraditionalForm]], "InlineMath"],
 " in the parameters tab, respectively. For example, the first identity above \
is the imposition of an equality constraint on the coupling constants in the \
\"left\" and \"right\" directions separating masses in neighboring \
\"horizontal\" cells (when the lattice is square). Those are the interactions \
directed primarily along the lattice vector directions ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["a", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 " (primarily since these directions are also adjusted for the positions of \
the masses within the respective cells if different). Similarly, the same \
coupling constants are used for each of the pairs of directions that are \
directed primarily along the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[PlusMinus]", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ", \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], "+", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 "), \[PlusMinus](",
 Cell[BoxData[
  FormBox[
   RowBox[{
    OverscriptBox["a", "\[RightVector]"], "-", 
    OverscriptBox["b", "\[RightVector]"]}], TraditionalForm]], "InlineMath"],
 ") directions separating the lattice cells."
}], "DetailNotes",
 CellChangeTimes->{{3.6008880598061285`*^9, 3.600888064512398*^9}, {
   3.6012090668131914`*^9, 3.6012090675292635`*^9}, {3.603474018903165*^9, 
   3.6034740292301655`*^9}, 3.604081891566828*^9, {3.604084384808313*^9, 
   3.604084421150326*^9}},
 CellID->64527093],

Cell[TextData[{
 "When there is more than mass per unit cell, distinct coupling constants for \
the intra-cell interactions between the masses within the origin unit cell \
may be selected (i.e. ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["K", 
    RowBox[{
     OverscriptBox["0", "\[RightVector]"], ",", 
     RowBox[{"k", ";", 
      OverscriptBox["0", "\[RightVector]"]}], ",", "j"}]], TraditionalForm]], 
  "InlineMath"],
 "). These are labeled ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "5"], TraditionalForm]], "InlineMath"],
 " in the parameters tab."
}], "DetailNotes",
 CellChangeTimes->{{3.600887684261649*^9, 3.6008876842696495`*^9}, 
   3.6008880700537148`*^9, 3.6012090681853285`*^9, {3.603474143359165*^9, 
   3.603474144103165*^9}, {3.604081946086042*^9, 3.604081953111044*^9}},
 CellID->209290908],

Cell["\<\
General theory describing oscillations around lattice equilibrium points can \
be found in [1].\
\>", "DetailNotes",
 CellChangeTimes->{{3.6034741647821655`*^9, 3.6034741680621653`*^9}},
 CellID->30163790],

Cell["Reference", "DetailNotes",
 CellChangeTimes->{
  3.601209069027413*^9, {3.6034741717181654`*^9, 3.603474174842165*^9}},
 CellID->213153736],

Cell[TextData[{
 "[1] N. W. Ashcroft and N. D. Mermin, ",
 StyleBox["Solid State Physics",
  FontSlant->"Italic"],
 ", New York: Holt, Rinehart and Winston, 1976, chapters 21 and 22. "
}], "DetailNotes",
 CellChangeTimes->{
  3.601209069027413*^9, {3.6034741717181654`*^9, 3.603474239538165*^9}, {
   3.6034743012301655`*^9, 3.603474302854165*^9}, 3.6034744439421654`*^9, {
   3.605368566694273*^9, 3.605368568920265*^9}},
 CellID->825555930]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "ControlSuggestionsSection"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Resize Images"]}],
  "\"Click inside an image to reveal its orange resize frame.\\nDrag any of \
the orange resize handles to resize the image.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"ResizeImages"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Rotate and Zoom in 3D"]}],
  RowBox[{
   "\"Drag a 3D graphic to rotate it. Starting the drag near the center \
tumbles\\nthe graphic; starting near a corner turns it parallel to the plane \
of the screen.\\nHold down \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" (or \"", 
    FrameBox[
    "Cmd", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" on Mac) and drag up and down to zoom.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6055648594618907`*^9},
 FontFamily->"Verdana",
 CellTags->"RotateAndZoomIn3D"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Drag Locators"]}],
  RowBox[{"\"Drag any locator (\"", 
    GraphicsBox[
     LocatorBox[
      Scaled[{0.5, 0.5}]], ImageSize -> 20], 
    "\", etc.) to move it around.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6055648606619596`*^9},
 FontFamily->"Verdana",
 CellTags->"DragLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Create and Delete Locators"]}],
  RowBox[{"\"Insert a new locator in the graphic by holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key\\nand clicking where you want it to be. Delete a locator by \
clicking it\\nwhile holding down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" key.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.6055648613740005`*^9},
 FontFamily->"Verdana",
 CellTags->"CreateAndDeleteLocators"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Slider Zoom"]}],
  RowBox[{"\"Hold down the \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], 
    "\" key while moving a slider to make fine adjustments in the slider \
value.\\nHold \"", 
    FrameBox[
    "Ctrl", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" and/or \"", 
    FrameBox[
    "Shift", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" at the same time as \"", 
    FrameBox[
    "Alt", Background -> GrayLevel[0.9], FrameMargins -> 2, FrameStyle -> 
     GrayLevel[0.9]], "\" to make ever finer adjustments.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"SliderZoom"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Gamepad Controls"]}],
  "\"Control this Demonstration with a gamepad or other\\nhuman interface \
device connected to your computer.\"",
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.35696210375764*^9, 3.3895522232313623`*^9},
 FontFamily->"Verdana",
 CellTags->"GamepadControls"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[True], Cell[" Automatic Animation"]}],
  RowBox[{"\"Animate a slider in this Demonstration by clicking the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJzzTSzJSM1NLMlMTlRwL0osyMhMLlZwyy8CCjEzMjAwcIKwAgOI/R/IhBKc\n\
/4EAyGAG0f+nTZsGwgysIJIRKsWKLAXGIHFmEpUgLADxWUAkI24jZs+eTaEt\n\
IG+wQKRmzJgBlYf5lhEA30OqWA=="], "Graphics", ImageSize -> {9, 9}, ImageMargins -> 
      0, CellBaseline -> Baseline], BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"button\\nnext to the slider, and then clicking the play button that \
appears.\\nAnimate all controls by selecting \"", 
    StyleBox["Autorun", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 CellChangeTimes->{3.605564862454062*^9},
 FontFamily->"Verdana",
 CellTags->"AutomaticAnimation"],

Cell[BoxData[
 TooltipBox[
  RowBox[{
   CheckboxBox[False], Cell[" Bookmark Animation"]}],
  RowBox[{
   "\"See a prepared animation of this Demonstration by selecting\\n\"", 
    StyleBox["Animate Bookmarks", FontWeight -> "Bold"], "\" from the\"", 
    AdjustmentBox[
     Cell[
      GraphicsData[
      "CompressedBitmap", 
       "eJyNULENwyAQfEySIlMwTVJlCGRFsosokeNtqBmDBagoaZjAI1C8/8GUUUC6\n\
57h7cQ8PvU7Pl17nUav7oj/TPH7V7b2QJAUAXBkKmCPRowxICy64bRvGGNF7\n\
X8CctGoDSN4xhIDGGDhzFXwUh3/ClBKrDQPmnGXtI6u0OOd+tZBVUqy1xSaH\n\
UqiK6pPe4XdEdAz6563tx/gejuORGMxJaz8mdpJn7hc="], "Graphics", 
      ImageSize -> {10, 10}, ImageMargins -> 0, CellBaseline -> Baseline], 
     BoxBaselineShift -> 0.1839080459770115, 
     BoxMargins -> {{0., 0.}, {-0.1839080459770115, 0.1839080459770115}}], 
    "\"menu.\""}],
  TooltipDelay->0.35]], "ControlSuggestions",
 FontFamily->"Verdana",
 CellTags->"BookmarkAnimation"]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "SearchTermsSection"],

Cell["one atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208909916481*^9}},
 CellID->476564237],

Cell["two atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208912380481*^9}},
 CellID->245358486],

Cell["n atom basis", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089151324806`*^9}},
 CellID->584424833],

Cell["lattice vibration", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.6012089173234806`*^9}},
 CellID->103468090],

Cell["phonon", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208919819481*^9}},
 CellID->21953905],

Cell["reciprocal lattice vector", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922747481*^9}},
 CellID->733906711],

Cell["angular frequency", "SearchTerms",
 CellChangeTimes->{{3.600887404444644*^9, 3.600887413260148*^9}, {
  3.6012089095264807`*^9, 3.601208922739481*^9}},
 CellID->200946478]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "RelatedLinksSection"],

Cell[TextData[ButtonBox["Analysis of Lattice Vibrations in Two Dimensions",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/\
AnalysisOfLatticeVibrationsInTwoDimensions/"]], "RelatedLinks",
 CellChangeTimes->{{3.6055643520598693`*^9, 3.605564352061869*^9}},
 CellID->404885149],

Cell[TextData[ButtonBox["Motion of Atoms in Crystal",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/MotionOfAtomsInCrystal/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6055643520598693`*^9, 3.6055643651196165`*^9}},
 CellID->28886169],

Cell[TextData[ButtonBox["Normal Modes in a Periodic Square Lattice",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/\
"], None},
 ButtonNote->
  "http://demonstrations.wolfram.com/NormalModesInAPeriodicSquareLattice/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6055643520598693`*^9, 3.605564367337743*^9}},
 CellID->322034297],

Cell[TextData[ButtonBox["Simple Harmonic Motion for a Spring",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"], 
   None},
 ButtonNote->
  "http://demonstrations.wolfram.com/SimpleHarmonicMotionForASpring/"]], \
"RelatedLinks",
 CellChangeTimes->{{3.6055643520598693`*^9, 3.605564373663105*^9}},
 CellID->110391398]
}, Open  ]],

Cell[CellGroupData[{

Cell["", "AuthorSection"],

Cell["Contributed by: Peeter Joot", "Author",
 CellChangeTimes->{{3.6055643024320307`*^9, 3.6055643037101035`*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Demonstration.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "ResizeImages"->{
  Cell[1819686, 33468, 312, 8, 30, "ControlSuggestions",
   CellTags->"ResizeImages"]},
 "RotateAndZoomIn3D"->{
  Cell[1820001, 33478, 721, 17, 30, "ControlSuggestions",
   CellTags->"RotateAndZoomIn3D"]},
 "DragLocators"->{
  Cell[1820725, 33497, 383, 12, 30, "ControlSuggestions",
   CellTags->"DragLocators"]},
 "CreateAndDeleteLocators"->{
  Cell[1821111, 33511, 680, 16, 30, "ControlSuggestions",
   CellTags->"CreateAndDeleteLocators"]},
 "SliderZoom"->{
  Cell[1821794, 33529, 844, 21, 30, "ControlSuggestions",
   CellTags->"SliderZoom"]},
 "GamepadControls"->{
  Cell[1822641, 33552, 369, 9, 30, "ControlSuggestions",
   CellTags->"GamepadControls"]},
 "AutomaticAnimation"->{
  Cell[1823013, 33563, 1505, 32, 30, "ControlSuggestions",
   CellTags->"AutomaticAnimation"]},
 "BookmarkAnimation"->{
  Cell[1824521, 33597, 908, 21, 30, "ControlSuggestions",
   CellTags->"BookmarkAnimation"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"ResizeImages", 1828960, 33729},
 {"RotateAndZoomIn3D", 1829072, 33732},
 {"DragLocators", 1829185, 33735},
 {"CreateAndDeleteLocators", 1829304, 33738},
 {"SliderZoom", 1829421, 33741},
 {"GamepadControls", 1829530, 33744},
 {"AutomaticAnimation", 1829646, 33747},
 {"BookmarkAnimation", 1829766, 33750}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 111, 3, 98, "DemoTitle"],
Cell[CellGroupData[{
Cell[715, 29, 33, 0, 365, "InitializationSection"],
Cell[751, 31, 112146, 2684, 14122, "Input",
 InitializationCell->True,
 CellID->1596299]
}, Open  ]],
Cell[CellGroupData[{
Cell[112934, 2720, 29, 0, 311, "ManipulateSection"],
Cell[CellGroupData[{
Cell[112988, 2724, 87564, 1850, 11432, "Input"],
Cell[200555, 4576, 231686, 4175, 554, "Output",
 CellID->464036550]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[432290, 8757, 36, 0, 228, "ManipulateCaptionSection"],
Cell[432329, 8759, 1007, 15, 106, "ManipulateCaption"]
}, Open  ]],
Cell[CellGroupData[{
Cell[433373, 8779, 28, 0, 229, "ThumbnailSection"],
Cell[433404, 8781, 479982, 8308, 554, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[913423, 17094, 28, 0, 189, "SnapshotsSection"],
Cell[913454, 17096, 311643, 5544, 546, "Output"],
Cell[1225100, 22642, 318171, 5581, 546, "Output",
 CellID->459938742],
Cell[1543274, 28225, 247133, 4421, 554, "Output",
 CellID->164495161]
}, Open  ]],
Cell[CellGroupData[{
Cell[1790444, 32651, 26, 0, 452, "DetailsSection"],
Cell[1790473, 32653, 1932, 56, 67, "DetailNotes",
 CellID->143536934],
Cell[1792408, 32711, 2596, 81, 66, "DetailNotes",
 CellID->185095190],
Cell[1795007, 32794, 1493, 45, 50, "DetailNotes",
 CellID->1717657707],
Cell[1796503, 32841, 1486, 46, 73, "DetailNotes",
 CellID->160232404],
Cell[1797992, 32889, 2200, 63, 55, "DetailNotes",
 CellID->779035200],
Cell[1800195, 32954, 2469, 66, 76, "DetailNotes",
 CellID->72937650],
Cell[1802667, 33022, 1371, 32, 72, "DetailNotes",
 CellID->69846009],
Cell[1804041, 33056, 3861, 98, 59, "DetailNotes",
 CellID->508431597],
Cell[1807905, 33156, 375, 11, 29, "DetailNotes",
 CellID->122369289],
Cell[1808283, 33169, 1055, 22, 68, "DetailNotes",
 CellID->476930990],
Cell[1809341, 33193, 555, 17, 29, "DetailNotes",
 CellID->450664638],
Cell[1809899, 33212, 1503, 33, 97, "DetailNotes",
 CellID->557416845],
Cell[1811405, 33247, 1051, 16, 86, "DetailNotes",
 CellID->204245605],
Cell[1812459, 33265, 3510, 95, 38, "DetailNotes",
 CellID->325571302],
Cell[1815972, 33362, 2001, 52, 93, "DetailNotes",
 CellID->64527093],
Cell[1817976, 33416, 822, 21, 59, "DetailNotes",
 CellID->209290908],
Cell[1818801, 33439, 215, 5, 28, "DetailNotes",
 CellID->30163790],
Cell[1819019, 33446, 145, 3, 28, "DetailNotes",
 CellID->213153736],
Cell[1819167, 33451, 442, 10, 28, "DetailNotes",
 CellID->825555930]
}, Open  ]],
Cell[CellGroupData[{
Cell[1819646, 33466, 37, 0, 168, "ControlSuggestionsSection"],
Cell[1819686, 33468, 312, 8, 30, "ControlSuggestions",
 CellTags->"ResizeImages"],
Cell[1820001, 33478, 721, 17, 30, "ControlSuggestions",
 CellTags->"RotateAndZoomIn3D"],
Cell[1820725, 33497, 383, 12, 30, "ControlSuggestions",
 CellTags->"DragLocators"],
Cell[1821111, 33511, 680, 16, 30, "ControlSuggestions",
 CellTags->"CreateAndDeleteLocators"],
Cell[1821794, 33529, 844, 21, 30, "ControlSuggestions",
 CellTags->"SliderZoom"],
Cell[1822641, 33552, 369, 9, 30, "ControlSuggestions",
 CellTags->"GamepadControls"],
Cell[1823013, 33563, 1505, 32, 30, "ControlSuggestions",
 CellTags->"AutomaticAnimation"],
Cell[1824521, 33597, 908, 21, 30, "ControlSuggestions",
 CellTags->"BookmarkAnimation"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1825466, 33623, 30, 0, 208, "SearchTermsSection"],
Cell[1825499, 33625, 174, 3, 28, "SearchTerms",
 CellID->476564237],
Cell[1825676, 33630, 174, 3, 28, "SearchTerms",
 CellID->245358486],
Cell[1825853, 33635, 174, 3, 28, "SearchTerms",
 CellID->584424833],
Cell[1826030, 33640, 179, 3, 28, "SearchTerms",
 CellID->103468090],
Cell[1826212, 33645, 165, 3, 28, "SearchTerms",
 CellID->21953905],
Cell[1826380, 33650, 185, 3, 28, "SearchTerms",
 CellID->733906711],
Cell[1826568, 33655, 177, 3, 28, "SearchTerms",
 CellID->200946478]
}, Open  ]],
Cell[CellGroupData[{
Cell[1826782, 33663, 31, 0, 188, "RelatedLinksSection"],
Cell[1826816, 33665, 418, 9, 28, "RelatedLinks",
 CellID->404885149],
Cell[1827237, 33676, 355, 8, 28, "RelatedLinks",
 CellID->28886169],
Cell[1827595, 33686, 397, 9, 28, "RelatedLinks",
 CellID->322034297],
Cell[1827995, 33697, 383, 9, 28, "RelatedLinks",
 CellID->110391398]
}, Open  ]],
Cell[CellGroupData[{
Cell[1828415, 33711, 25, 0, 188, "AuthorSection"],
Cell[1828443, 33713, 115, 1, 28, "Author"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
