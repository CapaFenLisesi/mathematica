(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1443996,      25808]
NotebookOptionsPosition[   1443370,      25783]
NotebookOutlinePosition[   1443713,      25798]
CellTagsIndexPosition[   1443670,      25795]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{
     "glConstMinSquaredDistanceFromOrigin", ",", 
      "glConstMinAngleBetweenLatticeVectors", ",", "glConstLocDefault", ",", 
      "glConstDefaultMass", ",", "glConstKDefaults", ",", "glConstKMin", ",", 
      "glConstKMax", ",", "glConstMMax", ",", "glConstWindowHalfWidth", ",", 
      "glConstSpringColors", ",", "glConstPrimaryDisplaySize", ",", 
      "glConstTextDisplayOffsetHack", ",", "glConstNeighboringCellIndexes", 
      ",", "glConstDynPlotRange", ",", "glConstSpringColorsByN"}], "]"}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstMinSquaredDistanceFromOrigin", " ", "=", " ", "0.1"}], 
    " ", ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMinAngleBetweenLatticeVectors", "=", 
     RowBox[{"Pi", "/", "6"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstLocDefault", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0.1", ",", "1.3"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1.9", ",", "0.8"}], "}"}]}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstDefaultMass", "=", "20"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKDefaults", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25", ",", "0.25", ",", "0.25", ",", "0.25"}], 
      "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMin", "=", "0.05"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstKMax", "=", "1"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstMMax", "=", "30"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstWindowHalfWidth", "=", "3"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstSpringColors", "=", 
     RowBox[{"Darker", "@", 
      RowBox[{"{", 
       RowBox[{
       "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", "Yellow"}], 
       "}"}]}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstPrimaryDisplaySize", "=", 
     RowBox[{"{", 
      RowBox[{"380", ",", "380"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstTextDisplayOffsetHack", "=", 
     RowBox[{"{", 
      RowBox[{"0.25", ",", "0.25"}], "}"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"glConstNeighboringCellIndexes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", 
         RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstDynPlotRange", " ", "=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "glConstWindowHalfWidth"}], "/", "2"}], ",", " ", 
         "glConstWindowHalfWidth"}], "}"}]}], "}"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "0"}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", 
         RowBox[{"-", "1"}]}], "}"}], "\[Rule]", 
       RowBox[{"RGBColor", "[", "...", "]"}]}], ",", " ", "..."}], "}"}], 
    "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"glConstSpringColorsByN", " ", "=", " ", 
     RowBox[{"DeleteDuplicates", "@", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"s", " ", 
            RowBox[{
             RowBox[{"Append", "[", 
              RowBox[{"glConstNeighboringCellIndexes", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
           RowBox[{"glConstSpringColors", "[", 
            RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"s", ",", " ", 
            RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", "1"}], 
       "]"}]}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Future", " ", "possible", " ", "maintainance", " ", 
     RowBox[{"TODOs", ":", "\[IndentingNewLine]", GridBox[{
        {
         RowBox[{
          RowBox[{
          "implement", " ", "a", " ", "min", " ", "separation", " ", "for", 
           " ", "the", " ", "equilibrium", " ", "mass", " ", "positions", " ",
            "too", " ", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
             "as", " ", "done", " ", "for", " ", "the", " ", "lattice", " ", 
              "vectors"}], ")"}], ".", " ", "\[IndentingNewLine]", 
            "Trickier"}]}], ",", " ", 
          RowBox[{
          "since", " ", "that", " ", "should", " ", "be", " ", "based", " ", 
           "on", " ", "the", " ", "separations", " ", "in", " ", "the", " ", 
           "origin", " ", "cell"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
          "and", " ", "not", " ", "the", " ", "obsolute", " ", "separations", 
           " ", "of", " ", "the", " ", 
           RowBox[{"locators", ".", "\[IndentingNewLine]", "Even"}], " ", 
           "if", " ", "that", " ", "is", " ", "done"}], ",", " ", 
          RowBox[{"that", " ", 
           RowBox[{"doesn", "'"}], "t", " ", "mean", " ", "that", " ", "the", 
           " ", "scaling", " ", 
           RowBox[{"won", "'"}], "t", " ", "allow", " ", "for", " ", 
           "overlap", " ", "in", " ", "the", " ", "dynamic", " ", 
           RowBox[{"tab", "."}]}]}]},
        {
         RowBox[{
         "would", " ", "be", " ", "cool", " ", "to", " ", "make", " ", "qLoc",
           " ", "a", " ", "pair", " ", "of", " ", "Locators", " ", 
          RowBox[{"that", ":", "\[IndentingNewLine]", " ", 
           RowBox[{
           "trace", " ", "out", " ", "constrained", " ", "positions", " ", 
            "along", " ", "the", " ", "2", " ", "Pi", " ", "scaled", " ", 
            "reciprocal", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"(", 
              RowBox[{
              "returning", " ", "the", " ", "distance", " ", "from", " ", 
               "the", " ", "origin", " ", "of", " ", "each", " ", "of", " ", 
               "those", " ", "locators"}], ")"}]}]}]}]}]},
        {
         RowBox[{"a", " ", "message", " ", "box", " ", "on", " ", "user", " ", 
          RowBox[{"error", ":", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"-", " ", "when"}], " ", "an", " ", "angle", " ", "or", 
            " ", "distance", " ", "from", " ", "origin", " ", "change", " ", 
            "has", " ", "driven", " ", "a", " ", "reset", " ", "of", " ", 
            "the", " ", "lattice", " ", 
            RowBox[{"vectors", ".", "\[IndentingNewLine]", 
             RowBox[{"-", " ", "when"}]}], " ", "too", " ", "many", " ", "of",
             " ", "the", " ", "locators", " ", "have", " ", "been", " ", 
            "deleted", " ", "and", " ", "a", " ", "forced", " ", "reset", " ",
             "to", " ", "the", " ", "defaults", " ", 
            RowBox[{"occurs", "."}]}]}]}]},
        {
         RowBox[{
          RowBox[{"some", " ", "of", " ", 
           RowBox[{"the", " ", "::", "usage"}]}], " ", "=", " ", 
          RowBox[{
          "\"\<\>\"", " ", "strings", " ", "are", " ", "now", " ", "out", " ",
            "of", " ", "date"}]}]},
        {
         RowBox[{
          RowBox[{
          "usage", " ", "strings", " ", "could", " ", "probably", " ", "now", 
           " ", "be", " ", "un"}], "-", " ", "commented", "-", 
          RowBox[{
           RowBox[{"out", ".", "  ", "\[IndentingNewLine]", "Will"}], " ", 
           "that", " ", "re"}], "-", 
          RowBox[{
          "introduce", " ", "the", " ", "problems", " ", "on", " ", 
           "submission", " ", "that", " ", "were", " ", "seen", " ", "when", 
           " ", "the", " ", "usage", " ", "strings", " ", "were", " ", "in", 
           " ", "the", " ", "Initiialzation", " ", 
           RowBox[{"block", "?"}]}]}]},
        {
         RowBox[{
         "Can", " ", "the", " ", "frequency", " ", "qPlaneLoc", " ", 
          "LocatorPane", " ", "look", " ", "more", " ", "like", " ", 
          "Slider2D", " ", "in", " ", "the", " ", "dynamics", " ", "tab", " ",
           "for", " ", 
          RowBox[{"consistency", "?"}]}]},
        {
         RowBox[{
          RowBox[{
          "Am", " ", "using", " ", "a", " ", "calculated", " ", "value", " ", 
           "for", " ", "the", " ", "max", " ", "freq", " ", "for", " ", "the",
            " ", "freq", " ", "plot", " ", "intersection", " ", 
           RowBox[{"plane", ".", " ", "\[IndentingNewLine]", "Hardcoded"}], 
           " ", "this", " ", "to", " ", "magic", " ", "#", " ", 
           RowBox[{"that", "'"}], "s", " ", "out", " ", "of", " ", "the", " ",
            "graphic", " ", 
           RowBox[{"(", "23", ")"}]}], ",", " ", 
          RowBox[{
          "but", " ", "that", " ", "could", " ", "be", " ", "wrong", " ", 
           "for", " ", "some", " ", "params"}]}]},
        {
         RowBox[{
          RowBox[{
          "Scaling", " ", "of", " ", "the", " ", "masses", " ", "ended", " ", 
           "up", " ", "different", " ", "for", " ", "the", " ", "dynPlot", 
           " ", 
           RowBox[{"vs", ".", " ", "parameters"}], " ", 
           RowBox[{"tab", ".", " ", "\[IndentingNewLine]", "Hacked"}], " ", 
           "the", " ", "dynPlot", " ", "scaling", " ", "for", " ", "now"}], 
          ",", " ", 
          RowBox[{"to", " ", "be", " ", "a", " ", "bit", " ", 
           RowBox[{"closer", "."}]}]}]}
       },
       GridBoxDividers->{
        "Columns" -> {True, {False}, True}, "ColumnsIndexed" -> {}, 
         "Rows" -> {{True}}, "RowsIndexed" -> {}}]}]}], "\[IndentingNewLine]",
     "*)"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "checkAgainstRange", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "::", "usage"}], " ", "=", " ", 
     "\"\<This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator.\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"checkAgainstRange", "[", 
      RowBox[{
      "v_", ",", "default_", ",", "lowerLimit_", ",", " ", "upperLimit_", ",",
        " ", 
       RowBox[{"typeFunc_", " ", ":", " ", "NumberQ"}]}], "]"}], " ", ":=", 
     " ", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "result", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"typeFunc", "[", "v", "]"}], ",", "v", ",", " ", 
           "default"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", "<=", " ", "upperLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"result", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"result", " ", ">=", " ", "lowerLimit"}], ",", " ", 
           "result", ",", "default"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", "result"}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\n", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "springPoints", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Based", " ", "on", " ", "my", " ", "ListLinePlot", " ", "answer", " ", 
     "posted", " ", 
     RowBox[{"in", ":", " ", 
      ButtonBox[
       RowBox[{
        RowBox[{"http", ":"}], "//", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
           "a"}], "/", "37228"}], "/", "10"}]}],
       BaseStyle->"Hyperlink",
       ButtonData->{
         URL["http://mathematica.stackexchange.com/a/37228/10"], None},
       ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], 
    " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "::", "usage"}], " ", "=", " ", 
     "\"\<springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"springPoints", "[", " ", 
      RowBox[{"a12_List", ",", " ", 
       RowBox[{"n_Integer:", "8"}], ",", 
       RowBox[{"h_:", ".05"}], ",", " ", 
       RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "a1", ",", " ", "a2", ",", " ", "n1", ",", " ", "springDiff", ",", 
         " ", "nd", ",", " ", "r", ",", " ", "r1"}], " ", "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a1", ",", " ", "a2"}], "}"}], " ", "=", " ", "a12"}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"n1", " ", "=", " ", 
         RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"springDiff", " ", "=", " ", 
         RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"nd", " ", "=", " ", 
         RowBox[{"Norm", "[", "springDiff", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"r", " ", "=", " ", 
         RowBox[{"RotationMatrix", "[", 
          RowBox[{"ArcTan", " ", "@@", "  ", "springDiff"}], " ", "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"r1", " ", "=", " ", 
         RowBox[{"r", " ", ".", " ", 
          RowBox[{"{", 
           RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{"t", " ", 
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
                RowBox[{"h", " ", 
                 RowBox[{"Sin", "[", " ", 
                  RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", " ", 
                 RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"1", " ", "-", " ", 
                    RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Table", "[", " ", 
           RowBox[{
            RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
             RowBox[{"r", " ", ".", " ", 
              RowBox[{"{", " ", 
               RowBox[{
                RowBox[{"n1", " ", "+", 
                 RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
               "}"}]}]}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"t", ",", " ", "0", ",", " ", "1", ",", " ", "0.01"}], 
             " ", "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "indexLabel", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"indexLabel", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indexLabel", " ", "=", " ", 
     RowBox[{
      RowBox[{"Subscript", "[", 
       RowBox[{
        RowBox[{"Style", "[", 
         RowBox[{"#1", ",", "Italic"}], "]"}], ",", " ", "#2"}], "]"}], " ", 
      "&"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "kLable", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"kLable", "::", "usage"}], " ", "=", " ", 
     "\"\<SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kLable", " ", "=", " ", 
     RowBox[{
      RowBox[{"Style", "[", " ", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<k\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"FontColor", "\[Rule]", 
         RowBox[{"glConstSpringColors", "[", 
          RowBox[{"[", "#", "]"}], "]"}]}]}], " ", "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massColors", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massColors", " ", ":=", " ", 
     RowBox[{"(", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Darker", "[", 
         RowBox[{"{", " ", 
          RowBox[{
          "Blue", ",", " ", "Green", ",", " ", "Purple", ",", " ", "Red", ",",
            " ", "Orange"}], " ", "}"}], "]"}], "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"Mod", "[", 
           RowBox[{"#", ",", " ", "5"}], "]"}], " ", "+", " ", "1"}], "]"}], 
        " ", "]"}], " ", "&"}], " ", ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "massLabel", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"massLabel", " ", ":=", " ", 
     RowBox[{
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"indexLabel", "[", 
         RowBox[{"\"\<m\>\"", ",", " ", "#"}], "]"}], ",", " ", 
        RowBox[{"massColors", "[", "#", "]"}]}], "]"}], " ", "&"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcLineTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcLineTable", "[", " ", 
      RowBox[{"n_List", ",", " ", "b_List", ",", " ", "i_List"}], " ", "]"}], 
     " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"first", ",", " ", "second"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"first", ",", " ", "second"}], "}"}], " ", "=", " ", "i"}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Line", "[", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"-", 
                RowBox[{"n", "[", 
                 RowBox[{"[", "first", "]"}], "]"}]}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"n", "[", 
                RowBox[{"[", "first", "]"}], "]"}], 
               RowBox[{"b", "[", 
                RowBox[{"[", "first", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"j", " ", 
               RowBox[{"b", "[", 
                RowBox[{"[", "second", "]"}], "]"}]}]}]}], "}"}], " ", 
           "\[IndentingNewLine]", "]"}], " ", "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"j", ",", " ", 
            RowBox[{"-", 
             RowBox[{"n", "[", 
              RowBox[{"[", "second", "]"}], "]"}]}], ",", " ", 
            RowBox[{"n", "[", 
             RowBox[{"[", "second", "]"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcReciprocalBasis", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "::", "usage"}], " ", "=", " ", 
     "\"\<Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcReciprocalBasis", "[", "loc_List", "]"}], " ", ":=", " ", 
     RowBox[{"Inverse", "[", " ", 
      RowBox[{"Transpose", "[", " ", "loc", " ", "]"}], " ", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "nMassesFromLocArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"nMassesFromLocArray", "[", "uLoc_", "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Dimensions", "[", "uLoc", "]"}], " ", "//", " ", "First"}], 
        ")"}], " ", "-", "2"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "adjustedmoSel", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"adjustedmoSel", "[", 
      RowBox[{"rNumM_", ",", "mOrigInd_", ",", "m1Ind_"}], "]"}], ":=", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rNumM", ">", "2"}], ",", "\[IndentingNewLine]", 
       RowBox[{"If", "[", " ", 
        RowBox[{
         RowBox[{"mOrigInd", "\[Equal]", "m1Ind"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"First", "[", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"Range", "[", "rNumM", "]"}], ",", "m1Ind"}], "]"}], 
          "]"}], ",", "\[IndentingNewLine]", "mOrigInd"}], " ", 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"First", "@", 
        RowBox[{"Delete", "[", 
         RowBox[{
          RowBox[{"Range", "[", "2", "]"}], ",", "m1Ind"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArrayElements", "[", " ", 
      RowBox[{"i_Integer", ",", " ", "j_Integer"}], "  ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"a", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "j", ",", " ", 
                RowBox[{"s", " ", 
                 RowBox[{"glConstNeighboringCellIndexes", "[", 
                  RowBox[{"[", "n", "]"}], "]"}]}]}], "}"}], " ", "\[Rule]", 
              " ", 
              RowBox[{"glConstKDefaults", "[", 
               RowBox[{"[", "n", "]"}], "]"}]}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"s", ",", " ", 
               RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}], ",",
              " ", 
             RowBox[{"{", 
              RowBox[{"n", ",", " ", "4"}], "}"}]}], " ", "]"}], ",", " ", 
           "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"i", " ", "<", " ", "j"}], ",", " ", 
          RowBox[{"Append", "[", 
           RowBox[{"a", ",", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"i", ",", "j", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], " ", "\[Rule]", " ", 
             RowBox[{"glConstKDefaults", "[", 
              RowBox[{"[", "5", "]"}], "]"}]}]}], "]"}], ",", " ", "a"}], " ",
          "]"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "constructKArray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"constructKArray", "[", " ", "r_Integer", " ", "]"}], " ", ":=", 
     " ", 
     RowBox[{"Flatten", "[", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"constructKArrayElements", "[", 
          RowBox[{"i", ",", "j"}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "r"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", "r"}], "}"}]}], "]"}], ",", " ", "2"}], "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKArrayElements", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKArrayElements", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer", ",", "v_"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{"kA", "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "_"}], "]"}], 
          "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"glConstNeighboringCellIndexes", "[", 
               RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], ",", "v"}], "]"}]}], 
         ",", 
         RowBox[{
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "_"}], "]"}],
           "\[RuleDelayed]", 
          RowBox[{"Rule", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "m2Ind", ",", 
              RowBox[{"-", 
               RowBox[{"glConstNeighboringCellIndexes", "[", 
                RowBox[{"[", "ni", "]"}], "]"}]}]}], "}"}], ",", "v"}], 
           "]"}]}]}], "}"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnAlteredKarrayOriginElement", "]"}], ";"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnAlteredKarrayOriginElement", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer", ",", "v_"}], 
      "]"}], ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "m1oSet", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"m1oSet", "=", 
         RowBox[{"Append", "[", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{"{", 
             RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"kA", "/.", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "_"}], "]"}], "\[RuleDelayed]", 
           RowBox[{"Rule", "[", 
            RowBox[{"m1oSet", ",", "v"}], "]"}]}], ")"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\n", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectVFromKarray", "]"}], ";"}], "\n", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"To", " ", "refresh", " ", "k1"}], ",", "k2", ",", "k3", ",", 
     RowBox[{
     "k4", " ", "after", " ", "changing", " ", "m1Sel", " ", "or", " ", 
      RowBox[{"m2Sel", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectVFromKarray", "[", 
      RowBox[{
      "kA_List", ",", "m1Ind_Integer", ",", "m2Ind_Integer", ",", 
       "ni_Integer"}], "]"}], ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"m1Ind", ",", "m2Ind", ",", 
         RowBox[{"glConstNeighboringCellIndexes", "[", 
          RowBox[{"[", "ni", "]"}], "]"}]}], "}"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "selectOriginVFromKarray", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
    "To", " ", "refresh", " ", "k5", " ", "after", " ", "changing", " ", 
     "m1Sel", " ", "and", " ", "moSel"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"selectOriginVFromKarray", "[", 
      RowBox[{"kA_List", ",", "m1Ind_Integer", ",", "moInd_Integer"}], "]"}], 
     ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"Sort", "[", 
          RowBox[{"{", 
           RowBox[{"m1Ind", ",", "moInd"}], "}"}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "/.", "kA"}], ")"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "returnKarrayForAdditionalMassIndex", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"returnKarrayForAdditionalMassIndex", "[", " ", 
      RowBox[{"kA_List", ",", "nmNew_Integer"}], " ", "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "k2", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"k2", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"constructKArrayElements", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], "]"}], " ", "&"}], ")"}], "/@",
             " ", 
            RowBox[{"(", 
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"Table", "[", " ", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"i", ",", "j"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"i", ",", " ", "nmNew"}], "}"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", " ", "nmNew"}], "}"}]}], "]"}], ",", 
                 " ", "1"}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"Max", "[", "#", "]"}], " ", "\[Equal]", " ", 
                 "nmNew"}], " ", "&"}]}], "]"}], ")"}]}], ",", " ", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"kArray", ",", " ", "k2"}], "]"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"kA", ",", " ", "k2"}], "}"}], ",", " ", "1"}], "]"}]}]}], 
      " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "resetLatticeVectorsIfAngleTooSmall", "]"}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
      RowBox[{"uLoc_List", ",", "minAngle_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "t", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"Abs", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], " ", ".", " ", 
            RowBox[{"Normalize", "[", 
             RowBox[{"uLoc", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "]"}], "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{"If", " ", "[", " ", 
          RowBox[{
           RowBox[{"t", " ", ">", " ", 
            RowBox[{"Pi", "/", "2"}]}], ",", " ", 
           RowBox[{"Pi", "-", "t"}], ",", " ", "t"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"If", "[", " ", 
         RowBox[{
          RowBox[{"t", " ", "<", " ", "minAngle"}], ",", 
          "\[IndentingNewLine]", "glConstLocDefault", ",", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
            RowBox[{"uLoc", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\n", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOpU", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOpU", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "^", "2"}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "1", "]"}], "]"}], 
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
         RowBox[{
          RowBox[{"v", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], "}"}]}], "}"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "::", "usage"}], " ", "=", " ", 
     "\"\<given an input vector \!\(\*OverscriptBox[\(v\), \
\(\[RightVector]\)]\) = {\!\(\*SubscriptBox[\(v\), \(x\)]\), \
\!\(\*SubscriptBox[\(v\), \(y\)]\)}, compute the projection matrix operator \
along the unit vector in that direction.\n\n   projOp[{1, 0}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"1\", \"0\"},
{\"0\", \"0\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{0, 1}] // MatrixForm = \
\!\(\*TagBox[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{\"0\", \"0\"},
{\"0\", \"1\"}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}],
Function[BoxForm`e$, 
MatrixForm[BoxForm`e$]]]\)\[IndentingNewLine]projOp[{a,b}] // MatrixForm = \!\
\(\*Cell[TextData[Cell[BoxData[
RowBox[{\"(\", \"\[NoBreak]\", GridBox[{
{
FractionBox[
SuperscriptBox[\"a\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]},
{
FractionBox[
RowBox[{\"a\", \" \", \"b\"}], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]], 
FractionBox[
SuperscriptBox[\"b\", \"2\"], 
RowBox[{
SuperscriptBox[\"a\", \"2\"], \"+\", 
SuperscriptBox[\"b\", \"2\"]}]]}
},
GridBoxAlignment->{\"Columns\" -> {{Center}}, \"ColumnsIndexed\" -> {}, \
\"Rows\" -> {{Baseline}}, \"RowsIndexed\" -> {}},
GridBoxSpacings->{\"Columns\" -> {
Offset[0.27999999999999997`], {
Offset[0.7]}, 
Offset[0.27999999999999997`]}, \"ColumnsIndexed\" -> {}, \"Rows\" -> {
Offset[0.2], {
Offset[0.4]}, 
Offset[0.2]}, \"RowsIndexed\" -> {}}], \"\[NoBreak]\", \")\"}]],
CellChangeTimes->{{3.5990911441851797`*^9, 3.599091144641206*^9}, \
3.5990913830438423`*^9, 3.5990915191646276`*^9, 3.599091555028679*^9, \
3.599091735722014*^9, {3.599091916353346*^9, 3.599091928988068*^9}}]]]\)\n\
\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "projOp", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"projOp", "[", "v_List", "]"}], " ", ":=", " ", 
     RowBox[{
      RowBox[{"projOpU", "[", "v", "]"}], "/", 
      RowBox[{"(", 
       RowBox[{"v", ".", " ", "v"}], ")"}]}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "relativeDifferences", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "::", "usage"}], " ", "=", " ", 
     "\"\<Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"relativeDifferences", "[", " ", 
      RowBox[{"r_List", ",", "mp_List", ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "mIndex1_Integer", ",", " ", "mIndex2_Integer", ",", " ", "n_List"}], 
        "}"}]}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "d", ",", " ", "pOrigin", ",", " ", "pOther", ",", " ", "dn"}], "}"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"pOrigin", " ", "=", " ", 
         RowBox[{"mp", "[", 
          RowBox[{"[", " ", "mIndex1", " ", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"pOther", " ", "=", " ", 
         RowBox[{
          RowBox[{"mp", "[", 
           RowBox[{"[", " ", "mIndex2", " ", "]"}], "]"}], "+", " ", 
          RowBox[{"n", " ", ".", " ", "r"}]}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"d", " ", "=", " ", 
         RowBox[{"pOther", " ", "-", " ", "pOrigin"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dn", " ", "=", " ", 
         RowBox[{"d", " ", ".", "d"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{"dn", ",", " ", "pOrigin", ",", " ", "pOther", ",", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"projOpU", "[", "d", "]"}], "/", "dn"}], "  ", 
           RowBox[{"(*", 
            RowBox[{"//", " ", "MatrixForm"}], "*)"}], ")"}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calculateCouplings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "::", "usage"}], " ", "=", " ", 
     "\"\<Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions.\>\""}], 
    " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calculateCouplings", "[", 
      RowBox[{"ld_List", ",", " ", "kA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "t", ",", " ", "t1", ",", " ", "t2", ",", " ", "r", ",", " ", "mp", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", " ", "mp", ",", " ", "numberOfMasses"}], "}"}], 
         " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mPosFirstCell\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"relativeDifferences", "[", 
              RowBox[{"r", ",", " ", "mp", ",", " ", 
               RowBox[{"First", "[", "#", "]"}]}], "]"}]}], " ", "]"}], "&"}],
           "/@", " ", 
          RowBox[{"(", 
           RowBox[{"kA", "/.", " ", 
            RowBox[{"Rule", " ", "\[Rule]", " ", "List"}]}], ")"}]}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"t", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "}"}], ",", " ", "1"}], 
            "]"}], " ", "&"}], "/@", " ", "t"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"t1", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t", ",", " ", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                    "i"}], ")"}], " ", "&&", " ", 
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "\[NotEqual]", " ", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", " ", "0"}], "}"}]}], ")"}]}], " ", 
                 "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{"t", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "3", "]"}], "]"}], " ", "==", " ", 
             RowBox[{"{", 
              RowBox[{"0", ",", " ", "0"}], "}"}]}], " ", "&"}]}], "]"}]}], 
        " ", ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"the", " ", "rest", " ", "of", " ", "the", " ", 
          RowBox[{"permutations", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"t2", ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", " ", 
                   RowBox[{"Drop", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}]}], "}"}], ",", " ", 
                 "1"}], "]"}], " ", "&"}], "/@", " ", "t2"}]}], "}"}], ",", 
           " ", "1"}], "]"}]}], "  ", ";", "\[IndentingNewLine]", 
        RowBox[{"t2", " ", "=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Sort", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"Select", "[", " ", 
               RowBox[{"t2", ",", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], " ", "\[Equal]", " ", 
                   "i"}], ")"}], " ", "&"}]}], "]"}], ")"}], ",", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"#1", "[", 
                RowBox[{"[", "5", "]"}], "]"}], " ", "<", " ", 
               RowBox[{"#2", "[", 
                RowBox[{"[", "5", "]"}], "]"}]}], " ", "&"}]}], "]"}], 
           "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], 
          "\[IndentingNewLine]", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"t2", ",", " ", "t1"}], "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "spScaled", "]"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"spScaled", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1_List", ",", "s2_List"}], "}"}], ",", " ", "scaleKValue_", 
       ",", " ", "referenceSepSquared_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", "ds", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ds", " ", "=", " ", 
         RowBox[{"s2", " ", "-", " ", "s1"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"springPoints", "[", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"s1", ",", "s2"}], "}"}], ",", 
          RowBox[{"Ceiling", "[", 
           RowBox[{"12", " ", "scaleKValue", " ", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ds", ".", "ds"}], ")"}], "/", "referenceSepSquared"}],
              "]"}]}], "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "oneTermOfdynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "::", "usage"}], " ", "=", " ", 
     "\"\<\!\(TraditionalForm\`\(grab\\\ data\\\ \(from : \\\ \
rawArrayOfMasses\), \\\ parameterLocatorDependencies, \
\[IndentingNewLine]\(\(couplingData[\([_]\)]\)[\([_]\)]\)[\([_]\)]\\\  = \\\ \
{k, \\\ j, \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \\\ \
\*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  + \\\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]
ex : \\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]
to\\\ form\\\ equations\\\ of\\\ the\\\ \(form : \
\[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\\  = \\\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\\  \[NotEqual] \\\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\\ \
\((\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\
\[RightVector]\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SubscriptBox[\(m\), \(k\)]] - \\\ \
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(j\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), \
SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \*SubscriptBox[\(m\), \(j\)]\)]] \
\*SuperscriptBox[\(e\), \(I\\\ \((\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\\  . \\\ \
\*OverscriptBox[\(q\), \(\[RightVector]\)]\\\ )\)\)])\)\[IndentingNewLine]
Note\\\ that\\\ qVec\\\ here\\\ is\\\ intended\\\ to\\\ be\\\ an\\\ undefined\
\\\ global . \\\ \\\ Is\\\ there\\\ a\\\ way\\\ to\\\ do\\\ that\\\ \
\(\(programatically\)\(?\)\)\)\)\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"oneTermOfdynamicsMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "k_Integer", ",", " ", "j_Integer", ",", " ", "mVec_List", ",", " ", 
         "kS_", ",", " ", "_", ",", "_", ",", "_", ",", "proj_List"}], "}"}], 
       ",", " ", "r_List", ",", " ", "mk_", ",", " ", "epsilon_List", ",", 
       " ", "mA_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{"kS", " ", 
       RowBox[{"proj", "  ", ".", 
        RowBox[{"(", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "k", "]"}], "]"}], "/", "mk"}], " ", "-", " ", 
          RowBox[{
           RowBox[{"epsilon", "[", 
            RowBox[{"[", "j", "]"}], "]"}], 
           RowBox[{
            RowBox[{"E", "^", 
             RowBox[{"(", 
              RowBox[{"I", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"mVec", " ", ".", " ", "r"}], ")"}], ".", " ", 
                 "qVec"}], ")"}]}], ")"}]}], "/", 
            RowBox[{"Sqrt", "[", " ", 
             RowBox[{"mk", " ", 
              RowBox[{"mA", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], " ", "]"}]}]}]}], ")"}]}]}], 
      "  ", ")"}]}], "  ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsMatrix", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsMatrix", "[", 
      RowBox[{"ld_List", ",", " ", "cd_List"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "cdFlatAndSorted", ",", " ", "r", ",", " ", "res", ",", " ", 
         "epsilon", ",", " ", "m", ",", "mScalarArray", ",", " ", 
         "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"cdFlatAndSorted", " ", "=", " ", 
         RowBox[{"SplitBy", "[", " ", 
          RowBox[{
           RowBox[{"Sort", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"cd", ",", " ", "2"}], "]"}]}], " ", ",", " ", "First"}],
           " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"r", ",", "mScalarArray", ",", " ", "numberOfMasses"}], 
          "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", 
            " ", "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}],
         " ", ";", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"Here", " ", 
            SubscriptBox[
             OverscriptBox["\[Epsilon]", "\[RightVector]"], "k"], " ", 
            RowBox[{"(", 
             RowBox[{"=", 
              RowBox[{"epsilon", "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], ")"}], " ", "is", " ", 
            "represented", " ", "as", " ", "a", " ", "2", "x", 
            RowBox[{"(", 
             RowBox[{"2", "N"}], ")"}], " ", "matrix", " ", "with", " ", 
            "the", " ", "vector", " ", "factored", " ", 
            RowBox[{"out", ".", "  ", "For"}], " ", "example", " ", "with", 
            " ", "N"}], " ", "=", " ", "3"}], ",", " ", "\[IndentingNewLine]", 
          RowBox[{
           SubscriptBox[
            OverscriptBox["\[Epsilon]", "\[RightVector]"], "1"], "=", " ", 
           RowBox[{
            RowBox[{
             TagBox[
              RowBox[{"(", "\[NoBreak]", GridBox[{
                 {"1", "0", "0", "0", "0", "0"},
                 {"0", "1", "0", "0", "0", "0"}
                },
                
                GridBoxAlignment->{
                 "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                  "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
              Function[BoxForm`e$, 
               MatrixForm[BoxForm`e$]]], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", "This", " ", "will", " ", "be", " ", 
             "pre"}], "-", 
            RowBox[{
            "multiplied", " ", "by", " ", "a", " ", "2", "x2", " ", 
             "projection", " ", 
             RowBox[{"matrix", ".", "\[IndentingNewLine]", "The"}], " ", 
             "whole", " ", "thing", " ", "should", " ", "be", " ", 
             "logically", " ", "treated", " ", "as", " ", "if", " ", "it", 
             " ", "is", " ", "post"}], "-", 
            RowBox[{
            "multiplied", " ", "by", "\[IndentingNewLine]", 
             "\[IndentingNewLine]", Cell[TextData[Cell[BoxData[
              TagBox[
               RowBox[{"(", "\[NoBreak]", GridBox[{
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"1", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"2", ",", "2"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "1"}]]},
                  {
                   SubscriptBox["\[Epsilon]", 
                    RowBox[{"3", ",", "2"}]]}
                 },
                 
                 GridBoxAlignment->{
                  "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                   "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
               Function[BoxForm`e$, 
                MatrixForm[BoxForm`e$]]]],
              
              CellChangeTimes->{{3.600871330362259*^9, 
               3.6008713538916054`*^9}}]]]}]}]}]}], "\[IndentingNewLine]", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"epsilon", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"IdentityMatrix", "[", " ", 
            RowBox[{"2", " ", "numberOfMasses"}], " ", "]"}], ",", "2"}], 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"res", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", " ", 
             RowBox[{
              RowBox[{"Total", "@", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{"oneTermOfdynamicsMatrix", "[", 
                   RowBox[{"#", ",", " ", "r", ",", " ", 
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ",", " ", "epsilon", ",", 
                    " ", "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{"cdFlatAndSorted", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}]}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"i", ",", " ", "numberOfMasses"}], "}"}]}], "]"}], " ",
             "//", " ", "Flatten"}], ",", " ", 
           RowBox[{"2", " ", "numberOfMasses"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"res", " ", "/.", " ", 
          RowBox[{"qVec", " ", "\[Rule]", " ", "#"}]}], " ", "&"}]}]}], " ", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"cdFlatAndSorted", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{"mScalarArray", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{"oneTermOfdynamicsMatrix", "[", 
           RowBox[{"#", ",", " ", "r", ",", " ", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", " ", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cdFlatAndSorted", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "res"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", "epsilon"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{";", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"oneTermOfdynamicsMatrix", "[", " ", 
            RowBox[{
            "parameterLocatorDependencies", ",", " ", "couplingData"}], " ", 
            "]"}], "[", 
           RowBox[{"#", ",", " ", "r", ",", 
            RowBox[{"mScalarArray", "[", 
             RowBox[{"[", "1", "]"}], "]"}], ",", " ", "epsilon", ",", 
            "mScalarArray"}], " ", "]"}], " ", "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{"cd", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ")"}]}]}], "*)"}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\n",
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "calcDynamics", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "::", "usage"}], " ", "=", " ", 
     "\"\<a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \
\(k\)]\),\!\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for \
each of the system eigenvalues, when evaluated at qLoc.\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Example", ":", "\n", "\n", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", 
         "qPoint", ",", " ", "omegaIndex"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"calcDynamics", "[", " ", 
            RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}], " ", "//",
            " ", "First"}], " ", "//", " ", "TableForm"}]}]}]}], 
      "\[IndentingNewLine]", "]"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"calcDynamics", "[", "mAtQ_List", "]"}], " ", ":=", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sqrt", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Eigensystem", "[", " ", "mAtQ", " ", "]"}], " ", "//", " ", 
         "Transpose"}], ")"}]}], ")"}]}], "  ", ";"}], "\n", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "frequencyPlotCalc", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "::", "usage"}], " ", "=", " ", 
     "\"\<frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"frequencyPlotCalc", "[", 
      RowBox[{"ld_List", ",", "m_", ",", "meshSz_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eigTable2D", ",", " ", "eigTable1D", ",", " ", "qMax", ",", " ", 
         "omegaPointList2D", ",", " ", "omegaPointList1D", ",", " ", "range", 
         ",", " ", "numberOfMasses"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"qMax", ",", " ", "numberOfMasses"}], "}"}], " ", "=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<qMaxVec\>\"", ",", "\"\<numberOfMasses\>\""}], "}"}], 
          " ", "/.", " ", "ld"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"eigTable2D", " ", "=", " ", 
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"Re", "[", 
            RowBox[{"Table", "[", "  ", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"qx", ",", " ", "qy"}], "}"}], " ", ",", 
                RowBox[{"Eigenvalues", "[", " ", 
                 RowBox[{
                  RowBox[{"m", "[", " ", 
                   RowBox[{"{", 
                    RowBox[{"qx", ",", " ", "qy"}], "}"}], "  ", "]"}], " ", "//",
                   " ", "N"}], " ", "]"}]}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qx", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "1", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"qy", ",", " ", 
                RowBox[{
                 RowBox[{"-", 
                  RowBox[{"qMax", "[", 
                   RowBox[{"[", "2", "]"}], "]"}]}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", "2"}], ",", " ", 
                RowBox[{
                 RowBox[{"qMax", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], "/", " ", "meshSz"}]}], 
               "}"}]}], " ", "]"}], " ", "]"}], ",", "1"}], "]"}]}], " ", ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"omegaPointList2D", "[", "nn_", "]"}], " ", ":=", "  ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"Sqrt", "[", 
                RowBox[{"#", "[", 
                 RowBox[{"[", "2", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", "nn", "]"}], "]"}]}], "}"}], "]"}], "&"}], "/@", 
          " ", "eigTable2D"}]}], "  ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"range", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"2", " ", "numberOfMasses"}], ")"}], " ", "//", " ", 
           "Range"}], ")"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"ListPlot3D", "[", " ", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"omegaPointList2D", "[", "#", "]"}], " ", "&"}], "/@", 
           " ", "range"}], ",", " ", 
          RowBox[{"PlotRange", " ", "\[Rule]", " ", "Full"}], " ", ",", " ", 
          RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
            "\"\<\!\(\*SubscriptBox[\(q\), \(x\)]\)\>\"", ",", " ", 
             "\"\<\!\(\*SubscriptBox[\(q\), \(y\)]\)\>\""}], "}"}]}]}], 
         "]"}]}]}], "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\n", 
   "\[IndentingNewLine]", " ", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showFreqPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showFreqPlot[ qPlaneLoc, freqPlot ]\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showFreqPlot", "[", 
      RowBox[{"qpl_List", ",", " ", "freqPlotData_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"aa", ",", " ", "bb"}], "}"}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"aa", ",", " ", "bb"}], "}"}], " ", "=", "  ", "qpl"}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", 
          RowBox[{"freqPlotData", ",", "\[IndentingNewLine]", 
           RowBox[{"Graphics3D", "[", " ", 
            RowBox[{"Polygon", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "0"}], "}"}], ",", 
               "  ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"bb", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                 RowBox[{"aa", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "23"}], "}"}]}], "}"}],
              "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "pointsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage.\>\""}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"pointsTable", "[", " ", 
      RowBox[{"massPosition_List", ",", " ", "latticeOrigins_List"}], " ", 
      "]"}], " ", ":=", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", " ", "+", " ", "massPosition"}], ")"}], " ", "&"}], "/@",
        " ", "latticeOrigins"}], ")"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", "findLatticeCells", " ", "]"}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "::", "usage"}], " ", "=", " ", 
     "\"\<All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n\>\""}], " ", ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"findLatticeCells", "[", 
      RowBox[{"latticeVectors_List", ",", "limits_List"}], "]"}], " ", ":=", 
     " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"a", ",", " ", "b", ",", "sol", ",", " ", "oneSolution"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], " ", "=", " ", 
         "latticeVectors"}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Rationalize", " ", "to", " ", 
          RowBox[{"fix", ":", " ", "to", ":", " ", 
           ButtonBox[
            RowBox[{
             RowBox[{"http", ":"}], "//", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], 
                 "/", "questions"}], "/", "6055"}], "/", "how"}], "-", "to", 
              "-", "get", "-", "rid", "-", "of", "-", "warnings", "-", "when",
               "-", "using", "-", "solve", "-", "on", "-", "an", "-", 
              "equation", "-", "with", "-", "inexact", "-", "coeffici"}]}],
            BaseStyle->"Hyperlink",
            ButtonData->{
              URL[
              "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"], None},
            
            ButtonNote->
             "http://mathematica.stackexchange.com/questions/6055/how-to-get-\
rid-of-warnings-when-using-solve-on-an-equation-with-inexact-coeffici"]}]}], 
         " ", "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"oneSolution", "[", "o_", "]"}], " ", ":=", " ", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"n", ",", "m"}], "}"}], " ", "/.", 
          RowBox[{"Solve", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Rationalize", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", " ", "o"}], ")"}], " ", 
                 ".", " ", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", "\[IndentingNewLine]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "1", "]"}], "]"}], " ", "<", "  ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}]}], ")"}], " ", "&&", 
              "\[IndentingNewLine]", 
              RowBox[{"(", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"n", " ", "a"}], " ", "+", " ", 
                   RowBox[{"m", " ", "b"}], " ", "+", "o"}], ")"}], " ", ".", 
                 " ", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], " ", "<", " ", 
                RowBox[{
                 RowBox[{"limits", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}]}], ")"}]}], " ", "]"}], 
            "\[IndentingNewLine]", ",", " ", 
            RowBox[{"{", 
             RowBox[{"n", ",", "m"}], "}"}], ",", " ", "Integers"}], 
           "]"}]}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"sol", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"oneSolution", "[", "#", "]"}], " ", "&"}], "/@", " ", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "0"}], "}"}], ",", "a", ",", " ", "b", ",",
                 " ", 
                RowBox[{"a", "+", "b"}]}], "}"}]}], " ", ",", "1"}], "]"}], 
           " ", "//", " ", "Sort"}], " ", "//", " ", "DeleteDuplicates"}]}], 
        " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", ",", 
            RowBox[{
             RowBox[{"a", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
             RowBox[{"b", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}]}]}], "}"}], " ", "&"}], "/@", 
         " ", "sol"}]}]}], " ", "\[IndentingNewLine]", "]"}]}], " ", ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "locDependent", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "::", "usage"}], " ", "=", " ", 
     "\"\<Locator dependent calculations (i.e. based on the mass positions \
and the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"locDependent", "[", " ", 
      RowBox[{"uLoc_List", ",", "numMasses_Integer", ",", " ", "rma_List"}], 
      " ", "]"}], "  ", ":=", " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "m", ",", "latticeBasis", ",", " ", "numberLatticeLinesToDisplay", 
         ",", "reciprocalBasis", ",", "mObliqueComponents", ",", " ", 
         "mPosFirstCell", ",", " ", "reciprocalNorms", ",", " ", 
         "allLatticeCellOriginsInDynPlotRange", ",", " ", "cellOrigins"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", 
         RowBox[{"Take", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"m", " ", "=", " ", 
         RowBox[{"Drop", "[", 
          RowBox[{"uLoc", ",", " ", "2"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"numberLatticeLinesToDisplay", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Ceiling", "[", "  ", 
             RowBox[{"Abs", "[", 
              RowBox[{"glConstWindowHalfWidth", "/", " ", 
               RowBox[{
                RowBox[{"latticeBasis", "[", 
                 RowBox[{"[", "#", "]"}], "]"}], "[", 
                RowBox[{"[", "#", "]"}], "]"}]}], "]"}], "]"}], " ", "&"}], 
           " ", "/@", " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"reciprocalBasis", " ", "=", " ", 
         RowBox[{
         "calcReciprocalBasis", "[", " ", "latticeBasis", " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", 
        RowBox[{"reciprocalNorms", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Norm", "[", 
             RowBox[{"reciprocalBasis", "[", 
              RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
           " ", 
           RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"mObliqueComponents", " ", "=", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "[", 
             RowBox[{"[", " ", "i", " ", "]"}], "]"}], " ", ".", " ", 
            RowBox[{"reciprocalBasis", "[", 
             RowBox[{"[", " ", "j", " ", "]"}], "]"}]}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "numMasses"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "2"}], "}"}]}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mPosFirstCell", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"m", "[", 
              RowBox[{"[", "#", "]"}], "]"}], " ", "-", " ", 
             RowBox[{
              RowBox[{"Floor", "[", 
               RowBox[{"mObliqueComponents", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", ".", " ", 
              "latticeBasis"}]}], " ", ")"}], " ", "&"}], " ", "/@", " ", 
          RowBox[{"Range", "[", "numMasses", "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"allLatticeCellOriginsInDynPlotRange", " ", "=", " ", 
         RowBox[{
          RowBox[{"findLatticeCells", "[", 
           RowBox[{"latticeBasis", ",", "glConstDynPlotRange"}], "]"}], " ", "//",
           " ", "Transpose"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cellOrigins", " ", "=", " ", 
         RowBox[{"(", 
          RowBox[{
          "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "Last"}], 
          ")"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<mScalarArray\>\"", " ", "\[Rule]", " ", "rma"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberOfMasses\>\"", " ", "\[Rule]", " ", "numMasses"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<latticeBasis\>\"", " ", "\[Rule]", " ", "latticeBasis"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeNorms\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Norm", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeUnitVectors\>\"", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Normalize", "[", 
               RowBox[{"latticeBasis", "[", 
                RowBox[{"[", "#", "]"}], "]"}], "]"}], " ", "&"}], " ", "/@", 
             " ", 
             RowBox[{"Range", "[", "2", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<numberLatticeLinesToDisplay\>\"", "\[Rule]", " ", 
           "numberLatticeLinesToDisplay"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<latticeCellOriginIndexes\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
            "allLatticeCellOriginsInDynPlotRange", " ", "//", " ", "First"}], 
            ")"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalBasis\>\"", "\[Rule]", " ", "reciprocalBasis"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{
          "\"\<reciprocalNorms\>\"", "\[Rule]", " ", "reciprocalNorms"}], ",",
           "\[IndentingNewLine]", 
          RowBox[{"\"\<qMaxVec\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{"2", " ", "Pi", " ", "reciprocalNorms"}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
          "\"\<mObliqueComponents\>\"", "\[Rule]", " ", 
           "mObliqueComponents"}], ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<mPosFirstCell\>\"", "\[Rule]", " ", "mPosFirstCell"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"\"\<pointsDataTable\>\"", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"pointsTable", "[", 
                RowBox[{
                 RowBox[{"mPosFirstCell", "[", 
                  RowBox[{"[", "#", "]"}], "]"}], ",", " ", "cellOrigins"}], 
                "]"}], ")"}], " ", "&"}], "/@", " ", 
             RowBox[{"Range", "[", "numMasses", "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<lineTable\>\"", " ", "\[Rule]", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"calcLineTable", "[", " ", 
               RowBox[{
               "numberLatticeLinesToDisplay", ",", " ", "latticeBasis", ",", 
                " ", "#"}], " ", "]"}], " ", "&"}], " ", "/@", " ", 
             RowBox[{"Permutations", "[", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "]"}]}], ")"}]}]}], 
         "\[IndentingNewLine]", "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
    " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "plotSprings", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "::", "usage"}], " ", "=", " ", 
     "\"\<Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"plotSprings", "[", 
      RowBox[{
      "uLoc_List", ",", " ", "ld_List", ",", "cd_List", ",", "m1Ind_Integer", 
       ",", " ", "m2Ind_Integer", ",", " ", "moInd_Integer"}], "]"}], " ", ":=",
      " ", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "aLoc", ",", " ", "bLoc", ",", "mLoc", ",", "pointsList", ",", 
         "latticeBasis", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
         " ", "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
         "cOrigin", ",", " ", "cN", ",", " ", "g", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "scaleLoc"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"latticeBasis", " ", "=", " ", 
         RowBox[{"Take", "[", " ", 
          RowBox[{"uLoc", ",", " ", "2"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"aLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"bLoc", " ", "=", " ", 
         RowBox[{"uLoc", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"scaleLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"aLoc", ".", "aLoc"}], "  ", "+", " ", 
          RowBox[{"bLoc", " ", ".", "bLoc"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "mLoc", ",", "reciprocalBasis", ",", "pointsDataTable", ",", 
           "numberLatticeLinesToDisplay", ",", " ", "lines", ",", " ", 
           "mScalarArray", ",", " ", "numberOfMasses"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<mPosFirstCell\>\"", ",", "\"\<reciprocalBasis\>\"", ",", 
            "\"\<pointsDataTable\>\"", ",", 
            "\"\<numberLatticeLinesToDisplay\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ",
         ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pointsList", "[", "n_Integer", "]"}], " ", ":=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"massColors", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
           ",", 
           RowBox[{"PointSize", "[", 
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"mScalarArray", "[", 
                RowBox[{"[", "n", "]"}], "]"}], "/", "glConstMMax"}], "/", 
              "500"}], "]"}], "]"}], "\[IndentingNewLine]", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Point", "[", " ", "#", " ", "]"}], " ", "&"}], " ", "/@",
             " ", 
            RowBox[{"pointsDataTable", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], "\[IndentingNewLine]", ",", 
           RowBox[{"Text", "[", 
            RowBox[{
             RowBox[{"massLabel", "[", " ", "n", "]"}], ",", 
             RowBox[{
              RowBox[{"mLoc", "[", 
               RowBox[{"[", "n", "]"}], "]"}], " ", "+", " ", 
              "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
          "\[IndentingNewLine]", "}"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"cOrigin", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", " ", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "moInd"}], "}"}]}], " ", "&"}]}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"cN", " ", "=", " ", 
         RowBox[{"Select", "[", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"cd", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "[", 
            RowBox[{"[", "m1Ind", "]"}], "]"}], ",", " ", 
           RowBox[{
            RowBox[{
             RowBox[{"Take", "[", 
              RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
             RowBox[{"{", 
              RowBox[{"m1Ind", ",", " ", "m2Ind"}], "}"}]}], "&"}]}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"g", " ", "=", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"spScaled", "[", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", 
                 RowBox[{"{", 
                  RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",", 
               " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
             "\[IndentingNewLine]", 
             RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", "&"}],
           "/@", " ", "cN"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"If", " ", "[", " ", 
         RowBox[{
          RowBox[{"numberOfMasses", " ", ">", " ", "1"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"g", ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"ListLinePlot", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"spScaled", "[", 
                 RowBox[{
                  RowBox[{"Take", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7"}], "}"}]}], "]"}], ",", " ", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "4", "]"}], "]"}], "/", "glConstKMax"}], ",",
                   " ", "scaleLoc"}], "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"AspectRatio", "\[Rule]", "Automatic"}], ",", " ", 
                "\[IndentingNewLine]", 
                RowBox[{"PlotStyle", " ", "\[Rule]", " ", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "3", "]"}], "]"}], " ", "/.", " ", 
                   "glConstSpringColorsByN"}], ")"}]}]}], " ", "]"}], " ", 
              "&"}], "/@", " ", "cOrigin"}]}], "]"}], ","}], " ", "]"}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"Show", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Graphics", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Flatten", "[", 
              RowBox[{"{", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"{", "\[IndentingNewLine]", " ", 
                 RowBox[{"lines", "\[IndentingNewLine]", ",", "Blue", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"reciprocalBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", "Thick", ",", 
                  RowBox[{"Arrowheads", "[", "0.05", "]"}], 
                  "\[IndentingNewLine]", ",", "Red", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Arrow", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", " ", 
                    RowBox[{"latticeBasis", "[", 
                    RowBox[{"[", "#", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "&"}], " ", "/@", " ", 
                   RowBox[{"Range", "[", "2", "]"}]}], "\[IndentingNewLine]", 
                  ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"aLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}], 
                  "\[IndentingNewLine]", ",", 
                  RowBox[{"Text", "[", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    RowBox[{
                    RowBox[{"bLoc", "/", "2"}], " ", "+", " ", 
                    "glConstTextDisplayOffsetHack"}]}], "]"}]}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{"This", " ", "polygon", " ", 
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "with", " ", "doubling", " ", "of", " ", "PlotRange"}], 
                    " ", "\[Rule]", " ", 
                    RowBox[{"glConstDynPlotRange", " ", "below"}]}], ")"}], 
                   " ", "was", " ", "to", " ", "visually", " ", "test", " ", 
                   "the", " ", "Solve", " ", "logic", " ", "used", " ", "to", 
                   " ", "find", " ", "all", " ", "the", " ", "lattice", " ", 
                   "cells", " ", "contained", " ", "or", " ", "just", " ", 
                   "outside", " ", "of", " ", "the", " ", 
                   RowBox[{"region", "."}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{",", 
                   RowBox[{"Lighter", "@", 
                    RowBox[{"Lighter", "@", "Gray"}]}], "\[IndentingNewLine]",
                    ",", 
                   RowBox[{"Opacity", "[", "0.5", "]"}], 
                   "\[IndentingNewLine]", ",", 
                   RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"glConstDynPlotRange", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"pointsList", "[", "#", "]"}], " ", "&"}], "/@", 
                 " ", 
                 RowBox[{"Range", "[", "numberOfMasses", "]"}]}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "\[IndentingNewLine]", 
             "\[IndentingNewLine]", ",", 
             RowBox[{"PlotRange", " ", "\[Rule]", " ", 
              RowBox[{"(*", "2", "*)"}], " ", "glConstDynPlotRange"}], 
             "\[IndentingNewLine]", ",", 
             RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "g"}], 
          "\[IndentingNewLine]", "}"}], " ", "]"}]}]}], " ", 
      "\[IndentingNewLine]", "]"}]}], " ", ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "dynamicsGraphicsTable", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "::", "usage"}], " ", "=", " ", 
     "\"\<Calculate a time indexed table of positions for each of the \
masses\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", "\[IndentingNewLine]", 
    RowBox[{"Example", ":", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", 
         "kArray", ",", " ", "matrix", ",", " ", "dynamics", ",", " ", "sc", 
         ",", " ", "qPoint", ",", " ", "omegaIndex", ",", "  ", "lines", ",", 
         "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "pointsData", 
         ",", "dynAtOmegaIndex", ",", " ", "dynMesh", ",", "dynTable"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"basisAndMassPoints", " ", "=", " ", 
         RowBox[{"{", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"ld", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
           RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"cd", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"sc", " ", "=", " ", "0.25"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPoint", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
          "2"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qPoint", " ", "]"}], " ", "]"}]}], " ",
         ";", "\[IndentingNewLine]", 
        RowBox[{"omegaIndex", " ", "=", " ", "1"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynAtOmegaIndex", " ", "=", " ", 
         RowBox[{"dynamics", "[", 
          RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynMesh", " ", "=", " ", "30"}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dynTable", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", 
          RowBox[{
          "ld", ",", " ", "dynAtOmegaIndex", ",", " ", "sc", ",", " ", 
           "qPoint", ",", " ", "dynMesh"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"With", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"n", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"showDynPlot", "[", " ", 
            RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}]}], " ", "]"}], 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Animate", "[", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"n", ",", " ", "1", ",", " ", "dynMesh", ",", " ", "1"}], 
           "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"dynamicsGraphicsTable", "[", 
      RowBox[{
      "ld_List", ",", " ", "dynAtOmegaIndex_List", ",", " ", "sc_", ",", " ", 
       "qPoint_List", ",", " ", "dynMesh_Integer"}], " ", "]"}], " ", ":=", 
     RowBox[{"Module", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "pointsDataTable", ",", "e", ",", " ", "omega", ",", " ", "lines", 
         ",", " ", "nu", ",", " ", "a", ",", "b", ",", " ", "mScalarArray", 
         ",", " ", "numberOfMasses", ",", " ", "latticeCellOriginIndexes", 
         ",", " ", "mPosFirstCell", ",", "pointsData"}], "}"}], ",", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"a", ",", " ", "b"}], "}"}], ",", "pointsDataTable", ",", 
           "lines", ",", " ", "mScalarArray", ",", " ", "numberOfMasses", ",",
            " ", "latticeCellOriginIndexes", ",", " ", "mPosFirstCell"}], 
          "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<latticeBasis\>\"", ",", "\"\<pointsDataTable\>\"", ",", " ", 
            "\"\<lineTable\>\"", ",", " ", "\"\<mScalarArray\>\"", ",", " ", 
            "\"\<numberOfMasses\>\"", ",", " ", 
            "\"\<latticeCellOriginIndexes\>\"", ",", " ", 
            "\"\<mPosFirstCell\>\""}], "}"}], "  ", "/.", " ", "ld"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"omega", ",", " ", "e"}], "}"}], " ", "=", " ", 
         "dynAtOmegaIndex"}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"e", " ", "=", " ", 
         RowBox[{"Partition", "[", 
          RowBox[{"e", ",", "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"nu", " ", "=", " ", 
         RowBox[{"2", " ", "Pi", " ", 
          RowBox[{"If", "[", " ", 
           RowBox[{
            RowBox[{"omega", " ", "\[Equal]", " ", "0"}], ",", " ", "1", ",", 
            " ", 
            RowBox[{"1", "/", "omega"}]}], "]"}]}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"pointsData", " ", ":=", " ", 
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"a", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
              RowBox[{"b", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"mPosFirstCell", "[", 
               RowBox[{"[", "k", "]"}], "]"}], " ", "\[IndentingNewLine]", 
              "+", " ", 
              RowBox[{"sc", " ", 
               RowBox[{"Re", "[", " ", 
                RowBox[{
                 RowBox[{"e", "[", 
                  RowBox[{"[", " ", "k", " ", "]"}], "]"}], " ", 
                 RowBox[{"E", "^", 
                  RowBox[{"(", 
                   RowBox[{"I", 
                    RowBox[{"(", " ", 
                    RowBox[{
                    RowBox[{"qPoint", " ", ".", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"a", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "+", " ", 
                    RowBox[{"b", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], " ", ")"}]}], "  ", 
                    "-", " ", 
                    RowBox[{"nu", " ", "tau"}]}], " ", ")"}]}], ")"}]}]}], 
                " ", "]"}]}]}], " ", "\[IndentingNewLine]", "&"}], "/@", " ", 
            "latticeCellOriginIndexes"}], ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"k", ",", " ", "numberOfMasses"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"tau", ",", "0", ",", "1", ",", 
             RowBox[{"1", "/", "dynMesh"}]}], "}"}]}], "\[IndentingNewLine]", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"{", " ", 
         RowBox[{
         "pointsData", ",", " ", "mScalarArray", ",", "numberOfMasses", ",", 
          "lines", ",", "dynMesh"}], " ", "}"}]}]}], "\[IndentingNewLine]", 
      "]"}]}], " ", ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", "showDynPlot", "]"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "::", "usage"}], " ", "=", " ", 
     "\"\<showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"showDynPlot", "[", 
      RowBox[{
       RowBox[{"{", " ", 
        RowBox[{
        "pointsData_List", ",", " ", "mScalarArray_List", ",", 
         "numberOfMasses_Integer", ",", "lines_List", ",", " ", 
         "dynMesh_Integer"}], " ", "}"}], ",", " ", "n_"}], " ", "]"}], " ", ":=",
      " ", 
     RowBox[{"Show", "[", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"ListPlot", "[", " ", 
             RowBox[{
              RowBox[{
               RowBox[{"pointsData", "[", 
                RowBox[{"[", "k", "]"}], "]"}], "[", 
               RowBox[{"[", "n", "]"}], "]"}], "\[IndentingNewLine]", ",", 
              RowBox[{
              "PlotRange", " ", "\[Rule]", " ", "glConstDynPlotRange"}], 
              "\[IndentingNewLine]", ",", 
              RowBox[{"ImageSize", "\[Rule]", "glConstPrimaryDisplaySize"}], 
              "\[IndentingNewLine]", ",", " ", 
              RowBox[{"PlotStyle", "\[Rule]", 
               RowBox[{"Directive", "[", 
                RowBox[{
                 RowBox[{"PointSize", "[", 
                  RowBox[{"Sqrt", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"mScalarArray", "[", 
                    RowBox[{"[", "k", "]"}], "]"}], "/", "glConstMMax"}], "/",
                     "350"}], "]"}], "]"}], ",", 
                 RowBox[{"massColors", "[", "k", "]"}]}], "]"}]}]}], 
             "\[IndentingNewLine]", "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"k", ",", "numberOfMasses"}], "}"}]}], "]"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"Graphics", "[", 
            RowBox[{
            "{", "\[IndentingNewLine]", "lines", "\[IndentingNewLine]", "}"}],
             "]"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
         "}"}], ",", " ", "1"}], "]"}], "\[IndentingNewLine]", "]"}]}], " ", 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{
      RowBox[{"pointsData", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", 
      RowBox[{"[", "n", "]"}], "]"}], " ", ";"}], "*)"}], 
   "\[IndentingNewLine]", " ", "\[IndentingNewLine]", 
   "\[IndentingNewLine]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.601384568255503*^9, 3.6013846068957133`*^9}, {
   3.601384697696907*^9, 3.6013847654097795`*^9}, 3.601385370746403*^9, {
   3.601385703897458*^9, 3.6013858671947985`*^9}, {3.6013859369007854`*^9, 
   3.6013862565130663`*^9}, {3.601386287618845*^9, 3.601386609852276*^9}, 
   3.6013883021340685`*^9, {3.601388339834225*^9, 3.6013883634195743`*^9}, 
   3.6013895576548805`*^9, 3.6013897858849344`*^9, {3.6013899175164633`*^9, 
   3.6013899237438197`*^9}, {3.6013902884636803`*^9, 3.601390307373762*^9}, {
   3.6013903606908116`*^9, 3.6013903655340886`*^9}, {3.6013904046453257`*^9, 
   3.6013904283296804`*^9}, {3.6013906600559344`*^9, 3.601390689104596*^9}, {
   3.601390728076825*^9, 3.6013907681771183`*^9}, 3.6013908182919846`*^9, {
   3.601390891800189*^9, 3.601390932180499*^9}, {3.6013909695316353`*^9, 
   3.6013909758089943`*^9}, {3.6013910645760717`*^9, 3.601391320952736*^9}, {
   3.601391435270274*^9, 3.6013916772021117`*^9}, 3.6013917100099883`*^9, {
   3.6013917417488036`*^9, 3.601391758067737*^9}, {3.6013919250272865`*^9, 
   3.601391931312646*^9}, 3.601391980636467*^9, {3.6013920515635242`*^9, 
   3.6013920860454965`*^9}, {3.601392228344635*^9, 3.6013922300747347`*^9}, {
   3.6013922885550795`*^9, 3.6013923711148014`*^9}, {3.601392403747668*^9, 
   3.601392429697152*^9}, {3.601392460009886*^9, 3.6013924618869934`*^9}, 
   3.601392495188898*^9, {3.6013925358982267`*^9, 3.60139256568093*^9}, {
   3.60139267443215*^9, 3.60139267687029*^9}, {3.601392795672085*^9, 
   3.601392812691058*^9}, {3.601487330343955*^9, 3.6014874916991835`*^9}, {
   3.601487744991671*^9, 3.6014877935674496`*^9}, {3.60148964525436*^9, 
   3.6014896667695904`*^9}, {3.6014911727117257`*^9, 3.6014912011403513`*^9}, 
   3.6014913920092688`*^9, {3.6015049201900363`*^9, 3.601504921465109*^9}, {
   3.6015049694438534`*^9, 3.6015051088448267`*^9}, 3.601510158678661*^9, {
   3.601510341001089*^9, 3.6015103715238347`*^9}, {3.6015104088279686`*^9, 
   3.6015107342535815`*^9}, {3.6015107662544117`*^9, 
   3.6015107759769683`*^9}, {3.6015111875295076`*^9, 3.601511306315302*^9}, {
   3.601512394495542*^9, 3.6015124103054466`*^9}, {3.6015124586622124`*^9, 
   3.601512461037348*^9}, {3.6015125348575706`*^9, 3.601512551233507*^9}, {
   3.601512837974908*^9, 3.601512840824071*^9}, 3.6015519253794203`*^9, {
   3.60155212137263*^9, 3.601552138440606*^9}, {3.6015928398373117`*^9, 
   3.6015928406963606`*^9}, {3.601592972262886*^9, 3.601593035706515*^9}, {
   3.601593106344555*^9, 3.6015931439477057`*^9}, {3.601593175770526*^9, 
   3.6015931831749496`*^9}, 3.6015932402212124`*^9, 3.6015933437151318`*^9, {
   3.60159339980434*^9, 3.6015934133541145`*^9}, {3.601593445458951*^9, 
   3.601593483192109*^9}, {3.601593515955983*^9, 3.6015935487328577`*^9}, 
   3.601595231242092*^9, 3.601595401817848*^9},
 CellID->454600298],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"tick", ";", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{"This", " ", 
        RowBox[{"If", "[", "]"}], " ", "is", " ", "effectively", " ", "my", 
        " ", "Initialization"}], " ", "\[RuleDelayed]", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"{", "}"}], " ", 
         RowBox[{"block", ".", "  ", "Done"}], " ", "with", " ", "a", " ", 
         "variable", " ", "so", " ", "that", " ", "copies", " ", "of", " ", 
         "the", " ", "output", " ", "cell", " ", 
         RowBox[{"won", "'"}], "t", " ", "re"}], "-", 
        RowBox[{"execute", " ", "their", " ", "Initialization", " ", 
         RowBox[{"cells", ".", "  ", "This"}], " ", "allows", " ", 
         "\"\<interesting\>\"", " ", "settings", " ", "to", " ", "be", " ", 
         "maintained", " ", "per"}], "-", 
        RowBox[{
        "copy", " ", "of", " ", "the", " ", "output", " ", "cell"}]}]}], ",", 
      " ", 
      RowBox[{
      "but", " ", "still", " ", "provide", " ", "an", " ", "Initialization", 
       " ", "block", " ", "for", " ", "the", " ", "primary", " ", "output", 
       " ", 
       RowBox[{"cell", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", " ", 
    RowBox[{"If", " ", "[", " ", 
     RowBox[{"bInitDefaults", ",", 
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"u", " ", "=", " ", 
         RowBox[{"Flatten", "[", " ", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], "}"}], 
           ",", " ", "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
         RowBox[{"locDependent", "[", " ", 
          RowBox[{
          "u", ",", " ", "rawNumberOfMasses", ",", "rawArrayOfMasses"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", 
        RowBox[{"kArray", " ", "=", " ", 
         RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "n", "}"}], ",", 
          RowBox[{
           RowBox[{"n", " ", "=", " ", "2"}], " ", ";", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{"n", "\[LessEqual]", "rawNumberOfMasses"}], ",", 
             RowBox[{
              RowBox[{"kArray", " ", "=", " ", 
               RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                RowBox[{"kArray", ",", "n"}], "]"}]}], " ", ";", " ", 
              RowBox[{"n", "++"}]}]}], "]"}]}]}], " ", "]"}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"qLoc", " ", "=", " ", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
           "\"\<qMaxVec\>\"", " ", "/.", " ", 
            "parameterLocatorDependencies"}], ")"}], "/", "2"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"qPlaneLoc", " ", "=", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
        "\[IndentingNewLine]", 
        RowBox[{"couplingData", " ", "=", " ", 
         RowBox[{"calculateCouplings", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
          "]"}]}], " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshMatrix", ":", " ", 
           RowBox[{"dependent", " ", "on"}], ":", " ", 
           "parameterLocatorDependencies"}], ",", " ", "couplingData"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"matrix", " ", "=", " ", 
         RowBox[{"dynamicsMatrix", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", "couplingData"}], 
          " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynamics", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "qLoc", ","}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"dynamics", " ", "=", " ", 
         RowBox[{"calcDynamics", "[", " ", 
          RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], " ", 
        ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshDynPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "dynamics"}]}], ",", " ", 
          "omegaIndex", ",", " ", "scale"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"dynPlot", " ", "=", " ", 
         RowBox[{"dynamicsGraphicsTable", "[", " ", 
          RowBox[{"parameterLocatorDependencies", ",", " ", 
           RowBox[{"dynamics", "[", 
            RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", ",", 
           " ", "qLoc", ",", " ", "dynMeshSize"}], " ", "]"}]}], " ", ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"bRefreshFreqPlot", ":", " ", 
           RowBox[{"dependent", " ", "on", " ", "matrix"}]}], ",", " ", 
          "freqMeshSize"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"freqPlot", " ", "=", " ", 
         RowBox[{"frequencyPlotCalc", "[", " ", 
          RowBox[{
          "parameterLocatorDependencies", ",", " ", "matrix", ",", " ", 
           "freqMeshSize"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"bInitDefaults", " ", "=", " ", "False"}], " ", ";"}], 
       "\[IndentingNewLine]", ")"}], ","}], "]"}], " ", ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Dynamic", "@", 
     RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"tabNumber", " ", "\[Equal]", " ", "dynTab"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshMatrix", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"matrix", " ", "=", " ", 
               RowBox[{"dynamicsMatrix", "[", " ", 
                RowBox[{
                "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                " ", "]"}]}], " ", ";", 
              RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";", 
              " ", 
              RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
             ")"}], ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynamics", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynamics", " ", "=", " ", 
               RowBox[{"calcDynamics", "[", " ", 
                RowBox[{"matrix", "[", " ", "qLoc", " ", "]"}], " ", "]"}]}], 
              " ", ";", 
              RowBox[{"bRefreshDynamics", " ", "=", " ", "False"}], " ", ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", " ", 
           RowBox[{"bRefreshDynPlot", ",", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"dynPlot", " ", "=", " ", 
               RowBox[{"dynamicsGraphicsTable", "[", " ", 
                RowBox[{"parameterLocatorDependencies", ",", " ", 
                 RowBox[{"dynamics", "[", 
                  RowBox[{"[", "omegaIndex", "]"}], "]"}], ",", " ", "scale", 
                 ",", " ", "qLoc", ",", "dynMeshSize"}], " ", "]"}]}], " ", 
              ";", 
              RowBox[{"bRefreshDynPlot", " ", "=", " ", "False"}]}], ")"}], 
            ","}], "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"showDynPlot", "[", " ", 
           RowBox[{"dynPlot", ",", " ", "tauSliderValue"}], " ", "]"}]}], 
         "\[IndentingNewLine]", 
         RowBox[{"(*", "YYY", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", "dynPlot", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{"I", " ", 
            RowBox[{"don", "'"}], "t", " ", "understand", " ", "why", " ", 
            "Dynamic", " ", "appears", " ", "to", " ", "be", " ", "required", 
            " ", "here"}], ",", " ", 
           RowBox[{"but", " ", "not", " ", "for", " ", "showFreqPlot", " ", 
            RowBox[{"below", "?", "  ", "Without"}], " ", "this"}], ",", " ", 
           RowBox[{
           "the", " ", "dynTab", " ", "in", " ", "the", " ", "snapshots", " ",
             "after", " ", "starting", " ", "the", " ", "notebook", " ", 
            "again", " ", "from", " ", "scratch", " ", "are", " ", "messed", 
            " ", 
            RowBox[{"up", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"(*", 
          RowBox[{"Show", "[", " ", 
           RowBox[{"ReleaseHold", "[", 
            RowBox[{"dynPlot", "[", "tauSliderValue", "]"}], "]"}], " ", 
           "]"}], "*)"}], "\[IndentingNewLine]", ")"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"Plot", "[", 
          RowBox[{"x", ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
        "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"tabNumber", " ", "\[Equal]", " ", "freqTab"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshMatrix", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"matrix", " ", "=", " ", 
                 RowBox[{"dynamicsMatrix", "[", " ", 
                  RowBox[{
                  "parameterLocatorDependencies", ",", " ", "couplingData"}], 
                  " ", "]"}]}], " ", ";", 
                RowBox[{"bRefreshMatrix", " ", "=", " ", "False"}], " ", ";", 
                RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", ";",
                 " ", 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"If", "[", " ", 
             RowBox[{"bRefreshFreqPlot", ",", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"freqPlot", " ", "=", " ", 
                 RowBox[{"frequencyPlotCalc", "[", " ", 
                  RowBox[{
                  "parameterLocatorDependencies", ",", " ", "matrix", ",", 
                   " ", "freqMeshSize"}], "]"}]}], " ", ";", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"Beep", "[", "]"}], " ", ";"}], "*)"}], 
                RowBox[{"bRefreshFreqPlot", " ", "=", " ", "False"}]}], " ", 
               ")"}], ","}], "]"}], ";", " ", "\[IndentingNewLine]", 
            RowBox[{"showFreqPlot", "[", " ", 
             RowBox[{"qPlaneLoc", ",", " ", "freqPlot"}], " ", "]"}]}], 
           "\[IndentingNewLine]", 
           RowBox[{"(*", "freqPlot", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", "matrix", "*)"}], "\[IndentingNewLine]", ")"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"Plot", "[", 
            RowBox[{
             RowBox[{"-", "x"}], ",", 
             RowBox[{"{", 
              RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}], "*)"}], 
          "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
          RowBox[{"(*", "couplingLocator", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"LocatorPane", "[", " ", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"u", ",", 
              RowBox[{
               RowBox[{"(", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"u", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], "<", "3"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Flatten", "[", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"glConstLocDefault", ",", " ", "mLocDefault"}], 
                    "}"}], ",", " ", "1"}], "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    RowBox[{
                    "cap", " ", "the", " ", "number", " ", "of", " ", 
                    "Locators", " ", "at", " ", "5"}], ",", " ", 
                    RowBox[{
                    "so", " ", "the", " ", "selection", " ", "Pane", " ", 
                    RowBox[{"doesn", "'"}], "t", " ", "start", " ", 
                    "truncating", " ", 
                    RowBox[{"the", " ", "'"}], "to", " ", 
                    RowBox[{"neighbouring", "'"}], " ", "SetterBar"}]}], " ", 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"If", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Dimensions", "[", "#", "]"}], " ", "//", " ", 
                    "First"}], ")"}], " ", ">", " ", "7"}], ",", " ", 
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", "7"}], "]"}], ",", " ", "#"}], "]"}]}], 
                   " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Module", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"rm", ",", "km"}], "}"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"rm", " ", "=", " ", 
                    RowBox[{"First", "@", 
                    RowBox[{"Dimensions", "[", "rawArrayOfMasses", "]"}]}]}], 
                    " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"rm", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "rawArrayOfMasses"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"rawArrayOfMasses", " ", "=", " ", 
                    RowBox[{"Take", "[", " ", 
                    RowBox[{"rawArrayOfMasses", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "rawArrayOfMasses", " ", "if", " ", 
                    "required"}], "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"rm", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "rawArrayOfMasses", ",", " ", "glConstDefaultMass"}], 
                    "]"}], " ", ";", " ", 
                    RowBox[{"rm", "++"}]}]}], " ", "]"}]}], 
                    "\[IndentingNewLine]", "]"}], " ", ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"km", " ", "=", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"If", " ", "[", 
                    RowBox[{
                    RowBox[{"km", " ", ">", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{"Shrink", " ", "kArray"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"Select", "[", 
                    RowBox[{"kArray", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "]"}], " ", 
                    "\[LessEqual]", "  ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "&"}], 
                    ")"}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", 
                    RowBox[{
                    "Grow", " ", "kArray", " ", "if", " ", "required"}], 
                    "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{"km", "<", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"km", "++"}], " ", ";", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnKarrayForAdditionalMassIndex", "[", 
                    RowBox[{"kArray", ",", "km"}], "]"}]}]}]}], " ", "]"}]}], 
                    " ", "\[IndentingNewLine]", "]"}]}]}], 
                  "\[IndentingNewLine]", "]"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                   "lattice", " ", "vector", " ", "end", " ", "points", " ", 
                   "to", " ", "be", " ", "too", " ", "close", " ", "to", " ", 
                   "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"u", "[", 
                   RowBox[{"[", "1", "]"}], "]"}], " ", "=", " ", 
                  RowBox[{"If", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"u", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", 
                  RowBox[{"If", "[", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ".", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "<", " ", 
                    "glConstMinSquaredDistanceFromOrigin"}], ",", " ", 
                    RowBox[{"glConstLocDefault", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Don", "'"}], "t", " ", "allow", " ", "the", " ", 
                   "angle", " ", "between", " ", "lattice", " ", "vectors", 
                   " ", "get", " ", "too", " ", "small"}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"u", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"u", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], " ", "=", " ", 
                  RowBox[{"resetLatticeVectorsIfAngleTooSmall", "[", " ", 
                   RowBox[{
                   "u", ",", " ", " ", 
                    "glConstMinAngleBetweenLatticeVectors"}], " ", "]"}]}], 
                 " ", ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"rawNumberOfMasses", " ", "=", " ", 
                  RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                  "These", " ", "are", " ", "in", " ", "case", " ", "the", 
                   " ", "number", " ", "of", " ", "locators", " ", "were", 
                   " ", "changed", " ", "and", " ", "we", " ", "have", " ", 
                   "a", " ", "mass", " ", "selected", " ", "that", " ", "is", 
                   " ", "now", " ", 
                   RowBox[{"invalid", "."}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"m1Sel", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"m1Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m1Sel"}], "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"m2Sel", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"m2Sel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "m2Sel"}], "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"moSel", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"moSel", " ", ">", "rawNumberOfMasses"}], ",", 
                    " ", "1", ",", " ", "moSel"}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"moSel", " ", "=", " ", 
                  RowBox[{"adjustedmoSel", "[", " ", 
                   RowBox[{
                   "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"omegaIndex", " ", "=", " ", 
                  RowBox[{"If", " ", "[", " ", 
                   RowBox[{
                    RowBox[{"omegaIndex", " ", ">", 
                    RowBox[{"(", 
                    RowBox[{"2", "rawNumberOfMasses"}], ")"}]}], ",", " ", 
                    "1", ",", " ", "omegaIndex"}], "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{
                   "Adjust", " ", "these", " ", "for", " ", "Slider", " ", 
                    "display", " ", "in", " ", "case", " ", "m1Sel"}], ",", 
                   " ", "m2Sel", ",", " ", 
                   RowBox[{
                   "or", " ", "moSel", " ", "were", " ", "changed", " ", 
                    "just", " ", 
                    RowBox[{"above", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
                 RowBox[{"k1", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k2", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "2"}],
                    "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k3", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "3"}],
                    "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k4", " ", "=", " ", 
                  RowBox[{"selectVFromKarray", "[", 
                   RowBox[{
                   "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", "4"}],
                    "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 RowBox[{"k5", " ", "=", " ", 
                  RowBox[{"selectOriginVFromKarray", "[", " ", 
                   RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                   " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                  RowBox[{"locDependent", "[", " ", 
                   RowBox[{
                   "u", ",", " ", "rawNumberOfMasses", ",", 
                    "rawArrayOfMasses"}], " ", "]"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"(*", " ", 
                  RowBox[{
                   RowBox[{"Reset", " ", "in", " ", "case", " ", "a"}], ",", 
                   RowBox[{"or", " ", "b", " ", "changed"}], ",", " ", 
                   RowBox[{
                   "and", " ", "the", " ", "last", " ", "selected", " ", 
                    "value", " ", "is", " ", "now", " ", "out", " ", "of", 
                    " ", 
                    RowBox[{"range", "."}]}]}], " ", "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"qLoc", " ", "=", " ", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "/.", "parameterLocatorDependencies"}],
                     " ", ")"}], "/", "2"}]}], "  ", ";", 
                 "\[IndentingNewLine]", 
                 RowBox[{"qPlaneLoc", " ", "=", " ", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"-", "qLoc"}], ",", "qLoc"}], "}"}]}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"couplingData", " ", "=", " ", 
                  RowBox[{"calculateCouplings", "[", " ", 
                   RowBox[{
                   "parameterLocatorDependencies", ",", " ", "kArray"}], " ", 
                   "]"}]}], " ", ";", "\[IndentingNewLine]", 
                 "\[IndentingNewLine]", 
                 RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", ";", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"tick", "=", 
                  RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
             "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Why", " ", 
               RowBox[{"doesn", "'"}], "t", " ", "Alt"}], "-", 
              RowBox[{
              "click", " ", "to", " ", "remove", " ", "existing", " ", 
               "Locator", " ", "refresh", " ", "this", " ", 
               RowBox[{"plot", "?", "  ", 
                RowBox[{"Workaround", ":", " ", 
                 RowBox[{
                 "move", " ", "one", " ", "of", " ", "the", " ", "other", " ",
                   "locators", " ", "to", " ", "refresh"}]}]}]}]}], " ", 
             "*)"}], "\[IndentingNewLine]", 
            RowBox[{"plotSprings", "[", 
             RowBox[{
             "u", ",", " ", "parameterLocatorDependencies", ",", 
              "couplingData", ",", "m1Sel", ",", " ", "m2Sel", ",", " ", 
              "moSel"}], "]"}], " ", ",", "\[IndentingNewLine]", 
            RowBox[{"LocatorAutoCreate", "\[Rule]", "True"}], ",", " ", 
            "\[IndentingNewLine]", 
            RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", " ", 
         "]"}]}], "]"}], " ", 
      RowBox[{"(*", 
       RowBox[{"If", ",", "If"}], "*)"}], "\[IndentingNewLine]", ")"}]}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", "0", "*)"}], "\[IndentingNewLine]", ",", 
   "\[IndentingNewLine]", 
   RowBox[{"Dynamic", "@", "\[IndentingNewLine]", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"k5manip", ",", 
        RowBox[{"TabView", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<dynamics\>\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "dynTab"}], " ", ";", 
               RowBox[{"{", " ", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"OverVector", "[", "\"\<q\>\"", "]"}], ",", 
                    "\[IndentingNewLine]", "\"\< = \>\"", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "qm", "}"}], ",", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qm", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", "  ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Slider2D", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"qLoc", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"qLoc", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynamics", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"(*", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0.01", ",", "0.01"}], "}"}], ",", " ", "qm"}], 
                    "}"}], "*)"}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", " ", "qm"}], ")"}], 
                    "\[IndentingNewLine]", ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], 
                    "\[IndentingNewLine]", ",", " ", 
                    RowBox[{"ImageSize", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"150", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}], " ", "&"}], ")"}], 
                    " ", "@", " ", "qm"}]}]}], "\[IndentingNewLine]", 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", " ", 
                    "\[IndentingNewLine]", "\"\< 2 \[Pi] \>\"", ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qLoc", "/", 
                    RowBox[{"(", 
                    RowBox[{"2", " ", "Pi"}], ")"}]}], " ", "//", " ", 
                    "MatrixForm"}], ")"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"(*", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{
                    "Text", "@", "\"\<number of time intervals \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"dynMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"dynMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "14", ",", " ", "4", ",", " ", "30", ",", 
                    " ", "IntegerQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", "30", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "dynMeshSize", "]"}]}], " ", 
                    "\[IndentingNewLine]", "}"}], "]"}], ","}], "*)"}], 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    "Text", "@", 
                    "\"\<time, normalized to one period, t/T = \>\""}], ",", 
                    " ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"N", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"tauSliderValue", "-", "1"}], ")"}], "/", 
                    "dynMeshSize"}], "]"}], "]"}]}], "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"tauSliderValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"tauSliderValue", " ", "=", " ", "#"}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"dynMeshSize", "+", "1"}], ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "True"}], ",", 
                    RowBox[{"Appearance", "\[Rule]", "\"\<Open\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"AppearanceElements", " ", "\[Rule]", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<StepLeftButton\>\"", ",", "\"\<PlayPauseButton\>\"", 
                    ",", "\"\<StepRightButton\>\"", ",", 
                    "\"\<FasterSlowerButtons\>\"", ",", 
                    "\"\<DirectionButton\>\""}], "\[IndentingNewLine]", 
                    "}"}]}]}], "\[IndentingNewLine]", "]"}], " ", 
                   "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", 
                  RowBox[{"(*", 
                   RowBox[{",", " ", 
                    RowBox[{"ImageSize", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"200", ",", "60"}], "}"}]}]}], "*)"}], 
                  "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{"Text", "@", "\"\<oscillation scale factor:\>\""}],
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"scale", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"scale", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.05", ",", " ", "0.05", ",", " ", "1"}], 
                    "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0.05", ",", "1"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], 
                    "\[IndentingNewLine]", "\"\< \>\""}], ",", "  ", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"(", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"scale", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], " ", ")"}], 
                    "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], 
                 "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
                 RowBox[{"Row", "[", 
                  RowBox[{"{", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    "Text", "@", 
                    "\"\<Angular frequency \[Omega](q), selection:\>\""}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"SetterBar", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"omegaIndex", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"omegaIndex", "=", "#"}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshDynPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], " ", 
                    "]"}]}]}], "\[IndentingNewLine]", "}"}], " ", "]"}]}], 
                "\[IndentingNewLine]", "}"}]}], "]"}]}], " ", 
            RowBox[{"(*", " ", "Column", " ", "*)"}], "\[IndentingNewLine]", 
            ",", 
            RowBox[{
            "\"\<\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))\>\
\"", " ", "\[Rule]", "  ", 
             RowBox[{"Column", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "freqTab"}], " ", ";", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{"Beep", "[", "]"}], ";"}], "*)"}], 
               RowBox[{"(*", "freqControls", "*)"}], 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Row", "[", 
                  RowBox[{"{", " ", 
                   RowBox[{
                    RowBox[{
                    "Text", "@", "\"\<number of mesh intervals \>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Manipulator", "[", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"freqMeshSize", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"freqMeshSize", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "8", ",", " ", "2", ",", " ", "30", ",", 
                    " ", "EvenQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshFreqPlot", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "30", ",", "2"}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], "]"}], ",", 
                    "\"\< \>\"", ",", " ", 
                    RowBox[{"Dynamic", "[", "freqMeshSize", "]"}]}], " ", 
                   "\[IndentingNewLine]", "}"}], "]"}], ",", 
                 "\[IndentingNewLine]", "\[IndentingNewLine]", 
                 RowBox[{"LocatorPane", "[", 
                  RowBox[{
                   RowBox[{"Dynamic", "[", "qPlaneLoc", 
                    RowBox[{"(*", 
                    RowBox[{",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"qPlaneLoc", " ", "=", " ", "#"}], ";", " ", 
                    RowBox[{"tick", "=", 
                    RowBox[{
                    RowBox[{"Not", "[", "tick", "]"}], " ", "&"}]}]}], 
                    ")"}]}], "*)"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Graphics", "[", 
                    RowBox[{
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Lighter", "@", "Gray"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Polygon", "[", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    ")"}], "\[IndentingNewLine]", " ", "]"}], ",", 
                    "\[IndentingNewLine]", "Black", ",", 
                    RowBox[{"Line", "[", "qPlaneLoc", "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                    " ", 
                    RowBox[{"PlotRange", " ", "\[Rule]", " ", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "}"}], " ", 
                    "/", "2"}]}], "\[IndentingNewLine]", ",", 
                    RowBox[{"ImageSize", " ", "\[Rule]", "  ", 
                    RowBox[{"200", " ", 
                    RowBox[{"#", "/", 
                    RowBox[{"Max", "[", "#", "]"}]}]}]}]}], 
                    "\[IndentingNewLine]", "]"}], " ", "&"}], " ", "@", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", 
                    "parameterLocatorDependencies"}], ")"}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
                  "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "]"}]}], "\[IndentingNewLine]", ",", " ", 
            RowBox[{"\"\<parameters\>\"", "\[Rule]", 
             RowBox[{"Grid", "[", " ", 
              RowBox[{
               RowBox[{"tabNumber", " ", "=", " ", "parametersTab"}], " ", 
               ";", "\[IndentingNewLine]", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mp: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mPosFirstCell\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<tn: \>\"", ",", " ", "tabNumber"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qLoc = \>\"", ",", " ", "qLoc"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<qPlaneLoc = \>\"", ",", " ", "qPlaneLoc"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<u = \>\"", ",", " ", "u"}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<qr:\>\"", " ", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "#"}], ",", "#"}], "}"}], "/", "2"}], " ", 
                    "&"}], " ", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<qMaxVec\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], ")"}]}], "}"}],
                   ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cd:\>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{"\"\<m1Sel, m2Sel, moSel = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel", ",", " ", "moSel"}], 
                    "}"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"{", 
                    RowBox[{"6", ",", "7", ",", "4"}], "}"}], "]"}], "]"}]}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<cN: \>\"", ",", 
                    RowBox[{
                    RowBox[{"Select", "[", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"couplingData", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"#", ",", " ", "2"}], "]"}], " ", "\[Equal]", 
                    RowBox[{"{", 
                    RowBox[{"m1Sel", ",", " ", "m2Sel"}], "}"}]}], "&"}]}], 
                    " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", " ", 
                   RowBox[{
                   "\"\<rawArrayOfMasses = \>\"", ",", " ", 
                    "rawArrayOfMasses"}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<range \[Omega]: \>\"", ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{"2", "rawNumberOfMasses"}], "]"}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<kArray = \>\"", ",", " ", "kArray"}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], " ", "//", " ", 
                    "Max"}]}], "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<km: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"kArray", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "1"}], "]"}], "]"}], ")"}]}]}], " ", 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                   "\"\<couplingData = \>\"", ",", " ", "couplingData"}], 
                   "}"}], ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<k1, k2, k3, k4, k5 = \>\"", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{
                    "k1", ",", " ", "k2", ",", " ", "k3", ",", " ", "k4", ",",
                     " ", "k5"}], "}"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<ms: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<numberOfMasses\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}], "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<nm: \>\"", ",", " ", 
                    RowBox[{"nMassesFromLocArray", "[", "u", "]"}]}], "}"}], 
                  ","}], "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<re: \>\"", ",", " ", 
                    RowBox[{"2", " ", "Pi", 
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<reciprocalNorms\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}]}]}], "}"}], ","}],
                  "*)"}], "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<sc: \>\"", ",", " ", 
                    RowBox[{"DeleteDuplicates", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"s", " ", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"glConstNeighboringCellIndexes", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "]"}], "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], " ", "\[Rule]", " ", 
                    RowBox[{"foo", "[", "n", "]"}]}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"s", ",", " ", 
                    RowBox[{"-", "1"}], ",", " ", "1", ",", " ", "2"}], "}"}],
                     ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"n", ",", " ", "5"}], "}"}]}], " ", "]"}], ",", 
                    "1"}], "]"}]}]}], " ", "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{"matrix", "[", "qLoc", "]"}], " ", "//", " ", 
                    "MatrixForm"}]}], "}"}], ","}], "*)"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"\"\<mm: \>\"", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SplitBy", "[", " ", 
                    RowBox[{
                    RowBox[{"Sort", "@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"couplingData", ",", " ", "2"}], "]"}]}], " ", 
                    ",", " ", "First"}], " ", "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}], ","}], 
                 "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
                RowBox[{"(*", "massSetter", "*)"}], "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Text", "[", "\"\<mass: \>\"", "]"}], ",", " ", 
                    "\[IndentingNewLine]", 
                    RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m1Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m1Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", " ", "/.", " ", 
                    "parameterLocatorDependencies"}], ")"}], "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"moSel", " ", "=", " ", 
                    RowBox[{"adjustedmoSel", "[", " ", 
                    RowBox[{
                    "rawNumberOfMasses", ",", " ", "moSel", ",", " ", 
                    "m1Sel"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", " ", "]"}]}], "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                    "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"massValue", " ", "=", " ", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "0.25", ",", " ", "0.25", ",", " ", 
                    "glConstMMax"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"rawArrayOfMasses", "[", 
                    RowBox[{"[", "m1Sel", "]"}], "]"}], "=", "massValue"}], 
                    " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"parameterLocatorDependencies", " ", "=", " ", 
                    RowBox[{"(", 
                    RowBox[{"parameterLocatorDependencies", " ", "/.", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<mScalarArray\>\"", ",", " ", "_"}], "]"}], 
                    " ", "\[RuleDelayed]", " ", 
                    RowBox[{"Rule", "[", 
                    RowBox[{
                    "\"\<mScalarArray\>\"", ",", " ", "rawArrayOfMasses"}], 
                    "]"}]}], ")"}]}], " ", ")"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"0.25", ",", 
                    RowBox[{"Dynamic", "@", "glConstMMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"massValue", ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "m2Setter", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                   "Text", "[", "\"\<coupling to neighbouring: \>\"", " ", 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                   RowBox[{"Dynamic", "@", 
                    RowBox[{"If", " ", "[", " ", 
                    RowBox[{
                    RowBox[{"rawNumberOfMasses", " ", ">", " ", "1"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"m2Sel", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"m2Sel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    "\[IndentingNewLine]", 
                    RowBox[{"k1", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k2", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "2"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k3", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "3"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"k4", " ", "=", " ", 
                    RowBox[{"selectVFromKarray", "[", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", 
                    "4"}], "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], ",", " ", "\[IndentingNewLine]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                     " ", 
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}]}], 
                    ")"}]}], "\[IndentingNewLine]", "]"}], ",", 
                    RowBox[{"massLabel", "[", " ", "1", "]"}]}], 
                    "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
                  "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km1", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<horizontal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "1", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k1", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    "1", ",", " ", "k1"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\[IndentingNewLine]", "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k1", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km2", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<vertical: \>\""}], ",", 
                    RowBox[{"kLable", "[", "2", "]"}], ",", " ", 
                    "\"\< || \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", 
                    "\"\< \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k2", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "2", ",", " ", "k2"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k2", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], " ", 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km3", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "3", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< + \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k3", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "3", ",", " ", "k3"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k3", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"(*", "km4", "*)"}], " ", 
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"Row", "[", 
                    RowBox[{"{", " ", 
                    RowBox[{
                    RowBox[{"Text", "@", "\"\<diagonal: \>\""}], ",", 
                    RowBox[{"kLable", "[", "4", "]"}], ",", " ", 
                    "\"\< || (\>\"", ",", "  ", 
                    RowBox[{"OverVector", "[", "\"\<b\>\"", "]"}], ",", " ", 
                    "\"\< - \>\"", ",", " ", 
                    RowBox[{"OverVector", "[", "\"\<a\>\"", "]"}], ",", " ", 
                    "\"\<) \>\""}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
                   RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k4", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKArrayElements", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "m2Sel", ",", " ", 
                    " ", "4", ",", " ", "k4"}], " ", "]"}]}], " ", ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                    "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                    RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                    RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                    RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                    RowBox[{"AppearanceElements", "\[Rule]", 
                    RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                    "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
                    "\"\< \>\"", ",", 
                    RowBox[{"Dynamic", "[", 
                    RowBox[{"NumberForm", "[", 
                    RowBox[{"k4", ",", 
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}]}], "]"}], "]"}]}], 
                    "\[IndentingNewLine]", "}"}], "]"}]}], 
                  "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"k5manip", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", 
                "}"}]}], " ", "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], "\[IndentingNewLine]", ",", " ", 
          "\[IndentingNewLine]", 
          RowBox[{"Dynamic", " ", "@", "tabNumber"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"250", ",", "350"}], "}"}]}]}], " ", 
         "\[IndentingNewLine]", "]"}]}], " ", "\[IndentingNewLine]", "]"}], 
      " ", "@", "\[IndentingNewLine]", 
      RowBox[{"If", "[", " ", 
       RowBox[{
        RowBox[{"rawNumberOfMasses", " ", "\[Equal]", " ", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}], ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"Text", "@", "\"\<coupling from \>\""}], ",", " ", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", "m1Sel", "]"}]}], ",", 
               RowBox[{"Text", "@", "\"\< to: \>\""}]}], "}"}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Dynamic", "@", 
             RowBox[{"If", " ", "[", " ", 
              RowBox[{
               RowBox[{"rawNumberOfMasses", " ", ">", " ", "2"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"SetterBar", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"moSel", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"moSel", "=", "#"}], ";", "\[IndentingNewLine]", 
                    RowBox[{"k5", " ", "=", " ", 
                    RowBox[{"selectOriginVFromKarray", "[", " ", 
                    RowBox[{"kArray", ",", " ", "m1Sel", ",", " ", "moSel"}], 
                    " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], ",", " ", "\[IndentingNewLine]", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"#", " ", "\[Rule]", " ", 
                    RowBox[{"massLabel", "[", " ", "#", "]"}]}], " ", "&"}], "/@",
                    " ", 
                   RowBox[{"(", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Range", "[", "rawNumberOfMasses", "]"}], ",", 
                    "m1Sel"}], "]"}], ")"}]}], ")"}]}], "\[IndentingNewLine]",
                 "]"}], ",", "\[IndentingNewLine]", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"massLabel", "[", " ", 
                 RowBox[{"First", "@", 
                  RowBox[{"Delete", "[", " ", 
                   RowBox[{
                    RowBox[{"Range", "[", "2", "]"}], ",", " ", "m1Sel"}], 
                   "]"}]}], " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
           "\[IndentingNewLine]", "}"}], " ", ",", 
          RowBox[{"{", " ", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"kLable", "[", "5", "]"}], ",", " ", "\"\<: \>\""}], 
              "}"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Manipulator", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Dynamic", "[", 
                  RowBox[{"k5", ",", 
                   RowBox[{
                    RowBox[{"(", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"k5", "=", 
                    RowBox[{"checkAgainstRange", "[", 
                    RowBox[{
                    "#", ",", " ", "glConstKMin", ",", " ", "glConstKMin", 
                    ",", " ", "glConstKMax"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"kArray", " ", "=", " ", 
                    RowBox[{"returnAlteredKarrayOriginElement", "[", " ", 
                    RowBox[{
                    "kArray", ",", " ", "m1Sel", ",", " ", "moSel", ",", " ", 
                    "k5"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"couplingData", " ", "=", " ", 
                    RowBox[{"calculateCouplings", "[", " ", 
                    RowBox[{
                    "parameterLocatorDependencies", ",", " ", "kArray"}], " ",
                     "]"}]}], " ", ";", "\[IndentingNewLine]", 
                    RowBox[{"bRefreshMatrix", " ", "=", " ", "True"}], " ", 
                    ";", "\[IndentingNewLine]", 
                    RowBox[{"tick", "=", 
                    RowBox[{"Not", "[", "tick", "]"}]}]}], ")"}], "&"}]}], 
                  "]"}], "\[IndentingNewLine]", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Dynamic", "@", "glConstKMin"}], ",", 
                   RowBox[{"Dynamic", "@", "glConstKMax"}]}], "}"}], ",", 
                 RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
                 RowBox[{"ContinuousAction", "\[Rule]", "False"}], ",", 
                 RowBox[{"AppearanceElements", "\[Rule]", 
                  RowBox[{"{", "\"\<InputField\>\"", "}"}]}]}], 
                "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", ",", 
               "\"\< \>\"", ",", 
               RowBox[{"Dynamic", "@", 
                RowBox[{"NumberForm", "[", " ", 
                 RowBox[{"k5", ",", 
                  RowBox[{"{", 
                   RowBox[{"3", ",", "2"}], "}"}]}], "]"}]}]}], 
              "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
           "}"}]}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], " ", 
     RowBox[{"(*", "If", "*)"}], "\[IndentingNewLine]", ")"}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qPlaneLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"qLoc", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tauSliderValue", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"omegaIndex", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}],
    "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"scale", ",", " ", "0.2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqMeshSize", ",", "8"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynMeshSize", ",", "14"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"matrix", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynamics", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqPlot", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bInitDefaults", ",", " ", "True"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshMatrix", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynamics", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshDynPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"bRefreshFreqPlot", ",", " ", "False"}], "}"}], ",", " ", 
     "None"}], "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tabNumber", ",", "1"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"dynTab", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"freqTab", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parametersTab", ",", " ", "3"}], "}"}], ",", " ", "None"}], 
    "}"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMinSquaredDistanceFromOrigin", ",", " ", "0.1"}], 
        "}"}], ",", " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMinAngleBetweenLatticeVectors", ",", " ", 
         RowBox[{"Pi", "/", "6"}]}], "}"}], ",", " ", "None"}], "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstLocDefault", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0.1", ",", " ", "1.3"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1.9", ",", " ", "0.8"}], "}"}]}], "}"}]}], "}"}], ",", 
       " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstDefaultMass", ",", " ", "20"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKDefaults", ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", " ", "0.25", ",", 
           " ", "0.25"}], "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKMin", ",", " ", "0.05"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstKMax", ",", " ", "1"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstMMax", ",", " ", "30"}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstWindowHalfWidth", ",", " ", "3"}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstSpringColors", ",", 
         RowBox[{"Darker", "@", 
          RowBox[{"{", " ", 
           RowBox[{
           "Orange", ",", "Green", ",", "Purple", ",", "Cyan", ",", 
            "Yellow"}], " ", "}"}]}]}], " ", "}"}], " ", ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstPrimaryDisplaySize", ",", " ", 
         RowBox[{"{", 
          RowBox[{"380", ",", "380"}], "}"}]}], "}"}], ",", " ", "None"}], 
      "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstTextDisplayOffsetHack", ",", " ", 
         RowBox[{"{", 
          RowBox[{"0.25", ",", " ", "0.25"}], "}"}]}], "}"}], ",", " ", 
       "None"}], "}"}], "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"glConstNeighboringCellIndexes", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], " ", "}"}], ",", " ", 
       "None"}], "}"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "The", " ", "number", " ", "of", " ", "default", " ", "masses", " ", 
     "are", " ", "coupled", " ", "by", " ", "these", " ", "next", " ", "four",
      " ", 
     RowBox[{"variables", "."}]}], " ", "*)"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawNumberOfMasses", ",", " ", "3"}], "}"}], ",", " ", "None"}],
     "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mLocDefault", ",", " ", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0.9", ",", "0.7"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"0.4", ",", " ", "1.2"}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"1.3", ",", " ", "1.4"}], "}"}]}], "}"}]}], "}"}], ",", " ",
      "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"rawArrayOfMasses", ",", " ", 
       RowBox[{"{", 
        RowBox[{"10", ",", " ", "15", ",", " ", "20"}], "}"}]}], "}"}], ",", 
     " ", "None"}], "}"}], "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"moSel", ",", " ", "2"}], "}"}], ",", " ", "None"}], "}"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{"pick", " ", "anything", " ", "that", " ", 
     RowBox[{"isn", "'"}], "t", " ", "m1Sel"}], " ", "*)"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m1Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"m2Sel", ",", " ", "1"}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"kArray", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], " ", 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"u", ",", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"parameterLocatorDependencies", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"couplingData", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"glConstSpringColorsByN", ",", " ", 
       RowBox[{"{", "}"}]}], "}"}], ",", " ", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k1", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k2", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k3", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k4", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k5", ",", " ", "0.25"}], "}"}], ",", "None"}], "}"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", ",", 
   RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
    RowBox[{"{", "tick", "}"}]}], "\[IndentingNewLine]", ",", 
   RowBox[{"ControlPlacement", "\[Rule]", "Left"}], "\[IndentingNewLine]", 
   ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}], "\[IndentingNewLine]", ",", 
   RowBox[{"SynchronousInitialization", "\[Rule]", "False"}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellChangeTimes->{
  3.6013845596960135`*^9, {3.6013849419158754`*^9, 3.6013850018713045`*^9}, {
   3.6013850794767437`*^9, 3.601385097266761*^9}, {3.601385134804908*^9, 
   3.6013851913481417`*^9}, 3.601385299290316*^9, {3.601385437846241*^9, 
   3.6013854385522814`*^9}, 3.60138559342614*^9, {3.6013868469728384`*^9, 
   3.6013870381917753`*^9}, 3.6013877675854945`*^9, {3.601388376944348*^9, 
   3.6013883890050373`*^9}, 3.6013884249690948`*^9, {3.601388673194292*^9, 
   3.6013886824388213`*^9}, {3.6013891407130327`*^9, 3.6013891464263597`*^9}, 
   3.601389335188156*^9, {3.601389712307726*^9, 3.601389713789811*^9}, {
   3.60138980486102*^9, 3.6013899056717863`*^9}, 3.6013901293345785`*^9, {
   3.60139028932573*^9, 3.6013902895987453`*^9}, {3.601390478563554*^9, 
   3.6013904836558447`*^9}, {3.6013905478495164`*^9, 3.601390553751854*^9}, 
   3.601390946273305*^9, {3.601391042574813*^9, 3.601391043374859*^9}, {
   3.6013918894322505`*^9, 3.601391892836445*^9}, {3.601392097848171*^9, 
   3.6013921005103235`*^9}, {3.601392139997582*^9, 3.6013921427507396`*^9}, 
   3.6015052226223345`*^9, {3.6015107568728757`*^9, 3.6015107572798986`*^9}, {
   3.601515719590727*^9, 3.601515719851742*^9}, {3.601551924279357*^9, 
   3.6015520208098783`*^9}, {3.6015520737049036`*^9, 
   3.6015520787571926`*^9}, {3.6015521640750723`*^9, 3.60155218763342*^9}, {
   3.6015525875472937`*^9, 3.601552630947776*^9}, {3.6015925911300864`*^9, 
   3.601592613813384*^9}, {3.6015926462762403`*^9, 3.6015926750798883`*^9}, 
   3.6015927261078067`*^9, {3.601592756429541*^9, 3.6015927749646015`*^9}, {
   3.601592813396799*^9, 3.6015928171110115`*^9}, {3.6015936054051*^9, 
   3.601593616936759*^9}, {3.6015936522817807`*^9, 3.601593659804211*^9}, {
   3.6015936977343807`*^9, 3.601593703482709*^9}, {3.6015938032044134`*^9, 
   3.601593839254475*^9}, {3.6015939055702677`*^9, 3.6015939355059805`*^9}, {
   3.6015940687956038`*^9, 3.601594074351922*^9}, {3.601594145196974*^9, 
   3.6015941714714766`*^9}, {3.6015942162630386`*^9, 3.601594258628462*^9}, {
   3.601594310046403*^9, 3.6015943121155214`*^9}, {3.601594409881113*^9, 
   3.601594438379743*^9}, {3.6015945562274837`*^9, 3.6015945581155915`*^9}, 
   3.601594604665254*^9, {3.6015946540800805`*^9, 3.601594656909242*^9}, {
   3.601594703469905*^9, 3.601594755839901*^9}, {3.6015948057987585`*^9, 
   3.601594991432376*^9}, {3.601595046788542*^9, 3.601595049002669*^9}, {
   3.6015950818715487`*^9, 3.601595181218231*^9}, {3.6015952625988855`*^9, 
   3.6015952890633993`*^9}, 3.6015953542951307`*^9, {3.6015955048957443`*^9, 
   3.6015955051827607`*^9}, {3.60159561566708*^9, 3.601595631144965*^9}, {
   3.601595829788327*^9, 3.6015958783671055`*^9}},
 CellID->106836794],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}, {{
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 
        0.38613138686131376`}}}}}}, $CellContext`dynamics$$ = {{
      Complex[4.252297410602208, -7.662528307386322*^-18], {Complex[
      0.7567023120566828, 0.], Complex[
      0.6536029291122348, -0.0001788943020059129], Complex[
      0.005513403043112809, -0.006194280064333546], Complex[
      0.010269020739239649`, -0.0005721127599694941], 
      Complex[-0.0006658911669672943, -0.0024069783901113214`], Complex[
      0.004347537578404993, 0.0022594519710096702`]}}, {
      Complex[3.270521621873675, -7.813658163506356*^-18], {
      Complex[-0.6536399915383492, -0.00030637975529804493`], Complex[
      0.7564975686173675, 0.], Complex[
      0.003256977929828838, -0.0008990047821220681], Complex[
      0.007237115969763234, 0.010521287294565352`], 
      Complex[-0.004858597163317104, 0.003876192727992754], Complex[
      0.015352686842074033`, 0.004155838151900385]}}, {
      Complex[0.5491705598395172, 2.8759744577514037`*^-17], {
      Complex[-0.0028973296180442656`, -0.00713994273289795], 
      Complex[-0.012703105191830388`, 0.00007408609889859082], Complex[
      0.8304589138114189, 0.], Complex[
      0.552502955658702, -0.005624697661006539], Complex[-0.03509157769386804,
       0.02172083167383089], Complex[0.043639015120719854`, 
      0.0349072280482927]}}, {
      Complex[0.4834516529528866, 2.2031212624217096`*^-17], {Complex[
      0.0019785320193494273`, -0.004792200044745708], 
      Complex[-0.0068707367667282075`, 0.005890375666124598], 
      Complex[-0.11977230334395164`, 0.06343242790301373], Complex[
      0.17808910747442724`, -0.027580609846519673`], Complex[
      0.7469913109945034, 0.], Complex[
      0.6252903786805657, -0.007851274436092764]}}, {
      Complex[0.4246452038294519, -3.202379125037765*^-17], {Complex[
      0.0008085168640870573, -0.0020318936957042983`], 
      Complex[-0.00966825946493522, 0.009037332441233942], 
      Complex[-0.5138010755481991, -0.006292959583686919], Complex[
      0.7381521269591975, 0.], 
      Complex[-0.39867220214229376`, -0.025188250378835375`], Complex[
      0.16731804121388238`, -0.05788834379024049]}}, {
      Complex[0.33902251461154426`, 2.6141663296856393`*^-17], {Complex[
      0.007383051140891514, 0.0032762347654724075`], 
      Complex[-0.009792489351295406, -0.0005369756479460383], Complex[
      0.1645604519653952, 0.027882667624232332`], 
      Complex[-0.34204996226455503`, -0.0098404202480495], 
      Complex[-0.5291889647502656, 0.025317326497841963`], Complex[
      0.7577625301873101, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1:eJwV13c81W8UB3Dj2jNJZWUno6yMyPNNNPUjlWRE9sxIKmWVUqjI3iktqVDK
fiQ7RIirQW4IF9eIa/+OP77/Pq/n/XrO+ZzzlbT3NnMiMTAwMMPHBx8vfEzw
ZW7NSqWvTGE7neDx5Y0sVa2XX7CXfBpGFQvNak5fVvAT+6Xqxe8k4k9FgZhu
yBSWmZj0FO2YwSwKp7GtGR1LsCvWbi4ZREPtnQ3PooeweWy890QHiaBF8CV/
JVeg+08zW2uOjOHQrg4evuI0FH/Ex+7IVxq6vCnCfH/CKKour1QrimMjlP1m
PKPYF1H3eL//Fcokls2vnf32cwpFnI9VDN5GReXjRJ7fiVU0wX670VeIlZgb
i4u87MNCaBn0Vf22HsFyjTtqOXhIRKtU2ajBoWmkdI6J8VMBJ/HrtzPTlvop
fPb14Y9HlklVSisSSlvQX9Rici5cPHUF19he/Re2TCLyiyP3cR6cwu/Mdb+U
jszgxpSpa4NOdLxRenXEwmcQ6ZutlQZ8HsI5LkL5v8tIhKnn3GNiXxk6+tmR
ZYsP+HiePfF9k4SsEk+d7m6lIa0PEctG90fRz/uscW9S2Ig5w/f7vwssIq99
Rp1XAidxGOG5qMo1jULrhN8cukBFv2eqXz65tIqGoqsRVYaV2GlwqH7pGgux
VGAT8bJvBDfrdDV9pjETW3Miy7PZp1Fz3oecg4mcBDXF9KNh/BRmEh+tshgi
VTFbK6ZqFP1FOz7t7BJzWcHlGx/phYmyECqKQuk1fFO4Sv62ZvXCDN7hyrtQ
coGOkyQb5/3VB5HoLbluNoZhHNP9PcP4KYmQCO2fHKIWI62V+VT3R2PYbk95
WDp6gHgNPvPdrqGh2Qj11vNBoyhJvidIP52NUG34km+weRGx1WgW9XBMYtPM
yuM9utOI8aq9lEo7Fe0+OnNV8+EqEkg+XeaqyUpQ9qiybIlmIcY1M/JenRvF
F1o8JEs6mYmGB2SdmvopVNkb2Lc/kJMIfXAth895CkdLC/k5fSVV4avcHRUy
I0h94NOFWc0VLDft652hy0KE7ql4wtZLw/nx2nQS8yy+0tPeXHSVjjsOvHbd
yjyIIq3HztTuGMZViFzkGUcifK5IBrlS3qMu3Kyi/HsME7kbp7bSbqGNGtIj
V97SEKEdkEWzHUVMleYvLNPYCP+Nu+WLNi2iGwpuC98eTGAZTwM75D2NLs4O
Lstrj6O4fu/IguZVpNz80b3oCCuRsPGl1qMMFiLietbni79H8WeuT58kS5gJ
e1rXLodbUyg+6l0Y21lOQrRC7Piy3hQ+4h/98kUVqcq1KkQgIHoEsT1NSlTk
XMH/4f6xoDMshGun3GXPpzQ8FMtQ6Moyi3cfstapDqLjTvpWpra+P+i5m66F
9qFhzHVpZ+WlGyQidFsPe5xCEUrIElnIU6RihqifBzPsPFDWj+jAn2k0NHq1
PWCb1ijyEU3JZE1iI1Kdrghp8S4ijx0Dr+qFJnDQqaq3nTnTqFjNr5/n2Tiq
0PQVS15er8+sy8nnWInT/WLOrgUsRH2Xc3eSzRj+o+5x7GQmMyEf5jKgbTSF
7A5zrQzs4yT4P7u3hGydwuxlMjOnC0hVfs84yLvHRlD9oliXwe9l3JlsFddy
kYX4Vc8ufOsiDYsP8icMMcxi5fgkV/IVOo5ZRcYrjX+QprWYAKfVMNbimlFK
C4B8aeW58V/9W5Q9cuTdpjDw3VJTj9x9CauMPGGfC6Ih39CFDG/mUeTv4FP4
3302IvC8eudPhkWkakYy4k4ax3Y/gx6vfZ9G3ienfzwSnUBhu7rKz+1aQ1qp
l/LbAlmJv++s9qjVsxB9r2XkCzvH8KpwmXBGODPRKh6+sEqaQk3iGiFycpwE
9yYt9bUlGn7N3DeelkOqavjavXsSjaJ2N6Py1+XLuMf1UIVuDAvBO3zgR99B
GtZ2vnYl6t8MPv6xO4jVh44tJvMv9H38g5IzukdI9sOYdKDg6ZInvJ95pOD9
ikKkypfN499PxXaI2s0jHINPPu2s3WJJQ8cGb5n7146gG3oHBg6FsxFKL5Xc
vowvoCizxGf8m8bx9bsKzNKCM+jwqajZ5KQJtMOA+j7IcQ3dZwjWFkpkJWJC
JbM//mIh7pY3ufsaUfG1HwbeRp7MxPJJwsezjoa0q8J5JLk4iSH5kfutf2i4
uTmKkpIK9cnYXp9/ZxS9ueN2vTt9GXv/bBcNes5CvEvgaFkSo2HH/Q9LLlFm
sFjktgAnOzoW79RKvlv/B9EW8pcFbYYxmc6Q+M6ZRLQ57/x+mL8QlYyFmxYf
GsdVASfME63TcBL/vb6XKjT0Yet5zV9BIyg+OyBBMICNkN/CLmHQtYDU/Ze2
H3xAxUHuLwYyjWfQ9RSGb7FCk+iGZ1H5ybQ19Fn00FmRt6yEmflUYMc8C/Es
ot4l/jUVW+/Y8OTBKWaiTSskSj2Shv4IfH28bYqDmE1j/rerk4btGLxPn48j
VaUMGnk9rx9FFG3PX5uvL2Mlde8k40rIF2mvyEe0Sexzfb7rVxPkp7ZDj9RR
Oo5+RI+c7/2DmLYlWx0yHsZnr3r87HYgEfwi1GueHwvQ/d748yXF45g2K9h9
ofQx/iaiayXLRENf7IZVriiPoPL87v29jmxEzd/4sasfFlCt3HYHGX4qbhgv
PfU1fAbVaFRXSydPolC36ZgjHWuoPVTe/247KzF14D8rCQFWoiJBKXGSdxxz
U8RcaglmIu8V7681Uxp6fUn0jGcPB8FtO1pm1kTDPiakD8r3SVUF6Wmpsguj
6MSN/SzlnsuY7WENh2c7CyGj1i2f9HoSP7K0G2DNA998nuZVFToe2B+1PLj0
Bznf4ae07hrGhU6XcrwcSQSxcvZFd3sBYtaZP6a9awKbtrrrHJDIxUpb/0Vt
zJxEMi12xxW6/qJOv/NMn03ZCImpm1nt8QvogzuHiEjMGN586qK+WPkMyiyt
aTrPQ0PcpJyBPhYGIn1DefmmKVZCYUH7pI0yK3H8I6+vj9M4lqFyL2zZyUwI
bu+29Rehobn3gdHHPnIQEj3Lq2b1NOxn27ztz11SlfXOA8fTxMaQ0/UfbQw2
yzjy0kt6zm8WQulIRGZswCS+7H2x8mDEDC7jjg4r5afj0ub7wks7BhGJu7tw
gW0Y+6t6Ef6usA/Y56ZY7ytEV5SvmFNyJ3BPnqlgjXM+/pG/eLFr1yQSzp7a
OX7xL9rDmzK/bQ8b8Tm8dvWJ1wKSvGsolLxxDO/f4rtpYGoGPatg8X7yHw01
6upWcUgxEDGHOOwtN7ARGoYvPusdZiVehWXflCgYxwOC5veqxZgJvhZx3ROd
k0hzPF2UJY+D+CZ487DOZxqWT27QS4D3sxMKLMjWGEO4rkJg44llzP3STalx
goUQvJl2S/XwJB4tVRfhtJnB9cmlu3Sp81h7djH1reMgeuRVfWBP1xAunBLS
6feG9/tRkVDB+xZtzbBRt1SYxNpXJhZTut/inEH7O02lE2hJ9cG2dv6/qK5R
r3irJBsxbCr0yNVgAZ2OH+dfTRvFT34n5EbIzqL4Rlbm5Xs0tKXsWM7XvQzE
10jfi2uqbMTltBwLbyeYg38tVOWnxjGn8ttCGh8zobpfn9vi6iQaeiGV9yWZ
gwhXtQtZ7KLhgL9senrxpKpsD1Gp+b1jaEXztCCfyTLW9z6r8ZYO+4up/Xa6
3CS2d31vWqc8g/cb2Os5fZrHqfsk1VxfDqKAeD91yeQhLJ/q5ZYeCPnCEx5U
oPUOJYjJY9W8SSyxy8Kk2+IDVqgt2EMQE2jUXUB97ukwEq+qv7/GwkbUfZUq
jd8IPpW/jdkKo1jP+Q450HwW3ZZl3VPWQkPYWc15zIKBmHZJ+/fMjI2wd7/6
JCeMlWiZ3cfeLjOBGXjDa5tIzASzC0/RrBLUx9/eWUoEB3H+vyfLl4ZpuPeg
/Y/PaaQq+xtPucJ0xhCXkscBhuPLmJ+S135gjYWgJnAzHeSfxHscLNmYF6dx
1uZfq3mJ81j/8Glvk5VBVGjnEml9fAiLVHzTjbwN+wv3yNHR4iLUyiHKdm0z
DauUyXaG9JfilmS+53Efx1GhmdvqHZ1htCFAoEh8hJX4vOdm/pvfdMQXJqZd
VzWCj3/4o6QSPovuJHwzUeGcQm0HeDtYLzAQIXc9uuf82Ajn9ucnozPg/WZK
f0QcncDCHo/u+CwzEfxhIXfYRyeQD1evot8VyM9BGjVkjYb/durG7XxKqvqX
8VfaePsYuusYIPHbYhkzdLw76MvESrCrUMrPskziVVfh4hPV03jHI6O+WOd5
rMRPXgw5M4QEseBoEeMQVtx2kPF6CuzXfxXCxO99QOFqFgfSLSCfZwKZbjpW
4sygJ++ViXFkWhpC1DQOoTZmx/ONTayE/pM3Lw++oqM3l62mk21HMGfpTQ/Z
17Oo6b0y65v9U2jLWs2d3igGgj9iK1/MAzZC/F3D4LdiVmJk3yf7X44TOGb5
T9PCHBNhbKClbvZ2Ap0UlLr82IuDSL2sfjdaaQkXs/hfNE5irLpqeFW0rKkR
TeY/uxbvMIe/3/5H9v3CQDg6FCb4qFLwHlRErspawFJfTj19+IOK488ean2w
pQPR5qRf9HCUYtcfbzI0EhkJ+Ub6q2nLITTLFnujeXke//i+zaSvhIy8T1Di
cl+S0eQ9ntp03Rkk/2n2lYobE3HplGm3DImBMLYp2GPrNIcDuZcU1HYuocPu
feZvV/rQ3Pa18dplZkKy+V+0hBozcctwc/tDe07irKv40yfts9hrcEc7fY2N
MGQvmGNUoiBt5Rw9axdeYme1ZokP+ATVzsXREhmrGJJsHw43N6Kx4Gf21fZz
OD9HMeYZ+NLd7km+2UXB2lH6F93B97WlmFfuJxXff/t14cjWDmTn8EFRaEMp
Zh75qawJPtO861lF8K7sXHtz/Vbm8aNiS9+XxWS01rnk6/WCjIJk78qGg4/Q
Il2iuzIRDA/UHNTBJ+fxM/ml4xzu9z8rTAOfzY1Jl0MM/ejznEXMxhWY37Hb
Vi+D72S5Y1MP+CwX7EW2fZ3FKofdUQT4xBZFznQpUBDvwXuI6sxLuPdYb3cF
3zW1aKN08FUYWi+EtTaiV2XzzxbPzWEecW+ZLvD9cP9QMK9MwRLWpBBm8B1R
PEK5Bj4NsdRZY+EOFOr63/41oVLsoHnKaR/4DCI6i9MthtD1zv1CEqvzeFaH
m2/bBzKqOmapzfyMjFjTX3aeAF/eDjReDL5lPuP53eAze5zwZxnqhn+/8c7S
XUtI/4yc+XvGfvRQZO2WG/gia5vCOsD37ZoyRdiBk1g+7+1yB3z+9fksm8F3
1z0vtmoHBRU3SNUGgs+AlZ/mBz6LWulrpuA7pWudePML1OdC1k0EvqukQcFF
8IkmSymYKFFwqJuN6N3MBRyQ9lwpB3x6bo/6EkQ6EMMV4a03REpxwLSEjPl6
fe7RFn55eggNDcaQv4KPVyEsVr+IjH4cNmvwyyGj1Wk+a27wif/IrfUD39RO
w2gl8L1/n8B3CnzcM1zb76ksIdeISIdtzP2o8w77zzrw8e/eLLRLHfYUCSlb
Z/CpRHhaUcAnEFrs8GKVjVDvHH9XJ09B6Vdf83OAz5o7aTYGfOJZAny84NtQ
WxY3Cb5nD2v54+zm8M1uE/qmNgbCNdnYsFSBgotDYjPZwbfn4VBgGvhWKzs3
SIl1IKJEoi1evBQnZcvt8gdfai+PP8V8CEWe65m7vTaPuak5x/neklGKzyaf
T9lkdPLImYjXe2aQpp5cgxz4XtEn9TaDT1uahV4EfVG9/O65m+oSCje6HBVC
6kdebFG3FVaZib5ZkfeR4PuWruFSCj5R143zih3wfrfJsQh8LYLlkaPbKUgv
VNo52YmX0H/h2fcRfO6GyWVdCYxV3rU3PlWCz3epXGPedg4rWumGyIPP+O2n
sL07KFg+cUvIpYwF7O7ROGQPPm4nL6lxcei/930vFCVKsVVYq0oa+FzDpdYO
gu8ym4ELwUDHi561t5PyycjoBKVrOZOM2D71ntMFX5G/SkuXCxNh/4blwBwz
A7GHJuMgCb5Cm+F9R9SWED6aM/CVpR9Ra2K84sAXXdRqPQi+iallLiFHTsK+
OsLDHnyL3PcrelfYiDPmp2/tBN/AuWBWBfARSF2WRXkJt/5SlnoOPj7WuvwZ
6L9Br9hXXuAz//fLXxV8l08e3/ZzOwWrObtYfU9fwI+Mr29YgvzcnR71b0qi
A1WNaG/bD74jDvMlTeDb0mUV0HtqCFk775KYB99Aa7f+r1dkJHtWf0AunYwk
Kdnq73RmUKpEaFko+J53ebM0gW/UypCeDH2hdfSjn7L6EorTPPBoE1s/Mj27
7xzDGjOx7/IYm74GM0Hb63DoMvhGdzwRuwU+USdR1mvg+0pyw/FyFJSXrK6E
HXkJ44F9rJbgs+auqLkJPk7GDZkxLY2oz0aQmX52Dh/he4dVwJd+dZg9Qw7y
5eop2m7wGfhTpJzAt7kONylIdyB+vtPjvVCfpYfU9zMlMRIqIk0b0sEn2sK9
9SUjHZua+WiO5ZKRGJPji8MpZDT770uQMPiurfjelAffgYx9Cw/AF9zDqScO
Pj+d1bf8GktIfrBXzZC9H10w3K3sA77rVp2lceCzT4og9YNPTqjkWSL4Al5Y
XpEBX/NbHqo4+AyfvWE7Az4m+7oYDL74KmUWb/BdiV0LTvnciIb/hoYnga+s
tfKcHPiKg/xbQ2UpuPrbjk130hZw5fZNdY++U/Eh2/PHYmXh/aI9heYhXxp0
Du/cBz76/l037oJPxUP0uCUTHZvFPP1WB7n57uChk16JZGT2xXTOW3sGNXiZ
y7U6MxEr700qj4NPqVYmuhD6nkpVCJ4Cn5qinaYVRz8S3zT64Df4Vk3OhQ2C
L9G9b4uxEyeRmpnTG7fef8Mf+LuW2Yhvk7NWrbIU9KN5pozuwEs06wU81ti5
hEmnTGQcwbdvYI66sbERybZXGR4D33+nb18WAF80tTwlSoaCbxlZv/+WuoD9
Gjpl3vdS8Vsx8lNxeciXtoPfsjaXYk1uev0t8M15kmZfg09CXLGLiZmOcxhl
NwZCbs6eNedIjSOjtu1L199rzaCNgU+y/MD38bovLxv4EnfbipwG34ENvaYt
u5dQxWtq7GnOfnSI8z+TEwwkglaY5Ke2m5n470rI8TLwiZbaVwaB72Ooz+t7
4Mvty5l9DD6BaQurLPANtdXRPoAv9M+2fU7gE36ttpmtrhF9MbDZLAy+HzlN
ev9gPpy8ZyFbJU3B/50QbpMAn6b20d/ZZCrub0uN/azQgUy3/4r8DfO9Z9O/
w1/Bl1nGzMIA+XIrV7z2EfjY2Z6b8UJu/nHR7uqOIaM0f3kNmuYM8jgsOScE
Pu0U78q3TNB/P/dOcIPvUUtNSbbmEtqScTtAk6sf6blYiNeAj+A3eHsFfLNi
d3yVnDkJv+tTsSfBdyCLU8QMfJNnqDsfgk+c6/qfY+A7lPWY6dCuJVy3esHC
D3w39x97fbW6EV3ZIXNv1WYOExOtjF/WfQLUdxLrvuAsV7eUBbxTIZrXrYeK
q8LOno9R7kA+Y3yxzZyluFBE8qdUMiOh2az1JQR8/tHHzmiT6JhBdPfJuxlk
9Dj1b9zOe2Rk/KhDfxv43PZM7ix3YiL44p6UWYCv56dgTyfkWgb7JytPrSVU
x7TT7R/4LJ7kVKoxwt7+wu5yKfgWeQs0M8FHL89s2gK+XyPCzBLgC3sfuekT
+L5l30Is4FPiSdangM86f80wCnxnMoI+X61sRA5Nt+cXwSdiE6rxEHw9z4t4
30hR8Psan8jC5AU8jTu283VD/7UknnFS6UAS5ziFLjKVYkmN8bRL4DMtvDuk
BPM9XC52+CP4Gq6bb2RMJaODssd6n0RB/10wmTPaPYMe/35j7AA+xRYbjnlG
2CNevb78BnyeoRH/FLSXUN4i+fAD7n50QJj1Xwb4plo8OGbBF53YZc3nwknk
PisR+Azz3a/L4h99iY0g79pgxA35civVRrfOnpdorbcbjVBZwjk1VfgN+N5u
+dohUNqIpPfX2PBBfd6t3G3pBj7tvuAAT/A9WIrSX01awLkuaazJXVRsnDa/
z0C9A8UIN/+cppfgrU1/47+Az1l7wIYF9jPaD+a/e1no2Ppm7ssLkCvGkZn9
hnfIqNLjaa2zxgwS3p1pzAM+j/yJivvgq/wRvicDfAoR3K7fwSfxIPUMF08/
WhniiCExkQiDhHPVsprMhB9ranYw+F5XvzroCT4jLvZzP8HXpbhKDQSf//37
UbHg66zrVtFQhf+HjY12feBbwiWnjxU1oktuxbd0wbf6cDefIvjktzPlngGf
VGjarf/Ax7v3UTdbJ+yfO/zWxDXh/R57r9lNlOAtgb4tO1IYCbOO4GZW2K/z
U2wWcsHnbLZZb/IBGaVyfPMSiCCjdIUP8uHqM2h4c6V0mSMTEViUvSYNPonK
mOOZ4Lu8Kav8qs4SUpW6jWzBd1zVxsMJfMsSKZtMwHdEcqV+FHx1y1GXVuD/
YdC9LL4FfB8N+b7ywHzvMdOqcwFf74aU6ZLEEUx6wfO9Y20Ny4w0xJunTSFL
yd/TdPUZzHHydy6dgZ3IKy4UNH5Ixr/kOS7POg/hfiOWgKseQ3ik0DHEX20G
qXRfjC4NKkEWA4Pjms3sBENlWavIZypSYP5ov2s3BSvtCuVc3UNB/Yc5t+9r
nkUHB7lk59zmUDPTKiUmhYN4ajCqI5bGSKS7P4i+Te/DWQ0l/97ar6LD1YoF
JNc5VDG+Ny8ziYWIH5TQ4gTXeb2kzLUVLsJU9+yzhGwyTm7kiUlP5SBMXq6Y
za7MI7s7vgMFDPyE+KvwZO6kEVx30X/WBXxH0AtGLfAxqEs/vAs+pezgRxPg
az7lwVqSScbBTefO3AKfxH3WFhHPIaxdu2X6Ofh88k+MNV4qQflEjf1/4CuX
jk440kRFf0P+ct8F3xQl/5+cLgUtLD2v4gbf0FW1FSn3OUS9uWhzEXx/a08n
6YPPJ4zhuzb4OF6Y2FLAp3Bvr4wM+A5XfDuSC77+DY87xMF3Mkk9bBV85b9Z
qWfA17n1up0n+EpPN5+dA5+QzWbbDPDNtZCvO4Ov6iE7Xlldw0URFZ0C4LPo
qj0qCb7VNr3p3+CbNR2w3ZxBxtEB7/o2gy9ZILj/Jfi+zL2Z+LX+fgJGmTp+
JWh2dxNyAZ9oMsf10EYqskcOpD/g655Y0dYBn+Vdz6Dez7PI1IVFxQh85idU
kSX4RG1tjKzA9/ysptnafB+mbdVtEnVYRY4/HbL1wefQFetZBr7Hoe/tVcHn
fuyTMPMqFyGBT4uwg89S52KPDviM5Mq0V8H3QsBBJAJ8amJeBXXg+zpr55YI
vu8KQhdHU6dQcJ67QpHaDDZXMaj8Cr54oaU6jzQyvv4FG+U6DWHPx9ObFLyG
MD5j9X0T9BFNWjJkq1cJKq2T1A8DX7jXWAduoKL+YM/j6poUbG9l+1Bj3fcl
gpoLPmdxIWtr8A34DXUi8MWkGE37ga/ZWTzxB/j2tQ09sAVftfz2nyfAJ6v/
sL8dfAetrr7ZB76hIMWzPOATPOUqng190836K4IFfMv1Hk1cq/Non9wnc2/w
va7RFlBKHsF6HH+2qoMv7lrJqUrwveaQ8jkCvnvMfaofwReeP7lSmkLG7zbV
ftIHn17AV5YE8BUzPxQ5Bj6VWFn5y64l6GRh+cZ08AmsSOdzgs86WEggEHzW
VuPaW8F3sDE4IRh8SbJ2yBV8joVW7nLguzWcbnkTfAzarznawZdqzLuUC74b
VPY0B/BtKuVwGQffQ8ewKBPwMeXu3CkGvvBLj4TlwBfI38Dctt7Hr3aPi4Nv
9MPESXPwZUq4hSeA71dY2Fjnyho+y2Y9ew987vorxgOqM5hJQiDkFfgEOau7
OJLJuPIOb/Q3xyF8LepCyBj4+H8JCqzn4EMj6yZ7R6jP89v9P4BvubBG2KGe
ihKVWq99AJ8jvdR0GPIl41HO3CnweciwFK/7DPcuHuSFewW3TB1+AD7H0uaW
9fdjn/iuuAq+a4wqr73AJ8XqUMCTzEIkHjD+Ygk+NeYqGzXwcdsEn0/OIuOE
6dw/KXCOgGK8uxb4irNkbPTAN5QR950xZQQLLUSNXgPfb7fFbmvwqZnljQSB
T/Ta4s8k8JG23JCwSSRjw5Zb9X7gK8+7FK10fgifE5WWKgVfvg4r+6BdCRJa
sN/QAb6qOjTVVEdF7j4pA6Pga8iZv5gFvhflb2+ogs/R4VWNDfh4TcML55M5
iJtH3dNSwKfiMFu13n83mY5pWziuIrr93wVf8O0wfOWgBr4O/hpLB/BJ1NzI
NwZfsmT6qwXIvbNzH2ocwFfb+HH5JPj0LtiVSILPLIOX4g0+WlT5BiXwjVVb
3JcHX0+liqM4+JqOakWHgk90OfFxSTycQ3d/IAg++onIC6fBx2hdUzABvlCH
gA72syUoneNT+gT4tixvHtwPvssvOQo2alGwiazlRQPwNS/fyNkAPs2sqPCD
4Ltz4vjoAPjye5X2pIEvuehBiA7kZwhL17Zi8O39N+vrA75rG603WYGP9XnM
Jrf1/pO7+t0DfKI9RulHwWdbJ6W/E3xm/CEml8AXURlRxAo+qS67c7/A5xrp
epCyvIYLZjzeTKdAvqS9bq5RmcE/fbSbXcBnbSTGKRNHxu4tEgvlDkPY9JVP
qQf4zl7UUZSEPSRUp8zsm1UJitdpredoYScm7vNc+lJLRU9HflxQBZ+wOfl0
uw4FfZ8eeDvXNIvuyZG05MD36G6iQhv46jrSJJPApz0l7XQHfJG3tdtFnVbR
V4dCYbf1+ecZYhYBPhVJ20kP8Lny9t68D76YeWeFGMh1PlH3kQU4R+c2E2Mm
+B4+kN7bvcZHVLtUihinjuBF/SnLx+DjQAXtZeCjHXSS8gNfsHrYn2Pgi2bN
6X4YS8a5vHv+eYKv+KvTdjfwcYsVrZqCj/+GS8MJyxK0HC9mJAO+Lfzfps+D
T3Tr4W/7wad4qMT2GPgc5WJX+8EXgeh7FmG+G/pVPsdwr+oEe5u74FOqY7s3
Ab65x0nKN8HH/46Twxp8zjSejPfgc9rP37/u02ciHfkAPvlAtvON6WR85sgT
q3o454w53+MG8Dk/tLiRDb5flXfIH9Z9wheZvMBXtnr5QTj4VrV7TLeDb9Wm
T1wdfO+eHbXSiCHj1Uuv3GXB9/Ac/mgCPqaEf4+DwGeaVh5280wJKtim07gX
fF9NPTykwTeROv74CPhOiv8jFWtT0ISHS3Ub+Ny7P/DUgK/Svy2uAO7VdeAk
RzD4tnRz9Los9GFfoywuGvhuvdGxPww+xqWj5/+C78bLL8Ou4LPLe/V+AHwa
rpYZCzC3CgK/yyTBOUeNd5XPgS/LCH/zBJ+CSquLRNoIZv/e0EOs+4x33D8G
vl8ru5QHd83gM/Tk+s3g4xYKfTxwj4wfHjgmO2w/hNMTetq3ge/Xr4a0p+Br
++fa5AU+mZ7zXObgcyUtfxivoSLHa66NRuDb95tvSgB8igVPlevA1xycfjgc
fKe5xjY+hXsF3BM97rY+/9oTJ2fAp2/Ys8faeRX9/GJvpQq+pZCj2qIpLMSM
yUa+9XypydpmumGNi3Ct8GGXBh/d3K3VDc75McPduH0N9jM1txYd8LFez00P
B1+TW6XVNvDxJwQ5bgYf71zvhTzwnV98oLS8xkYsH3X3e3OXjDnvXP9WuO6T
Nuwnw3zYLnbJ9zP4qr6sDHJDfVp3ZNd5gm8o75ZvK/jC39w9uRt85zUtFm21
KEhI0//sR/Chl8dzdMH32r79cAbc67bCJ28T8HEvxaPYxT6c3cIZ0QC+gN4F
bUHwRTuFuhwHX5vTDef1+eDXlhhrAD7B9EcCh1LJWKXgChnBOVWlI3utwOeR
VkFnB19pfLYlBXzFbpWj7OBj5m3IG0iG/TPQvy4IfMJ2F9L7wecorqueGU3G
D16d2HgHfNySB98Fg09DhK98DHwq+Tv5zkG+KMjwlYaBL7lUdqoWfG1PkP9W
8HVcyhPP1qSg0Nwb9tXgOy79hToK937Oeu+/9bqifmR+owK+Yu0uDv2lPnzg
el6Zussqkvi+dmzaZQ4l/3Z0jADfDmoT6/p8L2+rnLgIPv74j4oesHfM3Eio
2ArnXBdUuh0DPoGFXkrvKh9hXlkfp5s+gjUcimtXlqA+efesvgHfhDf9xRnw
OW3+6FS77mvzohVEkfHTyTIzd/BpHM0+zge+/Ydit7HBf6rp9x/XnG1gPliz
5saDj5q/waQTfHoVI5emYf7lb2oN6tlNQZkyNM1G8N0+zcURB77SSEX1eLjX
s46rzjzgi5nms6eDryHY5Fk6+PxfCC19Bt/yjh0JFeCLdjzOv76fyWTu68oF
X47t9sZ7sHdIOJoMzydxELYyjPz14PN9xSmQD77/AbBlqwo=
     "], {0.25, 15, 20}, 3, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 8, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJyEnXV0lkf3tQMleRI0wa24uxUN3MElSHD34lrc3bW4W3B3hwYPLnEIEbwQ
IDjFv35vz577ffZ5u375h7VmzZpn5ozs2Rf3zGTv1K9Rl4QuLi5JvVxcfvr7
30Y/rzt0aafrqfpLI//62utLwKoVq3xaJfTyQXr5fRuOffv9XYD7+NNu3TJ5
+jjnjwvo5Tf9c0Su5Cbd7z/pkQHedbZ8eVctmUl3kb9tuWaebZ9B5bfKTl65
onQyu/y6/5RvPXu5atVeh6qPdTPqdP6TQ7yoPl+sKU1e991Y1cvne+hftZpX
cTHtmp4764YZYzxNOto14m3P5unTeFL+uIDvL0skXOxrp6Ndzb4eLTrhJ7t8
tCtT8zaLygZ5cX5rS9GiI6ZUSGnS0a6flqz54Z8wJdfHulJzy9S3DVX9reBP
X0Krrkd83gegXbNvhozJMNhOR7uuD/2zXssnnD8uIOhCm+MJN3mZdLQr/Ej5
W93zpzTpaNfl849PeKRJyfmt8x3m79jZ1y4H7Zq+usOMDctUfaxbHTvnTJFa
1d9aH1ovbmxBTx+//6Q/Mu1K5f7Hs03f7HS062bMXJfFXb0of1zAws9DVh5q
aKejXTWWvau2aaFdDtq1cvDlkue/JOf81u6wL/Hb2yUz6WjXnC8FPsb5JeP6
WGO35On54c/kXH8rcWqvmzVnefrg99CurP3rxl0o4WXS0a42X3uEtVzP+eMC
iv6S3/15ZHKTjnZlTvxgcKkGSU06/obkfjbtcpkknN/i/GhXYSof7frf9fli
of7SXgvtQnuRjnZRfCy0a75zPC20i+Jv/Ut/Ib9F/WuhXTQeLLNuOI8f1N/C
eGvyz/g07fKX8Yl0tAvj2Tl/XADGP9LRLswXpPP8ovwW5iPS0a6bMn+pPtZV
me9Ufwvrg6wnPmgX1hOko120/vigXQmd1ysftIvWNzNeaD1EfovWTx+0i9Zb
1Mei9Rn1t7Cey/pv2oX1H+lm3XDWC9Mu0hfTLtIj0y7SL9Mu0jvTrr7O+mja
RXpq2sX6i3b1HjqkoqNAYqXLrSo9f7u9qofS5ZfBZc5/++ZQulzjiUfzrRvc
lC7PPBGSrN5jV6XL5RoHXLfuuCpdrn90x6CHZdyULn+PP1I08qKb0uVsLSsv
2tTOoXT5wI636ybNT6x0OXWP9WP37vRQuvx4x5Nu92a6K13++rlJjX03HEqX
J1bbM8R/hkPp8unkzwtuXu1Quuz3x+OYku8dSpeXv4vaN3Cou9Llhyvcfi+U
yEPpsuPrvbRuxTyULo8cU8AzKMBd6XKqswVnXSrlrnTZK+u4FElOO5Qurw9o
nKjPeIfS5S63or3LzHYoXV6XesmcSy7uSpcvV+83YNgHrs/f6+Hgy783z5pY
6XKnc8Wznl7lULq8YHCa3F/TOJQuL472rLV6mJvS5Wez8hTa/NZV6XL2Xzee
9TvsqnT5e/VEk64mclO6/KT/xAnXUqr6WP1yjmpdarC70uUHO/IlnLDIQ+ly
6cYDPrW76FC6nPXriQdvz7gpXT48o23Xn4/Y6wLate10sTOv7yRSujw20ZJi
RUYl4vwW50e7TlD5aNf/rs8XC/VnXUZ7WZcpPka/KJ5Gvyj+Rr+ov4x+Uf8a
/VrmPB6MftH4MfqF8ca67Cnjk3UZ45l1eYOMf9blvjJfWJcxv1iXMR9Zl5PL
/GVdHibznXUZ6wPrMtYT1mVaf4x++TqvV0a/aH0z44XWQ6NftH4a/XrovN4a
/aL12egX1nPWZaz/rMukF3a7nPXFtIv0yLSL9Mu0i/TOtOuVsz6adpGemnax
/qJdpz/Vy3l9/j2LdXnLw3wN/dzsdLRr9Ya6e+f9EWuxLv/V7dHCVbvtdLTr
TdaSvssCVX7rbe6gaaky2uWjXT6LF259FKjqY7VcNHzT85L3Ldblb8d7vt/7
6p7Fupzi18x7Gre209Gu+JDYgXWKcv64gJ0DvpTuX99OR7sS3Wi4J9F1Ox3t
+uXNu9ahC+5zfutrHve3bh4PLNbl8/G9B4WG3ef6WDPKxD72ynuf6295rPjV
PcVExMHWZZ+6jSvdaGino12jDrVu5XKK88cFRA2uusNn5H2LdTnXvdcrtn+1
09Guyv610h2OUvmty1tuJbhcxE5Hu2IGlv80e7SqjzW2yczcJYqp+lsrHq+r
ceCXexbrcr/StafUXmano11tKzmqxWW4b7Eu/+q4cWRbUjsd7Qp8FRG1qKtd
DtqVaOe2Cwfvx3J+q2eFVe8f7LPT0a7Ormf/eL0jlutjjU5Z6tqwm7Fcf2vj
/OsLG3jfM+sv2rXjz7Utx++z09Guixfaj2r1C+ePCxhT2HNcwf2xJh3tSjz2
zSv/SXY6/hqtrFss73CV3+L8aNcEKh/t+t/1+WKh/qzLaC/rMsXH6FcX53ga
/aL4m9+n/jL6Rf1r9KuD83gw+kXjx+gXxhvr8moZn6zLE2Q8sy7fl/HPuhwk
84V1GfOLdTmnzEfW5bsyf1mXR8h8Z12uJusD6zLWE9ZlWn+Mfl1yXq+MftH6
ZvSL1kOjX7R+Gv3a67zeGv2i9dnoF9Zz1mWs/6zLpBemXZWc9cW0i/TItIv0
y7SL9M60a42zPpp2kZ6adrH+ol0j6m8pGfMqWunyzKFvvP2G3lW6fGV1g+05
4iOULg+efbJ3o2vhSpevHT87pGJmld+6FF2zRM6Ud5UuL1nQJaTNPlUf63Gn
CeW71oxRuux6JfPRN2lilC4nLh+S7PueKKXLfrELv2euF6V0OfXLDqXCLkQp
XX6xK/hozkfRSpfLNN5YIO/ZGKXLvi+fjGyXMFbpcnz9n/98dzNG6XLD3c9y
vciu6m851r11ffcjSunyvttN3r4cE6V0+c72sIqJJkQrXQ7t6Ve35sgYpcsV
hm49cv1ljNLlnR6XrUMvVX5rba/V25b/GqN0eX6+1sUa+UQrXe6z5uIvv7dX
9bdS1c6T4UDNKKXLaUL/arDyXLTS5QfzPlbbXiFG6fKAdqHzrGwxSpcdVpq1
saeilC73uN6x9JEjt5Uuh26cuzxoQLjS5V19hp168yRc6bJfw+BtYWG3lS7H
lJh7Pu5RlNLltd+blh5dKUbp8vbuP3ZOrRCtdDnm/fY+G/fcVro8rdlhzyrv
wpQu7y7xIKzCgzCly5wf7Yql8tGu/12fLxbqz7qM9rIuU3yMfu10jqfRL4q/
+X3qL6Nf1L9Gv/o7jwejXzR+jH5hvLEup5HxybrcW8Yz6/JiGf+sy+tkvrAu
75f5xbqM+ci6HCLzl3UZ8511eb+sD6zLWE9Yl2n9MfoV57xeGf2i9c3oF62H
Rr9o/TT6ldV5vTX6Reuz0S+s56zLWP9Zl0kvTLtIX0y7SI9Mu0i/TLtI70y7
Ljvro2kX6alpF+sv2rVnwKFUnQtHKl2e9G3c3S8Bt5Uun7o6o/ut5mFKl8+c
iO1VL3mo0uXAoW0++ZdR+a3FHeqVmesernT5XqfGjdN3Cle6nC40taPW8XCl
y+Xyn3/QMXGE0uV6Lq1ndt8XqXR5rV/NLseucf64gES3EyRL5BaudHnAlKkT
x34PU7rc4ZXLg99rqfzWvL+2D9i6PVzp8ovAPteWZo9Qupxu0YtX13eq+lsN
fpmfplev20qXn3Z8t2rrw9tKl4v6p/nxPDXnjwvIeXJPmtwDI5Quz300dfS2
l+FKl98uHv6m8shwpct+tVN5fcoYrnS5XMzdbkduhyldHhTZL937+uFKlx+e
fDqlSvY7SperJMq29222CKXLKS6trlclNlzpcuIbw98tmhOudNm/auPmY8qG
K12e7RGUIENImNLlcR+8L9X/KVTp8qtD6xsm/xKidPnirjajfYtHaF2usuTg
M+uO0uU2d6yEj26EK12e2nlH/k21wpUuuzWafvyRa7jS5ckpWs/Oseu60l9O
R/25HNT/f//uFwv1VPor7WL9pTgYnXrjHDejUxRn8/vUL0anqB+NTjmc+93o
FI0To1MYV6y/f8o4ZP0dIuOW9beCjHPWX8wL1l/MI9bfOTLvWH9zyTxl/S0u
85r195msA6y/WDdYf2mdMToV77wuGZ2idczoFK17RqdonTQ65eq8rhqdonXY
6BTWbdZfrPOsv6QLpl2kI6ZdpDumXaRTpl2ka6ZdAc46aNpFumnaxTqLdv3s
V2b0zH2hSn8/dpg08fqAUK2/9zbue5QvROlvwKS6na56XFX6+9u+Sp1LNLqs
9LfGtriNU5dfVfr702ePQ2s63lD6u/924LNkQ24p/f1a9Ecd/5TBSn+n70sU
UW5ZqNLfRk2L+u5vEKr0d+CRA8fjeoUo/V3+4E4Ov/hgpb/LOx1c5XIvWOnv
E+/MtW4/C1b6e7ZX3mJD04Yo/d3geuphi24hSn9LXB/ZZXBoiNJfr4fdl7b3
ClX6W/eP51MGruT8cQFjg6Z1fV4iROlvtQLpZzf5u56sv39mT1j+aWCw0t/7
3qd3TzgTrPT32Yrk9Sc8Dlb6+6Jtrhx1bqr6W617n52Sa1So0t/k7gELS18I
Vvpb9XOXDd9bBCn9XX69z8rBY28q/Y2+HDusQ8drSn+L754cNzDqstLftHua
Lp/vf1H74ja+Wa+1uKn0N2/Tj4+2fQpR+jvueLphLeaFKv09dOZNtip/x5/1
d3iBOu1y1Lil9Ldkk6oHchS5pPT3yvErf54ffUzpL6ebfRGVg/r/79/9YqGe
rL9oF+svxcHoFMXN6BTF2fw+9YvRKepH+/+Lnfvd6BSNE6NTGFesv61kHLL+
vpZxy/obJ+Oc9fexzAvW30cyj1h/a8i8Y/0dJ/OU9ddX5jXrL9YB1l+sG6y/
tM4YnfrDeV0yOkXrmNEpWveMTtE6aXRqsPO6anSK1mH7Oy5Zt1l/sc6z/pIu
mHZ9/OSkI6ZdpDumXaRTpl2ka7b+OuugaRfppmkXdHbLp6tjPf9KeKpa7lMt
R3//GFCrcf/Qv+p6+iC9mDU905icrwN+Kjti0piSdjraW7l82t1Wek+fL/+J
2yszHvx6XyrV4Si+e9Tf+6EcxKfUkqFjE7ZLYdIr/Kf8hwGZUzvGeb5MbtIR
t0HZ5+z8ujEFpV8JaBYY4J7B3S4f8Tzy7vcKg/p5+tT6T31CTX0yeLvGlU7v
5VOP5im+t9zya+1c3hm+BFSX+Gy//tOn1/vMd4wBFeh7Zud2fQlY0KHdgAGn
7HLM+D+4NajsGLsc/i6a2mUV6Dtq6eF4To+0+t95NKNdLi9TPvqr6/5kW4ba
33kGlOPyJT/i/+edwHZX/7LzIx3fYzv3+0Or9tzHSVaus9MxDj+cWV2/wGQv
au/DgIUdZw4+08R8Fwpds8uX/GZf2mrEuMGL7fz8HTiNT6vnsT2p95zger6z
rqc82KLFr3b5vjJOPk313X/zm12+L5cv+TF+BszJnn/dWzs/0vF9LM0jKygu
eqxLMi8eD1ahzUP8B7319HEJ+898Cagi4+qV1TjzuDeePs2ddN/+zty5v74E
JPky3CtoOPeX/b09yse4ulHQe/PHPF6mfP5eHeU3lfF29POMTLXypaT2HvA2
7XXuL6vMxQ6pMoaq/jLf4aM+JWR8Fj9a9P3UzHZ9Gsl4wHfRyI9xuD/26fa7
I+389Sk/6lNOxmeGJzUnLOpp16eOjE98/4z8GLcXMrqcz1lfjU+TH/UpI+P5
0O2IQ3NP2vWp8y/1x7hNsTXdTEd7Oz/Sa8r34ahPcRnPBQYm8rj6Xs1HVX8z
zkMmN02wX60n5lwD6tNexn/wp7kHNwbb4+2f/j1zYrV8x478GOf1XLoWHHKJ
87u4ID+tk1bQzt2jtrZW66SpD41n6/iTDbEdu6nxbM5ftPln3Q6oIfOlbMKF
HcbdxPf/50548zkFp/Hz9zgVPXIeP/b8QvmYF2lfjor7mMjLlK/OQTjH07p8
rULOWkNUPL1XUTwxL1LkqRWUIIUnjwdrr5wvQH2KynwZNrJ/uWmf7faWpfog
v/n/kcvV/cLa2/mRXgznKaQ+pWW+1IxPFTIviV2fWjLefpdzEMiPedEw84fJ
GaukoPUqzpor+VEfzJf4ZZNy1U9g18eX6oP8mBdNszwe63MiucmP9J9xTsR5
PbGWxfyVZfLf+Z3jadeH1kPL69CQFjOmpeD10JyXQX0qy3yJCggLGbUxmalP
HaoP8mNezKjXKjowg50f6UNx/sV5/bdelD82vKCfWv/tczrO49kKG7Q76kFr
NZ5Nfuxzqsp8KTmtYvDNJZ5mn1NPxj/yO4+fLwHYFzmPH/t8EMrHvKi/5Y/J
z5LY5fP5GpSP+ZLq+wDvCr5JKT7HvHE+iMaD1bV/fIlXYXZ+PjeE+kBf8oz4
ceuGbwpTHxkPAQtkPDjvA+MCOqbf9qNX2uS0D7TPAaE+lWS+hCacWtrzpl2f
ZlQf5Me8aCvlIz+fb0J9ysp8CZfyUZ+6VB/kx7zoIvFxbq99Xgn1KSLzJYfE
h9YTi9cTzIt60r+0Hpr8qE8NmS8ppX+d62/XB/kxL6bJfEF+pONcFa3/FsYz
rf+q/pgXqc/sajs1htdD+7wY/Av05aXMR/iXinSuinxEQBopn3yEmV8oH/PC
U9YflM/ntlB+K5kvd2X9cY7PHm/Eh8aD1VjWTxoP5jwa6gN9wfqJ+pTB/lDq
4+zv4gKw/jv7u7iAabI/ofFsrRvbPdxvuD0fsR/Dfgn5MS8WiX7R+Df5UR9L
5ksN0S/Up5WMt3Oy/0R+zIvkor/I70f5UR/sx6C/tD6o+mNeYP9A66E534f6
YD/2e4sBd4p2suvzT/+eP3FJ9tvIj3nhK/sx5/wuLshP679VRvZLtP4bn7vh
n/2Y8b/wF1//5Vwb8leW+YL9HvL7yvjHOT7iAwHQL+ID5jwjyje+WPa3X4kj
4TwgxdOatvuFS0QTL46nN8cT8yK57M9pPFhh4gdRn5IyX3qMGu/VMomXqU9j
Gf8J5ByiczzjAs6Lv/hKvAv5UR/oy0HxFzSezblL5Me82Cf+CPn5PCbqI/u9
gAdf0jfbcsSuT22pT0KqP+ZFafF3X4nL4Xwl6gN9KSb+jtYTcw6U1kPruvhT
Wg9NftSngswX+FPUpwbVB/kxLwaKf/9K/BDnQGn9t+DHaf039dn0j6838wKc
B+k1ZV7cEg5A8yvgmPgdml9mvqAcjPNrwjEoDpZnR78P1Wd5cRzMOVbqR2uJ
cBXqR5Mfv1sE41y4inN74wLAeVC+rMPWAuE8KL/Vv9QH4xPcCfn5vC1+F+MW
3AnpGIe/CQejeWp1EQ6G8htS+bTOWOuFy9E6Y8754ncxDsHlkI5xdVR4I62T
FvghrZNmXaVxFQBehPQu0u/gnBQHa4hwUaSjX34Wjop0xLm0cFekF5a4gffS
OLTAe2mcW7WJG4MnT30fXyd9nIfiyWvfP9154Ym74smHgwOP7hrmoXhyqViP
FQ+6uiue7Cbn1Jgn9zw1d3F8NXfFk9NeHta++lKH4snZf9t9vXB5Tr8ScC4y
9bYfd9wUT546rsqZoUfcFE++mqRRUs/9DsWTcU6QefLSNClaFtzqoXgyzuEy
T/ZMeTC+ervEiidffPs48HRpD8WTuRzw5Ogrh3P8ts9N8eRve5qOHnjCTfHk
PWk8Ttze6K54simfePK3wx4jmnZwVzwZ54iZJ7v/Wvdm9Tg3xZNvHK9dYFZa
h+LJjvY+TysmdFc82ZRPPNkx+9m2/3/+lHkyzksyT84bfmOqo71D8eS6A3x/
y7vWoXjy5eLpz4ZtdCiebMonnpwq4YSTjikOxZNxrpN58uvzMTETHzsUT57w
ef38HsXdFU/ul33XkktF3BVP5nGIcdUupGeb6vc8FE/GOVDmyY7PazI+eeZQ
PHmhnJNlnlziSdb0iX/n9h7wNu0lnpyqf5dS8YtUf5nz48yTp+/6uVDZlQ7F
k5fIeV7myaF+WZ7tb+ZQPBn5mSfvnVe57ZEbDsWTcW6defKwp5UOf//sUDwZ
+Zknh4y5uD0ks0Px5MVUf3PeuWnwzy3/XpeYJ8fJuWbmyasnHVubxVvNR1V/
jPMSqzal/HDIXfFknF9mnrz89PynhU+4KZ6cQ85fM0++P+/rg3YrOb+LC/Iz
Tw5/VX58o2/uiiejPsyTR07r7nlmnhrP5t4A5smVOwwd36oYztfbPNmcZyee
/IvoEfNkzC/mybfL9kg07LmbKV+d3yeefC5jFZdq/iqe3hxPzIt9M3+LTXBJ
jQdzLwHz5FYvHqe5tMquT1mqD/PkzaXKhLdNb+dHurlngHhynux72yf0cyie
jPP7zJPPVZk97cp0h+LJyM88+VaSKrXvh7qa+vhSfZgn19lccGjdbnZ+pJv7
DYgnt2w9/LN/InfFk/+k+mNerDrwvmvYQXfFk3GPAfPkxynjqmSvbdenDtWH
ebJfqSwjAjLY+ZFu7m0gntzsk2/5b9U9FE8290sQT/7y+/BLve94KJ6M/MyT
x4W8eVO+kLviycjPPBn7IufxY99rwTw5cO7KrKlXOhRP5nhivlgb67Ua7cPx
OeaN+DBPDpmYMWdMPzUezH0XzJMnls62P/aZm+LJGJ/Mk2+M7j9ocBc3xZN5
PMPv187Qyj/mg12fZlQf5slBUj7y870czJNrSfnMk7n+mBeID/NkXk/g9xEf
Wk8sXk8wL9C/tB6a/MyTK0n/Mk9GfZgnY74wT8Z9IMyTJ8h4pvXfyvY/18Mv
VrJx10a/2mXnRzrGM/Pk5jIfmSdDv5gnJ5XymSdjfjFPXinrD/NkLh88+ZGs
P8yTER/myVg/mSfjHhXmyS1k/WSefEnqwzz5vKz/zJNxLwrz5Ow3s7le3Oqq
eDLub2GevE30i3ky8jNPLiD6xTwZ97EwTz4k+ss8uY/kZ57cRvSXeTLXH/MC
+wfmybiXhnnyzYSFzmU+66Z4sr/st5knYz/GPBn5mSf7yH6JeTL2P8yT24q/
YJ68X+5jYZ6M/R7zZNw/wzz5k+gX82Tcw8M8Gftb5sm4x4Z5co08FdPPOKbi
6c3xND5a9ufMkz3FDzJPTpKwYP6wwe6KJ+P+HObJ8BfMk5GfeXKo+AvmyfCn
zJODxR8xT04m/pp58t3ATnN+Oe1QPJnrj3mRTvwd82TcC8Q8eZr4O+bJQ4U/
ME92FX/KPBn5mSfDnzJPRn2YJ8O/M0/G/UXMk/uIH2eejPuXmCeD8zBPfiMc
gHnyCPE7zJMxX5gn1xOOwTy5QdsmG+duUXEw9y8xT3YTrsI8GfmZJ+cWrsI8
+apwHubJrsJ5mCdzfTA+Pwl3Yp6Me6KYJzuEOzFP/i4cjHnyLuFgzJNRPvPk
C8LlmCfjfirmyTHC5ZgnTxPeyDx5kfBD5slYV5knTxRexDwZnJN5Mrgo82Rw
VObJ4K7Mk9cI72WeDN7LPHkacWPw5DYb/F2Cit2zmCdvK5iyWocCdjrG+dW7
kzpdy3jPYp7cqnL9TrMG454Zfb8K8+RNSXK9G+dmp4MnN+rz6pHbj1iLefKY
FSty3Kp0z2KePHLomW/X69jp6N/UHgsbH955z2KePCfF+36PNt6zmCfjfhvm
ydWTebtum23ujTE8GfdHMU/+s8jBp55D7XIQt4PVs3TbONQup/y/lAOenHpW
5wHvwjg90hqW50XF2V73LebJCxdur1V2ql1+OS6feHL1QWt+i3ho50c67r9i
nry6Xf36Q7rb6RifCc+6zG3b4L7FPLm/f51d/rnMPTyGJ5vyiSenjsiep0UX
Oz/Sce8W8+S5VQYm6ziZ6/nOGvB4R42xhe3ywZN39Hg70ueiXb4vl088ucLl
1eUuHLHzIx33ETFPLp6+X/joSDUerInbn4yJPXrPYp48ZEijVxt23LOYJ/M4
xLjKF1Fm6Lxm3F/2/WbMk3uPKH7j/XO7fKTjfifmyWt+zefa/i2394C3aS/x
5AdPeo/4c4XqL3PvGfPkV+0WTW/62K4PeDLuJWOevK7S9H3vq963mCcjP/Pk
vvWyD6lT1a4P/AvuW2OeHLQ3+FDxAmp8mvzMk6sN6lBg+yS7PnX+pf4Ytx+6
PzqxtridH+kX5T4u5skHmyZ71SBIzUdVf7Mfu/CLm/92tZ6Ye+SYJ6epWX/v
nng7/v/075kTrnJvGPPk9Zs/9S0dy/ldXJCfefK5jx8Xr22p1klTH+bJQT4T
N3dso8azue+OefLKMU0SNOqG+9ZsnmzuYSOe3Fz0iHky5hfz5AUTSsb6b7bL
L/8v5cO/PClQ6WHANBVP70QUT8yLjAMOfwnrf4/Hg7lPj3ly2m5LlidcZ9en
LNWHefJvy/tljmtv50e6uR+PeHK65nVio/rY9QFP/lXunWOevO7E90grDa9X
9r1/zJNzzn23KzapXR9fqg/z5KeHu3Rb+T7W5Ee6uZePePLrQnnfzHsZazFP
7kz1x7wYs7/98KYuaj009xMyT3Ysvt56x367PnWoPsyTt28YOfLlTjs/0s19
g8ST578tFOVTWq3/9r2IxJPXeh95kaCcGs8mP/PkQ4WWuIeWtfc54MnIzzx5
tuyLnMePfR8j8+T1zy9teJrQLh/pHE/Ml+i4d/NdF3N8jnkjPsyTy0fVHHh2
hRoP5p5G5snpus77Oc/rWIt5Mu5RZJ48YFmPNcn3xFrMk7vQeIbfL3PmTvPL
S+36NKP6ME9G+cjP90kyT0b5zJO5/pgXiA/zZF5P4PfTSHxoPbF4PcG88Jf+
pfXQ5GeejP5lnoz6ME/GfGGejPWTefJhGc+0/qv6Y15sOVlmaPehajyb+zmZ
Jy+U+cg8GfdYMk/eKuUzT8b8Yp48VtYf5slcPngy1h/myYgP8+Q/Zf1knoz7
P5knv5X1k3ky6sM8eb2s/8yTcZ8n8+RfzsaGbKplxwf7Mdw7yjwZ+sU8GfmZ
J2cS/WKefEv2n8yTs4j+Mk9GfubJqUV/mSdz/TEv5sv+gXky9tvMk0NfDphS
76Jdn3/69/wJH9lvM0/2l/0Y82TkZ568QvZLzJOx/2GenF/8BfNk3CPKPPm8
7PeYJ+PeVObJ/qJfzJNxfyzzZDfZ3zJPxv2rzJMnXfp9RJ4c9zme3hxPzIv3
sj9nnpxD/CDz5Nw5vl6d+NN9i3nyRbn3lXlyqPgL5snIzzy5svgL5sm455Z5
8mrxR8yTcf8t8+R6dbMevzHBrg948iWqv7kfQPwd82TcZ8s8+YX4O+bJuHeX
eTL8KfNk5GeevFr8KfNk1Id5Mvw782Tcu8s8eZD4cebJqA/zZHAe5sngAMyT
g8XvME/GfGGe/JtwDObJ68teexDVVMXB3BvMPBlchXky8jNPnidchXlyIuE8
zJPBeZgnc30wPmsKd2KejPuNmSevEu7EPBkcjHnyYuFgzJNRPvNkcDnmybhX
mXlyGuFyzJPBG5kngx8yT8a6qniy8CLmyeCczJPBRZknNxWOyjx5i3BX5sk7
hfcyTwbvZZ7M3Bg8+XKLzrnzpo5SPPnmvq1lU2WNUjz55fazq0rfv6t48q/h
m9adzx6teDLuBWWe3L9GRL+vrSIVTz5Xca5f6st3FE8uvrpWqgotIxVPbnvQ
d+mecZGKJ0+YesBvX3yk4smRPfKenZUgRvFk3MvKPPnNgNDc4zNEK56Me1CZ
J1ep9sfal37RiienufDL6t+fRCmezOWAJ7ssG1Jk47MoxZP3RCVJ0z9JtOLJ
H69mKtcnV7TiyaZ84smDdrQ4lXxdtOLJuLeZeXLaIxkfz2odo3hy1d8qR2+p
HKN48r2kKSf+UixG8WRTPvPkBZXKfeoRo3gy7qdlnvwsosG8wrO4nu+szNMP
7d5aKkbx5HJdNr/+HBGjeLIpn++72FXm4Mv/yo903FPNPPlDggrZdq5X48Fy
Kz2t/dsZ0YonDz31pIbf3/mZJ/M4xLiKnr5w3IclUYon415u5snRWbqdDo+O
VjwZ9xIzT87x9uqKo5+4vQe8TXuJJ2fKVebW9gOqv8x93cyT87iGPcl+K1rx
ZNynzTx5w8OU/c7Wi1E8GfmZJy+ckGbh1BwxiifjnnDmyacreM9a767Gp8nP
PDm8p5V76tQYxZO5/hi3OVq33xEeHq14srvcI808+U2c/7ase9V8VPXHOG+/
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
oS/Mex/J/pB57xDRR+a9DyQ/817oo7p/mOqPcQ59Z95bVfbDzHs/jFpcdVnS
m4r33pf9MPPek7JfYt77QPIz760q+xnmvdifMO/F/l+9Z7cvUUS5ZaGK93rJ
fox5b4nrI7sMDuXx8yUA+sK8t5Xsx5j3XpH9J/PeDa6nHrboFqJ479aq5Y7X
9b6leO8DiifmxW3ZPzPvhV9j3hvxMPfWDgNDFO/9o1feYkPThijeGyL7f+a9
yM+8t5/s/5n3Vpf6MO+dKf6FeS/8L/PeRk3exY96Hqx4L9cf8+Kx+C/mvU+8
M9e6/V/1gR79Jv6LeW8d4QPMe2uIf2Tei/zMe7uKf2Tei/ow77XEXzPvXd7p
4CqXe8GK9xYSv8y811fqw7wXHIZ57zvx6cx74UeY92K+MO/dKZyBeW/AhL67
VkaqOFjLH9zJ4RcfrHjvK+EezHuRn3nvMeEezHvbCYdh3ptMOAzzXq6P+X9t
4ULMewcfOXA8rleI4r1vhQsx73UIp2Le20E4FfNelM+897pwM+a9jZoW9d3f
IFTx3nvCzZj3PhceyLy3p/A99Z6drKvMe9MLz2He21s4JPPeH8Itmff2Ec7J
vBdclHnvIeGxzHvBY5n3gus2+s98cTW8t9Gc3etj53j6/PinveB4AXhPEPnB
FSvmd5sUXDiFSUf+Xn7TP0fkSm7SsY9tfC39l8cHkpnya8t4aCrvJyI/0r3r
bPnyrloyk15N+nHg4WXtC+y20//pxQPe23LNPNs+g/27LST+s9N1Gv04g13P
xhL/spNXriidzG5XRYm/V/lVmQfNsNPhH5+9XLVqr8OuJ/xm28e7O5ex7HTs
h29Gnc5/coidjvWq4LKWdYu39fLZKjwQ9cR7i98lPuiXCUnPj75V205H/L1f
Xy/UvJidzv2FdMR/2+AP6Wdt9jS/i/bi3cnv1C9419LUR+J/NP/MTlE97XTE
H++NIh3t6nT2/NQYt5Q+2+R3Ebee8v4m8qNf8M4p0lHPpp2fnEid1U5Hv/wk
77oiHeV3i19f1Xcb3l3V/YL8SMd7u0hHf93IFrRrxee/4yacCu3CO62NhFOh
v4psaNe13C5Pk47+8lvjn2hXDS+Tjv4KkndskY7+Cg3wvXDwiZfPt3+JD/Kj
v/B+rqmP9JdfgGfNcn/HrYkznwnA+87Ij368LO8IIx3trbngxIHI014+2yQO
iHOBgYk8rr6324t6npf3ppGOftw8dnim/InsdPTjdHlfG+kov7DL/bDbzTzN
76Jf8C4z8qMf8c440pH/2IoWUwOz4t3bR6a/3rzdNDhLCS+Tjv4q0Wdi/Txt
7HSOG9LRXy8uHexf5K2nT8N/iQPyo7/wXrmpj/RX4me9+1Xz+Lu9//k7Bp4Q
UOyX/O7PI5Ob/OgvvJOOdPRX7jwP5pUtbKejPninHunolyw9Fry90txOR7/M
+VLgY5yfnY5+cQRtKfY6c3KfBv8Sf+RH+rgteXp++NOuD/old6n5Ezq6eBo9
Rr9UKh3ZwTPOTke/jPC1Xmx2t9MRn6ISH6SjXzZmdbN+X5TMpCP+mRM/GFyq
QVL7dyX+l5Z0HTv2bBKTjjgPyf1s2uUydjrijPx1KG5zJW7Ij/jz7yL+XE+U
U4TahfhzHBDnNl97hLVcb6cjzoinxN9CnBF/pCPO7tK/SEec5zuPB8Opssv4
GXMuZ6Eqn/Z5o70/S3uRH/GncWgh/nmcx631L+PcQvwxX6o4cz/zrj3yoz40
7yzEH/MX6Yg/zXdTPtYH39Z3yreoe8mb44/8Rndi5ros7mqXg355LeuP/H+H
6ResV0hHv2A9RDr6Besn0tEvWG+RjvhjXTK/K/GvJev8N+d9vnk/HflZL5CO
fmkoutPsX+KJ/OgX6BfS0S/Bzjrog/pDB5Ef5eNdeKSjv+qL/iId/YJ3z5Fu
fKXouPy/rQ/6Be+eN/uXOMj+weTH/gHp6EfsT1A+0ns474tU/JGO/qV9kYqP
qY/0b0fZj/2jU66mfOxvN0t9UD7tD33QXtrv+aDfjzjvD33Qv7Sf9EH/Yl+K
+qD+2J+jPqg/7ZN90O+07/VBv2Of3Pxf+h35DceW99CRbt7Rk3247OdN/2I/
j3T0I/kCFWekI87kO1QczO9KHMjXmH4hH2T6Bb7pn/8/0nFDfvQX+S/TX03F
xyEd5fRz9n0m/j7OPtHE2X38abdumezfRZwbiw9lf/qg1d6ltw95KH/6WN4n
Yn+ay2P+3ZC1djryvwwuc/7bN4fyp8ujss1p3NCh/CneY2J/WuOJR/OtG9yU
P/2zYb8SI6vb6eiXmSdCktV77Kr86X1Hnb41Yu10xL9c44Dr1h07HfGv5nYo
e0oPu3zEv/7RHYMelrHTEf9NISWC2o+z0xH/7/FHikZetNMR/7m5Rt8/lcqh
/CneVWd/+nDGFc9M2RIrf/ptxvmBlzJ7KH+K/mJ/+rpxlvBLhd2VP8X76exP
0S/sTwPWTGhXYKdD+VO8X8b+1D9//VsbFjqUP8U76exP8W4a+9PpXZ9OfnHJ
ofypn7wTx/50cMtOlxqXdlf+9If0C/tTvN/H/tSqNSD7zZPuyp/i3Tf2p5Ur
Tkn1/KO7SUd/BWYreL3eCDud351nf5rydWi9Z58dyp8iPuxP8R4f+9NW8U89
vNc5lD/F++DsT/GuOvvTSbWWZWs01aH8Kd4HZ3+K99bZn/709lgXl0A7Hf2I
98TZn5YuPNFl3Uh35U/xziP7U7xbyv60X9TKBH/O8FD+9PPKnP7RLR3Kn6Yu
sKB0vUA35U8RN/anpw5mOpajtJvyp4gD+1O8f8r+dPJfjz6ODHVV/hTvU7M/
xbur7E89Q0PWJ492Vf4U796yPx0YWfWnazPdlD/FO7/sTwte/vHS5ZxD+VPE
n/0p3l9mf5q/e1CR1q4etk+Uftm2eUnfrdUdJh390qtqso3TKrqZdI4P0tEv
xfLUXDi1tp2O+Jv3u/G7Ev/UDzp/mrvdTkeczXvZ8oc4p5H87E/Ne+Xyh/jz
7yL+JameKOcEtQvx70txQJzNu/Dyhzhvl3iyP0X82Z+if9mf0ngwPmiAjB/2
p2gv+1Mah8YfpXAet2b/T+Pc+KApMl/Yn+KdXPanNO+MDzoj85f96TLn+W7K
TyvrA/tTxJ/9Kd7bZX/6RdYf9qd9ZL1if1pG1kP2p3jvmP2ph6y37E/xHjH7
02myzrM/xXus7E+hF+xPoTvsT5dLPNmfQr/Yn3o666DZt0MH2Z8mFz1lf3pW
9Jf9Kd5RZX/qIzrO/vS1vKPK/hRxYH+K/QP70wGyP2F/mtt5X6Tiz/50ivO+
SMWH/Sn2Y+xPfWV/y/7U4bw/9EF7ab9nfNAp5/2h8Tu0nzR+55XsS9mfYn/O
/jTGeZ9s/NFD532v8UdfZZ/M/nS49Dv7U7yvyv4U+3D2p9jPsz/d4OwLVJzZ
n1Zx9h0qDuxPydeYfiEfZPrlqfgm9qcPnf2d6S/yX6a/VoiPY3/6ytn3mfjn
dvaJJs6tKj1/u72qh/Kn8KHsT0v1q1B+bt17FvvTnfLeAfvT9efKJ/jtfqxJ
R/7VG+runfeHnY74+7plWJ/ucKzF/hTvO7A//avbo4WrdtvloF/eV03af8Vx
Ox398iZrSd9lgXY6+uWtf8KeYa/sdMT/be6gaaky2r+L+GdsV3LZ1/52OuLv
s3jh1keBdjrify2NI9/Tb3Y64t9y0fBNz0veN+lmn5DvTb0GKe9b7E/xTiv7
07Erv3s1qG6nI/7Xc/ZtGlXJTuf+Yn96e+2mgeXn3LPYn+I9Vvan6Bf2p6s6
5HR7UczOj/jjPRT2p8tmjcnb9/p9i/0p3l1lf4p3WNifdph5rOTLeDs/+uW8
vDvD/nTzgk07347Buza6X9if4j0g9qe1e/gP9Qz9O27kT/HOKfvTduObX30y
7Z5JN9x7cYOJa3+28/M7tuxPx2/PmOvD8fsW+1PEh/0p3p9lf7qv8qqWxV/g
fVLbZ+G9UfaneKeV/enk3LNn+Uz5ux/Jn+K9UfaneL+V/WmT5FO+FQyz86Mf
8T4p+9OiDzuliG12z2J/indC2Z/inVD2p7NXpS39tgTe5bH9adfy+bosv22n
o79ic/T6XifVfYv9KeLG/jTN18a+a4/es9ifIg7sT/GeGvvTR9crB23M9Xd7
yZ/ivUv2p3jHjf1pmXc5o69ettNRH7yjx/60a7Zid57tttPRL3gHk/3pq5lf
qh/8e51nf4r4sz/Fe47sT+c1SlD8V7d75vs58/9HzV3iXgy009EvOT+X+V7l
XaxJ5/ggHf1Srdn4sk9W2OmIv3kPFL8r8d81e43nozF2OuJs3t+UP8QZ+dmf
mvdD5Q/x599F/GtQPVHOBGqX0X2KA+Js3pmVP/P9gMST/Sniz/70tfQv+9Mu
zuPB+KDuMn7Yn6K97E9pHBp/ROPW7P9pnBsf9FjmC/tTvLvH/pTmnfFBqWX+
sj/t4DzfTfkxsj6wP0X82Z/i/T72p1h/2J/+LusV+9MSsh6yP8X7iexPW8l6
y/40SNYl9qczZJ1nf4r33difQi/Yn0J32J8inuxP8T4d+9Oxzjpo9u3QQfan
eLeO/WlB0V/2p3iXjf1pe9Fx9qd4l439KeLA/rSO7B/Yn26T/Qn703nO+yIV
f/annZ33RSo+7E+Xyn6M/Wkl2d+yP13lvD80Poj2e8YHrXTeHxq/Q/tJ43fu
yL6U/Sn25+xP0zjvk40/2uu87zX+6Kbsk9mfot/Zn+K9Nvan2IezP8V+nv3p
FWdfoOLM/jS9s+9QcWB/+sbZ15h+IR9k+gW+if3pXmd/Z/qL/Jfpr7ri49if
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
30r6aPbz0Ef2rbjPn33rdtFl9q24r559a3LRd/ateFeOfSviwL4V+wr2rRNl
38K+daLzfknFn32rj/N+ScWHfesw2aexb8W+l30r7RuNP6J9oPFHtG80Poj2
mcYHnZD9KvtW7NvZt9L+2fgmN+f9sPFNwbJ/Zt9aQvqdfes6uceefetQ2Z+z
b8U+n30r+QUVZ/atx539iIoD+9Yizn7H9Av5I9Mv1cRPsW91c/Z9pr/Il5n+
gr9j30p+0MQ/p7N/NHGe9G3c3S8Bt0064gx/yr51RkRbl53zQ5VvHSD3VrFv
bZ09TaY71+x05A+4t3Hfo3x2OuKfPOXj14/S3lK+danc08W+NWBS3U5XPa4q
37p0xflOPwpfUb71t32VOpdodFn51jZFFiVqO8TOb7673ha3cepyu3zEP3fQ
552pvl9TvjXRZ49DazreUL61da/H9/suuKl86/7bgc+SDbmlfGvEpAcZW1QL
Ur41Su71Yt/68qfl84YMClW+9b7bgIk3okKUbx0o/cW+1e16zfhVhUOUb8X9
ZuxbcX8a+9aMOWt1yPdnsPKtuNeOfevpG3++ef4oWPlW3PPGvhX36bFvbRqS
3XuLS4jyrWfl/kD2rQeODEz8Z6UQ5VsPSL+wb8W9juxb457+nLvb6hDlW3Gf
PPvWIre2zX0aFmLS0V9dLh77sLubnc7vBbBv7Tjm5vC1yUOUb0V82Lfi3kj2
rWnzzH6Qxdx7b/uv5XKPKPtW3IfPvrXL7nvvfjkfrHwr7nVn34p78tm3dn3+
ZMyEEDvd3Esm97iyb30+KkPZrq1DlG/FfezsW3EfO/vWXI8GNimTJ1T51nzj
569cniJY+da+D3tkK9/7lvKtiBv7VvdS0RG5i91QvhVxYN8aJffism91VCxZ
omfWq8q34l5x9q3F5T5e9q3rd7+o8tOpS8q3ppP7k9m3Hi81pHfabVf1/6vK
/czsW5+3WJfQe2uQ8q2IP/tW3EPOvrXJNMfu8dVDlW9dOmS1VeJEkPKt80N6
HSkZdU351uK4B17+0C+JlzUJmVD6rPKtuAcb+dEvV3CfOeoj/cLpiD+nI/6c
jvhfp3TEP6XUE+mopze1C/FfKnFg3xpE5Zvv3HDPv/wh/ogz+1b0C/vWZ9Lv
6v9bnceJ8UeHZVyxb70h9WTfSuPT+KYNzuPZ+AIa/8Yfucs8Yt+Ke5XZt0Y7
z0fjjzxkXrNvpXXAlN9P1g32rYg/+1bcz8y+Nb+sS+xb88g6xr71payT7Fvj
ZF1l39pd1mH2rY9lvWLf2lXWf/atuL+Xfesj0RH2rdAjdV5V4sm+tYboGvvW
zs76aPbz0Ef2reNEZ9m3dhVdZt+Ke3fZt0Lf2be+lXt32bciDuxbsa9g37pX
9i3sW48675dU/Nm3NnLeL6n4sG89Jfs09q1/ffpn38u+9Y3zvtH4I9oHGn9E
+0bjg2ifaXyQu+xX2bfWln07+9ZY5/2z8U2DnffDxjc9lP0z+1b0O/tW3MfL
vhX7c/at2Oezb23u7BdMnD9+cvIXJs5ZnP2IiUN1Z/9i4tDa2e+YfiF/ZPoF
fop962Bn32f665SzLzP95Sn+jn0r+UETf/KPJs4fO0yaeH2AHU/EGf4U/gXx
yZTaMc7zZXJz3w7i0CwwwD2Du6fPJtk3mu+0r//06fU++35gxAf3gP2g/Tbu
H8P+E7+7sOPMwWeaeOGcr7rHFX4B9fk01Xf/zW9ePk1p34774uR+Y+M7guR+
tn/Wt1em/q+sxpnHvfE06RhXxY8WfT81s5fPRvld8x3jk5oTFvVEu16Z+h+6
HXFo7klz/5u6v7QB1TNM6vkF9ZF2BX2ae3BjsKcpB/2I+zP/KSfU1L9swoUd
xt30NPXBOLx8rULOWkM8zf056JdVcl9iMykH7cW9iJ+lHHN+Kj5VyLwknj4t
JT/aG79sUq76CTx9evq2dszMH3gC7cK9jsiPdkUFhIWM2pjMlI9+eVH+2PCC
fp4+9WVfYTjktIrBN5fgfrZQ065U3wd4V/BN6tPg+bn6z8/9cQLtwj2cTaUc
cy/BiB+3bvimMPVBu0ITTi3teRP3bR44wfdwVpX8mF+5pJwaqKe0K6XUx5f2
XbjH8p/17ZVp10tpb13ad+Eey9pSPtp7V+L2VcpBu5bF/JVl8onkPi0kP9q1
fmz3cL/hKXwa035ygdzPmeCfd4LMvqWm9G8d2j/gPsZm1K690i55b8jEYX6L
AXeKdvL0aS31Qf+WkfEp89fEAff0ol1o77TdL1wimph7gNU9iigHceg5arxX
yyRephzE4aDMx8a0/zHrg5SDODz4kr7ZliNeJj7o92KyDiC/ue9a7nluSHqH
+wNlfTPtStHR70P1WXY5qOcCWfe+kY7jXkTkR3267E+2ZegyxE3f17dD8ptz
8bI+Q/cRz+1yHyB0H/XEOo/8fO8f8qP+P4teCI8yevRT2RGTxpTEfaf6fj+U
Y86DN+4f+ldd+x5y9Evay8PaV1/qUHp0LjL1th933JQeLU2TomXBrR5Kj3Dv
B+sR7hthPXK093laMaG70iPc28Z6dLl4+rNhGx1Kj3A/DOvRG7mPhfWoX/Zd
Sy4VcVd6NG3Xz4XKrnQoPdo7r3LbIzccSo9CxlzcHpLZofQI95WxHnlKPVmP
lp2e/7TwCTelR7gvi/Wocoeh41sVcyg9Opexiks1fzelRznkfiTWo1ZyDxLr
UZ7se9sn9HMoPbqVpErt+6GuSo9wjxPr0eOUcVWy13ZVetTsk2/5b9U9lB6N
C3nzpnwhd6VH1sZ6rUb7uCo9wr1brEcTS2fbH/vMTelR7Qyt/GM+uCo9Qv1Z
j1AO61ElqQ/rEe6tYj1qLu1lPcK9VaxHjyRurEctWg//7J/IXelRjpvZXC9u
dVV6hPu4WI8KSP+yHuE+K9YjtIv16FbCQucyn3VTeuQj45P1CPfysR7VyFMx
/YxjbkqPcG8S61GShAXzhw12V3oUKvOR9cisD6RHdwM7zfnltEPp0XRZB1iP
cK8j6xHuiWI9atC2yca5WxxKj1xl3WM9wj1IrEe70nicuL3RXekR7udhPVos
6zPrEe7/YT3COs96hHt+WI+gF6xHa98/3XnhibvSI9znw3o07X18nfRxHkqP
GvV59cjtR6zFejRy6Jlv1+vcs1iPqifzdt02277/B+3FOV/WI5wvZj3q719n
l3+u+xbrEe5pYT3a0ePtSJ+L9y3WI9xnwnqE89esR0OGNHq1YYedjnH+qt2i
6U0f37NYj/rWyz6kTlW0y9ajaoM6FNg+CefW9f0krEc4t856lLpm/b174s05
cXU/BuvRyjFNEjTqds9iPXpSoNLDgGn3LNYj3IfAepRW7j1gPUrbvE5sVJ97
FutRzrnvdsUmvWexHuHeBtYjx+LrrXfsj7VYj+a/LRTlU/qexXp0qNAS99Cy
OH9t61F03Lv5rotjLdYj3LPBepSu67yf87y264N2lTlzp/nlpbgHw9Yj1J/1
KI2Uw3qE+rAe4Z4K1qOF0l7WI/QL6xHixnr0tlDeN/NexlqsR6XPxoZsqnXP
Yj3C/RusR5mlf1mPcN8C61EvaRfrUdjLAVPqXbxnsR6tkPHJenRe7uFhPZp0
6fcReXKY+3/UPQmsR3lyfL068af7FutRZZmPrEeYd6xH9epmPX5jwn2L9eiF
rAOsR6vlHifWI9wPwHrkX/bag6im9u+inlj3WI9w7wHr0eKF22uVnXrPYj3C
eXzWI6zPrEc47896hHWe9Qjn+lmPmopesB7tLJiyWocCuM9En99nPWqzwd8l
qNg9xevOVpzrl/ryHaVHbQ76Lt0zLlLp0ZsBobnHZ4hWelRazvWwHuE8EevR
vaQpJ/5SLEbpEc5lsx6V67L59eeIGKVHOP/FevRBzluxHg099aSG33+lm3Hu
GvYk+61opUcLJqRZODVHjNKj8J5W7qlTY5Qe4Twy61E5qSfr0S3/yUPPBt9V
eoTzsKxHsVm+fvcaF630yPXncf23zrmr9AjnH1mP5so5R9ajjb1nHqyxKVLp
0aDlsW5nj0QqPcI5Tdaj4fNn5RzdLELpUZ6n27+d9I9SenS+XuDRo57RSo+q
9D5a1lEwXOkRztWyHhWMq1DmpFek0qNM95d0z9g3XOkRztWyHhWVcliPUB/W
I5yPZj1Ce1mPcP6a9WiYxI31aNaUbCNPr7+j9Gh0qxq3fBJHKj3aJedtWY+2
Sv+yHuF8JetRuLSL9ehCeKE+5/ZEKj3C+GQ9Kifn7lmP2myI73clPFrpEc5F
sh4V+vhmTpWl0UqPQmU+sh6Z9YH0qEZU20uBy2OUHuWWdYD1KJfc28B6hPOA
yh/dvf71eY8YpUdY91iPcM6R9ejb1Uzl+uSKVnqE83esR69lfWY9wj0nrEft
ZJ1nPRoi5/hYj66IXrAehe7bWjZV1iilRzPlvB7r0ZUWnXPnTR2l9OhBnd9O
5EscpvQo84/fKnmtCFN6VKlh2fPbOt9ReoTvdVmP8J0w69Hl7CvrBh0JV3qE
c1isRx97VtuzakW40iOcV2I9wnfUrEflgjO2eLU8QunRqiOBw083jFB69KhX
tRd7qoQrPap3x6Xc2j/ClR7h/BHrEerJejT7446Ajh3DlR4NkvMvrEePSnZ9
cfVAuNKjflsHeEz/GKb0COcaWI9qy/kF1qNs41rv/SlJmNKjkDp9PUpkDdd6
JOcvWI+2XbRyLUoTjHXY1GeW1KcO6c5myc/6VXDuxMf9AiOUfpUIXtev1rkI
pTut1uS7miJ/kNKdKVJP1i/vZFsq3smu9QjpLUmPtko9WXcKSD1Zd9Be1p1N
Ug7rTslL0w8kyB2mdKfr9gWrggcEK93BeRnWnezSj6w7OB/BujNezsuw7hyr
Edm2lhWmdOehjEPWnc5yno51p06fx7liW4Yr3cG5Btadfbf6vqnx9/rAulNH
5h3rDs53sO6smeYTX2t1uNIdzHfWHZzHZN3BOQ7Wnf1zXI7Heocr3bkq6xvr
Ds4psO6sPJlkyrBkEUp38P08646PrMOsO/g+n3XnZ1nPWXfwHT7rzkPRBdad
Gr1Ov/vRKULpzmT53p515+n3FyVLHL2jdKe7vI/MutMd7yyT7vSSd5xZd5bJ
9zasO/jOh3UnqbyXzbpzRr4jYt3pd6Hrom2PgpXu4Htj1h18B8W6U1jeN2fd
GSjvtrPu9Oid5srOP4OV7vSXd+pZd/D9MOtOFef36027XozrU3nqjptKd/D9
KutO1WWThheaEqR0p1LiM41WL72pdKekfJfIuoPvD1l3AutOebI5WZDSnRkp
5i8+XfOK0p1g+X6SdWfOhff9CiY/p3SnqNSHdWe65GfdOZQ0S71bxUKV7nx7
U6zXyV7BSnc2+I5ZVumvC0p3bko9WXcWnr38x9AbN5XuIJ11B+1i3Tkq9WTd
QXtZd2ZIOaw7DaIOr525MEjpztyTa9M+yRKo/Y5878q6c0X6Uf1/kHzfyLqT
Ub53Zd35PGpx1WVJbyrdqSbjkHXHS76HZ93ZVrXc8bret5TuPJTvEll3Ih7m
3tphYIjSnX4y71h38H0m606jJu/iRz0PVrqD+c6601XOU7Du4Hs81p2ACX13
rYwMVrqTTNY31h18Z8i60+G437qik0KU7uD7N9YdrMOsOwPl+zrWnZ6ynrPu
4Ds61p3eogusO4dnrczaNj5E6Q6+l2PdOTX9XOFEU0LxHan6rgzpqP+Rd79X
GNTPvBNqzhOVWjJ0bMJ2KUy64czyHQXSMZ4HZZ+z8+tGOz9/j7dF1nn87oA5
2fOve+tl0vk7Pfn+Vr1LjvIRZ7ynifz8XjnyI/797zya0S6Xnc7vyG8h3cT3
fiif3zdHfsTtzzuB7a7+ZdcT4+rDmdX1C0y2f5ffkUc5/D54E9IpfF+HdH4f
HOWYc46tRowbvNj+XZRzPeXBFi1+/a/4S3/he8UmpKf0vq16n13WMdO/9Vy6
FhxyydOk8/d+zUmn8L0f0s17QPK+MMrh7yFRf5SP751QT6Tj/XeUw99P4nf5
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
0WXmJ9tk3WN+0kbWZ+YnOC/J/CSt7B+YnxyS9Zz5SR/ZPzA/mSr7FuYnt8v2
SDTsuZviJwsGp8n9NY1D8RPso5ifWLKvZn5yU851Mj/Bvp35Cc59Mz85tWZC
uwI7HYqfWLUGZL950l3xkwjZ9zI/aSn7TOYnzudAbX4yoGWnS41Luyt+8k32
IcxPcG6U+QnOazM/SSH7f+YnU7o+nfzikkPxE+y7mJ/g/CnzE185/878JFj2
gcxPkp0tOOtSKXfFT86ID2J+gnPuzE/Syf6W+Qn21cxPcK6f+Ynr5zUZnzxz
KH6Cc7LMTxaJ72N+4p+//q0NCx2Kn0wT38r8xNxXQPwE9wAwPzHnc4mf5BZf
xvzETfwU8xOc52V+gvO8zE9eNc4Sfqmwu+InV8UnMj9xiD9lfvJJ/Cbzk//r
vDDzk68zzg+8lNlD8ZPv4peZn8SI72Z+cuHt48DTpT0UP0ndY/3YvTs9FD95
OOOKZ6ZsiRU/AU9gfgL+wPwEvIL5Cc4jMz85HBx4dNcwD8VPcB6Z+QnO7TI/
Se2xsPHhnXY6+nFTklzvxrnZ6XyumfnJmBUrctyqZOfn887MTypcXl3uwpH7
FvMTnLNjftLO+T1ow09Sy3vEzE8KyXvTzE+G5XlRcbaXnY5+WS3vLDM/wblC
5ifj5V1s5ifVB635LeKhXU/0b8KzLnPbNrB/F/07V96bZn5yTs51Mj/B+WXm
J7PlvXLmJ6kjsudp0cX+XZQz4PGOGmML/1f8pb9wHpz5SS7n98FNfrwzzvxk
/eZPfUvH3rOYn+A8NfMTnNtlfoL32Zmf4Lw585M1cp6U+clkeVed+QnOpzM/
iZX35ZmfPHjS+/8Vdu9RNeVtHMDD++Yy7sS4RxqGcUkZJkaFNIMIIYZxreQy
TJp0m8htNDTjEkalSa4lYtwTInKZkjqn9kk6J5KklFsMY/K+a73Pc7a+z7uW
v6z1W9Y+2z6//dvP83H29xfwMFI9Po/fqLmfu7EfcaX939FP+P139JNWbyeM
ijmj/nt5Xu0aEvpH1TD1/PF9efSTufTeMfpJ9lHNSase6jjPwxMTGz0Zm63O
K3zvHv2kz/3ZTQonqeeJ76Gjn7ycV5wcY6Wep3H/sie6gq0e6vU39sU3HbL3
dlWvm/G5nNbfNPbge/OB/r4Zve+PfnJwT2BgxaFCO/QTft8c/YTff0c/4XwA
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
f+c/yZiE4A==
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlgmwTmUYx889lqN7vmMbQpbuzXZxLdnDtW+5lpuQfc1gSJbIlGEQiqJo
DKUUarSZokWyL9mXkZr2lEJikOxFv/88z8z3zPM///O8z3m/9322zKGPdx8b
BkFQIS0I8qGnR0FQCP0iumEcBN14WTgJgj7oOvD90I3ge6KLwhdDeoMfiM2+
K7gIXFlkOLgZXGOkGms343MwXBZ4I7gMNo/yvBVcD5sO4HS4gej7sOmPHuLf
3YtNXWxa8Hw7FQT/IU3A98Ot4F1pbN5FfxCZTVpiuCr85+g62h/8Da0DDwDf
jU1TxyXBo9F1sX9SfnmeiW7L+zbo1kgIl41MA+/H5250c+x3ovOwW43uyvuu
4DfAD4I7IK+Bu8B1B78Dfkjnh2zW/4OriowHt4DLRZaCK8Hl+Llt4ltjxIE/
BX8Ibgj+Btwdm/d57ol9HrIGfAL+kdj2NQJuALIefAb+LnAuuAHvx4OPggty
4RMcD4QfC94P7qO7A88DdwDngBfqf4Fbgj8D/4nPm34XOv8x8PvAt8D1sWsv
/4mdoe50HXxF+AI8f8262uB64O9SxucHHwPfC/6XmNwLztY5wB8Fz4mM3wfO
hC+KzwVwd+BuIwdThkvCL4G/DoYKZnkMNMLPdYiJPCvuT/E+ApQCFwvN/gay
B5sK2BeGfw7bych5+O3wl9Hp8H+kmQjP5P2EyL71TGR+5f90mq3lCIK56Fu+
N+1Rd/oYkp+XzfnWKHCmx0JjbCYp7uCfQteAr+2x1yY2/mlwdbht+K0eWEwq
X5RjpRPTei6VWN4qj4b4N7PBuyKLa91NvsRyTDaK+fbIHPj6ieG5ijnf50hw
hcT86D/cC66CjPMY1h3rrpXX5TzHVQfKgxd4/NTx/GqnWIot57IS25P2dhzd
GX4ZfOXE7qYoslOxxvN8cEedA3gDuAe4DLoMa8uiZ7D+Kmf8JfZX0CUCu1fF
VRHw87yvoBoALodu6vGZg26p/wRurvxH7gnsnHLcRud10+NK8XLJYyAFXyK0
bxUOTYTTtc5j+ziLVvHtLPAR8OLI/tePygV0Oexj9HzFJ/owfLnYYm8HOCO2
ON/v8S+bQ+BWXldVQ9P8fynHOiIZgeVhL+zbga9EFreKz/HgsvB/8bwtZfEa
emzP8nhWLCu2ZbMV4jp4D0ajOfv+qvnYRNSQdfoe+Bh6r84uMLvBsXFPqFeA
d4FHgnco9rDZjn4dnxmqJ/ivH1o9r6s6jFQJLG/L+v1moldHdi8foxsrHgOr
7xX9vlQvsv088xRDfg5V0WO9lip2m3pMKt4WIcXhK7HHiXC1Aut/05UH4Bno
KaHl2mT0VM8p5eckz1nl5CykCXh2aGu0VvlzJLKcauC1XXmU4Xmjb72MHur3
qNxVreMXTI0sThS389QrE/uGcueI58tOdK3E9qr6cIJzLA1eqroFrqR9x1bT
lBdbPK4KsHZKZHGlGjU7stwpqP8VWX/U/1WN6e53oR7f27G44V5PRqBfQeoF
1sOW+JksQn+ivAIvDq0Hqm++hz6TZr1MPa0b32oG/pVvve1nqJ7aC8kE90Av
d5/yfVL9Xu/Z+MOs/Uj7Am9Ct8bmi9D6lfxf5DvDFE+B1dkRvmfVsAOR8epx
axUTgfXUU5HtU73sXGT+BuH/58hs1PvW+/86EFqeKF/OonelrC6Ux+eh0PLu
IPqnyPZ23uub/Mhfv9je98f/hZTFaw24TrGdX1ufI7R2RWgzjOajEomd25vg
TqrViZ2R5o1aseXQt/j7BSmpO4st14rhZyH6t5TVzaqqKzx3CmxOOALXHnwY
PSA2PQ7fJz2uZP8qduXBp+GyYsO/p4xXPq5B34jMj2aMzbwrFFp+pfOcF9i8
UdznS82QG/ysNoZ2pzp/3YPOQbHTRnftc47mKM1db4E7wx2LLNc0/+icxXdL
rPaqjz+r2SFltV5z41VwTXDN2GZL1XslwVe+T83AKz1/Nc8pRhVjzbVfn3M0
IykOVccueD9V/VkZ2Zmot5xKWb/SXb+A3s3z3x4bLXy+Ui/TXK0Yv5yy+Uu1
9KXQ5kndb25ifUHz+TSf/RT/fRPrZ6oPyvdc75vtEpu9Nav/o29GVmuHJ/Z9
9Sb1RtVk3ZHuSvOY6uRa8LLI+kh1n1e3sHYYa7eicwKbXzWbqZddxH+12Grz
WXCEXafQ6vNAnxXVo895jN3xGVW9YFRi96B6onqf6/W5C/qS/g9Yf/pKymq6
7quX72eo8jFlfVexXTm2/vk93KDYYixm7SWvgcopzRKa95Yrr1O2T83Dq7z+
qw+0iq3GJ/jvC+4Cn7+Q9cr8ms0iyyfFeanQvqs+/wP+rim34cNCloOab6/5
+ajHnQH/D8aYdX4=
            "]], 
           Polygon[CompressedData["
1:eJwtmHm4llUVxd97GM6F73tlhgQEQZB5CBBQBnEAHFBUCFGQydS0gUEezcon
S03NTMtMyzE1SiWRcgRRBhlFVHAKJUcEFdMEBEW09XvW/mPfe9aZvnP22Xvt
vd8OM2ae9qNUFMX4mqKoq/8vVoviBcm9uSj+Krld8i31N9OkLeofWxbFnWof
rb4tGjte+C7hAayN+bdJXtXc12KvbhpvXXhP+vol78ncV4RflvxJ7T9LXlK7
vsYP0HjHSlG8KdxI+CDhv2XPrSfcsvCaTcJ1hJsI/074v8LthdsLPyC8Q3iM
cJvC91ki3EC4gfBlwvslX0ku1D3mSv6n8UM13qrweWZLpJpip/5slbwv2SbR
0YrLNfac5u8XbizcoeI9Nmr9cYX3flrjH2pc/4o5ws+r0V3jTYXvEX5fuG3c
52bhbcKthNsJ3yr8H+GWwi2EbxL+pOo7crf5ko/YX/IXte+WvKP225I71b4r
u90s9E3ffdm6QUfvxdoOah9YeA/O8EfJ1qrP9oGkY+j3DvVP1v0mSc7UXSdJ
+qh9mcZ7aHxZto00SbYB3neqxheHvXwkPE74fuHDhDcJHyv8e+HBwq8K1xWe
KYxR/kBylH5jhKSr+rtJ6khGqv9Y9pTMEX5R/0dr/Zda/4bkdcl49X8nZL7G
hxQeO0v4UfYV/lD4U3QquUD935ecI/kudqC+zySl2tXSZ+As56m9QuuHa/3W
7LlPCp9YeA1970nOLT2XPegvamVHtf6N1Zy/8G8P0J79JQ3VX5GcLLlX40do
fLPGd0qf44U7CC8Qbqvxc4UPEf6XcF/hK4S/Lbw2e82/JSfFXtO091RJRb9d
lWzWfhXNb6v585gr3EX4YOE+Fb/tGuGTCr/xCcK3Cg8VHiv8huY3FW4kfKPW
d0Rvwhewh9qDJNeofTVvrPY7mjMMW0dHpe/wILqt+m6Pqv0INln6vQ/S/0/k
L720ZiX+LDkG39fYGI31kPxE7b7qW62x4cIfaP52yUPJPoAdp9L20Qg96P+h
mv9Yts1yr7rSRb1a6wBugWPQzWzNf17tseprUGtuwLawMTjip8L1hffo99Zo
/i+zuWBb8MMt2bpBR29p/O/ZvjxY+JuY3xBb0dxnquYT+KGO+i7U2FP4d435
r502vjibl3eob1nVNjuCt0+25Wuy58KZK2Ic275Z+BiN7xIeKfw4/lLaNg7H
l5Nt5P7g9wHCX1btg4OEH072TXwW370dHyvt13AjHAnHX5HNbV/qfOur5qjm
ws2TuesF4f5wKZxY+g7cRc3iIo1dHefnzsur9h3s5elkH6qvNxhV+E14m33Z
vrcSfhDeHfd7TnhmaV/GXpYn+/QlwvVif3TLnuy9VPK90hwNV6+Dc4SnSOen
xHvDLR/H/fFxfJ3f5LdXSX5YmivhZjgazrwy+27ccWnYdyfhE4k5Glgi3K2w
v8Ar3Svm/nbCH1dtj/hmT+HdwtM05wm1F0lmxHvwvnAY3Iov4bvHJfsUOkAX
J6tvsvZ+LZtbb1PfKHwlmwsfFB4h3KniWERMJDbu1fge/Ed6ryP5Qn0DIx4R
f/cLD414QXxZJ+mu9o/V17O0Te+K+IitH1uxr/4MjtL4r8M/8J9VVQttfOoX
GlspXGpuM+E/ZNsEb8cbtq1YpzsiV2kjvCHiv45aXKv5s0rrgLufJRlSmovg
pKFqr8NYk9/o4IrjHfqvUd+zGrsuO5YT09cKr5Z8UWObxraZ802N35216BBd
LiCmqL1Kfb01dxacU9rH8DVyJnKnt7O5lDflbYlT85L5bYLap0d8fEAyUe2X
s2MlfYy9lZ1r3S18ivB24RPCHuCDFZE/5eQ4jM/he3A4XL4zO/bA8XA9sZJY
wxk4yyvCA4WvFx5WOp7hb/cJnyb8UHYsmsAblT4DZ4HfT8X2NN5P478hRgmP
rjg2EaMGl74jd8VH39XcJyRdiDXkKBp7PJurJ3J+fJUYIzwFm4MPJKMiXpH/
cF50hG7g/690/31Vn3Nhdn6JLtAJuSUxkvOcLdyqdPzqIHlW/esli+JMnGVa
zJmu/2uy13YSviWZ0zZkC3fmroz1l/QLniUWkxORG03VmpalYyL22BNO01hn
4esiPxlT8dpLkzmaPXoL9yrNo+TXrUvvxZ7Ls89+fsR/7rA28lFSjl+FvWLb
2Dy2vyb8DR9sX7G99lF7nMYPKJ3T4rv48N4a2/++GvM7mBjaWeNzIrYS8+Ey
OG2YFrYpfUbOtiLiOvnKefBlvDFvPSlZr8QM9uY38CtsCts6XdKitA/NTT4j
Z0UXl4T+0clerR8U8R3bWRD2eZj69oQt0KYPmxio9Vcl+9DG7HzyGOF/ZudT
5J+c85ns/AOdjE326VXRR25Cjsrcz7X/qck6QTdNS+uyT+QnT2VzPlxPLtkk
7t8lzttF+KbkmEvshfP7Juck8+JM5HrkvJyVHLhr+Bm2152cJJnj4XrGLk72
QeagQ3QJRw+p2CfQA3puHjI52ccWhv13Vfso9X1ddb1ADkPuAmnCAfg5cRpu
IM8iHgxL1iNzhifXGKytET487vuPbB1cFOdBN+iI+HBGsu6oZw5JrjmoPS7N
tmVsmloLG/46bAXbpqajtuuRXLuS/1Frsgd7wTlwz5X4VOkYhm7RMbFtYfDL
kOCOR0Lf2Cy2+1jwUa/kt14f/EbOC3fg93AdPtw59idWtkiuXcmXGwcXb4lY
gh/hX7trXGOST8FRcBUxj9jXW/j1yKfIL/aFLzJOLPqsxrGSmpfaDH19WnUO
QS5BfUedOD/yg87JtePc7FyTnJPa9KrIV+CHjVXndOR21ATUBjdkx1ZiLLU2
OQa5xvGSXdWw4cJvjC8+GfkN49QzcDbcDWfBC+QM5A4HJteqW6I+JV9GV/At
3DwjmX/JKcgt8Hl8/13NaZ0co4nV6Khhsk7QzcPx/tSHuXSdjC2OEK5Xujbg
97FZbPfFiKc/T+ZacmByYTgD7mAP9sL/akv7Abk898W28Vl8b3ayL68OPoWz
qFWoOeH2a4WPKO2zcBf3wZcXh79x33alawZ0gU6o3TdHfL48ObaQQ5FLESOI
Fb+NfAWdbK+ad4kN1OQDSnMCsYT5cMVL2bGHGERutCLwOcncvSnyDfIlarmt
8f2BbxJ8m6BOHZ185sXBb/gyHNO4dA5ELkSOQa5BPrYhOYf/PNseeZN6EcvJ
wZfG+MSKa5Ybk2scapmjY0/2opYh5yXXIefZIfxmdj5FfjOydI57R8RP7k49
vyw536CWhCPgCr7B8C1musaXJNcc1KqckbNwprNL1+jchTudWTonW5ica5Bz
sCc1ArUBv8X3kfXJNQnnnVI61+OMnJUag7qBupLagza1xOjCfdQs1C5jCufh
fNNgjDnnx++TG5KTjZO+zhC+QfhI4W3Z3xfYg7V7Q2foblKcjZyY3DjLqWtr
fWdyUnLR6eEPxFXyRr7t4eP4Mj49WOuuD76BD8i9yamxFWyGPIwzcBZqcmrz
I4Mf4Uy4kxqS2pQahlqGHJM9WEsuR42En8HD1E7U3NRi1GR8x2AMX4SjmQOn
w+34CLksNdKi0P+Eit+TGpGaYFbYHLbHNxe+veCT7MFafJXYdk/YAzGO73mc
gd/mWwo+QQ5B7oCvwHENw4/hvv8DGDOebA==
            "]], 
           Polygon[CompressedData["
1:eJw1lnmYT2UUx+9MTXdyfxcVCmOZMWPfxzpmIzL7ljEo0ijSokz2JaMYZafN
UlGoKDyhp+zMDNkJ7U/WNtUYJiZR6nOec/rj8zzf+z3nvfddzvu+Nzz/6ZwR
wY7jFEEINPYcpybG3VALTgUcJyjUcdKIFfO8Gypcx/kFNqIPQjKxmzzPg7kS
o01D/LfQP6F/hJ+hHl5T3t8V+qFz4H6403ecPnifoBPR3aEH/ECbBnj1Icza
RuI3gihYjJeKVwN9F9SEgXgxeOnwBvo1eB16E7vXVy3eQkghZw59nA2L4B68
89JX6TfcgP14/Wn3LX41dFWoAlG0vWDjbIb+Ff0bNPH0PWfQZ+Gc5ND+Mbx4
YuHoCPiXd6cyb9vwt8Lvrs7Bp+gtsBkGkfcwDIZ82IGXS04IOhHdXcYF0Xi9
8Jail8Aim5cWEIVuAo3hMn2JJ+8jmXdPxyhjPQHH4Qy8LzFyesIm9Mfwss3V
IeIHoTd6Jl4COa3QLdFZkA2VfCMV/210JrGz5J+DNLxVeN+jy+Ai5Mq6Q19Y
K/VAfj24HOQ4AZ592GPvW4F+B5ZDBjnJMBfdjVgsxIEHyXhJcB90sHmROklD
n+Kbp2E4XileP7y/eL7uat3XsPWVdT7NdzPIS4dM63sWOQPQ69Hr4EPrcwI8
g34FXpX5Jqe/p7XzJPopGOHrd/fKmKAE8myNItFlfO8ilEMyeUmQYvMo4y3G
L2NextDXGfCiq98dSXw0jJI19rXu30Qvk/0n84A3mtxRsFNqlHfU9bR/B4gv
gPlW47ssXkDuNJhu6/Ye8Xdhpc1Btqd1kkUsG3KgGYzHGwdjpDbJCeXcyKTG
j/J8BAbineQbt6Ibob9Afwnt0N3w4iAW/sHbD3/Tlwae7k/Zp+NgLOy2uQgj
NsT2RV/0VWKVMAh9DG8ksdvpQxVYiL8ALtG2KbEVNj4Z5yG8m7yvIe1uohOI
r8XfDFvgO7zWeG3As70/E/8lKCFWXfYI+hq6K7oLdIK2nq6TrNdxG3cE3p/o
jlKf0B5ae1qXUp8XXD0HZe9PQk+EfTYXRehbGEs6c7qPnM/gmtWv1PFtoTru
Al/nZRd6J2z//9wgnkHbwzwfggc8PWPlXF4qex9WQ3Xa5so4iG/neQf8QV4F
XAlorLOnZ11tdF2oY2fnKnJXwiZIkXMtoHMeIWsuZyW09PSOqGNtw+0MDdC/
bPq3gefjMBjvqK2XtDmG/hwipbbwTgR0TRfa/Dp4QRBi9TUBf7z0n1gl8zcV
XY2xFRB/Vs4nWSc5A4i3RbeTcdm6FZI7Bea7+q3tsmaejsnlHaFSW76uZbTU
BrF15K6HFr7uR9mXE6GHnAWyjtAT/bx8g5xeptuh20M0VPX1TpS7McP6t412
W6G+3SNxnup89BAYHqx3yx5ySuGkq2djPV/XMk/2B/SxdXuO+GQ4TN+D8Wah
Y/EfRQ+DoRAm96XkytzLOQ+tfT135+FdYj7Lg/QbS2i/GJrbWSb3THP8yehJ
MMHmIID3OPoJGAuJnn73EXRtYnWgrq/znIqXLue21dBeW8P6nu472X8bYYOc
a66+Q/os/xb9pbZhANyB9zVtv4JvbK1kv9Wyf4Vu6F1ypkCS3Wtd5D0Q4+vZ
FIN3nbY3ZB9CCbnF0IF4EbGj1l7ec8DVOWvj610h99p5vHI5e1w9X+Telvs7
Xva/p3doK6s/qcOr5CwndxmscfX7ciYO431DpQbs/sqzcTwk5wU8GKz/PtKv
QvRUmCF3AF5H66voTujOcMTWP9zT/zb5f5P7t4J5vgpXoDSg8zKLvDkwO1jv
fandF9DTYZrVs9TLFPtuoc2BI/868g/p67na3u6P1egPYE2w/m/8B6ucSUE=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3nQj1UUxx/vU3rydH8iSzGyJluUoZS2KaOhRmJskX3flyyvfffy2vfl
te8hVISkZaZ1WkfEVFSMpSjDJEn0+Trnjzvf7z333Pu7z7ln+5Xt2K9J36wo
iu7NF0UxWDETRXsgK9Mo6sa4wOKkEEWlkihqwXoxsCSjFbwaeH9iOpPRacq+
UcibCRlT4MdYm8A5zZkfCb6GvDX4EmM8vAV4EL2m8MB5h5xLlmF+FBzK3u/A
V5AfybK11ro368edX82ye54ER6PfOTU+BN6Y38hGpxHYFfk55OORd0jt/GHw
0omdr9+pAW8ve4AddX94Eec/sD4c/bacNQb5eHAc8hHwNujUZz4U/jS4ljEH
Pg7MYUyETwaro9cJ3pN9E5lPhY8F/+TsbvBL4ADmufBBYD/GJPhgsBd7XwXP
c4fDWWbnFcy7JWbPGZzZx/W174zb7RT4FDrF9Dbsvca8C/Ir4MPIBsBrgW0Y
g+EvgzXcbrVj+x591+Ngd37jIvumc0495gORPyPbxmaHzuA0/y59XyfnPcCe
she8O9jBbfgE2CU1m1fijif8bqfBX/x99ea70VsA3wWuYiyBvw++w1gI3wfm
MabDl4JrOHMlfG1ib90MXgg+hrGM9Qz+vgichXyJ/DExvghcor3I7kRnMN95
OcveawFjBjqj0Jmf2F3Ko/Omn7NTPo7+z+h3QrcvowCyFcgWMWJ4b2R5qd15
DmdsSO07qnHODnA+8u3ga4x58M3g8MS+axK42v1qr/wqsfXi7F3BOW/Ay8Br
ylfQeVDnuS/NBS9yh2xwZmpvrLduwhnDmFdjvifYHu19MrH4HQ5vCX+Ltcry
A2RzUvPlH5F9znhOb4msEL/9tueQ6an56jnWD3qOGI9sLKMh/AtkrzNKwgch
m5Ka73yE7DijnfwY2algPj0VfhW+Ab4Ufgk+Et4/sbhQbmkHvoe8DvLG8N+D
xxL68xkz4fm4YwF/+0V6h9Rskx/ZDfRzZffU4krxNZBzyjFawu8G16NTWL8r
e8MrwesjvyO2+NV73yZfh98OZsXmz4q5gonlN+WZhcHW5A8Zzz9lwL9Y6w6/
kWX7dU5BsDBrbeHlE+PKRdnB9K4zRsAfQ55BdzW8gcfai7HZ/HnwK9kstTj+
BD7a37cV+z4Llr/0jtJRXH4cbL/O6ZxYrtM5XyonM5r4m76gN4zsXZVntedr
36v5N/BGiem0TsxfdKbuWNpzy32x2UX2UR1QzlIOGMPe82BX5DXZO5jfK6sY
8DzfTnuRn3Ud6Sqf/AaODXaObKsc3wv5P8znBntT6YxzG8rmdRKL0X7wW8GK
zivEdq5qx0T0e6SWp2fAS7DWR/EClmP00DvGFiv63qrKn4nFlHxStbUDvAq8
kMda8dhyhvxE+a+H59hpnD8wtfUcvV2wmqfccpfn7aKKh2A+1wf5KMaz8E+R
HfIYmeXxrtq7H9nw1PL9gWCx/wB8d7B1xVF7t7POb5hYTnhIuTYY6rv0nv1S
87dVyLe5LRTLDRI7c6/ra/8++CPIU+WHYDrD1DOopvmbbg/mL6o7zZF/6z4m
n1kMzw+vlVgdVyyUhQ9JzXd2sP4B41H4CGTVFaOR5TXp6A13sr7LY1Z5rG5i
76X4rerfpfu293yi3KIcrjvnBatPqlO6w0TvbQ673WTf74PJ1dcchZ9m9Pbc
NVc5Dv5T8FjinGmp9Q2qm13Bycy7yBfQyUmtTp5wrvr5K/wMo7/nNNlT/lkP
POZ9iXJmK3BCZGet83wom+i9lEvWIFvm9pTPjHaf2ep5V/Vadbukx6ZitHZi
+U15Lzu1vuBDt7fqSN3YfFU9xibkmz1PDkgtL3VULHgMqu+YF6zfVB0fA15h
vj62GndBfhlbP7NU9Vq9BLhKeRm+SnkyWK8p3z7pdpYNE/L4QvhI+DzGcvVI
idUN1dxN4Fm3oeyf4+cvS6wub0VeImN9jnJLBeQVvK6pN1ieWp0vjSzXe4Nq
7sOK+9n6Dvhq9m5EXjRjNVv3X4t8P7wSshn6PXTyEqtNs5DHyJf5HUrCs/UN
qifwvon1dfqu1L9R9WsbOBP5FrCU5yLluJt74VPBmYn1FKXY9672RXaPDYnd
cx3nLE6tbwroLEhMZ01ifYW4ZLqbfucedGbHdh/V1OXee5RFXixj77jUa6vu
f0vG/i/ov0MJ/WZq/VqRjPWlnSLri6swPxDbfdSDqadSX6ZarH7ssvcv6oVG
gH+7n6ifqex7defrwXpQ1fGb9Vy9cWw9ifroP4L1geq1csHZqfXg14LlT/Wz
W4L1e3qXLM7eGDznev+jWP4vWFzrPurR9N9BtXh+sDPV+/8bzLbqOQtzzv+2
obBD
            "]], 
           Polygon[CompressedData["
1:eJw1mHf81lUVx788F/Obj/cBRVKcTIlRDkzTLJPEVY4IVEBA9o+9Ym9B9gaF
nzIEWWquHJm7vacz0xQUxVyVopZZfd58Tn+c13PPOfd7xxmfc+7Tov/orqMq
RVF0a1AUDfX79bIoLhbdlovidtETok6pKL4t3Tcl/0HIGHcVPaRxe+k7iE4R
bRXfSL/DNP/L0t8n/l7RNzS+RPSIxr2kv0bjfqKHs7+7VOPLQjZT3/ZOnvsd
0RkaT5VsZtVzOAtn4ts7RedoPFGyb0n3Q/FfED9F/JXie4p6iH4s+U9EvxSd
K/1s6QdI/l3xLcW3Sj7nLdl34OxfEW3T+CzpRmj+ueJ3it8hukDjC+NO46Vr
l3zXmaK9MuiVkh1X2oadpRsXtv1R9hk521Wi80SjpTtRc76Xfd5p4ruI/7n4
X4suTt7jktgPW/4qdJM0XiLdWs05tFYUv5DsQo0n49PSdx6YvCZr/5S7iZ8l
vr/4WeJf13kHiT9F/Grx/xQ/Unxn8b1F09lb3/xWusdEj4qmyBdTRZ2kP1W0
UbJNojtEx2vuqPi+i2iMxlmyDdLdKKoXfUnys0V3a9xGuklxXtY4RPyQwmtz
J+52vaim8TrpP6l4/a9Jf4P4htINjvOfKRqqcQO+kW6tqCDe9HOSdJvFH5Rs
8zPErxLfVPxY8ROq/v6LohWSr4yzshZrcmZkzYNn7lLx7+s8fcXX6fvl4pcR
g9KdXnr8XsX3QbZFfGN931/8WaXP+N+K92S9B8V3TLZZl7AfMUJsoLtO9Kbm
95N+iPabK/7tin3QKYi93q1Yd63oHY37SDa46hhvFfFIHF1ROldOkuwB6eZj
E/FbxDeVvX+THYvEzxx9v0D8UeIHiD9Hc8eK5mu8XrJGmt+u9Nk44xzNXSg6
Urrhkn1Vuj9mxxIx1ae0D/ElMXOPdN8XtY34vYi1xf9da/UQ37Z0DnF27nCX
dIPEXws2if9d9n26i36v8aWSLYozsDf5y5zLJB9Y+tsns8/EWfqKDtMdZkq/
UmvOFX+Q+KXil4kO1ri96HGN10t/A/4n/0QtJW8laqxxN+me05knZfuF2CRG
yZG2mvOwxpsl2yp7Hiv+NnJD/DLNPa5mGePlojmi2aLjJTsh9rif2C689/kR
72AYWMY3fLuBnBR9tuY92esW0Wmlc4GcWK/5WyS7GSI2wwYzwNJk28zkHOJX
iU9a5w9gebIPsRs5DNYfnJzbnP8ujddKthg8Ea3T+E7JjpFuh/baLtop+a7w
P7mYknObO96j8YrCdyenwaZKcq4viXggfz4n3VrRGnCD3A5cPC85ZoldMAgs
OzoZm9pp/Uc1vlmy7WGfR5LPuDry/ohkTFgV2PiaaI/olYrPgz/fqBg7O0f8
gklg54lar41oveT1pf1FbKyJs4JH/6k458l95t4X8bQ+4uhuYqXwN6yBvIPk
HUXNa7Yl591UdX6/VTEGkO/MYS423hE+P+B7allp/RP6vr7w2tR6sO/05Jrf
qjRWgBmLs22yqnQMYSswrU76/RVjXcfSuYlP8M3J4a+Xxc8QP6ZqPDpU628X
34y6F/gAlnWIfNpS+MzkKLW2WeQuNXqO+AuSazcxRWxRDxrWXMOo5dR0ahs9
ALXkmOTegBoO9hyWXNvJGXJno/jD9f0RooeILclWls4JcgPMr4/9FpXOSWKb
fJghOkrjZjX3ANivSXJvgOz25Jxh7tHid8X6G6q2Mbamp6G3oaZdH/kyS/Pb
B36WxGg2ZoAd1KzN0XdQGz6fXIepC/QOYCbYWWq9lcn5+umac4hcWif+EPGX
hz1OFf842CzZNo1vkmxh6b6HfKano7drLH195GN91T7El9Rz+iDWYC36MfpC
agC1gG/4Ftqs8aaoD+QsuUsN3JVt8xWiJuELeiJ6PexDr/Qv+pHsOcxlvDHw
D9mA8H9/yV6Jvop6drn4Z6it1EyNV0u2QLoG2mO5+OvEjyxNI0RFzTrih17y
Gs35Wbb+wFzxr4mvaM4i6gExKHt8Svzq5B5sYmmaEHUDHT0NtQz/0Ou8KhpM
fyPaq/HHojnJNZfaO55407ivZC9l+ww/zo5a8BmNd8b+08T/WXOmUp9FL2bP
XRXxxzf06fTL3SR7Vvo68XPF9xD/fPYarMWdPsmucdS6NZJN4VvRYo2HS7YH
7Mquh8jQDRPNK3yf3dkxkaN/IVapq9T6UZK9lW3nhcn7YcsTpL+6ML6Cs09r
zosVvwF4C1BjwUYwskXN9Ztaj3+p709l34078jYAfwZqfCx3yO4D6IcvSq77
+AdfjdX4TelmZ/fr1MRBVec19iVnyd2nKq7l1PRGpWPi7GSMIVZaBF4+rzmT
wbOIb/CQ3mVJ4BWYDrZjc2x/lei57DcUPsI3PcH1yNd7NW5ds0/x7VLqU9Ux
MVf8wsKxMjvq8x3JPcKRpd8e3Im7IUNHzaB24MOhyTGG/+aJ31dxPaOG/IP6
mv2umFy6hwOrweyW4v+SnWsHcg7/V90Lfqg5E6T7EzmY3JMNKV0jWXtf+Jda
AhbSA1FTXqaHS47JoRFPQyOuX8i2F2uyVl3YCX93T35HMmd+cgzybZvSvTg9
+TTp7s/GMjCNXmVKtq/w2eGlMQfsoQeiF2L8AHhVWIYNsAXvkFxzzaP2sT69
P7Ibwz/MrQb+0ROPLt1Dbwv8Ib+nB56A0WD1uNI9NNgIRr6L7YlT0dsafyB6
Vns9U7EejKtLrolg37+J4fAn8QCe3xr5C97tk35c+IN+Fxln4UzMfT07N8lR
3nqtw34vaL+p2VhGrpPzYNoC2WR+1X7bHfWVmkGtODkZk8FmbIgtj4/8flrr
PVnxfReInyH9/uwYJ9bJb3ohfIZt90ePxJugdXKPSK84MftsnHFg1b0R+EAP
QS/Bm5S3KW9s6gf1GRyiVj4WdFpyzUbH+5j/BrgTd+M/B/57uDo5H+lB6EV4
8yyIO3P3/8cq/0FQ+6iB3J/79tLaL+mM07NznFynps3V+u+Hf4kP/I6P8TU9
93Bio3QsbZDsI2p7aWwin/lv4cCbXXyf5FwEw/4afgLbuke9AfPAvvdiffZk
716l/0ugh6eXby6+d+H8BAtuze5/6wr3eoNLv/2oWa/GXsMD/9nzHfaOejoq
cpdcpiaRw03FXxHxhO+IUbBra3LsTo77TknGHu7M3anx1PqbsnsheiLelryT
ORtnXBH9A3iyI7lXGBH1iBpDrSEHsfWkyC3evLwfeSPwViAfyJUlyb0CeDxB
/JnJ/3XNj3yhh6BW94j+BJ8SN3+L/BqfjJvUe2rD+cn/xYwp7Vt8gC/oIfbG
OUdGfSV3FyfXVmrWR/F/DLWMNyT1Bx/VxGdRV413Rz41wedRf8A26hW5Rs5R
W8FksLknNVH8h9Ev4CPwdF7p3g88AKt4E/A2eDD5LcMbhV6Ynpi3y9TIP3za
v+qemt6afo7/Noj5PbE/ubCt6t6e/OTtvKxqLMJm2I43Nm9tMO6DsM2QwHNs
tCj8wxuZHnxx1dg3TPwb2cSYmCQ2Jwe+Y5N+vH1Kv5V48/H2w0f4ih4AXJ8R
/Q81n9rPm+XjinsI7A9GkTfkKthFDBHzxDqxxZuL/1p4L/EW+x9xprYn
            "]], 
           Polygon[CompressedData["
1:eJwtlnlUV0UYhm8gefXnJcU13HAPl/zHpdJSS620xSw1W9wVt8ByQxFUVhEV
wQAFQUBAc8Mtl8qyU6e9zmk9WamltptatrhlPe+Z74/nnPe+883cuTPzfXPb
TUoYGR/meV4mRMCqwPP+wJgR8rzV6DWwyfe8MtoOhHvei/A8z8W0V6Mv0X4Z
rkB4pOfl4hXQlkxMCmxCH8TrSFsn6Awd8TvASnvXdGJ+Q88jbhX6HPo8LEUP
xRsIg+A9e0ceei2s0VyIeQZuRK+nfQMUa954iXgX0L/rPTAXryVeW2gDO/Fu
ZR49YCu6Gd4AdC26A7o9xMC8kBtvEToJFsM/xLRjLnvRZbQV0K9Q40Ala1WO
fxRqaJsNYehrfOu/UETf7bANdsA9tCUTUwWvomMZt5pxanz3jv14+2APlBLT
CL8hLKTvMcabiJcEt9PeD+6AKtqqiClnLkd4fgU2E/MsRKGraa+BLRBN3M2Q
gb7AeF3Qk4k7ib4CVyE5cN8RTt8IqAOFePmB+yZ92yWYRcybeI/TPhamQmbI
rY3WqNJ339iV76rQ+WB+L/P8ElSE3Hu/ZZzTcAqWMFaifWck8TFaE9iIF9Cn
AdSHePpl2vzj0F2J6QZr8XIhT/tle5lle/0cegU6O3Cx6lOOjtQaak2YYwuI
hh14JcS3RbeBGNt77cdi+nzNe6PsXOt8V9g4CbRXojdDLP4t0Mt357UErxRd
yhrs5rlWZ9ry4hzjnYeLlotlilUuQsi+VzlYg94KW6AZc4qCEvRSxsmBVXCV
Phl46bBMuRNya6i1TKftLO+YhteC5+awDO8XvPboXPwl9LmI9yf8BU3wG8Mi
++5JxHyEHk7ccvRTtD0NnaETJNF2nbie6OU29tSQWwutifo+SN8HYJjmaOf5
NvRrtB2F1+GI8hWvJ/SGRcRMpP8EmOO7eX5OzMPoh+BJGIn3Gd4H8D58aPPU
O95GT0BPhDthCd47lo8p6LH0fwL+1rrjbcBL5TkNTuNNwpsMM2AFbV/gjUA/
AmO03njNiG0KC2g7w3e3RreCltBdY+PND9w6J9PnBM/Hw9x37AlcnVK96gQL
iFkIsehuyiHVY2IGMc5AGOG7NVPu90H31rpYvr8QuNxvjG4KTcyrtbyYT9sw
4ofDOvRKOy86N/8Frj42RDeC5pY7Wqsh6MFwt9WwA3g90PczzigYDTND7jtz
AldrVXNT8R4lbhQ8ZnuUrVqunNH5hh8DV9vrouuBbzmTozqGnqt5wE+BqwfK
i76MPRiG6DvwWuG1hstWm84Gbmy9Y77dN8p5395xk+VsHfJonc4Y42QrJ+Eb
nXc4Dlm05RH3JXq07fUx9FfKNfQ4vFRIg5OqkdYnX/VCOeG7XC3F2wjFsJ62
dNUO9GF51IVii1WfDN/ducrzG8CDMLtzdQ/qHdk6i6q5Nr9reJWq/cpNy33d
yYdUI3TOtaeRbs9z0Ku1JnCdfuN53zjfrZnu5lm+W/s56J+Vx/Cr7dtsvDPo
7+GHwO2vcu9j9CfwaeBqgmrDNN/Fa38T0PHKXd2feCHmcgp/FnomTLfcmkr7
FO2DvV97rj0q0LdrXaFQ/wF4EVDX9k9eUciN7ePVg/rQn7H6wVDVZMsj5bXy
u8h3/yxaF51n1RvVne6QyFjf4cWhp8EUyMKbTp84WG3/Hfo/UK5q7L3ofbBf
9yIxY3xXK3Ru0kLuP+de5QzcB+/aGRpv9UV15oT9v0Sj74IBsAvvEByEw5Z3
ml+J7keOxzbluNZP9cbusI205/Gcb94uvJ2wPdzdb28wTl90H+gFi/EC4hpA
pN0tOqe7ieuC7gwdrTZpnYtUJxVje/lW4P7d9A/XP9zV2BSrhVNC7n7QPfE/
OO1WcQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
TVPczsZexO8auBbf+R8lpBHw
            "]], 
           Polygon[CompressedData["
1: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
P0v+uyTXcBbORM75DHrLO4M=
            "]], 
           Polygon[CompressedData["
1:eJwtlndYV2UUx6/w8+mH127TXC0rRwMUULRMRMRsOtDcKy1zBVqZmuZIpdQ0
zVHmSNNEtoggCLIEFExjFJiCiTlSrEQMzbT8nN7zx+d5vvd7zvve95533VZj
w0PDPCzLioCG8KNtWW+7LGsiTIAEx7Ie8bKsh8EfvsMrxFsEC2ExPItXQLs9
bstKgi54xzwtKxN9GP814v2hH6wjVgRL0C3pry20g5V4IXhF5K9CfwEVUC59
wRZivxKLRy9H/2KbMcnYgqCWscfgR8MFYmXkfY0+jfYm7gP5eHlQoO8/SSwH
2qBn4M2EWfI95P5Bf5vxN8FTPK/BXw1rYTpeBe2a4j8ArWA13lFiP+tYzxD3
xfeD6XgP4j0Ej0MWsVO2abOLWCLslvdq3WKI5VG7fAihfR1jWUFuPFyyzTu+
RW+Fb7QuhyAIvYTYUlgGf9P+OnjQxzDJxdsOI9AjYRyU0i6XnBzwJ3aJ9x9G
N6CNBcXER5G3hVgVejH6E4iAA3hzoT3aR+oEubIO8FaiV0E4lOO56MsTytDj
dV0lay2P2aaOUs+f0JPwYojFQhzMB1+8PGJ/MbZ6mIfXB68vPK3vnY3XGv0E
PAbZug42ojfAeqi2zZp8FT0VpsGX5Jy1zdqulO+Ek1Ci375V6g3bHLM/ZPw7
0VEQDTWM5yJcc5s5+EzWHgxFD4FBsjZod4v4TWjsZb5xOTlXea6DFbr+C8n7
wTbztRFvE2zWsYzGewPG6HxI3nCdyxE6v//Q1w23meexeHfInlUtc70DHQkb
HLMfZV8O1vHlQyd0ZwiABVp7f7QfdJA5JyeV/vfCITjDevEmpyvv+ZMls52c
bZLLczr+PPRcmAPHaRtHm1hoT+wgbSPlvEHfRTwdfY7Yeeig8Wh0BuwXZJ2Q
N4nYZJgCA+WbybsB12EPOYPwXofBsgfUi4Ij6N/gAnQi9go0oj8bzuMlkjME
rx59DW5BMp4fXiE6njFkQTZMwGtCu/vhXsggLw280HdCY3jLMTXtqPtD9snH
eONkPuBNXddS01L6LIEUtCXzLGcBzxVw2m2++x3H1Ooe9N3gwD7bnBNyXhTD
VcY5QGqHLnCb77mJV44eqlq+aRh6OIyBf/H+g4b0l0osGK+S5yqohgTb1F/m
4Xlix/Fi8ZJkP2qt6vW9Uuej6BIoho5ytuFdRl+EGuir8yZzU0afp6AaJjqm
blK/+7SmAXilsg5sc0b9f1ah2xJ/EtrJ2idnl23WYk+ZK3KKFNHyjS7yTsi6
1fqOxBsFoyEMWuKdJV4LV3StNcVrDs209tK2AdoTPHSOqsithEtuc4/IWELg
lNatF/oFx9RK5qYfuj+EQgptkqGbnDfEDrjNGnLTzzPgDeMdczYEortDL70j
5bzvge4JwXrmSJ1r6acOrkAfvAxYKOsO5sv5Rk4m3n7IggXqdWa//k5pvpLz
UM5QntOIp8I++Ej3bzf8y+RFyRko+wbvZcfMq8zvOd1HJXjFMneOuYfl3E3X
fk6gm9NPC7iIjpU4sR48B+udKXdnoJeJnSb2IvSGl/SskHUvd8Vk9PdyZ3ma
8zRDv6kJbVtDG9hFXRPAV/fxTtvsYdnLwTpX8XKvwizazoYPIYVYhGP+bw7a
5i6VO1W8rnjPQReX+feR+2OHrBOY4jL/SHNk7tG9YYCMk5ypeOEwTddcpm3W
n/wbyD9CC/UCdU3E2WYfy37urutY9miQ1Msx/1LL8JbCpy7zT/Mo3/w5OhJq
mKsAnpPIe4/ndyHMZe5k+d6Z6klsr2P+S9ag18Fal/mnkXt6BvoDeN9l/n3k
X2AROptYDuSCzXsaQTMvE5P/g92MOxF8dB+nodfL+Ux8IITCEfq6DRqcino=

            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJw1l2eMVVUQx+/bfY/dy7vsoUrvva5AAAFpSlUEBKRIkQCyShcUCGCB0JEm
SAvRDyaG+AUhEBKEiCJEgkpEJQQTiRqKIL0sHX//zPjhZP5n7sw5c86ZdmuP
nTZwak4URTVSUZQLXRCiaH0mipomUVSHMRU8C14+uDK4LXguYya4LrxmjK7o
noqjaA78GfB3g+dCG8P/IjbdSszb8b0eeBb4XXBD8FLwcnAFxpV0FD3MRtF8
eB3R3QbdxHgGvBG6wW07zpql0K0OfwO4pfTh58lmcBr8Hvw60MrIVIOWZJQF
50MzjArgPOiDtMmkwFfB5cDXofcYAfwbtGzG+KWhp5jngX+FTmCPDPgONheB
T8NLs/8t5j/pLAXYjk5FZNpmzA7tpbvoxKidsjvNc3tKQR+jlwU/hOYwLwOO
oHfcnirgAkYpcAJtwZm7gX9n/1rMy4NrQLOMquAy0FaJ3eU2bPtI7wB/HfQg
OouhS+EHZFqBe4NbQmsi0w76GTIDoKPgN4fWg98aWugykj2GbTH4OHS4v/s+
8Gvo/gC9wz0MBT/hKF+mzXdaIvMOtCf8PfDOIzNH50mZf+yLTUZvXR/b5sH7
ABv2Mp+t9wU/lzEf6JqxdbX+buh05s1T5rt/+Hvp3V5k3hD8MrSPY/F2xbbv
Aegat20VdAt7bIWehj8Y3Bv8CbhRYj55VOeL7S7X8/1DxQf8ldCtrvs0so0T
W28NvBv4RoTMcPQ6uA+M1j0onsDdoV0Uf+Ae0Gb+jk0UM4zW4I+hL/kZ+0M3
su4Gj9kl0DYpe9c5sfnJsthsWA1vHbKX08a/CW0fLE6yfK/rNtTP2H5NZQvf
Y77VVByCE3BDcGdwI/fbBi4r3W2x6Qs3db7W6op8afexnv6OuqtDsdmueB8B
7c63FvJxnSW29ddDN8fmb9s99mVDp2A+qtjqBe7BGKb7SizPyE8W+r7y2T7B
7JNtT8Ern9gdD4RfVnEEHhCMr3cYBC4JrqZ4QW84874Z0x0DHqx4BjdhtEfm
R2ReDxYDsqEGY5zeCl5Hf1O9bTc/o85VKbH4GhkMyzdHB7szvftqZIa671Xg
+zC3oSK4XzAfKpNYHlQsyD938q63cbMd0OaJ5c5FweJIvq3YqgWeBH8m/J3M
p4Fngyd7XEzMWP4X/234UxkTFPPwjiHfBZmTsenK376BbsnYPWyWX/v6M4Ld
i/infV+t/ZZqBfOL2FgGXJiY3mbwWXgJ8pegfzsWr8h9+03FNbrPpyy+Lnj+
OQd9A/0FGYtl3b/iWvH9iueWodDDzDsrh0OXuHwDZI/EFrur4C3MWIwvgi4O
Fnv7+T7Pa5xq3wnmnVLGVy1bBn8l35cr7lNW2w66zC9eE5XHJijHJmb/GfjV
wCPhTw6GR4Engau7/0wBF7m/VUks/2ivFfA+j+29VHN154XgPbH5pOJ9bTA/
kD/0gF8vWP3L5fs1ctFBvp0rsPwvP1+LzH3453XvyL7K/Aj4OjIPsvZepYPF
nOraitj4equy8Mcwz4E/GfozvJKqTdDyiquM1WjVLeWfWci8EFs+HOF4L7L/
sFeHYPlIeSmdWN1uBG9abLaFYDlf55K/9/cYUywUZ61u5/gdjoXfF5xKrI4v
1J7gR8jUDCavep4LPgB95LEzJTa/Uk/ymHEDXqVgNUu1Zph8MFgtVL7qFZs9
smuHrzME3lFwvmIKvEBrqkbKtmB1/UnW+hfdZ8WM5Vjl1Gf5/oC7OIHMePRm
xtYbqLe5gs5d1u+rfOs9T+7/d6tcE2yvKqplseVJ5U/l0SJ/o9Gx3a3saRBM
T/pNHCv3Kgdnmf+lnog9cxLrlWp5n5NCZmRsfPUptYPdrfqXyP3nPnAA9F/O
8hX8q+id9XOpd5J/qHe6VGDvq55nvmKWcQ/dftDLfNvvut96rVdPIT/U2Zqx
16609R6Ks8vIFSPTJzY/l52jlKv4Vj9luT6TeH8UbM1DWp99SiTW67WAfz1r
/n8NfrH3iuoZ93tf8bX3OQ/YayD0sL+13vy294H30b2ZtV7odoHpSFf7jQ2W
mxTXKffJVLAYVD4rAM+OzfeK0T2Ttvv5M211Wb1eVWTGee3b7vemuL5SYH6r
On8X/J3fm85aMlhu1ZuOCNZPqKbI7u8Zt/yt5MMn02Z/LvuOje29FNfTYzuj
+r5HyOcFs+9u1u5NPqZ8oJ5Ha95AZqLnVuVb5f80MuOUq4Pdr2Lhfe9zlAcH
+d3K/yv7P8KjrNVl9STVvC6pto6BjtfaKYv5con1hm2C9bHy/02qdcFqiWrZ
kGC9oGrrp7H1t6rpJYL1jjqLYk156SL2F3oeU08lH1PveqHA3kj/AvonqBjs
X0J2jnHblN/zPY6UG/8DOfp7eA==
            "]], 
           Polygon[CompressedData["
1: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
vgWLdSt6DvAYPoifzIgzn58c09zF/wCJZn0G
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQllUUh19QxNfvk09wBRcEDbUyUVsVcUlNQTBxSdxQQHFBUHDBRBu1
cMsFE1zGlplmqn9bzEmtbBmnzHDGMtMps819w1wRtec39/zxzHfu75577n3v
PefeLyG3OKso3PO8CoiA+ijPq2noeTcDnncf+wE8GQI6n4KBEBP0vCRYgT2T
vlkwG170PW8kXGPMQWJMwB4B6XAebQ/aFeLOxXc6Y/MhF9oTawo+k+Eififx
K8COQx9L/0swDgoY1xYtG3svPp/BELRnIR6tCX2VjNviOy0BrSN0AJ++SWhp
2OkwCtqgDUV7HLs79IZmaFWM3wpvwTDNj88Y7NGQD0eZ91/W2RrfEfRn0z8B
JsJoSEXrD0OgBT4tYbjNm2bx3iTOLmhlMcajzYFp2FNhErQLujkysEdCpvlp
X8bIT/6QC5O1//ZNU7Bz4B3ivw2x5q/9i8Lugd0TkmEwWhY+o+Am33SYb8vB
DuCXqDXofKCPjX1COYA9CJ638xiPloedr3OFYdDL9nK49hxWE7MC3vBdDM07
SjGwB8EAaI7/BcuTNPwmwiTYDJt8d1aKG8IvGvraPmu/M+m7Sm7tZ+yX8AVc
inJ+feifAjnaR/x2EGs7fOC7tSuHsuAF7KFam51bKloX7KZBlw9Vth6tq87q
5AZz3oFT2L/CCYhk3Dn6d2MP1RyQrVpAT4cMyLO8T8HuC/1sriDaFcYeYOy1
gKsJ1cYM+pfS/wj9e2nvg1t2Xv/hl0s7z3d7sA/tFzgOl/EZrjyGs7amywGX
k8rtMcQdC+PgNv3X6X+gb8K+G+X2oBt+XSHJ1rcIbSEshmK0xKBbj9Z1RGeM
toK+8JDbD+3Lz3CbuMn47qR/B32/43sKkrB9jcHeABuhBn6Ek77z34nPSliC
XQaLoDOxFtgaPsTvK/gaHtN5oU2ECbaWBmgR2JHQSPuIVgmbsTfBBuiGzzK0
cliu77M51mOv0R5gf0/8Q9AA7Q7fdBeO2bcVahx+r8Bkq99OUIq9EBbAUnxK
YS52IczWHYXPb8QcFMa+0N4OPdDuEvNv3TXwDwRs7Bz6E+jfzZhPfXefKp86
oH1E+2PojtYELQDREGF39krsV2EVVODTLORia46LcI85jzN+AGvZgk8lHKYd
j999+sMUg/YqCKKdRSvGLodlsATKYA20UB3h8z72e/AJlNge/ISdyhwVtF+D
A7T3KwZ2FaTQd9R35zuf9jwoslxLQKvTWrUetHC0Y/j2Z8zrtNfDQdprdW6w
zs6vC34n0Afit412te59tMigW2sP/JKhJ5zGbzB+5ei7oBc+bdAvqX5Uc1Yn
9+Eqdq3qFWLxyWRsBpyxOh6r+wt9o/JNv5ZrtwLuLbmH33TVuO/yRXtUplyH
l6E3NEeL0Z2q/MWno3Ja3x7hHm7tgc7oodYF9eChTSPmVCiEvyyHdG7nsc/B
GahjHQ/htu2p9ra97ntoCiE7Z/k9HXLvgd6FNtA46N6KTqop1Qs8h09X3We6
O6y2GwZdnSsflZeNTdO8t4gdR7utchifBay1FJZDQ6tV5bRy+3Pf/e9Q7sYz
vgB7FsxUflida0widifoHHL3ge6krdhVUB1ytaX9aKz1qVZC7h7/A+1POA2N
bI4Z9ibrbS5GewZSsPtBrO3BfLR5UGL1qZqutf9BtQF3BtPsHdB7cIO+7+i7
HnD3kHLi0aC782rsfTlE/w9wxP6PrbQ7aQ/938C3vrub1qGthdWW49FoF6yW
Y5Q74Ck3iBlmdazcKNLdAfX4XbHcVS20JE5raGX12xbioF3I/c/SfynlqnJW
NaE3Y7HvakFxWqK1gtYh9ybpbWpmayrB3gbVvvs/pv8s72L/D7P1QAI=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFl3mwj1UYx98f/V7u6837iiRFyDKWweDad127i+vKvu9LrhZLYy2lmqZt
+tsSLVQk2kgxGKnRUJZUyhJRibJvqc93nmemP955vr/vec45zznn2X5VRxcV
TCsWBMG9mSAojhwWBcEL4OnImmkQ9AmDYGwcBEuyQdAZ/lhOEOQzNgi+AePL
nNf4ePT6w9eBn498Hj4P+SDfLHAh8gLz+4CXoj/O9eui/w6/832dt/kGgtcg
I8Yng0NkLb6HwSWQu11nJ7Ivv58G90MWx7ZdcJuTIDjHXj3hA7jG7DGU8Yns
2Skye/pGZofsWYGcENu56qV2Rq05XHPhVzK+nDULwA/BN4TvE5td5+C3MD4E
/susfbJhJfx9jFfmuwm+wJeC+zGvDPJR9Msib8CXRxbCV0IWZWzeEr+T85wj
xaamcEPRacq3lrGlzGsBPw9+OtxY5DjtB3e3r98isj2ExVUITV5jbjXGxsPX
jf4fuw7fl7US8CXwMHArcHnWnAx+Av0B6F/I2txLyMr8HgvuxfiP/B4uP0F+
wzcMvA/ZPrJzNUb+lrU3PZe1Mel8jzzINxi8H1kavUO6S2yoyN7tsGFEbLaV
Bv8N3xn8BzoHwF1is0G2XOX3XX6fr4NXo5MLPoEciU5JxpaDH8/YnZ0BDwX/
jvwpa+scQZaL7CzVtSa/x4AvZ+3MOvsNZFXmz9AdhuYburfzendsbus2j+Gb
j05v1hkF7gxfnfFq8seM+YfOJ50OyNHo9ELWQOcae0yF/xd50+/2etbW6YLO
/eiU5WvmvpF6vChuKoY2V++qd2yJLJfa3egt5GvlQjuL7jTX3ygP2QT9buDT
+N4hznOePSvC70vsHvNiix3FvnLAr+i9gXwtsbhVbL6PnMu6z4DnICcxZxSy
JTZMQi7K2Bn+ZE515QnGx3veWBxafCnWzzI+hr1ngPOYWwT/HDqT4dZ7/K7T
e4bmn7Pk7+i8Ap4d2fsrjnZkLZa7gk9i70z0Fmds3b9zLKbeZK9Jkdnbw/ea
De4KnhWbXYXgac53A49G/0XWeRhZL7T8UEe5Cp2XtT78Y+AndSb0cz0fKq4U
F3qXO+EbO6/xmei/Cp7LeGvNVy6K7Z3nKa6R3fnmZMyfFoV2J9rjIfQeQXZM
7Y7Ez0JOdb4TfEPPCfWRzeD7gW9yB0We/wch26I3hfEpjE9FPgs/TfP4Fuq8
2j8yO2fE5gN9wVeQS7jHrdxn69h8Sb6xAu6Ux+D2rMWF/Ly4fJh1jsK9576g
PN9VuZG1NsGvhT+eY3l4GTjLnCqM92eNAbHFX0m4epH5fBPkP+h1hB8ZWx7U
eYco/4cW+6uytqb85yKytt9nA+Sg2O6mFGv+kmN+Ln9P+N0IfnBsOtKNUqsH
evdWyMLI/Gok8hF0FqLTWn7iMT4ytFq5AFyAzmB/04GhzVWMNEW/RWxnX8M5
moM/Um1MrOYpvrZl7a31LuOZly+/AfcMrW7rLPKRYR4XI0LL4aoRzVl/gsfg
AmQx5j+Ysffa6Hn4M+QT/u46g/KX7B8cWZ9QpLyVWj3Q+lPly8zfzLwPsHO6
12XpdY0t3x+E/ws5Gv4sslpqviUfk46479CplVpdV+/R02uc1lfPoD6idmr5
RHeZC24Tm09tSgzrbj4FN/S6r1pfwfNhHfBJxoqFltu/dnv2ID9PrLdoG1sd
V02P0Wnj96W4uCc1v1KebJTa/aqvKMXvA8z5IrF8JL9SvyOsXPhWYrW7AP4a
/Mdwg9TbMG+DY3GXGfsAuVq1mPWfCi1+FafiV3m9U+3bCG4f2747ErNBZ6mA
3M7vvfDtYottxXhJnRf+MHxH1fbY3vnDxLDebj34DF+GffPh8r2fU4/R0u2/
qnyfWK+m2rrB4129VmWvazXBVTyHyGfKuo/J1/ajf9LriPKSckkHdCulFp+K
WfUA/VX72GtPYrW5U2znVY+wE66C11nlRvUDquGfwG9LrP/Q2bck9sZ601uJ
5Q3lB+Vw1YouqdVcxU0x8A+J9Tfd4LrHVvN/Tqzuqv7ewdwgtdqv/FPgb6Qc
WMb7NOWZ2HOFcsLFxHo+9X6Xvd9T33UbOjW89o31vNQlsryn3vUscmBs9aRE
av6hPPAua0xE7yV0HkWe5ncQeg/m9Vr250QWy3pr9cbygeusWdzfKIusBD8F
XDuynkb9gHpD8Vf4fcTzj3L7pRy7B+kd0x27L+ldksj6KPUJNTz/KKfKn3uA
zyC/dTvlVw/ElvP3wvWIrcf5zXtm9SG57kv6fTyxGt1dfVqO7S87jib2RrLz
MLhDbL3kV4nlz0L0b+WYLys/347c7bHfOzYfVL+knvRUYvfS221TD7susf8F
ys31uf+tHlOKo9Jes1ULtK/61V2M95SfgU+A/wNtL5jE
            "]], 
           Polygon[CompressedData["
1:eJwtmHm8V2Mex89PnZPf09E5qZAirdKK0r1tupW03ZZ7b+kq3fZFWqSNZB9m
htes/pYYUxONKCXDaDDGEs0whilLKpIlFCXVLZ+37/eP7+s8n+f7PN/zLN/1
aTl1QeX806IoqihEUV19D2ZR1CCJopnCLUMU9cmjqLdoYRpFN4ieFf/FOIqq
GS/+VaKxois1ZnBucy4QfZuZrHPUnqqx32rOh8I/FqOoUvh54T8JD5DM8cLv
Cr8p3Fcy5uj/v1DfBM19T31fxybjbOHTRVVqv66+fyBP1EzjzxWdk9haV+j7
+4KtmfWwl+80fqfGHtL/RwqvFX5EuJ7Gd9D4eerrqrHH1HemcCNRU+Sq7xrx
vtL4/4t3XNRc/bPU11q8SFSu9rPibxTv76Jtsa3vuczOiLN6VPjPwm+JPlJ7
gvqCeM1F09X+UH3/Fq+f1rNA8u9W3zXiXSF8vfBvhacKXyiao/anGv9OZmvu
Ikpy20t7ta8T/6D474pfKnyDcHvJqC/+Ke1/rK/38czulHNaonFLRV+KP0z8
9eL/RfxBua2Bf09zor0QuaLNGrM1tvt8Su0S/199/e9r4UKw/+0U/z/Cg9EV
UYlkTteYl9T3tnhjNKZW/35SeK/wHtF6tc/S2MnifSL8X+F5wvcK3625Vbnp
DLrznmi72r2D3WUn8VPXyWVq31EwXR0ufLPwL4WnCI8Rvkf4PuH5wg9JxiOx
2cM+redl4e3cjegVtU8Wba2s+dXMdJC75s5fUDuXjInivyX8Ymb3wX3l+sd3
mekwuvym+FtdP8bxr9hsCx1D1w6IdmRmM9gO97lL7cNFWxtrXCXcXfPnFkz/
T/p5TRF+Rfy/ZaaDr6r9Wmy62dDX973wx+i6cI3w++xBuI904SrhF4QfEG4i
/qSC3Ql3g86iu9z5Zr/vhcJt9P8DwrHw1cIbxV8j/LnWO1R4tfBK4RGp6ftJ
4f3CB8QfLrxJ+K/CT7t97BI9o3Y7yZstfh3J/0z4SfU/IVrHeNGj6tus79Oi
x9RuG8w2sdETwhe5PWDT2PYn+t9g4Yc1/sHM7hydQpfQhTZ+HifE/9TPhzPj
rI6p7wc//y1qb1Bf4vtFR9CVZtiI8FHhvcKVuekqOnudeKmfH3tkr+9ndhfc
CbozWuNHiRbpnBaLvuEfiekQtn/C/c95ohai77We0eJt4EzE2y2qjW39x3wP
tOnbx/4zO3vuoLn7H9a813lH3T9zXw9nZiOTRcNys50hat8sflv9u65whegu
tf+ovuXi7dGc1sKtROeLyrWH4aLP1f+F+yvssyDeV8Kf6X9DXJ+xPfZ+h3h/
KNgZdNP4Bfh+9R11/cKfvoHPcXtC3/fHFiuG+vpGa3w7yarhHIVLiQ/CpaJJ
7g/miNcT/yZ8p3B1MP6MxHwTPor4QhzoKV6vYGv4QXRpsLVtYV+xxYgzghF3
zN3C20RMiC3GFYP5d+Lbb4QnBrPRl2LzcdguOr/L72dwajaGDOZie93Yk+bf
KP4Vwj2EJwjfIzzG4/Xtwr8SniHcVbjK48lI4f7EcuHbhauEB9Anaq/+i0SX
iMY5n7g+nLsXdVZ/F9GlPmasx376qjX+loKNvVx4nvBt3EEw/cHXTlNfr9zW
ND1YnGatk4KtnT10ym1N/Js1dBQeKRqRm41iq/igJ0SNg/kmYg6xB53tlVp8
uUntgdiI5q3EzkWjyAGKZvPYPjazp2g+Dl83ghxFeLdokNqP4f9El0nGZMm6
VX0jguUM61weuQT+Z4vHi9LUbAbbwed1F64X7O6fcf9EDvBybD4f308fvgs/
wlhyCGIzMZPYucrjETbSLbWYDZ+c47j+39T9DfHvn5npH7q4zf09Z7U7Np/G
mf1L+B3XR/73nMcvcqo6wWIWcSwL5o+QQexIXbeJycRmYkSjYD57k8fvnqnN
3eb2gIznPX7iI7FdYh6xaYrnc7UeT5GxNjP/d6fO+9fqmxVMHypFZbnpLjaK
rT6k8efn5vPwfRs9BrRQX5nmL9GYvhp7JvoqvKJgesx5cxdbPHacyix/xEf0
ET/KrY8284k/bd3v4s9a5qbL6DR6vNb3Tww7or2cJn65+EuF+wWjy0WF3HgX
4kc9vyW/a5WbTGRhG41yW/Mwtz18WKWvH9/WVLin21u58Lm59dFGP89W+yzR
wGD+4VjR7pZ8bjWxQ7y+7j/IwxjbW3hZweYQsznLDR5nW5NDiX9XwfJxbBrb
HqW+tuI1wY4T89FlwWyOfyAbW8R2l3v8w4Y7BIvJxGLy9Vp91+g/14vfA3+k
8fPdf81LzT/UBMtByUWJochC5tDcdARdWSw80McscX84yePWUuHfCc8OFsPo
o32tqA1rTSxmENuG5CYLmQtSkz8zWFxCN6s8nt8v/tLUcgb6aC9LLWde7/ZU
klqNg3/a6jkYMZ24diN+CpvS3M6uL/hhYupQ4eW+njrovfufaZrXILc5/d13
k9N3EX9RwXL9INzV94O+FIVPz00H0UV8/Bi/b+Z3yO0uudOZqdUQ1BLj1K5O
zWfi69a5PiCro9sXMlf7fqkZDhbNJrHNVbHF0DWes1W7/XcMVo81Fu9IZrXi
DOE0sZqRPnhNEouznV3/iWHEsoaiixOzaeyEuDUysT2wF2Qg6wzRoczOhLNp
SK6UWU1AbcCZc47UTp1Fse+bM+FsuiV21tggtlaSmG3iE9h7y8R8BWeMbbIe
zh4bxBa75xY7Sjxek3OQW/ycgyRmw9htM7cfbLK5z+eu+yVm2+gAujA7MV3F
prFdxmPrxGBymYmJxeZBwWwRmcjGxxD7KxLzPRczJ7H4ShwnBhB7yF2JDVe6
/BrPf8p9/+MT2xNEm3j9c+4RzJfh0/AV6Bi6zPmiewX3x+hwHc8biO+LEnsz
gGhjc9jeeN//VOELsOXUbA2bq3Q95vyRiWxyAmq3WxPLFeb6edxE7pkb0cZf
4IsmpKYP6BC6NNnzD3zEMD8v9kOORq5W5vkMPmmA7xdfOCuxtwpqLmovYghx
Y5n7I3LiCs8/yDeoOfbKPq4OlvvN8fmV7k/5R5nHAWILbxjkSPgUfMsK7iFY
DXCt+O0Sqw3wYfiyRaLFwWo4ajnq7dfUrnB95s65+0Nuzw96ftPf7wsbwpZW
ev5CPtUjtTiEfmOD2GKN6xNvEvhk7oi7muaxkbx4PrmPcOPcfDq+nZqA2uBj
r3cOi47HVq/wbRXsPYUcm1jMeZJ7v+32jI9oId6XXkdgs1083mEL6DuxiBqU
tw7eIKhNeVPZ7nUZtQ5vCPs9/yDf3uf1EjUjcf514R1ej1H34UPwJdQslant
gbrrsmB7w0fhq9gze8dn4jvxk+g/byD1EquRWQ81FrUWNRG1UZbbWTH/kmBE
G5mHNS53f8GZcDa8IVDLUtPytoBPq+/7LfUcgtg5N7HcAn1gT+yFWpYaep/X
yeQ2nA25IzkkZ/SGcN3Ean7ya97Mdrif5i2NNxDeQnjDqB/sjemb2OrT9n6H
nGWt3y1vFrxdsN7zPJayPmo8YiqyeevgfvkH+Sxvhrx7fJRZvsD7xo8a84H3
HfH1MhYd3+n5coNgOoIsZP4vszeyYmI2g+1Qh56KTWanYLpEXyePA9Sk6Bi6
Ra36E4JOfZ0=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhi8YJh9XLormkDiFmuSUDAqooQyKIijOOCCaaIpihppZ2eDq
V6tp9bfRLGtpow3aZKZm5YCkpuXQIIKIM2JmSs+7zv7xLN77nn3Od/a5Z+9L
tznlhUvCPc9bCxGwNOR5z4Xxt7nnlcNMnqfBfPQaeJaxcp7fDjzvfSak+J53
PdLz/oVl+M8zvoK45TCX51CM592LHgD9YBrxRTAQ7TPWEqIVQ+wASA+5sQCv
Av0C6z3K82p4gOe+0AeSoCteBHHFrDcM3R7dATpCFNyN1xv62+8Ox8uAEbAM
rwxvkUB3xesG3WEp3uN42ZAFqXgz8FLQrdCtIRZy4RG8VbASlhCTxr5SYbrF
xxCziOeFsBLW4hXirUC/SG5P8vwELCP+fhiPnqAY6ElcDyhA50MezCEmi7mZ
MB5m4CXaGdyHHg4Z0AXvLhiDHg05UELMed7TOdjE+9vK+7uBXu67fY1XPqy5
Gh6Dl9lfKf4zyo+YSMb7ovtAAky18ytT7rAYhhGTBnO1V5it90ZMb70PSIBJ
ePPw+mk96A/T8ObjtdV83Tv0Heh2kKg7AW1sLAO9wHe5D9DdgYHQB6bjFWlv
tl4T+d2C3eR7hHyjmTsbfwTjdxLfCeJgF+M74Qc4RFwGMReZdwE85mzDe4Wx
Op7PwKt2/y+ha6EG3sBbj5ekdwEH0L9AFXzP2A5bO4r12kOHkKsb1c86xnYz
1gzvY/QX6C3wNaSz1pd4p9E1WguG4l1lXgNsZOwzvMF476I3oweh/2PsJtTD
WdhgY43KC92TM+gFt8M44i/hXYTLEOg+4GXCceachBNwgLEhvjuPT9Bh7Dcc
rtqcQt/Vseq5AB2OV629Qw1M1HvFa0Rfg38C926q7KyOwnBi/tYY+jo0wRi8
qaw5Bcp0P60udddK0BP1XqEEkvGSIMXGdP9Uv4M0BwZbXaYoFrJD7j7ctP21
Q8dBJ7gRuH6ViE6GJOtNQ5kzBGZZ71G9xcMC/R6MtHpT/Y5VL0QXED/O7nGS
rZdud70z3jz0Qt/lqFy7QGcYi+cxVsVeRhKXA6PgYes5mdbPFqNL1avhHquz
UrxCnieEXH2ozvK1byi2OpqJVwyzrJfk2trlvutbi2y9KXiTddZWv+qTeg95
yhHyY1x+yrMo5Pqq+oH2V4F+CB60vruK8ZfoL0/z/BRU4P1oNar3/xP6Z6iE
3/B+hz8hi7FDeGfRI313PjqnYei9ePthH3wTuBqsRG9DfwfbVbPW91J91xfU
HzbjfWV19qlqSfUHn8MW+60c+91z6HqoM2+regZ6F2y3upwArcgpFlrDlcDV
R1t0G4i22jqPF4UOQXOrwQ/w/rA8P0R/BIfhEt5FOA+jfFfXqu8WIZej+otq
9Rh6L3of7A9cDTbTdxJugz2qK+Zdi3R9RnmnEZMPYYy31HfZ7lqItSNVG7au
aj8bXY0+A7WqWetrv6IPw0HrneoJ6g2Vlk8suq3uPsSHXF/QXib57jt+C90E
nr5bjHfXnQu5XqEanExcPHoU5CoX4qrJ4RS8xvg6fiORmDetB5+2HJVrsvoi
3g7YCesD945i7Oz1DhqUQ+ByUm4X7Jz1TR5n31B9S3vxu8fUuxiPY3+9IQFy
ibuCdxUadF+JCSc2DJpZD9C3W+d3ivEWPEfCQeJimB9AR7hsc/Ub6n3qgY0w
2ndn0MP+p9H/NucC9y3LRG8g5p0I18NOwHE4afvUXJ3Be+hNsBHeCtye9XtH
0EdVZ/C6neVf9m3RN6YW7xZeHvF1qofA3Rf1pFp7rg9cDe6xWlBNfIv3P95I
TZ8=
            "]], 
           Polygon[{{4102, 4101, 3157, 1569, 1579, 3159}}]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJxFmHlwltUVxt8X4X3hfl/1YtVWnXbGOm2nddppp2Onm522U6e1U9vRaV3r
giK1bthdq4JUWxEV2XdCSAgkBAiBBAIECIEIgbAHAoQdZJGiIAIVivT5eU6n
f5z57nPP/e57l3Oec8697qG+tz/VJUmS29Ik6arfHSFJWtQu5EnSEJNksXC9
8JksSSqFP5CckswrJsl8yWm1f6Wx7Rrzb43dIlmu9nmNnyFdVkiSbpIo6Vmw
OZjrrGS62rM0fqbG7xYeI/yO8FHJv9Q+Lsl7Jsnjmn+fxjToe8fU91PhVcL7
NO6s8N3CW4Q/FB4pvENzdUpGq71MfbOkOyQ8MdqaWfvlWssnC/aNn+n/61L7
9gDJaLVf1/g7pTsofEDyntq/0LiRapdJP0T6e9Q3VHMNkUxWu0wyRLJVug7J
ULWXaPw8jd8lPEy4q/bzsObpLemmdg+tYWNqfeguaPxW4QeFuwiXCVcJT9T/
H9D/Dwm3CV8rfbPwAsmX1b5Bsoh74RvMLZmv9jOSOv23XvKs2u/r/xv0//uk
/0j4iPBa4euE1wjvFH5L+FPCy6KNYez9kkTrmSx9pfQjNN990s30+1sk/Dfh
gZmdHWf4onSt6rsmt/WuVnuY+iZLN1hj7oq2J/Y2QTJOcnc0HWNe0tjx3j+K
OSX3Sl+p3yrJXMkejVmpsZ/R/G9Jt0JyVW7rb1F7tPTl0o/V2PvddvtItzc1
Oxgi/aTU5uc7D0Yby3+el3699EvU/qz+0yZd72hrZc2TJXXS10q/Se03pXtY
Uq52meQhxkpfIX2FcB/h30nWqt0m+a3avSST1B6vMcM1tntPs3lsfYGkQX1z
pdvPGI1tF24WPi08VXhQsP8yxyPCc4RrUvsG38InNwvflpuvlvh6Vkg/UHiE
3wfrfYzxkjs19i7JOfdHfONLwpuEV0k+p/YK9XVw9tHOhjNah+0Kv6a5BmXm
L23qWyzdMeEp0q2XfFH9X5CsVbsvc0rXKvl9NB+GS+AUfLtFeFFq/jxYeJpw
dWr3/xS2IzzBz/dx7l94ofB67FB4r+Rbmuvbkv1qvyBpkG6BpL9/D+74rvR7
hAvyxyAp6A6KkvHST5G+UeNflP5t4dXCt2v8TuEa55cW6V/y82b9N0rfKbw5
2l7Zc7vaXTT3NunvEN4hvE3yc7VvlWxXe67bU63m+4PwBj/v6yUb1f6HpEm6
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
1cC1Hk9Z338Byld6Tg==
            "]], 
           Polygon[CompressedData["
1:eJw1lnlQV1UYhq+lmD9u9SMdNSvLlpn2fd+zfZvKxl1LzX2vZirLXQQVAcUF
hRSDFEQQoRQBTU1l0VwQ9xXJyg0XUlRQ7HnnfP3xzLz3/b5z7rnnfOec26rH
kDaDr/E8LxwaQGbQ8y6FeF6873mbAp63GZai+zb0vEfgYThLThV8iP4A3oPF
5AzHW0XbNLWBZTAd7zBeProQiuArvGy8JZABY2kbjbcDPRldQM4KiMXbhlcG
eyCaWBL+XJhAbIP6QA9EL0CPJj4IPRiGwhD40vqNIpaIrkD/CcdgCl4MHEAf
goMwjZwE+pwN8yEf7we8JeS14zs7QHuoxrs+lDb1PK8Tzx2hhvxw37X5jvgw
+B6m453Em4OeC0lwBN6kzRvQGjJ8l1dJ3mk4BeHkVNPnJ8T7wX7e5fPOw/jl
+hZ4BT+ddtPgOG3m4aXAzxBF20nQS8/EZqETybuBNo/DE7CC2CS8LTbPmu8o
vAl4RegSKIaJQfeOE+gLUA2T8GbjeVp/dJbmCWZo3aG/rcso363XOvR62Kj+
8GYqF+KtRmLxMmmXAbmw39ajDL0NKuBB3rUUr7d900itK/6PVmtaW61xufXX
x+pE7+uL7mdjrkc/DSEEfgm6elPdxdk86ts0l0fRU/GSbV5noWvwzsF51S9e
J4hFj7Pv1vePVp94K2EtRNBuLP4YaE8sWjWCl4oOMoYw7Su8GXg55GTDmoCr
G9XBQkiDdNufM612NUdT8KZCHIzDy8XLg+XwDV4M7EPvhd22j7S+hejxxCIg
UrWqGtTeV//QBS+VMSyASMtXHXymedC+0BoSiw+4/bsLbydst/3Wwb5zFPGp
mlt9P97v/8+Hxgv56MF8f6Mwz2tGfTcPdeuZaPOo/EXoneiPyMsi/xzP5+EA
3jN4adpjPFcG3Bl2lTZ1cNHm6mu8rehSyLQzZz9eG9p+Co/BAt/NwTTiiyEL
upKzlz73QAqxe8nbZXVQS/wKXNb48MbgpaMHBN0ZpbNqA5RAKQRou1I1Cq+h
X4WXbf+uwWuGbgpNYI7v8rS/F6FP0/5MwJ0br+OdQNfCZdvTN+I1hptgvvZd
0NWn6vSM1VUS3Eb8dmgJRdpD9k1b0aU6b827D+8BuN++V2fEZvqpgn91Tmu9
tSYwj9gd5BXjTdTZDN00B9q/Vh+qk854OTqj0N0tPtx3Z22C3TW6c3bDrTY+
jVl6HXo9FKoe4Ba8FtAc5pKzNui+XXNws3n78J5CPwmP2vrqHG+L3k1sj9YW
NsHdeMn6RvSWoDu7khlfCqTa3fKTfWeJzhTYCON15kNHOwOGkbOV5y3wh/V7
AP03+i/4x9Yvw/prhb4L7rT5S/BdnSxD58JyqISTcAret7u2se4B7oMBPPeH
XN/dPQV25qywe2sh3vM2B5qLQ3i12sPortAZslU/9HeI/rrx/Dl4PF8HDaFJ
qNufAfZnJrlvo9+Fd1SHQbcPtR8bkdfH/g+0D7UfLwTcfOu+rLLxn8W7AnVw
GMrhFLxl/ek/Yg3jXw2/6Yzy3XsVP0rsGByHkTACRgXdf4fy8tF5UGDnQqrv
/l80rvqMvwGEQFPGWsH3DsIfCHm+W6+Wtj/usXrQ+fIc+ll42vqbDw+h43Q3
hLj7aDXjXwXFAXcf6k5Rnu6rMvR22GHr8QLeS/AiHMQLYyzljKU3z710J4W6
c3yZ/SPpX+lb8uox7p7Ev4Duegc5Lcg9QtuPeR6q+9x369sFnYO+lnh9uIR3
EWospjWPZKwR0M7O8xj0VXQdeLyrh70jGn8yzAm4862tjUXxX31XI6qVODvn
e+ruJG8Esf8AmvSeJg==
            "]], 
           
           Polygon[{{4286, 4285, 3226, 1803, 1813, 
            3228}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0M0uA1EYgOFvpq2ZqdqwrI2kNgQ7liyVlrY7WxfQxl/8/1wCCTciXIUb
YVWJPZ4hmXfeNzlzvpwzc/ujwTCJiD18iHW+TyMesKmfuc+NPGISPV3nArs6
5ww7usZVdHWFU3R0kpcfRmzTTxaxxd/c5jfzN/iVX7Cmn/gRy/qIDzGv+9zD
rF4p1zGjp7iBuv5yh/I+B+an5X6u8DGfoKpP+Qw1fc4XmNCXfAVPXHvdZH/H
jlu+Q6ELQ6d5gRfR1B3uoqWHPMKSHjvIJ1b1e/L/f38B1Wsfog==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0MkuA1AUgOGjNt00iKmlFl6DhHdoqZoS09KwYlkJC5a61OqkplfwIqw0
8RQSNr6bLv78f25uzj25iwdnpdORiNjEZybijmujEZe4111+5LdsxCt6+oWf
0dVP3EdH99IZ2rqTjJZu8UNCN7nJDW7wu/l17qd3cKuv+SrtoPd5Dxd6lVdw
ohe4iCP9Z+9fbOtvLnHO/DKP8RqP8wTW9SRPoaKneQYbepbzqOoCz2WH/zLP
RWzpH/MPOe/tAo71Ei/jXO/wLmr6y90BbvRHZvi//9jcK/I=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Mkug1EcxuG/VIxXYUfCVo0x1IqExK5ba+ONCNfQUtWKoS02rFoWJLVk
SSIx1dQb8CQWvzzv4ss5J1/P0triaktEpFVLRDxyuTViRW/2Jpuc6YxI6dee
5pR+7ElO6Nse55i+7FGO6NMe5pAadpIfHOQ7c85/4ja39GBvcF139gLndW0P
sF+Xdje7VLFfvftFRbvODPMdEVkWuMMiD7RrH/JIOfuYJ9qzSywrb1d4qn37
jOcq2M/OL7PN3e26sHvZpyt7lnOq2ze+vdW9XU38/98/eTE3Qw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0EsuA1AYQOFf0kpMmCE60SFDJkSLqgbxLhOaVGIBbEBYRTfCiKSbUIq0
HototfVIfI3ByTk3N/nvI316XjwbiIgj3CQiZiyOkxElLOgLXuWPoYh35PUb
v2JFN7mBnH7hZyzrJ65jST/yAxZ1jbN8zxmumD/LV3yJaX3CZaR1ljMY1yme
wIjuuWsXg/2zuI5fb6hyiwvmt3mNP3mdN9DRm7yFrt7mHfT0Lu/hS+9zEd/6
gA/xo2vmJ53Z4jaG9ag7jfXRczyPSX1r/w5T+jrx/79/g6cwpg==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPHTxF/ULpCwEaWtx8CAGBGDRid9oKJFJAy9HwtgRGIVklpI
1aP1XoJfY/Dl+25u7snJHVopz5VSEbGImyRi32G8PyKDQ13gK94djNjBpd7m
Bi50nbdwrje5hjO9wes41WtcxYmu8DGX+Yj3zD/gIq+ioXOcRVWP8SiKOs0D
WNZvdn3Fgn7kJmb1PWe4lY6Y4DZP8jO/INt7yx3kdJffkdcf/Ikp/cXfmNY/
/IsZ/WD+PD9xG0u6z05Jb389zCOo6Fv3d6jr6+T/f/8AU3sxzw==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvQ3Ecx+GfpU3QKuJSmzdAwhuRmqw2S72DBlG3MlRSd0YGiRrZGDWV
uIzul5mEN+A5MXzyfM8Z/vmfMzg5XSi2RMSEKqmIOw9D6YhhPdhj/ORAW0Re
H3Y/+/Ru97JHb3Y3u/RqdzKnF7uDWT3bGT6xnY+ccv49x1lQwx7liC6Tc5jT
uf3rfj86tW95oyO7zhMd2DXWWGqN2OAMNznLOW3Z8yxr217gonbsJS5r115h
RXv2Kte0bx87/5BNXqtuf/FbZ8l3uWtGF3bVu3VdJeel/v/vH3+LMrI=
          "]]}, {
         Line[{2, 487, 11, 500, 501, 20, 526, 527, 29, 560, 561, 38, 594, 595,
           47, 628, 629, 56, 662, 663, 65, 694, 74}], 
         Line[{1905, 485, 1922, 3268, 2845, 3269, 1940, 3291, 2853, 3290, 
          1958, 3317, 2861, 3318, 1975, 3343, 2870, 3342, 1990, 3366, 2879, 
          3367, 2007, 3396, 2890, 3395, 2026, 3421, 2024, 2046}], 
         Line[{1907, 486, 1923, 504, 3271, 1941, 3294, 2854, 3295, 1959, 3321,
           2864, 3320, 1976, 3345, 2873, 3346, 1991, 3371, 2882, 3370, 2008, 
          3398, 2893, 3399, 2027, 3423, 2028, 2047}], 
         Line[{1909, 2843, 3264, 1925, 2848, 3274, 3275, 1943, 3302, 2856, 
          3300, 1961, 3328, 2866, 3326, 1978, 608, 3351, 1993, 3376, 2885, 
          3379, 2010, 3406, 2896, 3404, 2030, 3429, 2034, 2049}], 
         Line[{1912, 2844, 3266, 1928, 2850, 3284, 3286, 1946, 3313, 2859, 
          3311, 1964, 3334, 2868, 3339, 1980, 2877, 3360, 3362, 1996, 3391, 
          2888, 3386, 2012, 3413, 2898, 3418, 2032, 3435, 2040, 2051}], 
         Line[{1914, 1921, 3270, 1930, 1939, 3292, 3293, 1949, 3288, 2862, 
          3319, 1967, 3315, 2871, 3344, 1982, 3341, 2881, 3369, 1998, 3364, 
          2891, 3397, 2015, 3422, 2900, 3394, 2036, 3420, 2907, 2053}], 
         Line[{1916, 1926, 3273, 1933, 3299, 2855, 3298, 1952, 3325, 2865, 
          3324, 1969, 3348, 2874, 3350, 1985, 3375, 2883, 3374, 2001, 3401, 
          2894, 3403, 2018, 3425, 2901, 3427, 2038, 3440, 2909, 2056}], 
         Line[{1918, 1931, 3278, 1935, 1950, 3305, 3307, 1954, 578, 3331, 
          1971, 3356, 2876, 3355, 1987, 1999, 3381, 3383, 2003, 3411, 2897, 
          3410, 2021, 3431, 2903, 3433, 2042, 3442, 2910, 2058}], 
         Line[{1920, 3261, 2852, 1938, 1955, 3279, 3281, 1957, 3308, 2869, 
          3337, 1974, 620, 3332, 1989, 3357, 2889, 3389, 2006, 688, 3390, 
          2023, 3417, 2905, 3438, 2045, 3444, 2912, 2060}], 
         Line[{2048, 2033, 3428, 2029, 2013, 3407, 3405, 2009, 3378, 3377, 
          2884, 1992, 609, 3352, 1977, 1965, 3329, 3327, 1960, 1947, 3303, 
          3301, 1942, 511, 3276, 1924, 1906, 3263, 1908}], 
         Line[{2050, 2039, 3434, 2031, 2019, 3414, 3412, 2011, 3385, 3384, 
          2887, 1995, 3361, 2878, 3358, 1979, 3338, 2867, 3333, 1963, 3310, 
          3309, 2858, 1945, 3285, 2851, 3282, 1927, 1910, 3265, 1911}], 
         Line[{2052, 2906, 3419, 2035, 3393, 3392, 2025, 2014, 2892, 3365, 
          3363, 1997, 3368, 2880, 3340, 1981, 2872, 3316, 3314, 1966, 2863, 
          3289, 3287, 1948, 529, 3267, 1929, 2846, 3262, 1913}], 
         Line[{2055, 2908, 3439, 2037, 2902, 3426, 3424, 2017, 2895, 3402, 
          3400, 2000, 3373, 3372, 1994, 1984, 2875, 3349, 3347, 1968, 3323, 
          3322, 1962, 1951, 3297, 3296, 1944, 1932, 2847, 3272, 1915}], 
         Line[{2057, 3441, 2054, 2041, 2904, 3432, 3430, 2020, 3409, 3408, 
          2016, 2002, 3382, 2886, 3380, 1986, 3354, 3353, 1983, 1970, 579, 
          3330, 1953, 3306, 2857, 3304, 1934, 2849, 3277, 1917}], 
         Line[{2059, 2911, 3443, 2044, 3437, 3436, 2043, 2022, 2899, 3416, 
          3415, 2005, 3388, 3387, 2004, 1988, 621, 3359, 1973, 3336, 3335, 
          1972, 1956, 3280, 2860, 3312, 1937, 3283, 1936, 1919}], 
         Line[{83, 725, 92, 738, 739, 101, 764, 765, 110, 798, 799, 119, 832, 
          833, 128, 866, 867, 137, 900, 901, 146, 932, 155}], 
         Line[{2061, 723, 2078, 3452, 2915, 3453, 2096, 3475, 2923, 3474, 
          2114, 3501, 2931, 3502, 2131, 3527, 2940, 3526, 2146, 3550, 2949, 
          3551, 2163, 3580, 2960, 3579, 2182, 3605, 2180, 2202}], 
         Line[{2063, 724, 2079, 742, 3455, 2097, 3478, 2924, 3479, 2115, 3505,
           2934, 3504, 2132, 3529, 2943, 3530, 2147, 3555, 2952, 3554, 2164, 
          3582, 2963, 3583, 2183, 3607, 2184, 2203}], 
         Line[{2065, 2913, 3448, 2081, 2918, 3458, 3459, 2099, 3486, 2926, 
          3484, 2117, 3512, 2936, 3510, 2134, 846, 3535, 2149, 3560, 2955, 
          3563, 2166, 3590, 2966, 3588, 2186, 3613, 2190, 2205}], 
         Line[{2068, 2914, 3450, 2084, 2920, 3468, 3470, 2102, 3497, 2929, 
          3495, 2120, 3518, 2938, 3523, 2136, 2947, 3544, 3546, 2152, 3575, 
          2958, 3570, 2168, 3597, 2968, 3602, 2188, 3619, 2196, 2207}], 
         Line[{2070, 2077, 3454, 2086, 2095, 3476, 3477, 2105, 3472, 2932, 
          3503, 2123, 3499, 2941, 3528, 2138, 3525, 2951, 3553, 2154, 3548, 
          2961, 3581, 2171, 3606, 2970, 3578, 2192, 3604, 2977, 2209}], 
         Line[{2072, 2082, 3457, 2089, 3483, 2925, 3482, 2108, 3509, 2935, 
          3508, 2125, 3532, 2944, 3534, 2141, 3559, 2953, 3558, 2157, 3585, 
          2964, 3587, 2174, 3609, 2971, 3611, 2194, 3624, 2979, 2212}], 
         Line[{2074, 2087, 3462, 2091, 2106, 3489, 3491, 2110, 816, 3515, 
          2127, 3540, 2946, 3539, 2143, 2155, 3565, 3567, 2159, 3595, 2967, 
          3594, 2177, 3615, 2973, 3617, 2198, 3626, 2980, 2214}], 
         Line[{2076, 3445, 2922, 2094, 2111, 3463, 3465, 2113, 3492, 2939, 
          3521, 2130, 858, 3516, 2145, 3541, 2959, 3573, 2162, 926, 3574, 
          2179, 3601, 2975, 3622, 2201, 3628, 2982, 2216}], 
         Line[{2204, 2189, 3612, 2185, 2169, 3591, 3589, 2165, 3562, 3561, 
          2954, 2148, 847, 3536, 2133, 2121, 3513, 3511, 2116, 2103, 3487, 
          3485, 2098, 749, 3460, 2080, 2062, 3447, 2064}], 
         Line[{2206, 2195, 3618, 2187, 2175, 3598, 3596, 2167, 3569, 3568, 
          2957, 2151, 3545, 2948, 3542, 2135, 3522, 2937, 3517, 2119, 3494, 
          3493, 2928, 2101, 3469, 2921, 3466, 2083, 2066, 3449, 2067}], 
         Line[{2208, 2976, 3603, 2191, 3577, 3576, 2181, 2170, 2962, 3549, 
          3547, 2153, 3552, 2950, 3524, 2137, 2942, 3500, 3498, 2122, 2933, 
          3473, 3471, 2104, 767, 3451, 2085, 2916, 3446, 2069}], 
         Line[{2211, 2978, 3623, 2193, 2972, 3610, 3608, 2173, 2965, 3586, 
          3584, 2156, 3557, 3556, 2150, 2140, 2945, 3533, 3531, 2124, 3507, 
          3506, 2118, 2107, 3481, 3480, 2100, 2088, 2917, 3456, 2071}], 
         Line[{2213, 3625, 2210, 2197, 2974, 3616, 3614, 2176, 3593, 3592, 
          2172, 2158, 3566, 2956, 3564, 2142, 3538, 3537, 2139, 2126, 817, 
          3514, 2109, 3490, 2927, 3488, 2090, 2919, 3461, 2073}], 
         Line[{2215, 2981, 3627, 2200, 3621, 3620, 2199, 2178, 2969, 3600, 
          3599, 2161, 3572, 3571, 2160, 2144, 859, 3543, 2129, 3520, 3519, 
          2128, 2112, 3464, 2930, 3496, 2093, 3467, 2092, 2075}], 
         Line[{164, 963, 173, 976, 977, 182, 1002, 1003, 191, 1036, 1037, 200,
           1070, 1071, 209, 1104, 1105, 218, 1138, 1139, 227, 1170, 236}], 
         Line[{2217, 961, 2234, 3636, 2985, 3637, 2252, 3659, 2993, 3658, 
          2270, 3685, 3001, 3686, 2287, 3711, 3010, 3710, 2302, 3734, 3019, 
          3735, 2319, 3764, 3030, 3763, 2338, 3789, 2336, 2358}], 
         Line[{2219, 962, 2235, 980, 3639, 2253, 3662, 2994, 3663, 2271, 3689,
           3004, 3688, 2288, 3713, 3013, 3714, 2303, 3739, 3022, 3738, 2320, 
          3766, 3033, 3767, 2339, 3791, 2340, 2359}], 
         Line[{2221, 2983, 3632, 2237, 2988, 3642, 3643, 2255, 3670, 2996, 
          3668, 2273, 3696, 3006, 3694, 2290, 1084, 3719, 2305, 3744, 3025, 
          3747, 2322, 3774, 3036, 3772, 2342, 3797, 2346, 2361}], 
         Line[{2224, 2984, 3634, 2240, 2990, 3652, 3654, 2258, 3681, 2999, 
          3679, 2276, 3702, 3008, 3707, 2292, 3017, 3728, 3730, 2308, 3759, 
          3028, 3754, 2324, 3781, 3038, 3786, 2344, 3803, 2352, 2363}], 
         Line[{2226, 2233, 3638, 2242, 2251, 3660, 3661, 2261, 3656, 3002, 
          3687, 2279, 3683, 3011, 3712, 2294, 3709, 3021, 3737, 2310, 3732, 
          3031, 3765, 2327, 3790, 3040, 3762, 2348, 3788, 3047, 2365}], 
         Line[{2228, 2238, 3641, 2245, 3667, 2995, 3666, 2264, 3693, 3005, 
          3692, 2281, 3716, 3014, 3718, 2297, 3743, 3023, 3742, 2313, 3769, 
          3034, 3771, 2330, 3793, 3041, 3795, 2350, 3808, 3049, 2368}], 
         Line[{2230, 2243, 3646, 2247, 2262, 3673, 3675, 2266, 1054, 3699, 
          2283, 3724, 3016, 3723, 2299, 2311, 3749, 3751, 2315, 3779, 3037, 
          3778, 2333, 3799, 3043, 3801, 2354, 3810, 3050, 2370}], 
         Line[{2232, 3629, 2992, 2250, 2267, 3647, 3649, 2269, 3676, 3009, 
          3705, 2286, 1096, 3700, 2301, 3725, 3029, 3757, 2318, 1164, 3758, 
          2335, 3785, 3045, 3806, 2357, 3812, 3052, 2372}], 
         Line[{2360, 2345, 3796, 2341, 2325, 3775, 3773, 2321, 3746, 3745, 
          3024, 2304, 1085, 3720, 2289, 2277, 3697, 3695, 2272, 2259, 3671, 
          3669, 2254, 987, 3644, 2236, 2218, 3631, 2220}], 
         Line[{2362, 2351, 3802, 2343, 2331, 3782, 3780, 2323, 3753, 3752, 
          3027, 2307, 3729, 3018, 3726, 2291, 3706, 3007, 3701, 2275, 3678, 
          3677, 2998, 2257, 3653, 2991, 3650, 2239, 2222, 3633, 2223}], 
         Line[{2364, 3046, 3787, 2347, 3761, 3760, 2337, 2326, 3032, 3733, 
          3731, 2309, 3736, 3020, 3708, 2293, 3012, 3684, 3682, 2278, 3003, 
          3657, 3655, 2260, 1005, 3635, 2241, 2986, 3630, 2225}], 
         Line[{2367, 3048, 3807, 2349, 3042, 3794, 3792, 2329, 3035, 3770, 
          3768, 2312, 3741, 3740, 2306, 2296, 3015, 3717, 3715, 2280, 3691, 
          3690, 2274, 2263, 3665, 3664, 2256, 2244, 2987, 3640, 2227}], 
         Line[{2369, 3809, 2366, 2353, 3044, 3800, 3798, 2332, 3777, 3776, 
          2328, 2314, 3750, 3026, 3748, 2298, 3722, 3721, 2295, 2282, 1055, 
          3698, 2265, 3674, 2997, 3672, 2246, 2989, 3645, 2229}], 
         Line[{2371, 3051, 3811, 2356, 3805, 3804, 2355, 2334, 3039, 3784, 
          3783, 2317, 3756, 3755, 2316, 2300, 1097, 3727, 2285, 3704, 3703, 
          2284, 2268, 3648, 3000, 3680, 2249, 3651, 2248, 2231}], 
         Line[{245, 1201, 254, 1214, 1215, 263, 1240, 1241, 272, 1274, 1275, 
          281, 1308, 1309, 290, 1342, 1343, 299, 1376, 1377, 308, 1408, 317}], 
         Line[{2373, 1199, 2390, 3820, 3055, 3821, 2408, 3843, 3063, 3842, 
          2426, 3869, 3071, 3870, 2443, 3895, 3080, 3894, 2458, 3918, 3089, 
          3919, 2475, 3948, 3100, 3947, 2494, 3973, 2492, 2514}], 
         Line[{2375, 1200, 2391, 1218, 3823, 2409, 3846, 3064, 3847, 2427, 
          3873, 3074, 3872, 2444, 3897, 3083, 3898, 2459, 3923, 3092, 3922, 
          2476, 3950, 3103, 3951, 2495, 3975, 2496, 2515}], 
         Line[{2377, 3053, 3816, 2393, 3058, 3826, 3827, 2411, 3854, 3066, 
          3852, 2429, 3880, 3076, 3878, 2446, 1322, 3903, 2461, 3928, 3095, 
          3931, 2478, 3958, 3106, 3956, 2498, 3981, 2502, 2517}], 
         Line[{2380, 3054, 3818, 2396, 3060, 3836, 3838, 2414, 3865, 3069, 
          3863, 2432, 3886, 3078, 3891, 2448, 3087, 3912, 3914, 2464, 3943, 
          3098, 3938, 2480, 3965, 3108, 3970, 2500, 3987, 2508, 2519}], 
         Line[{2382, 2389, 3822, 2398, 2407, 3844, 3845, 2417, 3840, 3072, 
          3871, 2435, 3867, 3081, 3896, 2450, 3893, 3091, 3921, 2466, 3916, 
          3101, 3949, 2483, 3974, 3110, 3946, 2504, 3972, 3117, 2521}], 
         Line[{2384, 2394, 3825, 2401, 3851, 3065, 3850, 2420, 3877, 3075, 
          3876, 2437, 3900, 3084, 3902, 2453, 3927, 3093, 3926, 2469, 3953, 
          3104, 3955, 2486, 3977, 3111, 3979, 2506, 3992, 3119, 2524}], 
         Line[{2386, 2399, 3830, 2403, 2418, 3857, 3859, 2422, 1292, 3883, 
          2439, 3908, 3086, 3907, 2455, 2467, 3933, 3935, 2471, 3963, 3107, 
          3962, 2489, 3983, 3113, 3985, 2510, 3994, 3120, 2526}], 
         Line[{2388, 3813, 3062, 2406, 2423, 3831, 3833, 2425, 3860, 3079, 
          3889, 2442, 1334, 3884, 2457, 3909, 3099, 3941, 2474, 1402, 3942, 
          2491, 3969, 3115, 3990, 2513, 3996, 3122, 2528}], 
         Line[{2516, 2501, 3980, 2497, 2481, 3959, 3957, 2477, 3930, 3929, 
          3094, 2460, 1323, 3904, 2445, 2433, 3881, 3879, 2428, 2415, 3855, 
          3853, 2410, 1225, 3828, 2392, 2374, 3815, 2376}], 
         Line[{2518, 2507, 3986, 2499, 2487, 3966, 3964, 2479, 3937, 3936, 
          3097, 2463, 3913, 3088, 3910, 2447, 3890, 3077, 3885, 2431, 3862, 
          3861, 3068, 2413, 3837, 3061, 3834, 2395, 2378, 3817, 2379}], 
         Line[{2520, 3116, 3971, 2503, 3945, 3944, 2493, 2482, 3102, 3917, 
          3915, 2465, 3920, 3090, 3892, 2449, 3082, 3868, 3866, 2434, 3073, 
          3841, 3839, 2416, 1243, 3819, 2397, 3056, 3814, 2381}], 
         Line[{2523, 3118, 3991, 2505, 3112, 3978, 3976, 2485, 3105, 3954, 
          3952, 2468, 3925, 3924, 2462, 2452, 3085, 3901, 3899, 2436, 3875, 
          3874, 2430, 2419, 3849, 3848, 2412, 2400, 3057, 3824, 2383}], 
         Line[{2525, 3993, 2522, 2509, 3114, 3984, 3982, 2488, 3961, 3960, 
          2484, 2470, 3934, 3096, 3932, 2454, 3906, 3905, 2451, 2438, 1293, 
          3882, 2421, 3858, 3067, 3856, 2402, 3059, 3829, 2385}], 
         Line[{2527, 3121, 3995, 2512, 3989, 3988, 2511, 2490, 3109, 3968, 
          3967, 2473, 3940, 3939, 2472, 2456, 1335, 3911, 2441, 3888, 3887, 
          2440, 2424, 3832, 3070, 3864, 2405, 3835, 2404, 2387}], 
         Line[{326, 1439, 335, 1452, 1453, 344, 1478, 1479, 353, 1512, 1513, 
          362, 1546, 1547, 370, 1576, 1577, 379, 1610, 1611, 388, 1642, 397}], 
         Line[{2529, 1437, 2546, 4004, 3125, 4005, 2564, 4027, 3133, 4026, 
          2582, 4051, 3141, 4052, 2599, 4079, 3152, 4078, 2615, 4077, 3158, 
          4100, 2632, 4132, 3169, 4131, 2651, 4157, 2649, 2671}], 
         Line[{2531, 1438, 2547, 1456, 4007, 2565, 4030, 3134, 4031, 2583, 
          4055, 3144, 4054, 2600, 4083, 3155, 4084, 2616, 4107, 3161, 4106, 
          2633, 4134, 3172, 4135, 2652, 4159, 2653, 2672}], 
         Line[{2533, 3123, 4000, 2549, 3128, 4010, 4011, 2567, 4038, 3136, 
          4036, 2585, 4062, 3146, 4060, 2602, 1560, 4089, 2618, 4112, 3164, 
          4115, 2635, 4142, 3175, 4140, 2655, 4165, 2659, 2674}], 
         Line[{2536, 3124, 4002, 2552, 3130, 4020, 4022, 2570, 4049, 3139, 
          4047, 2588, 4068, 3148, 4074, 2605, 4101, 3157, 4096, 2621, 4127, 
          3167, 4122, 2637, 4149, 3177, 4154, 2657, 4171, 2665, 2676}], 
         Line[{2538, 2545, 4006, 2554, 2563, 4028, 4029, 2573, 4024, 3142, 
          4053, 2591, 4050, 3150, 4076, 2607, 4103, 3160, 4105, 2623, 4098, 
          3170, 4133, 2640, 4158, 3179, 4130, 2661, 4156, 3186, 2678}], 
         Line[{2540, 2550, 4009, 2557, 4035, 3135, 4034, 2576, 4059, 3145, 
          4058, 2593, 4081, 3153, 4085, 2609, 4111, 3162, 4110, 2626, 4137, 
          3173, 4139, 2643, 4161, 3180, 4163, 2663, 4176, 3188, 2681}], 
         Line[{2542, 2555, 4014, 2559, 2574, 4041, 4043, 2578, 1530, 4065, 
          2595, 4091, 3156, 4088, 2611, 2624, 4117, 4119, 2628, 4147, 3176, 
          4146, 2646, 4167, 3182, 4169, 2667, 4178, 3189, 2683}], 
         Line[{2544, 3997, 3132, 2562, 2579, 4015, 4017, 2581, 4044, 3151, 
          4071, 2598, 1566, 4066, 2614, 4093, 3168, 4125, 2631, 1636, 4126, 
          2648, 4153, 3184, 4174, 2670, 4180, 3191, 2685}], 
         Line[{2673, 2658, 4164, 2654, 2638, 4143, 4141, 2634, 4114, 4113, 
          3163, 2617, 1561, 4090, 2601, 2589, 4063, 4061, 2584, 2571, 4039, 
          4037, 2566, 1463, 4012, 2548, 2530, 3999, 2532}], 
         Line[{2675, 2664, 4170, 2656, 2644, 4150, 4148, 2636, 4121, 4120, 
          3166, 2620, 4095, 4094, 2612, 2604, 4073, 3147, 4067, 2587, 4046, 
          4045, 3138, 2569, 4021, 3131, 4018, 2551, 2534, 4001, 2535}], 
         Line[{2677, 3185, 4155, 2660, 4129, 4128, 2650, 2639, 3171, 4099, 
          4097, 2622, 4104, 3159, 4102, 2606, 4075, 4072, 3149, 2590, 3143, 
          4025, 4023, 2572, 1481, 4003, 2553, 3126, 3998, 2537}], 
         Line[{2680, 3187, 4175, 2662, 3181, 4162, 4160, 2642, 3174, 4138, 
          4136, 2625, 4109, 4108, 2619, 2608, 3154, 4082, 4080, 2592, 4057, 
          4056, 2586, 2575, 4033, 4032, 2568, 2556, 3127, 4008, 2539}], 
         Line[{2682, 4177, 2679, 2666, 3183, 4168, 4166, 2645, 4145, 4144, 
          2641, 2627, 4118, 3165, 4116, 2610, 4087, 4086, 2603, 2594, 1531, 
          4064, 2577, 4042, 3137, 4040, 2558, 3129, 4013, 2541}], 
         Line[{2684, 3190, 4179, 2669, 4173, 4172, 2668, 2647, 3178, 4152, 
          4151, 2630, 4124, 4123, 2629, 2613, 1567, 4092, 2597, 4070, 4069, 
          2596, 2580, 4016, 3140, 4048, 2561, 4019, 2560, 2543}], 
         Line[{406, 1673, 415, 1686, 1687, 424, 1712, 1713, 433, 1746, 1747, 
          442, 1780, 1781, 450, 1810, 1811, 459, 1844, 1845, 468, 1876, 477}], 
         Line[{2686, 1671, 2703, 4188, 3194, 4189, 2721, 4211, 3202, 4210, 
          2739, 4235, 3210, 4236, 2756, 4263, 3221, 4262, 2772, 4261, 3227, 
          4284, 2789, 4316, 3238, 4315, 2808, 4341, 2806, 2828}], 
         Line[{2688, 1672, 2704, 1690, 4191, 2722, 4214, 3203, 4215, 2740, 
          4239, 3213, 4238, 2757, 4267, 3224, 4268, 2773, 4291, 3230, 4290, 
          2790, 4318, 3241, 4319, 2809, 4343, 2810, 2829}], 
         Line[{2690, 3192, 4184, 2706, 3197, 4194, 4195, 2724, 4222, 3205, 
          4220, 2742, 4246, 3215, 4244, 2759, 1794, 4273, 2775, 4296, 3233, 
          4299, 2792, 4326, 3244, 4324, 2812, 4349, 2816, 2831}], 
         Line[{2693, 3193, 4186, 2709, 3199, 4204, 4206, 2727, 4233, 3208, 
          4231, 2745, 4252, 3217, 4258, 2762, 4285, 3226, 4280, 2778, 4311, 
          3236, 4306, 2794, 4333, 3246, 4338, 2814, 4355, 2822, 2833}], 
         Line[{2695, 2702, 4190, 2711, 2720, 4212, 4213, 2730, 4208, 3211, 
          4237, 2748, 4234, 3219, 4260, 2764, 4287, 3229, 4289, 2780, 4282, 
          3239, 4317, 2797, 4342, 3248, 4314, 2818, 4340, 3255, 2835}], 
         Line[{2697, 2707, 4193, 2714, 4219, 3204, 4218, 2733, 4243, 3214, 
          4242, 2750, 4265, 3222, 4269, 2766, 4295, 3231, 4294, 2783, 4321, 
          3242, 4323, 2800, 4345, 3249, 4347, 2820, 4360, 3257, 2838}], 
         Line[{2699, 2712, 4198, 2716, 2731, 4225, 4227, 2735, 1764, 4249, 
          2752, 4275, 3225, 4272, 2768, 2781, 4301, 4303, 2785, 4331, 3245, 
          4330, 2803, 4351, 3251, 4353, 2824, 4362, 3258, 2840}], 
         Line[{2701, 4181, 3201, 2719, 2736, 4199, 4201, 2738, 4228, 3220, 
          4255, 2755, 1800, 4250, 2771, 4277, 3237, 4309, 2788, 1870, 4310, 
          2805, 4337, 3253, 4358, 2827, 4364, 3260, 2842}], 
         Line[{2830, 2815, 4348, 2811, 2795, 4327, 4325, 2791, 4298, 4297, 
          3232, 2774, 1795, 4274, 2758, 2746, 4247, 4245, 2741, 2728, 4223, 
          4221, 2723, 1697, 4196, 2705, 2687, 4183, 2689}], 
         Line[{2832, 2821, 4354, 2813, 2801, 4334, 4332, 2793, 4305, 4304, 
          3235, 2777, 4279, 4278, 2769, 2761, 4257, 3216, 4251, 2744, 4230, 
          4229, 3207, 2726, 4205, 3200, 4202, 2708, 2691, 4185, 2692}], 
         Line[{2834, 3254, 4339, 2817, 4313, 4312, 2807, 2796, 3240, 4283, 
          4281, 2779, 4288, 3228, 4286, 2763, 4259, 4256, 3218, 2747, 3212, 
          4209, 4207, 2729, 1715, 4187, 2710, 3195, 4182, 2694}], 
         Line[{2837, 3256, 4359, 2819, 3250, 4346, 4344, 2799, 3243, 4322, 
          4320, 2782, 4293, 4292, 2776, 2765, 3223, 4266, 4264, 2749, 4241, 
          4240, 2743, 2732, 4217, 4216, 2725, 2713, 3196, 4192, 2696}], 
         Line[{2839, 4361, 2836, 2823, 3252, 4352, 4350, 2802, 4329, 4328, 
          2798, 2784, 4302, 3234, 4300, 2767, 4271, 4270, 2760, 2751, 1765, 
          4248, 2734, 4226, 3206, 4224, 2715, 3198, 4197, 2698}], 
         Line[{2841, 3259, 4363, 2826, 4357, 4356, 2825, 2804, 3247, 4336, 
          4335, 2787, 4308, 4307, 2786, 2770, 1801, 4276, 2754, 4254, 4253, 
          2753, 2737, 4200, 3209, 4232, 2718, 4203, 2717, 2700}]}, {
         Line[{489, 3390, 689, 3416, 683, 681, 3410, 3409, 675, 3403, 673, 
          3402, 667, 3397, 665, 3365, 653, 651, 3386, 3385, 645, 643, 3379, 
          3378, 637, 3370, 635, 629, 625, 3367, 661}], 
         Line[{496, 655, 3389, 3388, 649, 3383, 3382, 647, 641, 639, 3374, 
          3373, 633, 3369, 3368, 631, 619, 3362, 3361, 617, 611, 3351, 609, 
          603, 601, 3346, 595, 3342, 591, 627}], 
         Line[{499, 485, 487, 486, 490, 3263, 491, 3264, 492, 3265, 493, 3266,
           494, 3262, 502, 3270, 503, 3272, 508, 3273, 509, 3277, 514, 3278, 
          515, 3283, 520, 3261, 521}], 
         Line[{18, 1938, 1937, 17, 1935, 1934, 16, 1933, 1932, 15, 1930, 1929,
           14, 1928, 1927, 13, 1925, 1924, 12, 1923, 11, 1922, 10}], 
         Line[{524, 497, 3268, 500, 504, 506, 3276, 510, 3274, 512, 3282, 516,
           3284, 518, 3267, 528, 3292, 530, 3296, 536, 3299, 538, 3304, 544, 
          3305, 546, 3312, 552, 3279, 554}], 
         Line[{555, 3281, 3280, 553, 547, 3307, 3306, 545, 539, 537, 3298, 
          3297, 531, 3293, 529, 519, 3286, 3285, 517, 513, 3275, 511, 507, 
          3271, 505, 501, 498, 3269, 525}], 
         Line[{558, 3291, 522, 526, 532, 3294, 534, 3301, 3302, 540, 542, 
          3309, 548, 3313, 550, 3287, 3288, 562, 564, 3322, 570, 3325, 572, 
          3330, 578, 580, 3335, 586, 3308, 588}], 
         Line[{589, 587, 3337, 3336, 581, 3331, 579, 573, 571, 3324, 3323, 
          565, 3319, 563, 3289, 551, 549, 3311, 3310, 543, 3300, 541, 3303, 
          535, 533, 3295, 527, 3290, 523, 559}], 
         Line[{592, 556, 3317, 560, 3321, 566, 568, 3327, 3328, 574, 576, 
          3333, 3334, 582, 584, 3314, 3315, 596, 598, 3347, 3348, 604, 606, 
          3353, 612, 3356, 614, 3359, 620, 622}], 
         Line[{623, 3332, 621, 615, 613, 3355, 3354, 607, 3350, 605, 3349, 
          599, 3344, 597, 3316, 585, 3339, 3338, 583, 577, 3326, 575, 3329, 
          569, 3320, 567, 561, 557, 3318, 593}], 
         Line[{626, 3343, 590, 594, 600, 3345, 602, 3352, 608, 610, 3358, 616,
           3360, 618, 3340, 3341, 630, 632, 3372, 638, 3375, 640, 3380, 646, 
          3381, 648, 3387, 654, 3357, 495}], 
         Line[{657, 714, 3438, 3437, 710, 3433, 708, 3432, 704, 3427, 702, 
          3426, 698, 696, 3394, 3393, 687, 3418, 685, 3414, 679, 3404, 677, 
          3407, 671, 669, 3399, 663, 3395, 659, 693}], 
         Line[{660, 624, 3366, 628, 3371, 634, 636, 3377, 642, 3376, 644, 
          3384, 650, 3391, 652, 3363, 3364, 664, 666, 3400, 3401, 672, 674, 
          3408, 680, 3411, 682, 3415, 688, 488}], 
         Line[{690, 722, 3444, 3443, 721, 3442, 720, 3441, 719, 718, 3440, 
          3439, 717, 716, 3420, 3419, 712, 711, 3435, 3434, 706, 705, 3429, 
          3428, 700, 699, 3423, 694, 3421, 691, 715}], 
         Line[{692, 3396, 658, 662, 668, 3398, 670, 3405, 3406, 676, 678, 
          3412, 3413, 684, 686, 3392, 695, 3422, 697, 3424, 3425, 701, 703, 
          3430, 3431, 707, 709, 3436, 713, 3417, 656}], 
         Line[{727, 3574, 927, 3600, 921, 919, 3594, 3593, 913, 3587, 911, 
          3586, 905, 3581, 903, 3549, 891, 889, 3570, 3569, 883, 881, 3563, 
          3562, 875, 3554, 873, 867, 863, 3551, 899}], 
         Line[{734, 893, 3573, 3572, 887, 3567, 3566, 885, 879, 877, 3558, 
          3557, 871, 3553, 3552, 869, 857, 3546, 3545, 855, 849, 3535, 847, 
          841, 839, 3530, 833, 3526, 829, 865}], 
         Line[{737, 723, 725, 724, 728, 3447, 729, 3448, 730, 3449, 731, 3450,
           732, 3446, 740, 3454, 741, 3456, 746, 3457, 747, 3461, 752, 3462, 
          753, 3467, 758, 3445, 759}], 
         Line[{99, 2094, 2093, 98, 2091, 2090, 97, 2089, 2088, 96, 2086, 2085,
           95, 2084, 2083, 94, 2081, 2080, 93, 2079, 92, 2078, 91}], 
         Line[{762, 735, 3452, 738, 742, 744, 3460, 748, 3458, 750, 3466, 754,
           3468, 756, 3451, 766, 3476, 768, 3480, 774, 3483, 776, 3488, 782, 
          3489, 784, 3496, 790, 3463, 792}], 
         Line[{793, 3465, 3464, 791, 785, 3491, 3490, 783, 777, 775, 3482, 
          3481, 769, 3477, 767, 757, 3470, 3469, 755, 751, 3459, 749, 745, 
          3455, 743, 739, 736, 3453, 763}], 
         Line[{796, 3475, 760, 764, 770, 3478, 772, 3485, 3486, 778, 780, 
          3493, 786, 3497, 788, 3471, 3472, 800, 802, 3506, 808, 3509, 810, 
          3514, 816, 818, 3519, 824, 3492, 826}], 
         Line[{827, 825, 3521, 3520, 819, 3515, 817, 811, 809, 3508, 3507, 
          803, 3503, 801, 3473, 789, 787, 3495, 3494, 781, 3484, 779, 3487, 
          773, 771, 3479, 765, 3474, 761, 797}], 
         Line[{830, 794, 3501, 798, 3505, 804, 806, 3511, 3512, 812, 814, 
          3517, 3518, 820, 822, 3498, 3499, 834, 836, 3531, 3532, 842, 844, 
          3537, 850, 3540, 852, 3543, 858, 860}], 
         Line[{861, 3516, 859, 853, 851, 3539, 3538, 845, 3534, 843, 3533, 
          837, 3528, 835, 3500, 823, 3523, 3522, 821, 815, 3510, 813, 3513, 
          807, 3504, 805, 799, 795, 3502, 831}], 
         Line[{864, 3527, 828, 832, 838, 3529, 840, 3536, 846, 848, 3542, 854,
           3544, 856, 3524, 3525, 868, 870, 3556, 876, 3559, 878, 3564, 884, 
          3565, 886, 3571, 892, 3541, 733}], 
         Line[{895, 952, 3622, 3621, 948, 3617, 946, 3616, 942, 3611, 940, 
          3610, 936, 934, 3578, 3577, 925, 3602, 923, 3598, 917, 3588, 915, 
          3591, 909, 907, 3583, 901, 3579, 897, 931}], 
         Line[{898, 862, 3550, 866, 3555, 872, 874, 3561, 880, 3560, 882, 
          3568, 888, 3575, 890, 3547, 3548, 902, 904, 3584, 3585, 910, 912, 
          3592, 918, 3595, 920, 3599, 926, 726}], 
         Line[{928, 960, 3628, 3627, 959, 3626, 958, 3625, 957, 956, 3624, 
          3623, 955, 954, 3604, 3603, 950, 949, 3619, 3618, 944, 943, 3613, 
          3612, 938, 937, 3607, 932, 3605, 929, 953}], 
         Line[{930, 3580, 896, 900, 906, 3582, 908, 3589, 3590, 914, 916, 
          3596, 3597, 922, 924, 3576, 933, 3606, 935, 3608, 3609, 939, 941, 
          3614, 3615, 945, 947, 3620, 951, 3601, 894}], 
         Line[{965, 3758, 1165, 3784, 1159, 1157, 3778, 3777, 1151, 3771, 
          1149, 3770, 1143, 3765, 1141, 3733, 1129, 1127, 3754, 3753, 1121, 
          1119, 3747, 3746, 1113, 3738, 1111, 1105, 1101, 3735, 1137}], 
         Line[{972, 1131, 3757, 3756, 1125, 3751, 3750, 1123, 1117, 1115, 
          3742, 3741, 1109, 3737, 3736, 1107, 1095, 3730, 3729, 1093, 1087, 
          3719, 1085, 1079, 1077, 3714, 1071, 3710, 1067, 1103}], 
         Line[{975, 961, 963, 962, 966, 3631, 967, 3632, 968, 3633, 969, 3634,
           970, 3630, 978, 3638, 979, 3640, 984, 3641, 985, 3645, 990, 3646, 
          991, 3651, 996, 3629, 997}], 
         Line[{180, 2250, 2249, 179, 2247, 2246, 178, 2245, 2244, 177, 2242, 
          2241, 176, 2240, 2239, 175, 2237, 2236, 174, 2235, 173, 2234, 172}], 
         Line[{1000, 973, 3636, 976, 980, 982, 3644, 986, 3642, 988, 3650, 
          992, 3652, 994, 3635, 1004, 3660, 1006, 3664, 1012, 3667, 1014, 
          3672, 1020, 3673, 1022, 3680, 1028, 3647, 1030}], 
         Line[{1031, 3649, 3648, 1029, 1023, 3675, 3674, 1021, 1015, 1013, 
          3666, 3665, 1007, 3661, 1005, 995, 3654, 3653, 993, 989, 3643, 987, 
          983, 3639, 981, 977, 974, 3637, 1001}], 
         Line[{1034, 3659, 998, 1002, 1008, 3662, 1010, 3669, 3670, 1016, 
          1018, 3677, 1024, 3681, 1026, 3655, 3656, 1038, 1040, 3690, 1046, 
          3693, 1048, 3698, 1054, 1056, 3703, 1062, 3676, 1064}], 
         Line[{1065, 1063, 3705, 3704, 1057, 3699, 1055, 1049, 1047, 3692, 
          3691, 1041, 3687, 1039, 3657, 1027, 1025, 3679, 3678, 1019, 3668, 
          1017, 3671, 1011, 1009, 3663, 1003, 3658, 999, 1035}], 
         Line[{1068, 1032, 3685, 1036, 3689, 1042, 1044, 3695, 3696, 1050, 
          1052, 3701, 3702, 1058, 1060, 3682, 3683, 1072, 1074, 3715, 3716, 
          1080, 1082, 3721, 1088, 3724, 1090, 3727, 1096, 1098}], 
         Line[{1099, 3700, 1097, 1091, 1089, 3723, 3722, 1083, 3718, 1081, 
          3717, 1075, 3712, 1073, 3684, 1061, 3707, 3706, 1059, 1053, 3694, 
          1051, 3697, 1045, 3688, 1043, 1037, 1033, 3686, 1069}], 
         Line[{1102, 3711, 1066, 1070, 1076, 3713, 1078, 3720, 1084, 1086, 
          3726, 1092, 3728, 1094, 3708, 3709, 1106, 1108, 3740, 1114, 3743, 
          1116, 3748, 1122, 3749, 1124, 3755, 1130, 3725, 971}], 
         Line[{1133, 1190, 3806, 3805, 1186, 3801, 1184, 3800, 1180, 3795, 
          1178, 3794, 1174, 1172, 3762, 3761, 1163, 3786, 1161, 3782, 1155, 
          3772, 1153, 3775, 1147, 1145, 3767, 1139, 3763, 1135, 1169}], 
         Line[{1136, 1100, 3734, 1104, 3739, 1110, 1112, 3745, 1118, 3744, 
          1120, 3752, 1126, 3759, 1128, 3731, 3732, 1140, 1142, 3768, 3769, 
          1148, 1150, 3776, 1156, 3779, 1158, 3783, 1164, 964}], 
         Line[{1166, 1198, 3812, 3811, 1197, 3810, 1196, 3809, 1195, 1194, 
          3808, 3807, 1193, 1192, 3788, 3787, 1188, 1187, 3803, 3802, 1182, 
          1181, 3797, 3796, 1176, 1175, 3791, 1170, 3789, 1167, 1191}], 
         Line[{1168, 3764, 1134, 1138, 1144, 3766, 1146, 3773, 3774, 1152, 
          1154, 3780, 3781, 1160, 1162, 3760, 1171, 3790, 1173, 3792, 3793, 
          1177, 1179, 3798, 3799, 1183, 1185, 3804, 1189, 3785, 1132}], 
         Line[{1203, 3942, 1403, 3968, 1397, 1395, 3962, 3961, 1389, 3955, 
          1387, 3954, 1381, 3949, 1379, 3917, 1367, 1365, 3938, 3937, 1359, 
          1357, 3931, 3930, 1351, 3922, 1349, 1343, 1339, 3919, 1375}], 
         Line[{1210, 1369, 3941, 3940, 1363, 3935, 3934, 1361, 1355, 1353, 
          3926, 3925, 1347, 3921, 3920, 1345, 1333, 3914, 3913, 1331, 1325, 
          3903, 1323, 1317, 1315, 3898, 1309, 3894, 1305, 1341}], 
         Line[{1213, 1199, 1201, 1200, 1204, 3815, 1205, 3816, 1206, 3817, 
          1207, 3818, 1208, 3814, 1216, 3822, 1217, 3824, 1222, 3825, 1223, 
          3829, 1228, 3830, 1229, 3835, 1234, 3813, 1235}], 
         Line[{261, 2406, 2405, 260, 2403, 2402, 259, 2401, 2400, 258, 2398, 
          2397, 257, 2396, 2395, 256, 2393, 2392, 255, 2391, 254, 2390, 253}], 
         Line[{1238, 1211, 3820, 1214, 1218, 1220, 3828, 1224, 3826, 1226, 
          3834, 1230, 3836, 1232, 3819, 1242, 3844, 1244, 3848, 1250, 3851, 
          1252, 3856, 1258, 3857, 1260, 3864, 1266, 3831, 1268}], 
         Line[{1269, 3833, 3832, 1267, 1261, 3859, 3858, 1259, 1253, 1251, 
          3850, 3849, 1245, 3845, 1243, 1233, 3838, 3837, 1231, 1227, 3827, 
          1225, 1221, 3823, 1219, 1215, 1212, 3821, 1239}], 
         Line[{1272, 3843, 1236, 1240, 1246, 3846, 1248, 3853, 3854, 1254, 
          1256, 3861, 1262, 3865, 1264, 3839, 3840, 1276, 1278, 3874, 1284, 
          3877, 1286, 3882, 1292, 1294, 3887, 1300, 3860, 1302}], 
         Line[{1303, 1301, 3889, 3888, 1295, 3883, 1293, 1287, 1285, 3876, 
          3875, 1279, 3871, 1277, 3841, 1265, 1263, 3863, 3862, 1257, 3852, 
          1255, 3855, 1249, 1247, 3847, 1241, 3842, 1237, 1273}], 
         Line[{1306, 1270, 3869, 1274, 3873, 1280, 1282, 3879, 3880, 1288, 
          1290, 3885, 3886, 1296, 1298, 3866, 3867, 1310, 1312, 3899, 3900, 
          1318, 1320, 3905, 1326, 3908, 1328, 3911, 1334, 1336}], 
         Line[{1337, 3884, 1335, 1329, 1327, 3907, 3906, 1321, 3902, 1319, 
          3901, 1313, 3896, 1311, 3868, 1299, 3891, 3890, 1297, 1291, 3878, 
          1289, 3881, 1283, 3872, 1281, 1275, 1271, 3870, 1307}], 
         Line[{1340, 3895, 1304, 1308, 1314, 3897, 1316, 3904, 1322, 1324, 
          3910, 1330, 3912, 1332, 3892, 3893, 1344, 1346, 3924, 1352, 3927, 
          1354, 3932, 1360, 3933, 1362, 3939, 1368, 3909, 1209}], 
         Line[{1371, 1428, 3990, 3989, 1424, 3985, 1422, 3984, 1418, 3979, 
          1416, 3978, 1412, 1410, 3946, 3945, 1401, 3970, 1399, 3966, 1393, 
          3956, 1391, 3959, 1385, 1383, 3951, 1377, 3947, 1373, 1407}], 
         Line[{1374, 1338, 3918, 1342, 3923, 1348, 1350, 3929, 1356, 3928, 
          1358, 3936, 1364, 3943, 1366, 3915, 3916, 1378, 1380, 3952, 3953, 
          1386, 1388, 3960, 1394, 3963, 1396, 3967, 1402, 1202}], 
         Line[{1404, 1436, 3996, 3995, 1435, 3994, 1434, 3993, 1433, 1432, 
          3992, 3991, 1431, 1430, 3972, 3971, 1426, 1425, 3987, 3986, 1420, 
          1419, 3981, 3980, 1414, 1413, 3975, 1408, 3973, 1405, 1429}], 
         Line[{1406, 3948, 1372, 1376, 1382, 3950, 1384, 3957, 3958, 1390, 
          1392, 3964, 3965, 1398, 1400, 3944, 1409, 3974, 1411, 3976, 3977, 
          1415, 1417, 3982, 3983, 1421, 1423, 3988, 1427, 3969, 1370}], 
         Line[{1441, 4126, 1637, 4152, 1631, 1629, 4146, 4145, 1623, 4139, 
          1621, 4138, 1615, 4133, 1613, 4099, 1601, 1599, 4122, 4121, 1593, 
          1591, 4115, 4114, 1585, 4106, 1583, 1577, 1573, 4100, 1609}], 
         Line[{1448, 1603, 4125, 4124, 1597, 4119, 4118, 1595, 1589, 1587, 
          4110, 4109, 1581, 4105, 4104, 1579, 1569, 4096, 4095, 1563, 4089, 
          1561, 1555, 1553, 4084, 1547, 4078, 1543, 1575}], 
         Line[{1451, 1437, 1439, 1438, 1442, 3999, 1443, 4000, 1444, 4001, 
          1445, 4002, 1446, 3998, 1454, 4006, 1455, 4008, 1460, 4009, 1461, 
          4013, 1466, 4014, 1467, 4019, 1472, 3997, 1473}], 
         Line[{342, 2562, 2561, 341, 2559, 2558, 340, 2557, 2556, 339, 2554, 
          2553, 338, 2552, 2551, 337, 2549, 2548, 336, 2547, 335, 2546, 334}], 
         Line[{1476, 1449, 4004, 1452, 1456, 1458, 4012, 1462, 4010, 1464, 
          4018, 1468, 4020, 1470, 4003, 1480, 4028, 1482, 4032, 1488, 4035, 
          1490, 4040, 1496, 4041, 1498, 4048, 1504, 4015, 1506}], 
         Line[{1507, 4017, 4016, 1505, 1499, 4043, 4042, 1497, 1491, 1489, 
          4034, 4033, 1483, 4029, 1481, 1471, 4022, 4021, 1469, 1465, 4011, 
          1463, 1459, 4007, 1457, 1453, 1450, 4005, 1477}], 
         Line[{1510, 4027, 1474, 1478, 1484, 4030, 1486, 4037, 4038, 1492, 
          1494, 4045, 1500, 4049, 1502, 4023, 4024, 1514, 1516, 4056, 1522, 
          4059, 1524, 4064, 1530, 1532, 4069, 1538, 4044, 1540}], 
         Line[{1541, 1539, 4071, 4070, 1533, 4065, 1531, 1525, 1523, 4058, 
          4057, 1517, 4053, 1515, 4025, 1503, 1501, 4047, 4046, 1495, 4036, 
          1493, 4039, 1487, 1485, 4031, 1479, 4026, 1475, 1511}], 
         Line[{1544, 1508, 4051, 1512, 4055, 1518, 1520, 4061, 4062, 1526, 
          1528, 4067, 4068, 1534, 4072, 1536, 4050, 1548, 4080, 4081, 1550, 
          1556, 4086, 1558, 4091, 1564, 4092, 1566, 1570}], 
         Line[{1571, 4066, 1567, 1565, 1559, 4088, 4087, 1557, 4085, 1551, 
          4082, 1549, 1537, 4076, 4075, 4074, 4073, 1535, 1529, 4060, 1527, 
          4063, 1521, 4054, 1519, 1513, 1509, 4052, 1545}], 
         Line[{1574, 4079, 1542, 1546, 1552, 4083, 1554, 4090, 1560, 1562, 
          4094, 1568, 4101, 4102, 4103, 1578, 1580, 4108, 1586, 4111, 1588, 
          4116, 1594, 4117, 1596, 4123, 1602, 4093, 1447}], 
         Line[{1605, 1662, 4174, 4173, 1658, 4169, 1656, 4168, 1652, 4163, 
          1650, 4162, 1646, 1644, 4130, 4129, 1635, 4154, 1633, 4150, 1627, 
          4140, 1625, 4143, 1619, 1617, 4135, 1611, 4131, 1607, 1641}], 
         Line[{1608, 1572, 4077, 1576, 4107, 1582, 1584, 4113, 1590, 4112, 
          1592, 4120, 1598, 4127, 1600, 4097, 4098, 1612, 1614, 4136, 4137, 
          1620, 1622, 4144, 1628, 4147, 1630, 4151, 1636, 1440}], 
         Line[{1638, 1670, 4180, 4179, 1669, 4178, 1668, 4177, 1667, 1666, 
          4176, 4175, 1665, 1664, 4156, 4155, 1660, 1659, 4171, 4170, 1654, 
          1653, 4165, 4164, 1648, 1647, 4159, 1642, 4157, 1639, 1663}], 
         Line[{1640, 4132, 1606, 1610, 1616, 4134, 1618, 4141, 4142, 1624, 
          1626, 4148, 4149, 1632, 1634, 4128, 1643, 4158, 1645, 4160, 4161, 
          1649, 1651, 4166, 4167, 1655, 1657, 4172, 1661, 4153, 1604}], 
         Line[{1675, 4310, 1871, 4336, 1865, 1863, 4330, 4329, 1857, 4323, 
          1855, 4322, 1849, 4317, 1847, 4283, 1835, 1833, 4306, 4305, 1827, 
          1825, 4299, 4298, 1819, 4290, 1817, 1811, 1807, 4284, 1843}], 
         Line[{1682, 1837, 4309, 4308, 1831, 4303, 4302, 1829, 1823, 1821, 
          4294, 4293, 1815, 4289, 4288, 1813, 1803, 4280, 4279, 1797, 4273, 
          1795, 1789, 1787, 4268, 1781, 4262, 1777, 1809}], 
         Line[{1685, 1671, 1673, 1672, 1676, 4183, 1677, 4184, 1678, 4185, 
          1679, 4186, 1680, 4182, 1688, 4190, 1689, 4192, 1694, 4193, 1695, 
          4197, 1700, 4198, 1701, 4203, 1706, 4181, 1707}], 
         Line[{422, 2719, 2718, 421, 2716, 2715, 420, 2714, 2713, 419, 2711, 
          2710, 418, 2709, 2708, 417, 2706, 2705, 416, 2704, 415, 2703, 414}], 
         Line[{1710, 1683, 4188, 1686, 1690, 1692, 4196, 1696, 4194, 1698, 
          4202, 1702, 4204, 1704, 4187, 1714, 4212, 1716, 4216, 1722, 4219, 
          1724, 4224, 1730, 4225, 1732, 4232, 1738, 4199, 1740}], 
         Line[{1741, 4201, 4200, 1739, 1733, 4227, 4226, 1731, 1725, 1723, 
          4218, 4217, 1717, 4213, 1715, 1705, 4206, 4205, 1703, 1699, 4195, 
          1697, 1693, 4191, 1691, 1687, 1684, 4189, 1711}], 
         Line[{1744, 4211, 1708, 1712, 1718, 4214, 1720, 4221, 4222, 1726, 
          1728, 4229, 1734, 4233, 1736, 4207, 4208, 1748, 1750, 4240, 1756, 
          4243, 1758, 4248, 1764, 1766, 4253, 1772, 4228, 1774}], 
         Line[{1775, 1773, 4255, 4254, 1767, 4249, 1765, 1759, 1757, 4242, 
          4241, 1751, 4237, 1749, 4209, 1737, 1735, 4231, 4230, 1729, 4220, 
          1727, 4223, 1721, 1719, 4215, 1713, 4210, 1709, 1745}], 
         Line[{1778, 1742, 4235, 1746, 4239, 1752, 1754, 4245, 4246, 1760, 
          1762, 4251, 4252, 1768, 4256, 1770, 4234, 1782, 4264, 4265, 1784, 
          1790, 4270, 1792, 4275, 1798, 4276, 1800, 1804}], 
         Line[{1805, 4250, 1801, 1799, 1793, 4272, 4271, 1791, 4269, 1785, 
          4266, 1783, 1771, 4260, 4259, 4258, 4257, 1769, 1763, 4244, 1761, 
          4247, 1755, 4238, 1753, 1747, 1743, 4236, 1779}], 
         Line[{1808, 4263, 1776, 1780, 1786, 4267, 1788, 4274, 1794, 1796, 
          4278, 1802, 4285, 4286, 4287, 1812, 1814, 4292, 1820, 4295, 1822, 
          4300, 1828, 4301, 1830, 4307, 1836, 4277, 1681}], 
         Line[{1839, 1896, 4358, 4357, 1892, 4353, 1890, 4352, 1886, 4347, 
          1884, 4346, 1880, 1878, 4314, 4313, 1869, 4338, 1867, 4334, 1861, 
          4324, 1859, 4327, 1853, 1851, 4319, 1845, 4315, 1841, 1875}], 
         Line[{1842, 1806, 4261, 1810, 4291, 1816, 1818, 4297, 1824, 4296, 
          1826, 4304, 1832, 4311, 1834, 4281, 4282, 1846, 1848, 4320, 4321, 
          1854, 1856, 4328, 1862, 4331, 1864, 4335, 1870, 1674}], 
         Line[{1872, 1904, 4364, 4363, 1903, 4362, 1902, 4361, 1901, 1900, 
          4360, 4359, 1899, 1898, 4340, 4339, 1894, 1893, 4355, 4354, 1888, 
          1887, 4349, 4348, 1882, 1881, 4343, 1876, 4341, 1873, 1897}], 
         Line[{1874, 4316, 1840, 1844, 1850, 4318, 1852, 4325, 4326, 1858, 
          1860, 4332, 4333, 1866, 1868, 4312, 1877, 4342, 1879, 4344, 4345, 
          1883, 1885, 4350, 4351, 1889, 1891, 4356, 1895, 4337, 
          1838}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
fwoid7OjV0sGQX1er0cdpaNr9k1Yu0TJAU8M13HziZhg5PfIjJH6/Cvx08Lw
c1KlIV1jeRyKTS4pWH4/BJ2rxScV5lD65dkboZb8cHz+2824RsUPB/20Nhxp
YkHVM+79bnteUzq0z2PnUmM8rzPUson67n4R/80M/0uvyp3QnfYaG6Jts2av
tEAHE1nDgV7qHCBzm9eTuc3sua8ueyZKjNfzwhNT18nJnHTAyJbPndojdeDJ
DXio0AG94jpMZQ5Z4syrSj6nR+YxavP7jbkQjM/E5TYsu+eO8gsyLs6n6rS7
xP9mhv+zP7grJiZ64cStCipS0jrouJ+rdZDaVwFkXrQEY150or1dy7Ooy3Dp
jbna9s0m4L7ZUPketS6hj9cY2X8xhy7Zg3LyD6h9GGPBuWJkrp3k1B4+T2f8
1iG2UrHdGNVbWlLmUs9DiH9xhv/TulxnL0c9xpiFveGiHNb4dPbriyPnvxuZ
Ux1N5lTPJnOqBWZfv7X4hinMKlfJWWttC1sX3+ZdQtkf2cDr/TbjBYzd7bv0
DMdz0E/8eatypA+ZLsVpIWWBexYN5PLvtULVAwEsTcrem8yjHsf69zzqj/mB
uc9ljFDgE87kazFCMbe4m7p//jN3F0+Qudzs7+uws5pfnscD3KgpOWy6xwLH
ck45MZWyf0fmWucw5lrfXJUm8GuxHZivqTsTFL8R3prWathS8fiQ981jvG/s
bYsga9fXkLKnWl7ZxByU+To1nan9s4rM6y4i87pryLzunM/yMTGXLWHCT98v
RyN1Iaw0sWcu9XNVyTzt303/nqf96t6lq20nrCDyhKXjRztFiF08+8iq/7If
Ytjf6Ku7UP/VCTzeLzOXmvkUnETc03qoPDeQOeE3GXPCz4sG8C6c5AOWY82s
r8fZwfddK5WKqPO2idjfYtiL3Jxn/WWMD6wcvyIy8bkz5LV7TigYqedJPNMY
88D95BZUW+6n/Gz9wX3tQzAclq99f6qWBVxkTrgMmRN+gswJ/9GosmWI/w0c
UFq/Jmu6JyiM87KrpM6NZhKPHiOeWUtzXo179Qpmly2quHbSGH4GTW0fR627
Lpl/bkPmn48n88/rjF3O2UhHgOHQfPnd2/zg8JcmtfONLFhB5pOfJPPJhcl8
8ma1V4t/zYqBsSY7FWx6vCH37YzPn6uofU7sTzDsJRvSRU0zfSDDrdH12cBN
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
r39bQ8EPp224JY7U/cJLOIYHGRzDi2f35ivam2LJVnnDrINhoOUwsPsDFf9s
wvsrJry/5YT3t5X2j3/ujfoHtv97ZP9LMvb/s9Iax9sLdfCGWebUl9WR4Ptr
e75oCwsmEf/lDP8KtxoutYmF4s6H3pev3XuD2w2nXFGh7EXJ+65mvK97zqRv
99r9seWD/yzX9z4Y5bS48jS1n+sIJ/ECg5OYZ1rLNfnbc7ylN2MjNITChsCp
gjyU/UISTxEjnpo1E8U/hbujxHiemV0OXvDYecLyt1T+Own3sIhwDyUI97Bt
f9EaC2t3HN4/VfYFTxCm6rkkSozcX4TPuInBZ3y8akHtVGkvFNtQ8+jAYCxu
k43/fKD8H3sJhv23TPthrjRXzNGw5OwK9YAN/ENzD1L3byjhLQ55/5u3qGYu
cuP2sUA8OyHcVjzRBvNvt2jP/cGCOGJvwuAzBsq3n1Rfb4dS3RtMdhu+ws5p
cy/+pt6Xm8QjyojnE32/Yw19vyP7fuci3MlYBneyJMzYeJq+L845pSz32M4R
P77VP5RH7Z9WwoUUZXAhn2iUOJW7BaF0aux7wfoXOLGw/kEflc8x/LT9ZoY9
P13PYCtdzyC7nplPdKgFQ4f20/U/OtD1P7Lr//WEt6jA4C1OD37u6xwwBtaI
Tuq0H/aHNZza4jep73ca4UvWMfiSvtmj9wuuou8XYN8vJoSzOZnB2XwkJNx5
6uF91HoTKVa4yxdmvVh5KJbyk044lVsZnEqTmSsvhiu8RjXpsjGZs60wVbXu
fAiVz69/4WwaTZE/feGsL2pbY5bmxucYIngtu41a3zBjmr/5hsHfnJ32QONI
mBFOLWkfKg/xhvl2Pq92U/u8gfAxrzH4mKfNO7XbpzuidM6xLXvvPwQrWVWu
gpG/R02n7WWI/Vtiv6M7ruGrnj1eaPTdmbfIEx8bVV1XoPyLkHiiGPGsmmak
+UDdCgedfn8IFvNEvnElf6ZS+7aYcEK5CCeUrX8Nn6ot0Fhsj6f0VfpvT9IC
NZVbW05SzyeSeLYz4lE3GLyZw2GFx+5s3Lyv+AI4RM9MGeF8bSfcz1cM7qdz
ttKVg34uqLgq65a4ki+aNPU3L6Lyr034pO8ZfFJRWj9iIq0fka0fLxL7LIZ9
CTffSh8ZdZz3rqkouVIVZxTMkf1B/dxzJB43RjwvvS9KHj13ASB9XBjq74aD
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
tQL3vT75o8R6E3i40uELQxDsmLc5McveA8r7/JnfE/PVifuRdSn9yPV4nNKU
cQ4Ye153PJYAttOrJE6IhILsl66bKp3EvoT7Ya2p/cjRYteDTrtBzsTiWkPe
ADg2YHnrBLEOOc29thxly4Y+jzop/dvhYG2j6NKTS4Nd/+jzLVO759VuHQ6/
NQLfLpKOhOSLin3rZ3wbrunrCrsnweIhI6URvxdom69rukg3DR7ay2V4zsuA
UedeQyaeTGgbjq3leEODj7gfdgz3w/bhfti1KXO/ak2lwFBtq/O1Z3HQZ97/
vPU9cT0/MFzxvDM8GHfiWZYXhlT4Tn3/QLyPDZmaBfmjAfB7G7dgBlcS5K1N
bfMj1k/02tHvhgvfgFGWbSGjijWw3O+oYyLivDToXGIzm6No/8G2g2ruD/93
Hq0ePOub0X0HLJUVL0uxxUKsXX5LG/Fem35u3bAlyRo9Xld58GhbBKqWNRea
8dmbwH2mQ5Q+U4eh2fsgW/I+iH6f4x/6djufDEerSuc6v1GxQuJv/wQp/yD2
T9yXeo7Slyod4Ml0ZMFr1P+WNeD5szeQlmM5NU583vsffak/dVPtroylolVd
78VviySix8LefCWFxHrwYIw72xOO7g3y8Ys/9wad3we65Ij10Ft8cONW9ng0
N/SCSPTpcLRfVLgUdf673/bTjcKIaxcT0IppPY2p5zZQnrGp8RAx7w9wf2UM
pb/yPn4uWcpzDSy4Yf7TKQkdN+o728vuhRy3RFb6dxD7PLk+UQK5PhF9faqn
2gnt3RyEVtCaHhjv00fhP8QOrJ6c8fewLalcnIKChRWWpq6MRMxn985ZVEfs
exfJvkg+Sl8kz6kLV8dt/NHr1+OdhW/uoWrG1c5RM/2JQmt3SVwORKcaOo8z
srqi4LDPYnUzHFXcH3qB0h9acy9atfp8JBKwZmoROeiE2m48PbyYOAdtp1z7
Ofe5oOVNpXdhnikq9H/E2ETsM2k7vJKNTzog0VE1bTGrl2hNnc+HLGLfKMH9
gL8p/YCtd3s6NoWaw+stzU4qWopoic8WxefE9yrs7FJeOx4OxWfWP2VV9gJt
Bdsic2Ie7+A+R1ZKn2PxK45z3qfewP3Scd+jG4xBRXv6q9D4f32L3fP+7r/b
SO7PcEJ2dn9G9P05Avf3FVL6+/TU/c4xH84FB4d7Qc++h8BFtXShvSk0MMR9
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
f+f/AfvpeUw=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       0.10348164494983718`, 4.558130177621855}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$1872, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    1, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {0.25, 15, 20}, "numberOfMasses" -> 3, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}}, 
     "pointsDataTable" -> CompressedData["
1:eJw9kkFKA0EQRXsSo1EkeAWvYLKvOoNHEIzuvIpLM2ThNVzVbIPRjausFARh
IKBiCEokmun/fwqaT3d113/V3cdnV6fn7ZRSM3qb0dqMQb+JryhHTXSqYY43
u8i6jodpEzuO/GdIkV9yXhvqvMYIdfwm68T+crzHbZ7fsd7c5APd9ZTj2+6R
jz64DOsf1ORY33Odg18dSG85WffAwbUiZ1GV5BI/eJKLH/mfeCQH1p9M/PAr
XPzkDvQ7s5IqfuxrufiH9EV+xfMvJn6st138GWO6YH9dcbJuj/3WUWBDpf71
rjo3BleQOy6p4rxGfwa/Ln3ndsJ7oRrua0H/JfvdJ0fhv/m9n+mz1j1zX2fb
F7gO+U9moTr6B9Aj/westChU
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {
    0.25, 15, 20}, $CellContext`rawNumberOfMasses$$ = 
    3, $CellContext`scale$$ = 0.2, $CellContext`tabNumber$$ = 
    3, $CellContext`tauSliderValue$$ = 1, $CellContext`tick$$ = 
    True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 0.8}, {0.9, 0.7}, {0.4, 
    1.2}, {1.3, 1.4}}, Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, 
           "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = (2 Pi) 
           If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$774]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$774]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           
           Ceiling[(12 $CellContext`scaleKValue) 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                  2 $CellContext`f)) $CellContext`nd, $CellContext`h 
               Sin[((2 Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t,
              0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$774 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 10, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.601595184710431*^9, 3.601595194105968*^9}, 
   3.601595238917531*^9, 3.60159558297221*^9, {3.60159563385112*^9, 
   3.601595692016447*^9}, {3.601595722040164*^9, 3.6015957901640606`*^9}, {
   3.601595883095376*^9, 3.601595901713441*^9}, 3.601595934410311*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "ld", ",", " ", "cd", ",", " ", "basisAndMassPoints", ",", " ", "kArray",
       ",", " ", "matrix", ",", " ", "dynamics", ",", " ", "sc", ",", " ", 
      "qPoint", ",", " ", "omegaIndex", ",", "  ", "lines", ",", 
      "mScalarArray", ",", " ", "numberOfMasses", ",", " ", "pointsData", ",",
       "dynAtOmegaIndex", ",", " ", "dynMesh", ",", "dynTable"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"basisAndMassPoints", " ", "=", " ", 
      RowBox[{"{", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0.6", ",", "1"}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "0.4"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"0.3", ",", "3"}], "}"}]}], " ", "}"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ld", " ", "=", " ", 
      RowBox[{"locDependent", "[", " ", 
       RowBox[{"basisAndMassPoints", ",", " ", "1", ",", 
        RowBox[{"{", "10", "}"}]}], " ", "]"}]}], "  ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"kArray", " ", "=", " ", 
      RowBox[{"constructKArray", "[", " ", "1", " ", "]"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cd", " ", "=", " ", 
      RowBox[{"calculateCouplings", "[", " ", 
       RowBox[{"ld", ",", " ", "kArray"}], " ", "]"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sc", " ", "=", " ", "0.25"}], " ", ";", "\[IndentingNewLine]", 
     RowBox[{"qPoint", " ", "=", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"\"\<qMaxVec\>\"", " ", "/.", " ", "ld"}], ")"}], "/", 
       "2"}]}], " ", ";", "\[IndentingNewLine]", 
     RowBox[{"matrix", " ", "=", " ", 
      RowBox[{"dynamicsMatrix", "[", " ", 
       RowBox[{"ld", ",", " ", "cd"}], " ", "]"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dynamics", " ", "=", " ", 
      RowBox[{"calcDynamics", "[", " ", 
       RowBox[{"matrix", "[", " ", "qPoint", " ", "]"}], " ", "]"}]}], " ", 
     ";", "\[IndentingNewLine]", 
     RowBox[{"omegaIndex", " ", "=", " ", "1"}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dynAtOmegaIndex", " ", "=", " ", 
      RowBox[{"dynamics", "[", 
       RowBox[{"[", "omegaIndex", "]"}], "]"}]}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dynMesh", " ", "=", " ", "30"}], " ", ";", 
     "\[IndentingNewLine]", 
     RowBox[{"dynTable", " ", "=", " ", 
      RowBox[{"dynamicsGraphicsTable", "[", 
       RowBox[{
       "ld", ",", " ", "dynAtOmegaIndex", ",", " ", "sc", ",", " ", "qPoint", 
        ",", " ", "dynMesh"}], " ", "]"}]}], " ", ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"With", "[", " ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"n", "=", "1"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{"showDynPlot", "[", " ", 
         RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}]}], " ", "]"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Animate", "[", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"showDynPlot", "[", " ", 
        RowBox[{"dynTable", ",", " ", "n"}], " ", "]"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"n", ",", " ", "1", ",", " ", "dynMesh", ",", " ", "1"}], 
        "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}], "*)"}]], "Input",
 CellChangeTimes->{3.6015959504282274`*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{{
       1, 4, {0, 0}, 0.25, 0.27757599999999993`, {0.9, 0.7}, {
        0.3740000000000001, 0.6699999999999999}, {{0.9967576447531487, 
        0.056849295328126416`}, {0.056849295328126416`, 
        0.0032423552468513195`}}}, {
       1, 2, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       1, 5, {0, 0}, 0.25, 0.5841489999999997, {0.9, 0.7}, {
        1.5819999999999999`, 1.045}, {{0.7962420546812542, 
        0.40279106871705683`}, {0.40279106871705683`, 0.2037579453187458}}}, {
       1, 3, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}}, {{
       2, 4, {0, 0}, 0.25, 0.28157600000000005`, {0.4, 1.2}, {
        0.3740000000000001, 0.6699999999999999}, {{0.0024007727931357617`, 
        0.04893883001392147}, {0.04893883001392147, 0.9975992272068642}}}, {
       2, 1, {0, 0}, 0.25, 0.5, {0.9, 0.7}, {0.4, 1.2}, {{0.5, -0.5}, {-0.5, 
        0.5}}}, {
       2, 3, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       2, 5, {0, 0}, 0.25, 1.4211489999999998`, {0.4, 1.2}, {
        1.5819999999999999`, 1.045}, {{
        0.9830946649506843, -0.12891681308574968`}, {-0.12891681308574968`, 
        0.01690533504931574}}}}, {{
       3, 5, {0, 0}, 0.25, 0.20554899999999987`, {1.3, 1.4}, {
        1.5819999999999999`, 1.045}, {{
        0.3868858520352808, -0.4870371541578893}, {-0.4870371541578893, 
        0.6131141479647193}}}, {
       3, 1, {0, 0}, 0.25, 0.6499999999999999, {0.9, 0.7}, {1.3, 1.4}, {{
        0.24615384615384625`, 0.4307692307692308}, {0.4307692307692308, 
        0.7538461538461539}}}, {
       3, 2, {0, 0}, 0.25, 0.8500000000000001, {0.4, 1.2}, {1.3, 1.4}, {{
        0.9529411764705882, 0.21176470588235285`}, {0.21176470588235285`, 
        0.047058823529411736`}}}, {
       3, 4, {0, 0}, 0.25, 1.3903759999999998`, {1.3, 1.4}, {
        0.3740000000000001, 0.6699999999999999}, {{0.6167223830100634, 
        0.486185031962577}, {0.486185031962577, 0.3832776169899365}}}}, {{
       4, 1, {0, 0}, 0.25, 0.27757599999999993`, {0.9, 0.7}, {
        0.3740000000000001, 0.6699999999999999}, {{0.9967576447531487, 
        0.056849295328126416`}, {0.056849295328126416`, 
        0.0032423552468513195`}}}, {
       4, 2, {0, 0}, 0.25, 0.28157600000000005`, {0.4, 1.2}, {
        0.3740000000000001, 0.6699999999999999}, {{0.0024007727931357617`, 
        0.04893883001392147}, {0.04893883001392147, 0.9975992272068642}}}, {
       4, 3, {0, 0}, 0.25, 1.3903759999999998`, {1.3, 1.4}, {
        0.3740000000000001, 0.6699999999999999}, {{0.6167223830100634, 
        0.486185031962577}, {0.486185031962577, 0.3832776169899365}}}, {
       4, 5, {0, 0}, 0.25, 1.5998889999999995`, {0.3740000000000001, 
        0.6699999999999999}, {1.5819999999999999`, 1.045}, {{
        0.9121032771648533, 0.28314464315961924`}, {0.28314464315961924`, 
        0.08789672283514671}}}}, {{
       5, 3, {0, 0}, 0.25, 0.20554899999999987`, {1.3, 1.4}, {
        1.5819999999999999`, 1.045}, {{
        0.3868858520352808, -0.4870371541578893}, {-0.4870371541578893, 
        0.6131141479647193}}}, {
       5, 1, {0, 0}, 0.25, 0.5841489999999997, {0.9, 0.7}, {
        1.5819999999999999`, 1.045}, {{0.7962420546812542, 
        0.40279106871705683`}, {0.40279106871705683`, 0.2037579453187458}}}, {
       5, 2, {0, 0}, 0.25, 1.4211489999999998`, {0.4, 1.2}, {
        1.5819999999999999`, 1.045}, {{
        0.9830946649506843, -0.12891681308574968`}, {-0.12891681308574968`, 
        0.01690533504931574}}}, {
       5, 4, {0, 0}, 0.25, 1.5998889999999995`, {0.3740000000000001, 
        0.6699999999999999}, {1.5819999999999999`, 1.045}, {{
        0.9121032771648533, 0.28314464315961924`}, {0.28314464315961924`, 
        0.08789672283514671}}}}}, {{{
       1, 3, {-1, 0}, 0.25, 0.45000000000000007`, {0.9, 0.7}, {1.2, 
        0.09999999999999987}, {{
        0.19999999999999987`, -0.3999999999999999}, {-0.3999999999999999, 
        0.8}}}, {
       1, 2, {-1, 0}, 0.25, 1., {0.9, 0.7}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       1, 5, {-1, 0}, 0.25, 1.2507489999999999`, {0.9, 0.7}, {
        1.4819999999999998`, -0.2550000000000001}, {{
        0.2708169264976424, -0.44438172646949936`}, {-0.44438172646949936`, 
        0.7291830735023574}}}, {
       1, 2, {-1, 1}, 0.25, 1.6899999999999995`, {0.9, 0.7}, {
        2.1999999999999997`, 0.7}, {{0.9999999999999999, 0.}, {0., 0.}}}, {
       1, 5, {0, -1}, 0.25, 1.6905489999999999`, {0.9, 
        0.7}, {-0.31800000000000006`, 0.24499999999999988`}, {{
        0.8775397814556101, 0.32781658502652106`}, {0.32781658502652106`, 
        0.12246021854439008`}}}, {
       1, 1, {1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {1., 2.}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       1, 1, {-1, 0}, 0.25, 1.7000000000000002`, {0.9, 0.7}, {
        0.8, -0.6000000000000001}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       1, 4, {1, 0}, 0.25, 1.794376, {0.9, 0.7}, {0.4740000000000001, 
        1.97}, {{
        0.10113599379394281`, -0.30150871389274037`}, {-0.30150871389274037`, 
        0.8988640062060571}}}, {
       1, 4, {-1, 1}, 0.25, 1.9039760000000001`, {0.9, 0.7}, {2.174, 
        0.16999999999999993`}, {{
        0.8524666277306016, -0.354636823153233}, {-0.354636823153233, 
        0.14753337226939836`}}}, {
       1, 5, {1, -1}, 0.25, 1.9639489999999997`, {0.9, 
        0.7}, {-0.21799999999999997`, 1.545}, {{
        0.6364340418208416, -0.4810257292831942}, {-0.4810257292831942, 
        0.36356595817915843`}}}, {
       1, 4, {-1, 0}, 0.25, 2.160776, {0.9, 0.7}, {
        0.27400000000000013`, -0.6300000000000001}, {{0.18135891920310104`, 
        0.385315275623202}, {0.385315275623202, 0.818641080796899}}}, {
       1, 3, {0, -1}, 0.25, 2.2600000000000002`, {0.9, 
        0.7}, {-0.5999999999999999, 0.5999999999999999}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       1, 4, {0, 1}, 0.25, 2.4807760000000005`, {0.9, 0.7}, {2.274, 1.47}, {{
        0.7610022025366256, 0.4264713944346446}, {0.4264713944346446, 
        0.2389977974633743}}}, {
       1, 5, {1, 0}, 0.25, 3.317548999999999, {0.9, 0.7}, {1.682, 
        2.3449999999999998`}, {{0.1843300581242357, 0.38775312738410195`}, {
        0.38775312738410195`, 0.8156699418757644}}}, {
       1, 3, {1, -1}, 0.25, 3.3999999999999995`, {0.9, 
        0.7}, {-0.4999999999999998, 1.9}, {{
        0.5764705882352942, -0.4941176470588236}, {-0.4941176470588236, 
        0.423529411764706}}}, {
       1, 2, {1, 0}, 0.25, 3.4000000000000004`, {0.9, 0.7}, {0.5, 2.5}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       1, 1, {1, -1}, 0.25, 3.4899999999999993`, {0.9, 
        0.7}, {-0.8999999999999998, 1.2}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 1, {-1, 1}, 0.25, 3.4899999999999993`, {0.9, 0.7}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       1, 2, {0, 1}, 0.25, 3.65, {0.9, 0.7}, {2.3, 2.}, {{0.5369863013698629, 
        0.4986301369863013}, {0.4986301369863013, 0.463013698630137}}}, {
       1, 3, {1, 0}, 0.25, 4.25, {0.9, 0.7}, {1.4000000000000001`, 2.7}, {{
        0.05882352941176473, 0.23529411764705888`}, {0.23529411764705888`, 
        0.9411764705882353}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 3, {-1, -1}, 0.25, 4.520000000000001, {0.9, 
        0.7}, {-0.7, -0.7000000000000002}, {{0.5663716814159291, 
        0.49557522123893794`}, {0.49557522123893794`, 
        0.43362831858407075`}}}, {
       1, 5, {-1, -1}, 0.25, 4.817149000000001, {0.9, 
        0.7}, {-0.41800000000000015`, -1.0550000000000002`}, {{
        0.3606124701561027, 0.48017821329587274`}, {0.48017821329587274`, 
        0.6393875298438972}}}, {
       1, 3, {-1, 1}, 0.25, 4.879999999999999, {0.9, 0.7}, {
        3.0999999999999996`, 0.8999999999999999}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       1, 4, {1, -1}, 0.25, 5.631175999999998, {0.9, 
        0.7}, {-1.4259999999999997`, 1.17}, {{
        0.9607719595338522, -0.19413706834948866`}, {-0.19413706834948866`, 
        0.03922804046614775}}}, {
       1, 2, {0, -1}, 0.25, 5.85, {0.9, 0.7}, {-1.5, 0.3999999999999999}, {{
        0.9846153846153846, 0.1230769230769231}, {0.1230769230769231, 
        0.015384615384615389`}}}, {
       1, 5, {-1, 1}, 0.25, 6.184348999999999, {0.9, 0.7}, {
        3.3819999999999997`, 0.5449999999999999}, {{
        0.996115193369585, -0.06220703262380569}, {-0.06220703262380569, 
        0.003884806630414941}}}, {
       1, 2, {1, -1}, 0.25, 6.289999999999999, {0.9, 0.7}, {-1.4, 1.7}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       1, 4, {1, 1}, 0.25, 6.457576000000001, {0.9, 0.7}, {2.374, 2.77}, {{
        0.3364538024794443, 0.4724961812296131}, {0.4724961812296131, 
        0.6635461975205558}}}, {
       1, 4, {0, -1}, 0.25, 6.574375999999999, {0.9, 
        0.7}, {-1.5259999999999998`, -0.13000000000000012`}, {{
        0.8952143899284128, 0.3062769759441809}, {0.3062769759441809, 
        0.10478561007158704`}}}, {
       1, 3, {0, 1}, 0.25, 7.540000000000002, {0.9, 0.7}, {3.2, 2.2}, {{
        0.7015915119363394, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       1, 5, {0, 1}, 0.25, 7.977748999999999, {0.9, 0.7}, {
        3.4819999999999998`, 1.845}, {{0.8356647971752433, 
        0.37057947047469153`}, {0.37057947047469153`, 
        0.16433520282475672`}}}, {
       1, 1, {1, 1}, 0.25, 8.409999999999998, {0.9, 0.7}, {2.9, 2.8}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       1, 1, {-1, -1}, 0.25, 8.41, {0.9, 
        0.7}, {-1.1, -1.4000000000000001`}, {{0.4756242568370987, 
        0.49940546967895366`}, {0.49940546967895366`, 0.5243757431629014}}}, {
       1, 2, {-1, -1}, 0.25, 8.81, {0.9, 0.7}, {-1.6, -0.9000000000000001}, {{
        0.7094211123723042, 0.4540295119182747}, {0.4540295119182747, 
        0.29057888762769585`}}}, {
       1, 2, {1, 1}, 0.25, 9.009999999999998, {0.9, 0.7}, {2.4, 3.3}, {{
        0.24972253052164267`, 0.4328523862375139}, {0.4328523862375139, 
        0.7502774694783573}}}, {
       1, 4, {-1, -1}, 0.25, 10.917575999999999`, {0.9, 
        0.7}, {-1.626, -1.4300000000000002`}, {{0.5844407220064234, 
        0.4928181860149176}, {0.4928181860149176, 0.41555927799357656`}}}, {
       1, 5, {1, 1}, 0.25, 13.171149000000002`, {0.9, 0.7}, {3.582, 3.145}, {{
        0.5461272968668108, 0.4978677258908847}, {0.4978677258908847, 
        0.4538727031331891}}}, {
       1, 3, {1, 1}, 0.25, 13.599999999999998`, {0.9, 0.7}, {3.3, 3.5}, {{
        0.423529411764706, 0.4941176470588236}, {0.4941176470588236, 
        0.5764705882352942}}}}, {{
       2, 5, {1, -1}, 0.25, 0.500949, {0.4, 1.2}, {-0.21799999999999997`, 
        1.545}, {{
        0.7624009629722787, -0.42561218806704876`}, {-0.42561218806704876`, 
        0.23759903702772137`}}}, {
       2, 4, {1, 0}, 0.25, 0.598376, {0.4, 1.2}, {0.4740000000000001, 
        1.97}, {{0.00915143655494206, 0.09522440739601865}, {
        0.09522440739601865, 0.9908485634450579}}}, {
       2, 1, {1, 0}, 0.25, 1., {0.4, 1.2}, {1., 2.}, {{0.36, 0.48}, {0.48, 
        0.6400000000000001}}}, {
       2, 3, {1, -1}, 0.25, 1.2999999999999996`, {0.4, 
        1.2}, {-0.4999999999999998, 1.9}, {{
        0.623076923076923, -0.4846153846153846}, {-0.4846153846153846, 
        0.376923076923077}}}, {
       2, 3, {0, -1}, 0.25, 1.3599999999999999`, {0.4, 
        1.2}, {-0.5999999999999999, 0.5999999999999999}, {{0.7352941176470588,
         0.44117647058823534`}, {0.44117647058823534`, 
        0.2647058823529413}}}, {
       2, 5, {0, -1}, 0.25, 1.4275490000000002`, {0.4, 
        1.2}, {-0.31800000000000006`, 0.24499999999999988`}, {{
        0.36112525734668305`, 0.4803267698691954}, {0.4803267698691954, 
        0.638874742653317}}}, {
       2, 1, {1, -1}, 0.25, 1.6899999999999995`, {0.4, 
        1.2}, {-0.8999999999999998, 1.2}, {{0.9999999999999999, 0.}, {0., 
        0.}}}, {2, 2, {1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {0.5, 
        2.5}, {{0.005882352941176467, 0.0764705882352941}, {
        0.0764705882352941, 0.9941176470588234}}}, {
       2, 2, {-1, 0}, 0.25, 1.7000000000000002`, {0.4, 1.2}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.005882352941176467, 
        0.0764705882352941}, {0.0764705882352941, 0.9941176470588234}}}, {
       2, 3, {-1, 0}, 0.25, 1.85, {0.4, 1.2}, {1.2, 0.09999999999999987}, {{
        0.34594594594594585`, -0.4756756756756756}, {-0.4756756756756756, 
        0.654054054054054}}}, {
       2, 5, {1, 0}, 0.25, 2.954548999999999, {0.4, 1.2}, {1.682, 
        2.3449999999999998`}, {{0.5562689940156689, 0.4968237115038539}, {
        0.4968237115038539, 0.4437310059843312}}}, {
       2, 3, {1, 0}, 0.25, 3.250000000000001, {0.4, 1.2}, {
        1.4000000000000001`, 2.7}, {{0.3076923076923076, 
        0.46153846153846145`}, {0.46153846153846145`, 0.6923076923076924}}}, {
       2, 5, {-1, 0}, 0.25, 3.287749, {0.4, 1.2}, {
        1.4819999999999998`, -0.2550000000000001}, {{
        0.35608679373029994`, -0.4788412984081206}, {-0.4788412984081206, 
        0.6439132062697003}}}, {
       2, 4, {1, -1}, 0.25, 3.335175999999999, {0.4, 
        1.2}, {-1.4259999999999997`, 1.17}, {{0.9997301491735369, 
        0.016424920304055936`}, {0.016424920304055936`, 
        0.0002698508264631318}}}, {
       2, 4, {-1, 0}, 0.25, 3.3647760000000004`, {0.4, 1.2}, {
        0.27400000000000013`, -0.6300000000000001}, {{0.004718293283118987, 
        0.0685275929214901}, {0.0685275929214901, 0.995281706716881}}}, {
       2, 1, {-1, 0}, 0.25, 3.4000000000000004`, {0.4, 1.2}, {
        0.8, -0.6000000000000001}, {{
        0.047058823529411764`, -0.21176470588235294`}, {-0.21176470588235294`,
         0.9529411764705882}}}, {
       2, 2, {1, -1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {-1.4, 1.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 2, {-1, 1}, 0.25, 3.4899999999999993`, {0.4, 1.2}, {
        2.1999999999999997`, 0.7}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       2, 4, {0, 1}, 0.25, 3.5847760000000006`, {0.4, 1.2}, {2.274, 1.47}, {{
        0.9796640013211425, 0.14114689453399598`}, {0.14114689453399598`, 
        0.020335998678857478`}}}, {
       2, 1, {0, -1}, 0.25, 3.65, {0.4, 
        1.2}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.5369863013698629, 0.4986301369863013}, {0.4986301369863013, 
        0.463013698630137}}}, {
       2, 4, {-1, 1}, 0.25, 4.207976, {0.4, 1.2}, {2.174, 
        0.16999999999999993`}, {{
        0.7478835430620326, -0.4342277617552952}, {-0.4342277617552952, 
        0.2521164569379673}}}, {
       2, 2, {0, 1}, 0.25, 4.25, {0.4, 1.2}, {2.3, 2.}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 2, {0, -1}, 0.25, 4.25, {0.4, 1.2}, {-1.5, 0.3999999999999999}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       2, 3, {-1, -1}, 0.25, 4.82, {0.4, 1.2}, {-0.7, -0.7000000000000002}, {{
        0.25103734439834025`, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       2, 4, {0, -1}, 0.25, 5.478375999999999, {0.4, 
        1.2}, {-1.5259999999999998`, -0.13000000000000012`}, {{
        0.6771123413215887, 0.46758017339445124`}, {0.46758017339445124`, 
        0.32288765867841135`}}}, {
       2, 5, {-1, -1}, 0.25, 5.754149, {0.4, 
        1.2}, {-0.41800000000000015`, -1.0550000000000002`}, {{
        0.1162854837439907, 0.32056695090794496`}, {0.32056695090794496`, 
        0.8837145162560094}}}, {
       2, 1, {0, 1}, 0.25, 5.85, {0.4, 1.2}, {2.8, 1.5}, {{0.9846153846153846,
         0.1230769230769231}, {0.1230769230769231, 0.015384615384615389`}}}, {
       2, 1, {-1, 1}, 0.25, 6.289999999999999, {0.4, 1.2}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.8410174880763116, -0.36565977742448336`}, {-0.36565977742448336`, 
        0.15898251192368842`}}}, {
       2, 4, {1, 1}, 0.25, 6.361576000000001, {0.4, 1.2}, {2.374, 2.77}, {{
        0.612533120723544, 0.4871717322877224}, {0.4871717322877224, 
        0.38746687927645596`}}}, {
       2, 3, {-1, 1}, 0.25, 7.379999999999998, {0.4, 1.2}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9878048780487806, -0.10975609756097565`}, {-0.10975609756097565`, 
        0.01219512195121952}}}, {
       2, 2, {1, 1}, 0.25, 8.409999999999998, {0.4, 1.2}, {2.4, 3.3}, {{
        0.4756242568370988, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629013}}}, {
       2, 2, {-1, -1}, 0.25, 8.41, {0.4, 1.2}, {-1.6, -0.9000000000000001}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       2, 1, {1, 1}, 0.25, 8.809999999999999, {0.4, 1.2}, {2.9, 2.8}, {{
        0.7094211123723043, 0.4540295119182747}, {0.4540295119182747, 
        0.2905788876276958}}}, {
       2, 3, {0, 1}, 0.25, 8.840000000000002, {0.4, 1.2}, {3.2, 2.2}, {{
        0.8868778280542986, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570139`}}}, {
       2, 1, {-1, -1}, 0.25, 9.010000000000002, {0.4, 
        1.2}, {-1.1, -1.4000000000000001`}, {{0.24972253052164256`, 
        0.4328523862375138}, {0.4328523862375138, 0.7502774694783573}}}, {
       2, 5, {-1, 1}, 0.25, 9.321348999999998, {0.4, 1.2}, {
        3.3819999999999997`, 0.5449999999999999}, {{
        0.9539739366050987, -0.20954155884518436`}, {-0.20954155884518436`, 
        0.04602606339490133}}}, {
       2, 5, {0, 1}, 0.25, 9.914748999999999, {0.4, 1.2}, {
        3.4819999999999998`, 1.845}, {{0.9580397849708551, 
        0.20049826778267407`}, {0.20049826778267407`, 
        0.04196021502914497}}}, {
       2, 4, {-1, -1}, 0.25, 11.021576, {0.4, 
        1.2}, {-1.626, -1.4300000000000002`}, {{0.37242187505670693`, 
        0.48344991678141125`}, {0.48344991678141125`, 0.627578124943293}}}, {
       2, 3, {1, 1}, 0.25, 13.7, {0.4, 1.2}, {3.3, 3.5}, {{0.6138686131386862,
         0.48686131386861314`}, {0.48686131386861314`, 
        0.3861313868613139}}}, {
       2, 5, {1, 1}, 0.25, 13.908149, {0.4, 1.2}, {3.582, 3.145}, {{
        0.7279993908607104, 0.4449901996304469}, {0.4449901996304469, 
        0.27200060913928953`}}}}, {{
       3, 1, {1, 0}, 0.25, 0.4500000000000001, {1.3, 1.4}, {1., 2.}, {{
        0.19999999999999998`, -0.39999999999999997`}, {-0.39999999999999997`, 
        0.7999999999999999}}}, {
       3, 4, {0, 1}, 0.25, 0.953576, {1.3, 1.4}, {2.274, 1.47}, {{
        0.9948614478552311, 0.07149928270006801}, {0.07149928270006801, 
        0.005138552144768753}}}, {
       3, 4, {1, 0}, 0.25, 1.0071759999999998`, {1.3, 1.4}, {
        0.4740000000000001, 1.97}, {{
        0.6774148708865183, -0.46746546780304543`}, {-0.46746546780304543`, 
        0.32258512911348175`}}}, {
       3, 5, {1, 0}, 0.25, 1.0389489999999997`, {1.3, 1.4}, {1.682, 
        2.3449999999999998`}, {{0.14045347750467055`, 0.34745690115684214`}, {
        0.34745690115684214`, 0.8595465224953295}}}, {
       3, 2, {-1, 1}, 0.25, 1.2999999999999994`, {1.3, 1.4}, {
        2.1999999999999997`, 0.7}, {{
        0.6230769230769229, -0.48461538461538467`}, {-0.48461538461538467`, 
        0.3769230769230771}}}, {
       3, 2, {0, 1}, 0.25, 1.3599999999999997`, {1.3, 1.4}, {2.3, 2.}, {{
        0.7352941176470587, 0.4411764705882354}, {0.4411764705882354, 
        0.2647058823529413}}}, {
       3, 3, {1, 0}, 0.25, 1.7000000000000006`, {1.3, 1.4}, {
        1.4000000000000001`, 2.7}, {{0.005882352941176479, 
        0.07647058823529418}, {0.07647058823529418, 0.9941176470588236}}}, {
       3, 3, {-1, 0}, 0.25, 1.7000000000000002`, {1.3, 1.4}, {1.2, 
        0.09999999999999987}, {{0.00588235294117648, 0.07647058823529418}, {
        0.07647058823529418, 0.9941176470588234}}}, {
       3, 2, {1, 0}, 0.25, 1.8500000000000003`, {1.3, 1.4}, {0.5, 2.5}, {{
        0.34594594594594597`, -0.47567567567567565`}, {-0.47567567567567565`, 
        0.654054054054054}}}, {
       3, 1, {0, 1}, 0.25, 2.26, {1.3, 1.4}, {2.8, 1.5}, {{0.9955752212389379,
         0.06637168141592925}, {0.06637168141592925, 
        0.004424778761061955}}}, {
       3, 4, {-1, 1}, 0.25, 2.276776, {1.3, 1.4}, {2.174, 
        0.16999999999999993`}, {{
        0.3355077530683738, -0.4721676616408465}, {-0.4721676616408465, 
        0.6644922469316261}}}, {
       3, 5, {1, -1}, 0.25, 2.325349, {1.3, 1.4}, {-0.21799999999999997`, 
        1.545}, {{
        0.9909583464675625, -0.09465675904993187}, {-0.09465675904993187, 
        0.009041653532437499}}}, {
       3, 5, {-1, 0}, 0.25, 2.772149, {1.3, 1.4}, {
        1.4819999999999998`, -0.2550000000000001}, {{
        0.011948852677110752`, -0.1086557757176831}, {-0.1086557757176831, 
        0.9880511473228892}}}, {
       3, 4, {1, 1}, 0.25, 3.0303760000000004`, {1.3, 1.4}, {2.374, 2.77}, {{
        0.38063791423902515`, 0.48554370810750874`}, {0.48554370810750874`, 
        0.6193620857609748}}}, {
       3, 2, {-1, 0}, 0.25, 3.25, {1.3, 1.4}, {
        0.30000000000000004`, -0.10000000000000009`}, {{0.3076923076923077, 
        0.46153846153846156`}, {0.46153846153846156`, 0.6923076923076923}}}, {
       3, 1, {-1, 1}, 0.25, 3.399999999999999, {1.3, 1.4}, {
        2.6999999999999997`, 0.19999999999999996`}, {{
        0.576470588235294, -0.4941176470588235}, {-0.4941176470588235, 
        0.423529411764706}}}, {
       3, 3, {1, -1}, 0.25, 3.4899999999999993`, {1.3, 
        1.4}, {-0.4999999999999998, 1.9}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       3, 3, {-1, 1}, 0.25, 3.4899999999999984`, {1.3, 1.4}, {
        3.0999999999999996`, 0.8999999999999999}, {{
        0.9283667621776505, -0.25787965616045855`}, {-0.25787965616045855`, 
        0.07163323782234961}}}, {
       3, 5, {0, -1}, 0.25, 3.9519490000000004`, {1.3, 
        1.4}, {-0.31800000000000006`, 0.24499999999999988`}, {{
        0.6624387106210127, 0.4728780659871876}, {0.4728780659871876, 
        0.33756128937898744`}}}, {
       3, 3, {0, 1}, 0.25, 4.250000000000001, {1.3, 1.4}, {3.2, 2.2}, {{
        0.8494117647058822, 0.3576470588235295}, {0.3576470588235295, 
        0.15058823529411772`}}}, {
       3, 3, {0, -1}, 0.25, 4.25, {1.3, 1.4}, {-0.5999999999999999, 
        0.5999999999999999}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       3, 1, {-1, 0}, 0.25, 4.25, {1.3, 1.4}, {0.8, -0.6000000000000001}, {{
        0.058823529411764705`, 0.23529411764705882`}, {0.23529411764705882`, 
        0.9411764705882353}}}, {
       3, 1, {1, 1}, 0.25, 4.52, {1.3, 1.4}, {2.9, 2.8}, {{0.5663716814159292,
         0.49557522123893805`}, {0.49557522123893805`, 
        0.43362831858407075`}}}, {
       3, 2, {1, 1}, 0.25, 4.819999999999999, {1.3, 1.4}, {2.4, 3.3}, {{
        0.2510373443983402, 0.4336099585062241}, {0.4336099585062241, 
        0.7489626556016598}}}, {
       3, 1, {1, -1}, 0.25, 4.879999999999999, {1.3, 
        1.4}, {-0.8999999999999998, 1.2}, {{0.9918032786885246, 
        0.09016393442622948}, {0.09016393442622948, 0.008196721311475407}}}, {
       3, 5, {0, 1}, 0.25, 4.959148999999998, {1.3, 1.4}, {
        3.4819999999999998`, 1.845}, {{0.9600687537317389, 
        0.19579770642100092`}, {0.19579770642100092`, 
        0.03993124626826097}}}, {
       3, 5, {-1, 1}, 0.25, 5.065748999999999, {1.3, 1.4}, {
        3.3819999999999997`, 0.5449999999999999}, {{
        0.85569261327397, -0.35140114522057847`}, {-0.35140114522057847`, 
        0.14430738672603005`}}}, {
       3, 4, {-1, 0}, 0.25, 5.173576000000001, {1.3, 1.4}, {
        0.27400000000000013`, -0.6300000000000001}, {{0.20347164127868217`, 
        0.4025803428808235}, {0.4025803428808235, 0.7965283587213178}}}, {
       3, 2, {1, -1}, 0.25, 7.380000000000001, {1.3, 1.4}, {-1.4, 1.7}, {{
        0.9878048780487805, -0.10975609756097562`}, {-0.10975609756097562`, 
        0.012195121951219514`}}}, {
       3, 4, {1, -1}, 0.25, 7.483976, {1.3, 1.4}, {-1.4259999999999997`, 
        1.17}, {{0.9929315647190744, 0.08377632424262184}, {
        0.08377632424262184, 0.0070684352809255386`}}}, {
       3, 1, {0, -1}, 0.25, 7.539999999999999, {1.3, 
        1.4}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7015915119363395, 0.45755968169761274`}, {0.45755968169761274`, 
        0.2984084880636605}}}, {
       3, 5, {1, 1}, 0.25, 8.252549, {1.3, 1.4}, {3.582, 3.145}, {{
        0.6310200642250049, 0.48252848907652657`}, {0.48252848907652657`, 
        0.36897993577499516`}}}, {
       3, 3, {1, 1}, 0.25, 8.41, {1.3, 1.4}, {3.3, 3.5}, {{0.4756242568370986,
         0.49940546967895355`}, {0.49940546967895355`, 
        0.5243757431629014}}}, {
       3, 3, {-1, -1}, 0.25, 8.41, {1.3, 1.4}, {-0.7, -0.7000000000000002}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       3, 2, {0, -1}, 0.25, 8.84, {1.3, 1.4}, {-1.5, 0.3999999999999999}, {{
        0.8868778280542985, 0.3167420814479638}, {0.3167420814479638, 
        0.11312217194570136`}}}, {
       3, 5, {-1, -1}, 0.25, 8.978549000000001, {1.3, 
        1.4}, {-0.41800000000000015`, -1.0550000000000002`}, {{
        0.32873062228651867`, 0.4697518496585584}, {0.4697518496585584, 
        0.6712693777134813}}}, {
       3, 4, {0, -1}, 0.25, 10.327175999999998`, {1.3, 
        1.4}, {-1.5259999999999998`, -0.13000000000000012`}, {{
        0.7733262219991215, 0.4186798017192696}, {0.4186798017192696, 
        0.22667377800087848`}}}, {
       3, 1, {-1, -1}, 0.25, 13.600000000000001`, {1.3, 
        1.4}, {-1.1, -1.4000000000000001`}, {{0.42352941176470593`, 
        0.4941176470588235}, {0.4941176470588235, 0.576470588235294}}}, {
       3, 2, {-1, -1}, 0.25, 13.700000000000001`, {1.3, 
        1.4}, {-1.6, -0.9000000000000001}, {{0.6138686131386862, 
        0.4868613138686131}, {0.4868613138686131, 0.38613138686131376`}}}, {
       3, 4, {-1, -1}, 0.25, 16.570376000000003`, {1.3, 
        1.4}, {-1.626, -1.4300000000000002`}, {{0.5166736107858988, 
        0.49972191337118715`}, {0.49972191337118715`, 
        0.4833263892141011}}}}, {{
       4, 2, {-1, 0}, 0.25, 0.598376, {0.3740000000000001, 
        0.6699999999999999}, {0.30000000000000004`, -0.10000000000000009`}, {{
        0.00915143655494206, 0.09522440739601865}, {0.09522440739601865, 
        0.9908485634450579}}}, {
       4, 5, {0, -1}, 0.25, 0.6594890000000002, {0.3740000000000001, 
        0.6699999999999999}, {-0.31800000000000006`, 0.24499999999999988`}, {{
        0.7261137031853451, 0.4459513350488029}, {0.4459513350488029, 
        0.27388629681465493`}}}, {
       4, 3, {0, -1}, 0.25, 0.953576, {0.3740000000000001, 
        0.6699999999999999}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9948614478552311, 0.07149928270006801}, {0.07149928270006801, 
        0.005138552144768753}}}, {
       4, 3, {-1, 0}, 0.25, 1.0071759999999998`, {0.3740000000000001, 
        0.6699999999999999}, {1.2, 0.09999999999999987}, {{
        0.6774148708865182, -0.4674654678030454}, {-0.4674654678030454, 
        0.32258512911348175`}}}, {
       4, 5, {1, -1}, 0.25, 1.116089, {0.3740000000000001, 
        0.6699999999999999}, {-0.21799999999999997`, 1.545}, {{
        0.3140108002139615, -0.4641206928838112}, {-0.4641206928838112, 
        0.6859891997860386}}}, {
       4, 4, {1, 0}, 0.25, 1.7000000000000002`, {0.3740000000000001, 
        0.6699999999999999}, {0.4740000000000001, 1.97}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       4, 4, {-1, 0}, 0.25, 1.7000000000000002`, {0.3740000000000001, 
        0.6699999999999999}, {0.27400000000000013`, -0.6300000000000001}, {{
        0.005882352941176467, 0.0764705882352941}, {0.0764705882352941, 
        0.9941176470588234}}}, {
       4, 1, {-1, 0}, 0.25, 1.794376, {0.3740000000000001, 
        0.6699999999999999}, {0.8, -0.6000000000000001}, {{
        0.10113599379394281`, -0.30150871389274037`}, {-0.30150871389274037`, 
        0.8988640062060571}}}, {
       4, 1, {1, -1}, 0.25, 1.9039760000000001`, {0.3740000000000001, 
        0.6699999999999999}, {-0.8999999999999998, 1.2}, {{
        0.8524666277306016, -0.354636823153233}, {-0.354636823153233, 
        0.14753337226939836`}}}, {
       4, 5, {-1, 0}, 0.25, 2.0832889999999993`, {0.3740000000000001, 
        0.6699999999999999}, {1.4819999999999998`, -0.2550000000000001}, {{
        0.5892912601180151, -0.4919624689613395}, {-0.4919624689613395, 
        0.41070873988198486`}}}, {
       4, 1, {1, 0}, 0.25, 2.160776, {0.3740000000000001, 
        0.6699999999999999}, {1., 2.}, {{0.18135891920310104`, 
        0.385315275623202}, {0.385315275623202, 0.818641080796899}}}, {
       4, 3, {1, -1}, 0.25, 2.276776, {0.3740000000000001, 
        0.6699999999999999}, {-0.4999999999999998, 1.9}, {{
        0.3355077530683738, -0.4721676616408465}, {-0.4721676616408465, 
        0.6644922469316261}}}, {
       4, 1, {0, -1}, 0.25, 2.4807760000000005`, {0.3740000000000001, 
        0.6699999999999999}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.7610022025366256, 0.4264713944346446}, {0.4264713944346446, 
        0.2389977974633743}}}, {
       4, 3, {-1, -1}, 0.25, 3.0303760000000004`, {0.3740000000000001, 
        0.6699999999999999}, {-0.7, -0.7000000000000002}, {{
        0.38063791423902515`, 0.48554370810750874`}, {0.48554370810750874`, 
        0.6193620857609748}}}, {
       4, 2, {-1, 1}, 0.25, 3.335175999999999, {0.3740000000000001, 
        0.6699999999999999}, {2.1999999999999997`, 0.7}, {{0.9997301491735369,
         0.016424920304055936`}, {0.016424920304055936`, 
        0.0002698508264631318}}}, {
       4, 2, {1, 0}, 0.25, 3.3647760000000004`, {0.3740000000000001, 
        0.6699999999999999}, {0.5, 2.5}, {{0.004718293283118987, 
        0.0685275929214901}, {0.0685275929214901, 0.995281706716881}}}, {
       4, 4, {1, -1}, 0.25, 3.4899999999999993`, {0.3740000000000001, 
        0.6699999999999999}, {-1.4259999999999997`, 1.17}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 4, {-1, 1}, 0.25, 3.4899999999999993`, {0.3740000000000001, 
        0.6699999999999999}, {2.174, 0.16999999999999993`}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       4, 2, {0, -1}, 0.25, 3.5847760000000006`, {0.3740000000000001, 
        0.6699999999999999}, {-1.5, 0.3999999999999999}, {{0.9796640013211425,
         0.14114689453399598`}, {0.14114689453399598`, 
        0.020335998678857478`}}}, {
       4, 5, {-1, -1}, 0.25, 3.6028890000000007`, {0.3740000000000001, 
        0.6699999999999999}, {-0.41800000000000015`, -1.0550000000000002`}, {{
        0.17410028452167142`, 0.3791956954543979}, {0.3791956954543979, 
        0.8258997154783286}}}, {
       4, 2, {1, -1}, 0.25, 4.207976, {0.3740000000000001, 
        0.6699999999999999}, {-1.4, 1.7}, {{
        0.7478835430620326, -0.4342277617552952}, {-0.4342277617552952, 
        0.2521164569379673}}}, {
       4, 4, {0, 1}, 0.25, 4.25, {0.3740000000000001, 0.6699999999999999}, {
        2.274, 1.47}, {{0.8494117647058823, 0.35764705882352943`}, {
        0.35764705882352943`, 0.15058823529411766`}}}, {
       4, 4, {0, -1}, 0.25, 4.25, {0.3740000000000001, 
        0.6699999999999999}, {-1.5259999999999998`, -0.13000000000000012`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       4, 5, {1, 0}, 0.25, 4.516488999999999, {0.3740000000000001, 
        0.6699999999999999}, {1.682, 2.3449999999999998`}, {{
        0.3788039780457784, 0.48508919206932644`}, {0.48508919206932644`, 
        0.6211960219542215}}}, {
       4, 3, {1, 0}, 0.25, 5.173576000000001, {0.3740000000000001, 
        0.6699999999999999}, {1.4000000000000001`, 2.7}, {{
        0.20347164127868225`, 0.40258034288082367`}, {0.40258034288082367`, 
        0.7965283587213178}}}, {
       4, 2, {0, 1}, 0.25, 5.478375999999999, {0.3740000000000001, 
        0.6699999999999999}, {2.3, 2.}, {{0.6771123413215887, 
        0.46758017339445124`}, {0.46758017339445124`, 
        0.32288765867841135`}}}, {
       4, 1, {-1, 1}, 0.25, 5.631175999999998, {0.3740000000000001, 
        0.6699999999999999}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.9607719595338522, -0.19413706834948866`}, {-0.19413706834948866`, 
        0.03922804046614775}}}, {
       4, 2, {-1, -1}, 0.25, 6.361576000000001, {0.3740000000000001, 
        0.6699999999999999}, {-1.6, -0.9000000000000001}, {{0.612533120723544,
         0.4871717322877224}, {0.4871717322877224, 0.38746687927645596`}}}, {
       4, 1, {-1, -1}, 0.25, 6.457576000000001, {0.3740000000000001, 
        0.6699999999999999}, {-1.1, -1.4000000000000001`}, {{
        0.3364538024794443, 0.4724961812296131}, {0.4724961812296131, 
        0.6635461975205558}}}, {
       4, 1, {0, 1}, 0.25, 6.574375999999999, {0.3740000000000001, 
        0.6699999999999999}, {2.8, 1.5}, {{0.8952143899284128, 
        0.3062769759441809}, {0.3062769759441809, 0.10478561007158704`}}}, {
       4, 3, {-1, 1}, 0.25, 7.4839759999999975`, {0.3740000000000001, 
        0.6699999999999999}, {3.0999999999999996`, 0.8999999999999999}, {{
        0.9929315647190745, 0.08377632424262185}, {0.08377632424262185, 
        0.007068435280925541}}}, {
       4, 4, {1, 1}, 0.25, 8.41, {0.3740000000000001, 0.6699999999999999}, {
        2.374, 2.77}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       4, 4, {-1, -1}, 0.25, 8.41, {0.3740000000000001, 
        0.6699999999999999}, {-1.626, -1.4300000000000002`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       4, 5, {-1, 1}, 0.25, 9.063688999999997, {0.3740000000000001, 
        0.6699999999999999}, {3.3819999999999997`, 0.5449999999999999}, {{
        0.9982760882461876, -0.04148421244374118}, {-0.04148421244374118, 
        0.0017239117538123832`}}}, {
       4, 3, {0, 1}, 0.25, 10.327176000000001`, {0.3740000000000001, 
        0.6699999999999999}, {3.2, 2.2}, {{0.7733262219991215, 
        0.41867980171926966`}, {0.41867980171926966`, 0.2266737780008785}}}, {
       4, 1, {1, 1}, 0.25, 10.917575999999999`, {0.3740000000000001, 
        0.6699999999999999}, {2.9, 2.8}, {{0.5844407220064234, 
        0.4928181860149176}, {0.4928181860149176, 0.41555927799357656`}}}, {
       4, 2, {1, 1}, 0.25, 11.021576, {0.3740000000000001, 
        0.6699999999999999}, {2.4, 3.3}, {{0.37242187505670693`, 
        0.48344991678141125`}, {0.48344991678141125`, 0.627578124943293}}}, {
       4, 5, {0, 1}, 0.25, 11.040288999999998`, {0.3740000000000001, 
        0.6699999999999999}, {3.4819999999999998`, 1.845}, {{
        0.874946661269465, 0.33077938448893873`}, {0.33077938448893873`, 
        0.1250533387305351}}}, {
       4, 5, {1, 1}, 0.25, 16.416888999999998`, {0.3740000000000001, 
        0.6699999999999999}, {3.582, 3.145}, {{0.6268705355807669, 
        0.48363608963915156`}, {0.48363608963915156`, 0.3731294644192332}}}, {
       4, 3, {1, 1}, 0.25, 16.570376, {0.3740000000000001, 
        0.6699999999999999}, {3.3, 3.5}, {{0.5166736107858989, 
        0.4997219133711872}, {0.4997219133711872, 0.4833263892141012}}}}, {{
       5, 2, {-1, 1}, 0.25, 0.5009489999999999, {1.5819999999999999`, 
        1.045}, {2.1999999999999997`, 0.7}, {{
        0.7624009629722786, -0.42561218806704876`}, {-0.42561218806704876`, 
        0.23759903702772142`}}}, {
       5, 4, {0, 1}, 0.25, 0.6594890000000002, {1.5819999999999999`, 1.045}, {
        2.274, 1.47}, {{0.7261137031853451, 0.4459513350488029}, {
        0.4459513350488029, 0.27388629681465493`}}}, {
       5, 3, {-1, 0}, 0.25, 1.038949, {1.5819999999999999`, 1.045}, {1.2, 
        0.09999999999999987}, {{0.14045347750467052`, 0.34745690115684214`}, {
        0.34745690115684214`, 0.8595465224953296}}}, {
       5, 4, {-1, 1}, 0.25, 1.116089, {1.5819999999999999`, 1.045}, {2.174, 
        0.16999999999999993`}, {{
        0.3140108002139615, -0.4641206928838112}, {-0.4641206928838112, 
        0.6859891997860386}}}, {
       5, 1, {1, 0}, 0.25, 1.2507489999999999`, {1.5819999999999999`, 
        1.045}, {1., 2.}, {{
        0.27081692649764244`, -0.4443817264694994}, {-0.4443817264694994, 
        0.7291830735023574}}}, {
       5, 2, {0, 1}, 0.25, 1.427549, {1.5819999999999999`, 1.045}, {2.3, 
        2.}, {{0.36112525734668305`, 0.4803267698691954}, {0.4803267698691954,
         0.6388747426533171}}}, {
       5, 1, {0, 1}, 0.25, 1.6905489999999999`, {1.5819999999999999`, 
        1.045}, {2.8, 1.5}, {{0.8775397814556101, 0.32781658502652106`}, {
        0.32781658502652106`, 0.12246021854439008`}}}, {
       5, 5, {1, 0}, 0.25, 1.6999999999999995`, {1.5819999999999999`, 
        1.045}, {1.682, 2.3449999999999998`}, {{0.005882352941176483, 
        0.07647058823529419}, {0.07647058823529419, 0.9941176470588234}}}, {
       5, 5, {-1, 0}, 0.25, 1.7000000000000002`, {1.5819999999999999`, 
        1.045}, {1.4819999999999998`, -0.2550000000000001}, {{
        0.00588235294117648, 0.07647058823529418}, {0.07647058823529418, 
        0.9941176470588234}}}, {
       5, 1, {-1, 1}, 0.25, 1.9639489999999997`, {1.5819999999999999`, 
        1.045}, {2.6999999999999997`, 0.19999999999999996`}, {{
        0.6364340418208416, -0.4810257292831942}, {-0.4810257292831942, 
        0.36356595817915843`}}}, {
       5, 4, {1, 0}, 0.25, 2.0832889999999993`, {1.5819999999999999`, 
        1.045}, {0.4740000000000001, 1.97}, {{
        0.5892912601180151, -0.4919624689613395}, {-0.4919624689613395, 
        0.41070873988198486`}}}, {
       5, 3, {-1, 1}, 0.25, 2.3253489999999992`, {1.5819999999999999`, 
        1.045}, {3.0999999999999996`, 0.8999999999999999}, {{
        0.9909583464675625, -0.0946567590499319}, {-0.0946567590499319, 
        0.009041653532437502}}}, {
       5, 3, {1, 0}, 0.25, 2.7721490000000006`, {1.5819999999999999`, 
        1.045}, {1.4000000000000001`, 2.7}, {{
        0.01194885267711075, -0.10865577571768312`}, {-0.10865577571768312`, 
        0.9880511473228892}}}, {
       5, 2, {-1, 0}, 0.25, 2.9545489999999996`, {1.5819999999999999`, 
        1.045}, {0.30000000000000004`, -0.10000000000000009`}, {{
        0.5562689940156686, 0.4968237115038539}, {0.4968237115038539, 
        0.4437310059843314}}}, {
       5, 2, {1, 0}, 0.25, 3.287749, {1.5819999999999999`, 1.045}, {0.5, 
        2.5}, {{0.35608679373029994`, -0.4788412984081206}, \
{-0.4788412984081206, 0.6439132062697003}}}, {
       5, 1, {-1, 0}, 0.25, 3.3175489999999996`, {1.5819999999999999`, 
        1.045}, {0.8, -0.6000000000000001}, {{0.18433005812423564`, 
        0.3877531273841019}, {0.3877531273841019, 0.8156699418757644}}}, {
       5, 5, {1, -1}, 0.25, 3.4899999999999993`, {1.5819999999999999`, 
        1.045}, {-0.21799999999999997`, 1.545}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 5, {-1, 1}, 0.25, 3.4899999999999993`, {1.5819999999999999`, 
        1.045}, {3.3819999999999997`, 0.5449999999999999}, {{
        0.9283667621776504, -0.25787965616045844`}, {-0.25787965616045844`, 
        0.07163323782234958}}}, {
       5, 4, {1, 1}, 0.25, 3.6028890000000007`, {1.5819999999999999`, 
        1.045}, {2.374, 2.77}, {{0.17410028452167142`, 0.3791956954543979}, {
        0.3791956954543979, 0.8258997154783286}}}, {
       5, 3, {0, 1}, 0.25, 3.9519490000000017`, {1.5819999999999999`, 
        1.045}, {3.2, 2.2}, {{0.6624387106210126, 0.47287806598718757`}, {
        0.47287806598718757`, 0.33756128937898744`}}}, {
       5, 5, {0, 1}, 0.25, 4.25, {1.5819999999999999`, 1.045}, {
        3.4819999999999998`, 1.845}, {{0.8494117647058823, 
        0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 5, {0, -1}, 0.25, 4.25, {1.5819999999999999`, 
        1.045}, {-0.31800000000000006`, 0.24499999999999988`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       5, 4, {-1, 0}, 0.25, 4.516489, {1.5819999999999999`, 1.045}, {
        0.27400000000000013`, -0.6300000000000001}, {{0.37880397804577837`, 
        0.4850891920693264}, {0.4850891920693264, 0.6211960219542215}}}, {
       5, 1, {1, 1}, 0.25, 4.817149, {1.5819999999999999`, 1.045}, {2.9, 
        2.8}, {{0.36061247015610276`, 0.48017821329587274`}, {
        0.48017821329587274`, 0.6393875298438972}}}, {
       5, 3, {0, -1}, 0.25, 4.959148999999998, {1.5819999999999999`, 
        1.045}, {-0.5999999999999999, 0.5999999999999999}, {{
        0.9600687537317389, 0.19579770642100092`}, {0.19579770642100092`, 
        0.03993124626826097}}}, {
       5, 3, {1, -1}, 0.25, 5.065748999999999, {1.5819999999999999`, 
        1.045}, {-0.4999999999999998, 1.9}, {{
        0.85569261327397, -0.35140114522057847`}, {-0.35140114522057847`, 
        0.14430738672603005`}}}, {
       5, 2, {1, 1}, 0.25, 5.754149, {1.5819999999999999`, 1.045}, {2.4, 
        3.3}, {{0.11628548374399066`, 0.32056695090794485`}, {
        0.32056695090794485`, 0.8837145162560094}}}, {
       5, 1, {1, -1}, 0.25, 6.184348999999999, {1.5819999999999999`, 
        1.045}, {-0.8999999999999998, 1.2}, {{
        0.996115193369585, -0.06220703262380569}, {-0.06220703262380569, 
        0.003884806630414941}}}, {
       5, 1, {0, -1}, 0.25, 7.977748999999999, {1.5819999999999999`, 
        1.045}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8356647971752433, 0.37057947047469153`}, {0.37057947047469153`, 
        0.16433520282475672`}}}, {
       5, 3, {-1, -1}, 0.25, 8.252549, {1.5819999999999999`, 
        1.045}, {-0.7, -0.7000000000000002}, {{0.6310200642250049, 
        0.48252848907652657`}, {0.48252848907652657`, 
        0.36897993577499516`}}}, {
       5, 5, {1, 1}, 0.25, 8.41, {1.5819999999999999`, 1.045}, {3.582, 
        3.145}, {{0.4756242568370987, 0.49940546967895366`}, {
        0.49940546967895366`, 0.5243757431629014}}}, {
       5, 5, {-1, -1}, 0.25, 8.41, {1.5819999999999999`, 
        1.045}, {-0.41800000000000015`, -1.0550000000000002`}, {{
        0.4756242568370987, 0.49940546967895366`}, {0.49940546967895366`, 
        0.5243757431629014}}}, {
       5, 3, {1, 1}, 0.25, 8.978549000000001, {1.5819999999999999`, 1.045}, {
        3.3, 3.5}, {{0.32873062228651867`, 0.4697518496585584}, {
        0.4697518496585584, 0.6712693777134813}}}, {
       5, 4, {1, -1}, 0.25, 9.063688999999997, {1.5819999999999999`, 
        1.045}, {-1.4259999999999997`, 1.17}, {{
        0.9982760882461876, -0.04148421244374118}, {-0.04148421244374118, 
        0.0017239117538123832`}}}, {
       5, 2, {1, -1}, 0.25, 9.321348999999998, {1.5819999999999999`, 
        1.045}, {-1.4, 1.7}, {{
        0.9539739366050987, -0.20954155884518436`}, {-0.20954155884518436`, 
        0.04602606339490133}}}, {
       5, 2, {0, -1}, 0.25, 9.914748999999999, {1.5819999999999999`, 
        1.045}, {-1.5, 0.3999999999999999}, {{0.9580397849708551, 
        0.20049826778267407`}, {0.20049826778267407`, 
        0.04196021502914497}}}, {
       5, 4, {0, -1}, 0.25, 11.040288999999998`, {1.5819999999999999`, 
        1.045}, {-1.5259999999999998`, -0.13000000000000012`}, {{
        0.874946661269465, 0.33077938448893873`}, {0.33077938448893873`, 
        0.1250533387305351}}}, {
       5, 1, {-1, -1}, 0.25, 13.171149000000002`, {1.5819999999999999`, 
        1.045}, {-1.1, -1.4000000000000001`}, {{0.5461272968668108, 
        0.4978677258908847}, {0.4978677258908847, 0.4538727031331891}}}, {
       5, 2, {-1, -1}, 0.25, 13.908149, {1.5819999999999999`, 
        1.045}, {-1.6, -0.9000000000000001}, {{0.7279993908607104, 
        0.4449901996304469}, {0.4449901996304469, 0.27200060913928953`}}}, {
       5, 4, {-1, -1}, 0.25, 16.416888999999998`, {1.5819999999999999`, 
        1.045}, {-1.626, -1.4300000000000002`}, {{0.6268705355807669, 
        0.48363608963915156`}, {0.48363608963915156`, 
        0.3731294644192332}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.8747216925329534, -6.250684146533585*^-19], {
       Complex[0.8175564635971488, 0.], 
       Complex[0.5585646375310911, -0.00634883926304965], 
       Complex[0.06705295858734085, -0.05865969630386509], 
       Complex[0.08476630675356325, -0.019911906763033695`], 
       Complex[0.000531263865287095, -0.013266811587695012`], 
       Complex[0.025642397243374977`, 0.010350148466146266`], 
       Complex[-0.005868448448025385, -0.010960790207852279`], 
       Complex[0.04272202987031876, -0.00912424161641132], 
       Complex[-0.015231957263504297`, -0.0002427745819604634], 
       Complex[0.026816096450853998`, 0.009626650059367784]}}, {
      Complex[0.7067827383031782, -3.508000227016585*^-18], {
       Complex[-0.24648260432655344`, -0.013136176503455325`], 
       Complex[0.1740797091055462, -0.0864021602223326], 
       Complex[0.7539204216246099, 0.], 
       Complex[0.5248793302882798, 0.027782880971622393`], 
       Complex[0.0023317695710900577`, 0.031454203151413666`], 
       Complex[0.09214157513211692, 0.038382206863609825`], 
       Complex[0.0906630616984015, 0.03353537712968561], 
       Complex[0.13193164908550564`, 0.004823284610807237], 
       Complex[0.0499581051298086, 0.07308085238849409], 
       Complex[0.10225210018744638`, 0.024792476524244492`]}}, {
      Complex[0.6631606448897435, 9.272228297881946*^-18], {
       Complex[-0.41736914220587357`, 0.018078906730202873`], 
       Complex[0.6204427239501916, 0.], 
       Complex[-0.3787284807374868, -0.09317556951906045], 
       Complex[-0.07921788702876431, 0.08346337500369456], 
       Complex[0.1300079362307408, 0.10020895234776878`], 
       Complex[0.23610430712278788`, 0.11464348936956605`], 
       Complex[0.16225095099195844`, -0.06585311823816734], 
       Complex[0.2702595111100238, -0.020496888109423246`], 
       Complex[0.09276732224078965, 0.08523580860827572], 
       Complex[0.2346746903279289, 0.06535052035755079]}}, {
      Complex[0.6247702430644613, -2.7077452811196198`*^-17], {
       Complex[0.0994188228488065, -0.026779105163233695`], 
       Complex[-0.14474014064384447`, 0.043584867994791374`], 
       Complex[-0.007110774250007272, -0.00499497411731179], 
       Complex[0.02301422540259309, -0.020892834913480242`], 
       Complex[0.5186935687364139, 0.], 
       Complex[0.31959291399323275`, 0.008342901888846982], 
       Complex[-0.34988300047912213`, 0.28843060984002866`], 
       Complex[-0.20950457271570802`, 0.14941826375449935`], 
       Complex[0.46085636018029164`, 0.1961370094114228], 
       Complex[0.24278045709267657`, 0.11236779543051162`]}}, {
      Complex[0.6133343628066183, 2.2293960106503833`*^-17], {
       Complex[0.20741075247553883`, 0.01723585015701221], 
       Complex[-0.33047903768099823`, -0.04506118254061778], 
       Complex[-0.04291364747771743, 0.06508825356929603], 
       Complex[0.018696023603322346`, -0.025850928112246603`], 
       Complex[0.3626169380435074, -0.0469238837998469], 
       Complex[0.1961441851739544, 0.008110314491266264], 
       Complex[0.612759618025575, 0.], 
       Complex[0.36701831664225415`, -0.0266010208076888], 
       Complex[-0.1589723866106163, 0.29458676389505034`], 
       Complex[-0.11056357979868059`, 0.1759187850710562]}}, {
      Complex[0.5993086232483615, 8.70667297540065*^-18], {
       Complex[0.145435763897114, 0.07553352177623623], 
       Complex[-0.19089491390511026`, -0.13108115553211], 
       Complex[-0.04452856433978597, 0.028043646823656815`], 
       Complex[-0.022390730371645975`, 0.07680712122274432], 
       Complex[-0.38524293338391097`, 0.3009858113420081], 
       Complex[-0.2527353317456874, 0.2225280446110819], 
       Complex[0.2630345049357771, 0.048324364775365475`], 
       Complex[0.16930063525809563`, 0.03428430729144511], 
       Complex[0.614066420005916, 0.], 
       Complex[0.27993636246938575`, 0.03389935654079057]}}, {
      Complex[0.5393142171429217, 1.1641104568433693`*^-17], {
       Complex[0.06071895564408644, -0.05666294895287489], 
       Complex[-0.16890048476709182`, 0.12616323330394608`], 
       Complex[-0.48214507702655185`, -0.02121794741263111], 
       Complex[0.7628518490624432, 0.], 
       Complex[-0.23517311373405927`, -0.049928028334930194`], 
       Complex[0.12633719383647163`, -0.022136001035533433`], 
       Complex[-0.13402887398683855`, 0.04778498187218063], 
       Complex[0.08011884085035767, 0.006283196041862851], 
       Complex[-0.12335218604112946`, 0.050683180970258056`], 
       Complex[0.11864002448124882`, -0.031385026733166115`]}}, {
      Complex[0.459786092718665, -1.8153847820992526`*^-17], {
       Complex[0.07509393936501418, 0.03509431337169128], 
       Complex[-0.17086416590714418`, -0.044898070906422796`], 
       Complex[0.14016750554696517`, 0.07893241703172985], 
       Complex[-0.26759651926303923`, -0.1576140385885615], 
       Complex[-0.17377080066232028`, -0.1474479951396759], 
       Complex[0.19183443321211013`, 0.18012216647155654`], 
       Complex[-0.3474043873031569, -0.05484822908360744], 
       Complex[0.47744270446499393`, 0.14128496035420396`], 
       Complex[-0.30663419922525204`, -0.02610141541086361], 
       Complex[0.5020886131259998, 0.]}}, {
      Complex[0.44351815831994673`, -1.5364655903349532`*^-17], {
       Complex[0.011654759977745474`, 0.015422724710961159`], 
       Complex[-0.013336354367335709`, -0.031056662840909896`], 
       Complex[0.039947083574108526`, 0.020199968271768346`], 
       Complex[-0.09129030560846675, -0.022764332058409012`], 
       Complex[-0.3921999423490362, -0.012882948425307822`], 
       Complex[0.6647879148983911, 0.], 
       Complex[-0.05942997842625389, -0.11100649409621856`], 
       Complex[0.08071572242013245, 0.19762832806024336`], 
       Complex[0.24897404385524324`, -0.048063190905886594`], 
       Complex[-0.5098427265538769, 0.07767981082044434]}}, {
      Complex[0.4165189614729008, 1.221300661422471*^-17], {
       Complex[-0.0269693301956873, -0.022532759583224222`], 
       Complex[0.02250040784601136, 0.014967184791450741`], 
       Complex[-0.04181506962606482, -0.009139742926392738], 
       Complex[0.08525899021155975, -0.0027329785373156543`], 
       Complex[0.2491067650155594, -0.06608456096348334], 
       Complex[-0.36929773605460314`, 0.04714816589367721], 
       Complex[-0.3814982589200512, -0.0434898250849656], 
       Complex[0.6130190844593018, 0.], 
       Complex[0.24289785609511777`, 0.016824078868041034`], 
       Complex[-0.4391390828133189, -0.09246995163924823]}}}, \
$CellContext`dynMeshSize$$ = 14, $CellContext`dynPlot$$ = {CompressedData["
1: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
HMc=
     "], {10, 15, 20, 20, 20}, 5, {{
       Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
       Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
       Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
       Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
       Line[{{-3., -39.}, {3., 39.}}], 
       Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
       Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
       Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
       Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
       Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
       Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
       Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
       Line[{{-10.3, -38.300000000000004`}, {
        4.8999999999999995`, -31.900000000000002`}}], 
       Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
       Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
       Line[{{-10., -34.400000000000006`}, {
        5.199999999999999, -28.000000000000004`}}], 
       Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
       Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
       Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
       Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
       Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
       Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
       Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
       Line[{{-9.2, -24.}, {6., -17.6}}], 
       Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
       Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
       Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
       Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
       Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
       Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
       Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
       Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
       Line[{{-8.299999999999999, -12.3}, {
        6.8999999999999995`, -5.8999999999999995`}}], 
       Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
       Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
       Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
       Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
        7.3, -0.7000000000000002}}], 
       Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
        0.6000000000000001}}], 
       Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
       Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
        5.800000000000001}}], 
       Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
        7.1000000000000005`}}], 
       Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
       Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
       Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
       Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999, 
        12.3}}], 
       Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
       Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
       Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
       Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
       Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
       Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
       Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
       Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
       Line[{{-6., 17.6}, {9.2, 24.}}], 
       Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
       Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
       Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
       Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
       Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
       Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
       Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
       Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
        34.400000000000006`}}], 
       Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
       Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
       Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
        38.300000000000004`}}], 
       Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
       Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
       Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}, 14}, $CellContext`dynTab$$ = 
    1, $CellContext`freqMeshSize$$ = 8, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1:eJx0nXdUlMnSxjFnTJhzQDGvumb0xayYc8AcMWHGBIqgmHPOu0YUE4pi5DUC
gpkgMAMDMwMoA6KCEdTP725Xj/PU7v5x7zl96jTV1VX1dP/At2tMmD1wcm4r
K6uFla2s8vz6/4FV/r766Fy+O333ar7kzMhWh+Q8H37tu0mh8baXjt/4vjVL
fVTtdM0Z7c3j/9ib1HoL2t8ZG5Qqx/v/b1yjfu28sWCtE+ZxK/Hf3pl3Vs8O
ZvaK2m7b2CW/zd/7n/mV+JTzJ7Ql0tAfpdXnkPCyh9PAn2xl6efjEa37pik/
Ir/0GNbJSq6rwoDOmWnrTXKc1hU9Pd+rEb1MYG9ST6e9X3bG1TxO67JvNrx2
3erm+WldXZbuybO2XTraK95Z6YX2fjWP07r2ZGR53N2Vjv4oNpdz+rdbyfxX
MsMbdvX3p/h8VGlddicOJGk8zeO0rut1csofzkZ7k7rtrluzD9/S5Dity/p7
8KSfMelynNbl2G5jlQ4X0tFecfnQu9+FY+Z5aF3WqXntzlxh/ijHQl/de9iH
+a9cLbS83dQhJqX//8aT5Lq8jmaMvfjePE7r2tpv4MQxv+JjaW9Sg2x3LrOZ
YR6X+3UhI+HgYfM8tK7sgEnnememor0yK6hTLo/T5nFaV90LK7o5nExFfxT3
6NFNX79JRf+V2J+Ht+zdaFLo59G6Rq+ZWeNFkzQ5Tus6FBzfcPBBtDepTbqu
bfFInyrHaV29X5Ssc2uVeZz+K137wDav6cxeQXtaV2OYn9b17/5kK+S/WK9C
66L10jitC+Kj0LpqW8ZToXVB/OXPh/0iewX2V6F1PbHMB/JHgfwh/xXKt8H/
5Kdcl7/ITxqndVE+W9qb1NIi/2mc1jVH1AuNy30Q9QX2SlFRjzRO69op6hf8
UW6Jegf/lQaiP4h+4kDron5C47Qu6D8OtK7dlv3KgdYF/c3hP/qhg9wvy/7p
QOs6YdlvyR8F+jP5r1A/F/1frov6P43TukAv5Lq0lvoi1wV6JNcF+iXXBXon
19XIUh/lukBP5bpQf2lde117R346lMx0OXPlpzjfwslMl0P/HFOw0sskpstb
8n6bef5pEtPlAUG9HeZlMHulWuOajsXbJTNdjpnRftfBZ8wfJV/kzRpFm6cw
XZ5oM/5ZrY/JTJdb2tW916dHMtPliP0LO1Zrj/Ym1db3fF63+clMl2fdcrVL
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
NsS5+7EEpsvP7aa2PPRDy3T5w4sdT63ctEyX98QNPBfsx+yVCTWyHr/vomO6
fGzA19HZW3RMl7Xjo3oFh+iYLk/t2+OvsGwd02XTqN3rao5NZLpsm7XvZNeH
aG9SrXc6VN1ZWsd0WT2VHJ44QMd02eNYQIk6u5m94lrPOitPuI7psu3IkYaj
BRP4fTl0wGb3xglMlz39XgY7zk5gupy3h7fzjDMJTJc1w492dB6A9ia1eD81
rUu1BKbL7/36RN39pGO6XH+2uqPCVR3T5R4O+zflXaBjuvyi9NzvObY6psvH
0pde9SymY7p85eCRsBkeTNfUuRtG9yyVN4HpcqnAgO1PdTqmy7tnuia292U6
qwZ4jrnffp6O6fKpKT7v7neMZ7o8dvfdjs2maZkuVw1bHnB9hZbpstfdX1ez
guhPtlIlj8fPhtEJTJddoqJr1YrRMV3e49z7ko+7junyo/AM28A+8UyXj9pG
ZJ1UtEyXnVM0P1yaa5kuo738u2WYn9b17/5kK+Q/6jKtF3UZ4iP1q4plPKV+
Qfzlz4f9kvoF+yv165hlPkj9gvyR+kX5hrocIPITddlX5DPqcozIf9TldqJe
UJftRH2hLlM9oi4XFfWLuhwn6h11uaDoD6jL1E/Yfdmy/0j9srPsV1K/oL9J
/YJ+KPUL+qdZly37rdQv6M9Sv6ifoy5T/0ddBr2Q6zpuqS9yXaBHcl2gX3Jd
oHdyXaGW+mjmAJZ6KteF+kvrmrMo+kTNWXFMl7/PjX5Y55OW6XLDz8Puvp7A
dTnvMcPc+lU1TJe7H58Tca2jhulyvkYlbIYX0TJd9o1an9Wkgpbpcvd3T+r+
2RD9yVZGtK541sVRy3S5a6C3V40NcUyXnX9muH1bj/Ym9fzHI7aDFS3T5Z8F
oq+Mra9lutylmOf15VWZvdLx/t0vNlW0TJfvzrs8s1xdLdPlFUufj7S2Z/4r
g8KTCg/21jJd3ufyPmL0Qy3T5XJT+9YqMBLtTar7+jeRB5tqmS4XvNF294Ia
WqbL/k5NqjSrzOyVkAbHnzWvqWW6rGuxWvv7/PLve1MeVrnXm/mvdAyptvCr
XRzT5b83H9IljWI6qMbEbnhztb2W6bJ7w8we/WtpmS7HXfU5Flxay3T5SaFp
9eu91jBd/rBQ01f7NpbpcuSEI9sdBmuYLmeV7WalO4X+ZCsJxYOm/Kgcx3R5
iutyf80YLdPlpZMGFC7kqGW6nHtNlT0zSjGdVct/2XAo6JefqMujKlXzyIiP
ZbqM9rSun96W89O6/t2fX/cU4T/qMq0XdRniI/UL4in1C+Ivfz7sl9Qv2F+p
X6ss80HqF+SP1C/KN9RlR5GfqMueIp9Rl/Ui/1GXH4l6QV2+JOoLdbmAqEfU
Zapf1GWqd9Tlv0V/QF2mfoK6DP1H6pdq2a+kfkF/k/oF/VDqF/RPqV9+lv1W
6hf0Z6lf1M9Rl6n/oy6DXsh1gb7IdYEeyXWBfsl1gd7JddlZ6qNcF+ipXBfq
L60rzwnHnH0TmA6qM3tu6Rv9WsN1Wb9yuqZiLNPlMLs8bc92jGG6vKTWmOQW
U5m9UqD5pel7v8QyXVbj69j0aadhurz17qI+02aiP9nKgycz1eNuGqbLPrfW
zbw8lumg6u1zJq1HNtqb1Obp7qvtOsYyXe7xNTzXF4dYpsuOm5fOHnmS2Sud
gt59e1VJw3R5z5ODRRt4aZgut1629u7edOa/crRxwta67bguj9/kvPVLN67L
7xNcTiyuw3U51GnEmtpBGqbL15Xd+sdjNEyX3+1wb3fhXSzT5d3aG+7ZS2KZ
Ls8dX25XYJtYpssunmdX73SNZbrc4n3HM9O7Ml1TS71zu3xvCtNBdeLjPE4O
8zRMl9e5dvLrMZTprGq3M8L0pqqG6fL39TYvOr2KZbpc+cnhtXPuRzNdXtN5
4/HB9WP475e3JRwtciaW6XLIpcS8ExszXVMHdez6ZX9aLNPlvLWfWzfJjmW6
vGdPRI0NOqaz6uCsd9sCCrxgutwtoGDp1EIOHVCX0Z7WtRfmp3X9uz+/zofC
f9RlWi/7/bJlfKR+eVjGU+oXxF/+fNgvqV+wv1K/Nljmg9QvyB/z72FFvqEu
txf5ibq8SOQz6rKryH/U5cOiXlCX34r6Ql2+IuoRdTlY1C/qcoaod9Tl6aI/
oC5TP0Fdhv4j9WunZb+S+gX9TeoX9EOpX9A/pX41tOy3Ur+gP0v9on6Oukz9
H3UZ9EKu676lvsh1gR7JdYF+yXWB3pl12VIf5bpAT+W6UH9pXdF2M20Vn1im
y6+TKw3OvziW6fLfXhUHrPr5iunykcT7D78Oe8Z0eUGNtn5FQ58wXY52KVM8
f9fnTJdLf7w/a36Zl0yXTyy9smHr/gimy9sCHn8pWugV0+WpT6yNLstimS4/
a51TKrRTLNPlRyVvuzg1iGG6/DIgrYKvZzTTZf2e6g6Zw6KZLqdPOXzmSr9o
pssbK2xdHLIxmulyVr/kNk6fopku+z9cb/RbFsN0uUKFTlMqPo5humxduW7B
vs3R3qS2KPrDJflcNNPl8K7dQ3d2j2a63PNqh0F1KzF7pdv+E2r9BtFMl4NH
7I/fOyCa6XL7ozY1rJ8x/5U5yWPCfo5juqbmbX563q7G0UyXWzQeNefD20im
y+UrFnrj0Cac6fJTrecG/8DnTJf7HLb9/HXaU6bLX4ZU72i9O4zpst+alzfm
LH7JdHnhkrjd2hJcl0u77xxVejvTNbX+l/X3nhSIYbrcaNTPO66TI5gu71jc
sOK4ZY+ZLh8Z0fxZ8aK32b0Yx+XfM8A85P+//9xshfxE/aV1of5CHKROXbSM
m9QpiLP8+bAvUqdgH6VOlbXcd6lTkCdSpyivUH9niDxE/e0q8hb1N0zkOepv
P1EXqL/9RB2h/kaKukP9bSzqFPW3uKhr1N+qog+g/lLfQP2FPiN1aodlX5I6
BX1M6hT0PalT0CelTgVb9lWpU9CHpU5R30b9pT6P+gu6INcFOiLXBboj1wU6
Zf77Lktdk+s6ZKmDcl2gm3JdpLM+Xx+vKPEl950utndGuP/4rM5t/alww0km
Of6Hsq7S8lrv1TbefZ4VHmkep/X27/rKbUIXk5L9v7i9k/nw6tjDmt1u0Pd2
+HdmaB6Kz7SL5aqurmoeb/e/+Y3qgPLKveRi5nGKW8V288qemIDjYer0fkWH
hM03j1M8XTJ9HyzLlab0+J8/kdKfdzbn79wpkab0gTql7/z4TOpZ275CttpV
xOfNzWreXe/L7+eo7UQc6DtaluvKVgPqFD458IF5HopbSIjVl2XHzPO0/Y95
xLqU3E47/Tzs0zAOSs29qv/aA2lyftovv0KLHGtfN8/fBucX9vL3esNaDXva
Wn4viH0HzHLfjUozl6fD2uZLl+OUhzdMA0r3C0+D9RrV5CXTfTduMs/fG+cX
9rS/J8pt7VL6u9mexun7Y5CfytTMMfXTKqRjfip1IieUOr3FPH8vkSenbzbx
v79efjdJjP82v7Cn/AmO3VZi4kKzvTz/i+8yQR0pu5KWbpxcLw3zQbma9Hqj
6688tIr6X72onUReHTYutD/1yaQMs9B98/fNLPcrW62xbPZMo7cJ9sv8nTea
n/Kqdru6HZZ3SJPzy/uC+M4VzT9E5NvrcrdLz4jA9frby/Va7peydP6hs8f6
puN+ye+/kT/NRH4qdXo4jmhu9megyAf6PhvZy78vml9wWJ7LZvu+YE/+tBH5
6Tj7a/m/X5nzx1HkJ313juwpb8PT3CKunGD5Ke3Jn1Yin6eXbPxuXc106Y/j
f/hPeVsnSlOz7y2z/zTeXnyXjPxpKvJ521OPW/MqsXpk/su/q+mQus4jhfUT
+T098mesyP/VI8sWOjnF7M8/+3vvVo74fhrZU54fW7J4ctcBaG9lRfbQJ5Ve
/XLnbb+S9UnpD+SzEuky5E6x1Syf5Xf/Rv3Tt9Vuol5KtJjaLXcwfXfuwS17
kc/ye3QW+ZOtRgo9sswfc33R/PLvOjaU7xFjnSbnb/sf84t4Ki0ih/9wDzNh
PO0xnrIutN199pw0YT4oLuK7duRPE1Evl1zbDPbPY/anNfhD9lQXy1psjn57
0hwfGpffCRT+tBT1EtY/OfTzcbM/PeheL76/R/ZUFwd6d2r1sRH2K/P3D8kf
qpeW39oVuexg9qcX+EP28t8P3vHwOlvSbE/j8vuElv1ESbrlmzfPt1SIp9kf
6IfK1hcVv0VVMmE/lN9pJH86ino53uXmtLy3UqU/juAP2VNdFHi7otrr82Z7
GpffXbTs/0qHye3qNZnF+r/5+5CW+ayErNqc9HMOy2dpT+eczqJebhk6jHHd
aZLnnD4i/8neMn+yVToXWeaP+buUND/VRbH+VZtU7Wyen8YxnlQvDh9dHuVa
j/G5YU/xgXxQ4nqdKV11Tyrmg/xeJflD+jK+3YU2jjXM/oh8kN+TtDwHmtT6
3/IErnqQCudAsz3500HUS9s7PVou32X2Zyj4Q/ZUFzQ/2eN3Ncmf1qJeWov5
yZ/e/+E/1YVWxMdyvebvZJI/jUW9TBDxgX6iYD+huqD9hX4o7cmfbqJeaH8t
/Tf7Q/ZYL2RP4/Q9T+j/yk2Rz9D/mf9UFwfur47+Mx77ofk7pXR/IX1RRD3S
/aW9yGfSL7hHqAfF/HCPkPVF88tzl+g/NH/b/5h/pKiXY6L/WMbnoj3FB/JB
of4J+SC/g0r+kL4YRP8kf1qBP5b3O5NK/d/yfmf+rinks7Ix+2X/14vM/tB5
jL6/Svby9/JCvyD/pT35o4h6eST0i/wZKfJttjh/kj3VBekv2fcHe/KHzmNX
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
fxzBH+TJpzIvJ1YuagRe+ts7d8CTnbrvHRT3kPV/83t8wJPLTHB7fSiV5bO0
R55cLVfecRP2GRlPJnvkyd/Eucgyf8zvACJPTnQKrbSvn5HxZIwn1cs3/WHD
yTwYnxv2FB/kyRFd+53bkp/lg3wfEHlytXur7uVxMDKeTO/3IU++tG/+t/Yl
8Rxotkee3KZrsWHr8pn9GQr+IE/2F/OTPb5jiDy5pZgfeTL6T3VB8UGejP2E
7vs1RHygnyjYT6guEsT+Qj+U9siTv4r9RZ5M/iBPpnpBnkz9E3ky5TP0f+a/
/HeIcTc/LApj+SzfhUSePErUI/Jkej8ReTLNjzyZ6gt5clXRf5An4/zEk1eK
/oM8meKDPNlP9E/kyXTeQJ48SvRP5MnkD/Lk2aL/I0+mdySRJ19wcN5fdpiR
8WR67xJ5cn2hX8iTyR55MukX8mR6vxJ58lKhv8iTyR558l6hv8iT0X+qCzo/
IE+m8zby5B/z1mvXHjMynkzvbCJP9hXnMeTJZI88ub44LyFPpvMP8uQX4n6B
PJner0Se/Fac95An03udyJNLC/1CnkzvliJP9hTnW+TJ9O4n8mRNjYsJgQ9Y
PO0xnlQXW8X5HHkyvWeKPHnQw7LHk3OMjCfTe6PIk6eI+wXyZLJHnrxZ3C+Q
J5M/yJNXifsR8mS6XyNPDncx2mX+ijPyZPRffsdG3O+QJ9M7qsiT6X6HPJne
e0We/FLcT5Enkz3y5PXifoo8mfxBnjxT3N+RJ9N7r8iTX4j7OPJk8gd5MnEe
5MnEAZAnnxD3HeTJVC/Ik4ljIE/2WPOu6tHcLA7yvVrkyS0EV0GeTPbIk4mr
IE8OFpwHeTJxHuTJ6I/8vofgTsiT6V1d5MnfBHdCnkwcDHnyC8HBkCfT/MiT
7QWXQ55M7/kiTyYuhzyZeCPy5KeCHyJPpr6KPLmr4EXIk4lzIk8uKbgo8uQc
wVGRJ8cI7oo8OUjwXuTJTQXvRZ58H7gx8eTdFwvu6KIxMJ5cx9YuqGyEgfHk
rI/XU7v+Gkee3NKgafbopYHzZPEeJfLk7X3WjNhwzcB4csstL++bLhoYTw7f
rFmTfgPHw9S/wu2nhAYaGE9ec6T1tm6PDYwnj1tZbXyhGAPjyfQeKPLk/uM7
nnbLzXkyvbeLPNltrVf+MjkGxpMvnPxgtTzbwHgyzkM8ec9fC+70ec7ioIRG
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
Xpwno/+Utxmv7XsaW3OeHLH4tc/PVD3jybMm9tlTZgGrR+Y/5blN5Kj+w11Y
P1Hc9szwfjeW8+RnJ2xrxNXjPHnHh+vD3z/WM54c8vVihn19zpPJHnnyK6Nz
3fvjOU8mf5Anby+90PXyWM6TP2R51X7hxHny+peNez+ZwHnyiv6jbvqM5zz5
pdAj5MlUX8iT85T9UnLUTM6TcX66v/xlX/BeWB3OkzGeVBcxxZ/b5vqT8+T8
+3pWH5WiZzzZz+VpJZu5nCeTP8iTZ68bkVSpFefJOavn9b2Wrmc8efaq4NC0
vpwnN/NsPb15Fc6Tmx7opPTrwnky2SNPdl5xLtspTc94MvmDPPlJVrqmZZQe
+aH6cE6mtctdPePJr4oO/LKtA+fJ6L/8rsX4yf1qDOM8eUzDseUH9uU8+axf
1OUmwWZ/HMEf5MnDYr5N33tXD7zUyqrSnXbuylU948mth05bM5T3fyXLZura
W/M4T85ctTCq21TOk8keefL1S4l/N5vOeTLZI0+mc5Fl/mSrHrr76yY4c548
OzBu2vdhnCdjPKletp299/TJU4zPDXuKD/Lk5FWHy02OYPmgUPyRJ4+YFlrK
ReE8mfIBeXK5VUO0C/Nxnoz5TPd9t6+7bvXPMPszFPxBnmwj5id7Gv8k8h95
8jIxP/Jk9J/qIknEB3ky9hO67w8X8YF+omA/obpwEfsL/VDaI0/eKvYXeTL5
gzyZ6gV5MvVP5Mk3RD5D/2f+U120XVpm3ZZZnCdTPiNPpnpEnkz6hTyZ5kee
TPWFPJn6D/JknJ94MvUf5MkUH+TJj0X/RJ5M5w3kydQ/kSeTP8iTqf8jT24q
zifIk8N/7Hv4qTrnyXReQp48U+gX8mSyR57sIvQLebKvOH8iT44W+os8meyR
J18U+os8Gf2X3FicH5An03kbeXLeJ4sHzWvFeXLuXP+ct5Enh4rzGPJkskee
vE6cl5An0/kHeTLdL5Anjx1dqdv1sZwnR4nzHvLkps2mhOyayHky6RfyZDrv
IU8uLc63yJN9S/WteMeNxVMx2YeU69KG82SMJ9UFnc+RJ9N9EHmya+CpfDnz
DIwnz0kyrCrgjfE0qc/F/QJ5MtkjT6b7BfJk8gd5Mt2PkCc3Evdr5MnFWlaJ
HuplYDwZ/ae6yCPud8iTRwX3H9L6t3iSvkSK+x3y5BDBH5An0/0UeTLZI09u
Iu6nyJPJH+TJZ8X9HXnykNxNZ91fzfq/cl7cx5Enkz/Ik4nzIE/OJTgA8uRt
4r6DPJnqBXkycQzkyU51mz9IXM7ioPj3CczVzpXzZOIqyJPJHnny34KrIE8m
zoM8+b3gPMiT0R/Kz/6COyFPnncvo4fNJM6TiTshTyYOhjz5kOBgyJNpfuTJ
CwWXQ55c896SglmjOE8mLoc8mXgj8mTih8iTqa8iTyZehDyZOCfyZOKiyJOJ
oyJPriG4K/Jk4r3Ik4n3Ik9Gbkw8OXRWiQ5Z7fWMJx9sn39A7q+JjCffe/Kg
8TBTIuPJZ/qO7HQ0SM948uKXnz8/PqJnPPmnY+69/f9MZDz5ZM3BZc6XSGQ8
2Wr/DWO/zjgepn6fPWt6lfaJjCff+DGmgK1TIuPJLy67xWXH6BlP1oTe2rgo
nXESte/yhUevavWMJ7dKeTxlx1tcV7bqV/iv7U1z9Iwnd4uvt6PCej3jyTgP
8eTN29zPTSyN4xql0+Rs5Xt1PePJ1fvOuPJgj57xZDk/8OSrZa53HnVcz3jy
RFdnr3sFOE92O923fk6cnvFkz8uJzuUNuF6jWmJTtdI/ovSMJ8v5gSdvevMx
ZXeknvHk0U3KNMrKy3nygbFNh7TN0DOePMTxq1Nnk57xZMfFKasOZ+oZT5bz
A0/W1fJ6nitVz3jyWu/eD2681zOePD5l546Gz1g+KBWuJb61i2E8QS0U82BJ
vl/7gjwZ81D++8rMwjMGXcH9ylaXiPpCnlwqvNVfe5P1jCenBx6NORSvZzx5
52eriQc+43r97eV6gSc7vXC8lsfI9ksp1zbBZUMo4z9q2bqdtlzU6BlPzpoS
EPAkRM948tm3W6r0eK1nPJnskSc32NCr6Yrf4kP3l4BzieM8Z+kZT262K372
gRssP6U98uR6vaZ8SPgtno7/4T/l7fUPB84cD9QznmxztabdkMWcJ6etOOl6
/CqrR+Y/5fm4sCJjFmxi/UQ50uVsk5qV9IwnH6r4YuzqlYmMJ18vUtG2UY6O
8eTmQTN9Xy9CeysrskeePNP51K7Rc1mflP4gT9aG3Vg125Pls+JRJLxYt/aM
J6iFbj272fS4HnmC2uqcPtU0EvMnWyU9Qp5M9YU8udTVTvoHB/XIT9j88t/v
H7lqNWASi6c9xlP+HfLcc3fXOCYynlx6wEe7grt0jCeXLdznhXabHvmP9Ad5
8tNXhyMGzkpkPNmnh/f7VyUTGE/uMCqxavTIRMaTQ3IeHOoZpWM82bqsfs+g
homMJ5M98uQxKyI2lu1q9qcX+IM82ePT4Y8uFRKRH6qRs1p6l1yoYzzZc3z3
FbXyYDxNSjD4T3Wx7X6h5BFNExlP9uo09eC27gmMJwfZ+ww5ck3HeHKE8Ad5
cud9P8Z18dMBL7WyelbHcNBpio7x5Ae7rx8OH8/6v5L6OqjYah+Wz0qLb483
Jc1j+SztkSeXCBvsdm2lnvFkskee/FKciyzzJ1sNOWjf2CNIz3hy3Ofj9zsM
SGQ82RPiSfXyrl2a3s8d43PDnuKDPHm+bteroqt1mA8KxR958pNd+lEFayUy
nkz5gDy5cLDznZxfdYo8OQjyme77fa5833buhNmfoeAP8uSiYn6yp/HTIv+R
J9P8yJODwH+qi3kiPsiTS0I/ofv+YxEf6CdKS+gnVBdasb/QD6U98mTaX+TJ
5A/yZKoX5MkBon8iTy4p8hn6v/Lv/TBbibmX67BnAMtnhfIZefJ9UY/Ikw8I
/UKeTPMjT6b6Qp68WfQf5Mn7YX7iyQ9F/0GeTPFBnrxc9E/kyXTeQJ68XPRP
5MnkD/Lk4qL/I0++Kc4nyJPf9p3W3rdjIuPJmeK8hDyZ9At5MtkjT24v9At5
Mp0/kSf3E/qLPJnskSeXEfqLPBn9p7qg8wPyZDpvI09et2fizGpjEhlP3iDO
28iT6TyGPJnskSfTeQl5Mp1/kCdniPsF8uQpZarGx4TqGU+eJs57yJNbbzya
vTcY8ydb/VPoF/Jkd3HeQ548WpxvkSdXHzhjY9BPFk+l/+FWnwpc0TOevBHi
SXVxQ5zPkSePF/dB5MnHEjoPm7FNz3jyWTfNcv8CnCf/Ke4XyJPJHnlyfXG/
QJ5M/iBPpvsR8uTJ4n6NPHmCJu5TtTd6xpPRf6oLut8hTz7ifCWX23c948ll
xP0OeXJrwR+QJ9P9FHky2SNP3iXup8iTyR/kyXpxf0ee3OrudW0PPev/Ct3H
kSeTP8iTifMgTyYOgDw5Vtx3kCdTvSBPJo6BPNl217bm38JYHJTbx6KOtjmp
Zzx5i+AqyJPJHnkycRXkycR5kCeXFJwHeTL6I+/XgjshTy54pVDeTw56xpOJ
OyFP7iw4GPJk4mDIk2l+5MndBZdDnjw00ls9YqtnPHmL4HLIk28K3og8uZ/g
h8iTqa8iTyZehDz5h+CcyJNzCS6KPJk4KvJk4q7Ikw8I3os8mXgv8mTkxsST
81t9+vJnrkTGk3d+unFzbdkExpP3931R5WOnBMaTb715H91hWALjyQV7eDvP
OJPAePLs+EFnyheKZzzZqvl019DgOMaTo+3bD3ifjONhqu+9g3cicsUznrzR
IZ/uU614xpN9PvXUHHuH94hsZe6G0T1L5U1gPNkw8uDkrtEJjCdrhh/t6DwA
15Wt9l2zr+W+/omMJy86vWh9vooJjCfjPMST5+oj326YpWM8eabtyoRvG3SM
J+uP3uvfTKNjPFnODzy57D5dtvVpHePJxfupaV2q4b4blY2385xe4adjPPlT
7mHb/3quYzz57dFLUS1CdIwny/mBJ0c3rBg54LiO8eT3fn2i7n7SMZ5cekPX
dfnTdYwnP3avun9OoQTGk6+d8cycH6RjPFnODzx5yLp2L6ud1DGeXH+2uqPC
VR3jya3fx7d8VY/lg+I0M7vX3pYJjCfX+bCi6+36CYwnYx5SXi0eaP01KG8i
48l5RX0hT/5QacXDU9UTGE8uFRiw/alOx3hy/8fJ9zc/wPX628v1Ak/W/Rnh
sOoY2y+lh8P+TXkXMP6j7ghuvM+rdALjybtnuia299Uxnjxy9dI4Q5aO8WSy
R558/LC62MNNx3jyi9Jzv+fY6hhPtjaWmvD3AZaf0h55cpfies3P5zrGk9F/
ytvBFaMer/DXMZ4c4Dnmfvt5OsaTdw4uXMztLqtH5j/luXvHLW86XNExnnws
felVz2I6xpN7F11m6FRZx3iyzxSfd/c7xjOe/Ca1+b232fGMJ58S9siTB9uV
qFX0k47xZPIHeXKlutd7ahYlMJ585eCRsBkeCYwn31a9jibf0yFPUPc4977k
4475k63eFHqEPJnqC3nykNKeR2+e1yE/YfPT/WXxoBqKMRbjc8/+FMST6mKw
6dzUA2/jGE8et/tux2bTtIwn75me2HP+Th3yH+kP8uQ/ql/OszwnnvHkR+EZ
toF94hlP9l+9sabuaxzjydXClgdcX6FlPHlxxqKRmpdxjCeTPfJkhwansr7r
zP70An+QJzcaXGHUh+g4xpOP2UZknVS0jCeP1+a0PByE8eT+y+9dDBv9uEAR
HefJdxX9xoI6xpNtuwXOu+Jg9od48lHhD/LkgnXvLdrXNg54qZWVc4rmh0tz
LePJn2+NabSoCev/SpU8Hj8bRicwnvzm2ZbJvc+yfJb2yJP9Kw0669ErgfFk
skeeTOciy/zJVl2iomvVitExnlysTLfQip11jCdjPKlejIF9/+rfV8t4MsUH
eXKueMcDMwdrMR8Uij/yZM2+pD/9fsQxnlxF5APy5Pn9At7enBLHeHIVyGe6
749bXG/oxbFmf4aCP8iTF4r5yZ7Gn4j8R548VsyPPBn9l39fIeKDPHks9BO6
78eK+EA/UXZDP6G6oP2FfqhQ/0GebBD7izyZ/EGeXEDUC/Jk6p/Ik6+IfIb+
r+z9136YrdRvdbXH2AkJmM8K5TP73oWoR+TJZ4V+IU+m+ZEnU30hT94j+g/y
ZF+Yn3hybdF/kCdTfJAnNxT9E3kynTeQJ08U/RN58hnhD/LkpaL/I0+OFucT
5Mk1e9rOmPcxjvHko+K8hDy5tdAv5MnHhD3yZF+hX8iT24rzJ/Lk3kJ/kSeT
PfLkQ0J/kScfA/+pLgaL8wPyZDpvI0++73kn9UTxeMaT64rzNvLkFHEeQ55M
9siTb4nzEvJkOv8gT14i7hfIk02jdq+rOZZxEnWYOO8hT/b0exnsOJvxATVV
6Bfy5ABx3kOe7CHOt+zvk0MHbHZvnMB4csaXzb4NduoYT7aDeMrzmDifI0+m
+yDy5O/P93SYtEXHeLLdyJGGowUxnibVRtwvkCeTPfJkR3G/QJ5M/iBPHi3u
R8iTi4r7NfLkrkvr1j9xT8d4Mvov7+Pifoc82bWedVaecB3jyXvE/Q55cpzg
D8iTM8X9FHky2SNP7ifup8iTyR/2Hp+4vyNP9jgWUKLObtb/lbriPo48mfxB
ntxPcB7kycQBkCdXEfcd5MlUL8iTnwiOgTx5QZHwy9+9WBwU9VRyeOIAHePJ
xFWQJ5M98uSygqsgT/4mOA/y5DTBeZAnoz/yO2CCOzGevNOh6s7SOsaTNwnu
hDyZOBjyZOJgyJMLifmRJy8WXA55sm3WvpNdH+oYTyYuhzx5k+CNyJONgh8i
T6a+ijyZeBHy5LOCcyJPjhVcFHnyj2b/cFTkydMFd0WevEPwXuTJxHuRJxcA
bkw8ucbeC7WPO8QxnhzV/NbC2/u1jCdfaj3p7613tIwn/728e2yNbVrGk/92
eR8x+qGW8eRZn5bNrzpAy3jyiMd3e6nnNYwne0bGle56HMfD1FpDa3ctelXD
eHLQ8K9BlS5qGE9elds6NGG0lvHkvzcf0iWN0jKefH779EE7P2gZTy43tW+t
AiNxXdlq7P4LNjXd4hhPdmhe7bnHPC3jyTgP8eTaVR5NMdnguEap9cXZu6WN
lvHkCY0XHT/XW8t4spwfefKdB+6LW2sZT3Zf/ybyYFPcd6PyqfdJ15qVtIwn
X6195GKt6lrGkzs8Suj6o5GW8WQ5P/DkvOML1Um11TKeXPBG290LamgZT17l
5xB6oh7LT2Vii34da/ypZTz55MT4U1+raRlPlvMDT3bzHz5jeBUt48n+Tk2q
NKusZTz5SeKICl1GsHxQovJ5OI13ZjxB1X5buNLVSct4MuYh5dXssvZnFbs4
xpP3ifpCnvyl+qz8ul5axpNjYje8udpey3jysi1f1h+rjOv1t5frBZ686nOz
Scersf1SQhocf9a8JuM/auij6ld9O2gZT3ZvmNmjfy0t48nuTi5bXOtrGU8m
e+TJW92OpQ6vq2U8Wdditfb3fJP/7mbwwdojG7L8lPbIkztl7p49oaaW8WT0
n/J2/rX3lQ9X1DKeHHfV51hwaS3jyU2izxyIbMnqkflPeZ6/aS975y6snyib
Ux5Wuddby3iyKXFAwtO8WsaTnxSaVr/eaw3jyXebPT7WKDfaW1mRPfLkuXFD
bDZMY31S+oM8OfRJ7jsnX+F6f+lwSLWFX3/lOfLkzUs+L1g0SIs8QV06aUDh
Qo6YP9nqIaFHyJOpvpAnnz7y9quusxb5CZuf7i9h+/O7N87H4mmP8aS6iHuu
FF+7VsN48oeFmr7at7GMJy/rcfT02ZZa5D/SH+TJd0YUfBdXUQv8xKTmXlNl
z4xSWsaT+wXXaNr2pobx5MgJR7Y7DNYwnjyy9/aAt/c0jCeTPfLkd1UnHqpQ
2uxPL/AHefKyYfurd1+pYTy5/JcNh4J+xQd5crMTzYavfI7x5P5TXXT8mW9L
/6WsHypZZbtZ6U5pGU/O9PhmWDTD7I8j+IM8eVepLkM2TtQAL7WyGlWpmkdG
fCzjyQHZXTsl+LP+ryQUD5ryo3Ic48kl0z6kZ9eMYzyZ7JEnN7qx4ZrXZS3j
yWSPPNlLnIss8ydbneK63F8zRst4csDtXvmyFmsZT8Z4Ur2c6uGekpQcy3gy
xQd5cr6A5q4v3sZiPigUf+TJPhMXP639TMN4MuUD8uS0BfE2Qy9rGE/GfKb7
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
ba8YT27ZeNScD28jGU8+sPntcpcWuF5/e7le4Mn7rWq2mNOe7ZfSbf8JtX6D
aMaTy1Tau7h7yyjGkytWLPTGoU0448l2O/Kc3ZEZyXgy2SNPHjnuYJdT/aMZ
Tw4esT9+74BoxpPPtNnl+8dslp/SHnny5yY+MdPvRDKejP5T3g4qmXSmtlcE
48nPtZ4b/AOfM54cP9ih6LdjrB6Z/5Tn5Ze4n/OfwPqJ0v6oTQ3rZzGMJ68o
nK7vERjOePKgw7afv057ynjyjXvOdUv5oL2VFdkjT/5y+VnucSdYn5T+IE8u
FZX1avjbGMaT5ySPCfs5jvEEdX/3iAr5HaOQJ6iNR/284zo5gvHk4kKPkCfn
E/WFPLnpw3N7/6wfifxEbQTz0/3l+p8H40pfZPG0x3jK3wPqK74rn/2S8eSf
Q6p3tN4dxnhyzXZ5I52ehTOeTP4gT27mW3zZ4pvPGU/etbhhxXHLHjOe/L2E
/e0nAyIZT7685uWNOYtfMp4cOOfq47yTIxlPJnvkyRUq7Ns7Kecp48k7hT/I
k+0v91txLVcI8kPVZ0TzZ8WL3mY8+evOzFlqrSjGk9F/+Xdixb46fcyIYTx5
4ZK43doSnCfvODE2w2pxEOPJJ4U/YK/8h71yEvwnnuyzJSJw6x+xjCeXdt85
qvR29vsR5a7f1x3rlsQynkz2yJOPpD2yfrjsFePJpYQ98mQ6FwF/U+t/WX/v
SYEYxpOfT3/rW6/dK8aTF0A8Kc+dc422KWL9kPHhExBPeb8ec+T8gpuPGL89
I+yRJ2e8f3070yWc8eSLIh+QJ+eMz5pYwuk548kXIJ8pz/NN+Mee/KHx85DP
dL9+K/yB+lWofpEn24j1Ik8+D/5TXYwX8USe/An6ifz9o9gv6G9KY+gndL8+
KvIH+q20B/6pbhD5D/zzVi/RD5H3HrmxZcu7/z+3WOabQvmGvPesqBfkvV2F
viDvPSzmR95L9YK8N070B+S9OD/x3v9Yrz2tF3lvM9HfkPc+EecB5L1fRH9D
3ttJ+IO895boz8h7H4nzA/LeJe8itV3cQhnvtRHnGeS9LYS+IO8tI+yR9/4Q
+oK8t484HyLvPSr0EXlvL2GPvJf0EXlvWfCf8pz0HXlvC3EeRt57dE5Km3KZ
Lxnv7SXOw8h7r4nzEvLe3sIeee9ecZ5B3ptHnE+Q93YS53/kvVOfWBtdljGO
oX4X5zHkvf4P1xv9lmH+ZKuq0BfkvTPEeQx5bxVx/kTem9UvuY3Tp2jGezc+
GpeRPjOC8d7eEE+qi37i/Iy896W4ryHvTRv9srepUQzjvTsqbF0cshHj+avP
i/M/8l6yR96bJc7/yHvp/oi8t7q4vyDvbSjuv8h738dUPPjVKZrxXvSf6uKw
uH8h702fcvjMlX7RjPeWFPcv5L3FBB9A3ltD3B+R9xJPQN57WNwfkfeSP8h7
y4v7NfJe/Z7qDpnDohnvpfsy8t7iwh/kvdUEh0He21jc05H3lhD3EeS9VC/I
e/sKzoC8t0TArpZv+rI4KC8D0ir4erJ9VIh7IO8le+S9VQX3QN47RHAY5L1W
gsMg70V/KD+/CS6EvDe45G0XpwYxjPfmFlwIeW+y4FTIe4lTIe+l+ZH3EjdD
3vusdU6p0E6xjPeOE9wMee9AwQOR9xLfQ95LfRV57zHBc5D3OgoOibx3sOCW
yHv7Cc6JvPeS4KLIe4cJHou8VyN4LPJe4roD/1cv+STvLW59+/a2Qybl5z/r
JY6nnk57v+yMq0naE1f82nP+3KRc5nGyr7eg/Z2xQalynM6xJbWTJt29kirn
70n3u2bDa9etnibtafxr540Fa50wz9NF7GPP4XW697xqHv9nF/3t9868s3p2
sHl8uIh/wwifeQtym/0cJOKvtts2dkl783h7Ef9nJf/K3eCUeZzuj/Ep509o
S5j9pPvmhoybt5YMM4/L9zs+h4SXPWwep341/HPLiLquacppwQPJz9xOO/08
7NOUHyI+tC9fRteeXOvXz6dxiv9d32X1co83j+N+0TjFf35x2+fOYSb5c2m9
zVyeDmubL13a475If0T8HaI+73h1zjxO8e+ydE+ete3M89C6Jgfcy791f7py
RvxcitvUzDH10yqY7WlfvLPSC+39ah4nP63nzX14Ntg8TvuyJyPL4+4u8zjN
P+TFF+flRdKFLvB9IXsat7mc07/dSvM47ZfXfZuwzxV/7ZfgVLSu1+Vul54R
kS7296NK+/UuqddPe9Ukx2m/bBfcsu2xLE2O035tu+vW7MM38zjtV/+xR8MW
T09Xvv9HfMie9sv6e/CknzG/+SP2q2Hl+ncPP0gXPE3yGTXIducymxnmn0v7
6NhuY5UOF8zz0Hq1u2deda33ax9FHCjO25563JpXyTwP+enyoXe/C8fM47SP
Hd763Dzb0DxO+2idmtfuzBVz3Gj+4SNdPgasNMmfS/vSq1/uvO1Xmu1pH4+F
vrr3sI95XP471tT6K3YPMIl8SJL7VfjrX+PXtEmT47Rfvm3nz27jah7HuNE4
7dfK1I7no/OmKQP+Iw5kL+vrQkbCwcO/+SP260Dz+sFZPX6t93//3SCeoDbp
urbFI32qtKf9yg6YdK53pnmc9utPddCwKU/N4+TPrKBOuTxOm8dpX0LbJtZK
OGUep32pe2FFN4eT5nHal5f337azCUlV+v1H/Mmext2jRzd9/cY8D+1Lw5nL
xzm0M8nzH+2L+ynbU6WSzeO0L1O8m/ttVszjGB8ap31pX+TJuXuXzeMU/94v
Sta5tco8TvG/sDRKc2SReZziXLr2gW1e083jFOeLwt7xP+JG9hR//LkUf/ST
5mkM66L4YxwozoeC4xsOPmgepzhTPEX8FYozxZ/GKc7Pxf7SOMW5tmU+SE71
SOTP8ge1Gnb6eske10v2FH/IQ4XiD3mr/EeeKxT/g6JeOllyP+WKa5vB/nlk
3SnkD9SdQvFfLeqXxin+TyzrXc5/QfSHXk6xbYf3fmSP8Sd7Gt/ab+DEMSvN
88j3WUT/Eb/vMO+L6Fc0TvviJPohjdO+lBb9k8ZpXzqJfkvjFP85oi/Jnyvi
Hy/6/HfLc766W+gs2dO+9BZ6QePy3CV0Z+h/xJPsaV+KCv2icdoX0EEH8p90
kOxp/p1CT2mc9stO6C+N077cqpNT/nC2OW60L5lCx8XvbR1oX3YlLd04uV6a
WBePgzg/SPtV4vxA47SPdD6h+WkczkUs/jRO+wvnIhYf6Y/YXzqP/aNT+eT8
WnG+PSX8ofnhfOjwH+c9B9p3OB86yLqzPE860P7OEedS8of8vyPO5+QP+Q/n
ZAfa9xOW514H2vdAcU4e9h/7TvY0Hj0936sRvczjlA9fxTlcnOfl/tJ5nsZp
H9dZ3gtYnGmc4vzE8t4h4wD3FBmHBpb3GrkvcA+S+9JD3Jv++f0RjxvZ037B
/UvuV2lxj6NxmqeR5b1Pxj/b8p4o4/yo2umaM35bF8WZ7qF4P+3m9veIAYOT
2f3U1vd8Xrf5yex+Osap/vyJb5PY/TT0zzEFK700j1P8z1Y+e2PS8yR2P511
y9UuJc08P41vyftt5vmn5nloX+ZMPja0hM48TvsyIKi3w7wM8zjtS+ul/0fY
W0dF9X3//yp2YAcWimJ3F4LdCLZityjYioFYiN1ix0sRVDAwwAJEwsSimYGB
ucOMEiKiqIj69bfeZ9/rPPdvrc+/Z91177n7nHue+/Fk2LtrhE115f4Uf/M2
FkMr9lTGKf6FL6/njHVXxin+iQutjpx6rYxT/BefW+8wpqiB8WmJ2AcNy3dU
xin+t1fs/V6zmoHx6Qbd+7jkVD3jU/cZrzYF9NUzPv1lUeXCiAl6xqe0Xsin
z24d9Gx/Q8/41PHR+e3N7A2MT2ldkE+9W1aNfNbdwPg05cT1WX7bDIxPs+NV
i2/4GRif3mgat0iz0MD4tLBa6fW33xkYn/oOKjx+64GB8emktZ8Cb3oZGJ/6
XKzVa8M4A+NTWhfk0y9vbB4NKW1gfJp5ff65eg/0jE+nRjnEp4YbZA6i9eqb
fLd7tPy9KHyaecZQ17lQGaf1GuLV4P3Z0cp9aL28BtquPbLLwPiU4oN8+uf9
uvK7wv6Zj1ivaYFHzIcHGRifNqk+IvhNZeV6WsdH7tc7VAhUxul9z996N7Kn
i4Hx6fASpn0PxinvRfN0T/u6aEF35T60jof3zK9lkaNcT+t4obsqLMlLGaf7
m0ZNTyu1Rs/49NrqB9aHpijX0zquma7/3WmEMk7XZ5gl5r/vo2d8+jIxOWSM
pGd82qHZpMTptQyMTyluyKfqmlGRaZF6xqcUB+TTQ7VHvP68Ts/4NLTeu9IH
++kZn7Z5uzatpD6d8WlOg/F925fTMz7d0rmXw/ncdManNYc2XFE1IZ3xqV33
vG0mb9IZn+5sFnE870k649NerQOd9NHpjE8p/sin2e0v90nUpDM+7dzhfjmL
SnrGp2VbL2+8/6qe8enUtAP7E5rrGZ9SfGic1sXJ4YzlnJfpjE/90kMXhN1M
Z3x6yWq++3XfdManXkdM/zvplc74lK5HPqW40fUUf3wuxX8RzJPu0wrei+I/
BeJAcd6be8n6ipOe8SnFE/mU4o98aiXWF/l0r/F+kDlotNg/yKf0vsinsA9l
PoJ9K+f/sM9lDqLvBfl0qsnPDUEhesan8N3JHJQmvl/k0zbG37t8/y7ifEA+
pfgjn/buOe/Lp/oGxqcvxPmDfPpenFfIp5XFeYh86iXOT+TTQ+K8RT7dJM4l
5NOL4pxHPnUQOot8+kzoBfLpLKE7yKcUT+TTX0K/kE8vGOugnLeTDiKfkp4i
n2YI/UU+3X38mn2vi3rGpwOEjiOf5rVv8nbDGz3jU4oD8inlD8inl0R+gnwK
eRGLP/Kpn3FexOKDfEr5GPJpgshvkU8hP5Q5CPI9mYMuGueHMu9APinzDuWl
yKeUnyOfuhnnyTIfQd4r81GhyJORT2ndkU9jTqzsY26lZ3xKeTjyKeXzyKfO
xlzA4ox8+tOYO1gckE+Ba+R1AQ6S14W4CfkU+E5eL+Aveb0uC45DPg0z5j45
/g7GnCjHOW9TfrJvWeW5FGfiUORTv2atH/ZL1DE+vTM7vU5MsI7x6YcNq1an
DFfG6fo/Fi8t3pkr4xR/8/S5PjPNdIxP09ppPfzfKtfTuI1P0VZ5VZRxWheD
S4ClQ01lnNZl79CF5mF1lHFal153N9pNbq6MU/w/WHpu+tpFGaf4L+twoeak
aco4xb+g942rwR7KOMXfeubDbkMvKeMU/63uT8NinyrjFH9Lvwl7vAJ0jE/t
7Z7mZ17RMT41L5OSkV0nnfFpw/MZT2Yk6hif0nohn754Lr3t+1TH+PT7uk41
fdN1jE9pXZBPo8Z+/DHku47x6b21BQu19dMZnyYcn5jfq30649OyJi1/7vql
Y3yaf/fuxqP90hmfPq57ITGrRzrj030b93To2yGd8WnwqAomk8umMz6ldUE+
/dh4T/RKrY7x6cTjbVVF/XWMT3e8cKhzpGe6zEG0XoaIdl3vrtXJ47RebcIa
HXjxRhmn9VpZp/qE76WU+9B6behdwvNGw3TGpxQf5NNtM75Gz/93PmK93poX
hLt2TWd8euLXoOTdt5X50DrWTfl952BH5T70vp71TjuerJLO+PTIrjo51Z8r
96F5Vp7S09wrVxmndfT2+Vzt6ltlnNax5+fLZQP8lXG6f9Pfjfefe6hjfJpV
rvv63ReU62kdq5Y9V33XE2Wcro9qvPXKsCwd49O7RUPmOXrqGJ82j5tV6cU9
HeNTihvy6XH/MV96uusYn1IckE+PzZlRLnOsjvHp/Cd2JVpa6Rifhrcae6ZM
ZR3j027Nbf44NtYxPt1Zq2XRr3V0jE+TS9UwcauqY3zat1SMn0sVHeNTn5IH
xy3757ny3+/OxV8v1VDH+JTij3xq2aNemdPtdIxPZ2vGjZj793uROVGsi9Ok
tqFXzukYn7YbO3fua2sd41OKD43TugxK+FgwpoSO8emLLdvHn/shMT791CBh
T2C+xPi0RnDT8Fd5EuPTXHE98inFja6n+ONzKf4DYZ50n0fwXhT/NhAHivMp
19VtjjjrGJ9SPJFPKf7Ip7PE+iKf/me8H2QOshb7B/mU3hf5FPahzEe7jPet
nP/DPpc5iL4X5NNjQZoSBw7oGJ/CdydzkKf4fpFPDxt/7/L9m4jzAfmU4o98
eveaW78yITrGp4Hi/EE+fSXOK+TTFuI8RD61Eucn8qmvOG+RT2uJcwn59JQ4
55FPSWeRT82FXiCfxgjdQT6leCKf7hD6hXzqZqyDct5OOoh8SnqKfNpO6C/y
aaZjh+dnjusYn34UOo586jVkRHR7Lx3jU4oD8ukkkT8gn4aI/AT5FPIiFn/k
0zDjvIjFB/k0XuRjyKe/RX6LfFpgnB/KHAT5nsxBkB/KvAP5pMw7L0VeinxK
+TnyKeTJMh8FGue9Mh9ZiDwZ+ZTWHfl0jyZneU6ejvEp5eHIp5TPI5/2MeYC
Fmfk0+XG3MHigHza05hr5HUBDpLXhbgJ+TTQmO/k9QL+kternuA45NMCY+6T
428w5kTFB0hq8DJjjTJOcb4qOBT5tP7M2wEjkiXGp9Ue1RhyI1NifHrh5rG4
3HPKOF1fSfVtwVx3ZZzif6tuv5hIV4nx6ciQZm9v/VGup/HxU/f2brpKGad1
aXwhp27xtco4rcsng93PVFdlnNalyIfdLd5vUsYp/pUynk7M+WeeFP8noUXG
mXko4xR/1+PdRvXbroxT/HdXXrnQ5pIyTvE/scN/q9VTZZziP2iNVYufLyTG
p0fPrXg04o3E+HRU3R09KuRJjE+1+y85aTIlxqe0XsinN0PMK9z8KjE+3Xhj
vmuFeInxKa0L8mnXXY0L21bgfFp/fIOmfrV1jE/t96kNfRroGJ9u3V47r8J3
ifHplifHLsVb6hifrmlqWkLVRMf4dLHHlhkpTXWMTxecGbM320LH+JTWBfl0
9h3LB4X1OJ9qa409E1ie82nrddZurywUDpLzinYxDj2+SfI4rZer2eSXcTU4
n44YVKH5o3/uQ+t1x0oynfw3H0M+pfggn9btdO/Lt3/Gab3W+I+8mGKhY3xa
/rF+5cNryjxpHePb6MdGmCv3ofetYF5rfPkaOsann50OtIsswfm0f8WhE0aX
53yadqKRW26h8lxaR7cmvy7uy1bG6f5OpQb7bMuQGJ9OvVmuukuucj2t4+T3
By+5GpRxur7JqEiv5RkS49NHHs5B555JjE89Hm1d8CNEYnxKcUM+NRk2xCrj
hMT4lOKAfPoz2rd4LQ+J8emAlZ5JN7dKjE+Tegzr9W29xPh0f41NN0Zslhif
LtFYel9wlRif2l96fvKHi8T49OXOhV7rVkuMTwc5lb/6a6XE+LRM36fNtm+T
GJ9S/JFPn9fY6lXlqMT4tGP7tfWG3JYYn4YnBax3iZIYn1YyPzH40yGJ8SnF
h8ZpXfrPdPRrvEZifHp9x466o1ZyPl22qsZGn+WcT7vMuiAVLuV8ulxcj3xK
caPrKf74XIo/zlP+3Q68F8Uf40BxHmjyYcyHKxLj0wgRT+TTDiL+yKdlxfoi
nw4z3g8yB70S+wf5lN4X+RT2ocxHS433rZz/wz6XOWig+F6QTy9r56W/85MY
n8J3J3NQcfH9Ip/C9y7ff7s4H5BPKf7IpyYhFlO6vJUYn4aI8wf5lM4r5FM6
D5FP6fxEPtWK8xb5lM4l5FNTcc4jn5LOIp8mCL1APl0ndAf5lOKJfFpf6Bfy
6S1jHZTzdtJB9vdToafIp6S/yKf+mVcWZ5flfPpW6Djy6a9idUwS0iTGpxQH
5FPKH5BPHUV+gnzqbpwXsfgjn0JexOKDfGon8jHk03Uiv0U+dTPOD2UOgnxP
5qAuxvmhzDuQT8q8c0vkpcinlJ8jn0KeLPNRTeO8V+YjnciTkU9p3ZFP/Wf0
OGiaJTE+HS3ycOTTgSKfRz7dacwFLM7IpxHG3MHigHwKXCOvC3CQvC6NBDch
n9Y05jt5vYC/lPUSHId8amrMfXL8gRPlOHfd2b2f60NlnOJMHIp8qvZtWHHR
Rs6nyx/nDK42m/PpnOYWUWPsOZ++2XEvxaYv59Ou7TLvPbXkfHp7RHDRnv9w
KI2fjat7xK4M59P4bbdU7z9rGZ9W7DrUYpNaGad1eXPdrk2bOGWc4n+w2fge
qtfKOMVftyGn3p/anE87x3oUbTSX8+lWl869Vy3jfPqujrT22QbOp39aXk0Y
7cL5dEX18NGvW3A+fbRvqM+4qZxPhz2+3WzrdM6ntF7Ip9VKj7/Y1Inz6WDb
Rb5XV3E+pXVBPi1xaXXXP64S49Oxxdo7hblLjE8TdTZprn/zHOTTcxslt/mb
OZ9OfmI3tpuHxPh0zrja2We3SZxP06Wtpf4Zp/tXKDz2etYmifEprQvyqW8V
29qP1kuMT50tJuW2WCIxPm01u9BpuofCQbReHwee/7p3NufTdcdykyevUcZp
vVq2UU0Yu0UZp/U62a9Lw4p/44l8SvFBPi078cCHp9v+mY9YL5Orde8285AY
n2p326x328j5tLDIpW3b/7m/7If3+zOh5laJ8anTrBFHq69Qrpd/17dtXEvv
f+5P6+h0+u3Z0quUcVrHtreHV1u4kPNprOXkqKtzOJ/G6+Y3DZvB+XT90YXb
Pk3jfNo1cnVs6hTOp6bHnp/f6MT5tHMnx2VP1nE+pbghn6o2Hz4Y0pnzKcUB
+TTG5f2lPxlaxqe3Or/d+F2lZXxa6L7M9m62lvHpoc/3JuS+1DI+jYrY9LBJ
kpbxacnjQxpMNmgZn56q0CdiUDHOpx02d3PsWI/z6eD4YaGPO3M+pfgjn05t
Na3WKFvOp5cbzLLzmM75tEit/edLzOF8arXQsPVGU86nFB8ap3WZ/vNmm0Px
WsanEUvyTJ1DtYxPlxyrGRn3QMv4tM6jnq7WAVrGp3Q98inFja6n+ONzKf5T
YZ50n3x4L4p/T4gDxdnNbvKDSzM4n1I8kU8p/sintL7Ip7AfZA6i/YN8Su+L
fAr7UOajl8b7Vs7/YZ/LHHRbfC/IpzecX9WptpTzKXx3MgfR94t8Ct+7fP9O
4nxAPqX4I596qA7Nr7ia82kFcf4gn9J5hXwaL85D5NP24vxEPnUW5y3yqa84
l5BP48U5j3y6ROgs8mmxov/TC+TTkkJ3kE8pnsinpF/Ip6CDct5OOoh82lro
KfLpWqG/yKdPi5WeNXuxxPg0W+g48mlRH6//2i7lfEpxQD6l/AH51FTkJ8in
/xnnRSz+yKdzjfMiFh/k0wSRjyGfdhL5LfIp5IcyB0G+J3NQceP8UOYdyCeV
/2cUeSnyKeXnyKeQJ8t8tMw475X5aKjIk5FPad2RTy0eryn9ZTLn01CRhyOf
Uj6PfLrFmAtYnJFPJWPuYHFAPn1rzDXyugAHyetC3IR8usyY7+T1Av6S14s4
Dvn0tTH3yfEHTpTjXPB054P50zmfEocin1afdfDzsMVaxqdl7pQpnm+jcBzF
/0D0b93krFTGp19TC1r6NlXGZf26O/xy6eKpjE8fXog7391bub/8e8UGViNe
PtIwPt348vyEebeVcVqX9S6lZxe7pIzTulR5bZFgvVuZD8U/fUafDRv6pzE+
Nfc+PN+1qDIfiv+EDMOo9cHKOMV/qWdX6zPPlXGK/86+Hi0f/cPFFP++VWO2
PUzVMj7de8D16qyqWsanU1e+e9XLRcv4tN2Ap2lDO2oZn9J6IZ/OarUk+uhy
LePT9ZdtWxQmaxmfBol1QT5d2+GpdZ9wLePTrqH31IO1WsanmYe7LtbmaBmf
npzWfmyPHC3j07Pz7xRd/0vL+NR72WCbY8U4n/qtV224XYrz6dx5F9yDTDif
0rognzYYtXB35B8t49NWOSXDr0taxqeHvxWZdfKbVuYgWq+EyTPbtnuijNN6
RV2r/bXFT2Wc1mvWqvlbHpfifJr6rvcEh5KcTyk+yKdT2lZv/aU459PPSTdc
xv99LvLpl7mBgVFPlfvQOm7fNjz8fq4yTu87crqnWaMULePTLDfvVV4ByvXy
/zn2SHXe9VwZp3U05KUaSp5SxuXfmVxNm77ZSRmn+7f8MXDwqP5axqeL5vsc
mbJUuZ7W8Wx/v7YWdZRxur7SpZD6nVppGZ/qwtveKqvXMj79VOXq0zvRWsan
FDfk062m2YsPnNMyPqU4IJ9WDbBoNtaF8+m35PHJnXumMT69NHhbbnzlVMan
geVqW7Yu1DA+nX2tlM+JpxrGp5XtvzYrfUTD+DSryRTp0h0N49PIwvDTQ+I0
jE+Xp3p1djBLZXxK8Uc+3dJ33qkDg1IZnwZWrzm2nEsa59OL+8oH7NcyPs1Z
2+njjC5pjE99RHxonNblgNt/t6e/1DA+jXHqsq3ySg3jU/vnuw8EOGkYn75u
Ip1ymKthfDpKXI98+kTEja6X+QieS/E/BPOk+1yB96L450IcZF/6qjYjc5KW
86mIJ/JpgIg/8ukysb7Ip7AfZA7KFPsH+TRWvC/yKexDmY9g38r5/13jfS5z
0HfxvSCfVi874q36gJbxaTXj707mIPp+kU/zjL93+f50PiCfUvyRT7ODzyee
TtEyPqXzB/m0vDivkE9bifMQ+fShOD+RTzPEect+3yvOJeTTUeKcRz4lnUU+
3S30Avn0m9Ad5FOKJ/LpDKFfyKeSsQ7KeTvpIPLpHKGnyKevhP4in3YzvJx7
6KOW8SnpOPLpDMPhQ61eaxmfUhyQTyl/QD6l/AT5FPIiFn/k04vGeRGLD/Ip
5WPIp5TfIp9CfihzEOR7MgdBfijzDuSTMu/MFHkp8inl58in+4zzZJmPShvn
vTIftRV5MvIprTvy6bjYbSFnLbWMTykPRz6lfB75FLiAxRn5tL4xd7A4IJ9W
NuYaeV3WGXOQvC6bBDchn5Y25jt5vYC/5PUijkM+/WLMfXL8gRPlOLeJLHbG
1F95L4ozcSjyqWOLHxd9P6cyPjU9bFP/cFWF++S/X3fdYeJpoYzLfz9tNq/L
6d9qxqczXF2LjQxSMz4N9tFHp9kr96Hxz28PvSqyXrkPrUvE+DwrnacyTuty
NHnU1Sf+yjiti6tbo6DJP5MZn85s+OVlbn/luRT/LfdWHVnlqIzL9Vvsf0z5
uU8Zp/g/SjSMmeGnjFP81TPihj15qoxT/C0mVFw1RKthfLpUG/tx1988B/nU
zXfpNe25VManZv2dtIsWaRif0nohnxpOV/1xv4OG8enuIJPLbv4axqchYl2Q
T89ZjvxsskLD+HTjhcBKTTw1jE/X6WcWO/L3u0A+rbprwI6S2RrGp6uam34x
idYwPk11npHc+LOG8anlpEnS+dKpjE/nV4nrtr9OKuNTWhf299Pn9ntd26Qy
Pq3Zu0pLnW0q41O7l/qwveEamYNovZbYVYv94Joqj9N6fY1ud3RcN2Wc1qvi
yJCs/ubKOK1X8Wp5maMqpDI+pfggn+b6j4gLzf9nPmK99uwvecfpbz6JfOq5
aFWala9yPa1ji8Uhh8wClHF633vxfpUq/s0nkU8PjylbYX2ocj3Nc7DNiT3F
VyjjtI7lr7hHFBmhjNM6vq269FehpTJO979fJD8xxEzD+HRMs0qNyv/zvrSO
XtlrAzZXUMbp+vAdzoc8TVIZn651vHfwR56G8emY6jV7bIvQMD6luCGfeq92
fBe0V8P4lOKAfBq4eWqY1TIN49PrK0ySiiSlMD59Fp1jGTwihfGpz9xLn8L6
pDA+3fK7k9m6scmMT6d5hvbpsEDN+DSk3bnClSvUjE/NX2wIvOemZnxqP1Az
vFF4MuNTij/y6dZQa+3u0hrGp59yR97t3iaV8enms1Uy5/hqGJ+2q19/0a30
FManFB8al38nXzhjz82ByYxPz1vGfPG2VjM+dS+Z8GNndzXj0/kG1W/njmrG
p3Q98inFja6n+ONzKf53YZ5yvVN4L4p/B4gDxfno/OE3L7lqGJ9uEfFEPs0R
8Uc+tRPri3xaz3g/yBwULPYP8im9L/Ip7EOlPpLxvpXzf9jnMgfR94J8etox
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
+Spya5LI25FbpxrnzzI3PTHOh2VuGibyZ+RWWnfk1tfdCqs875vEuJXyc+TW
OiLPR25VG/OCHOeqxnwhx/mrMY/IcQB+keNw0Jh35HVZYcxH8rrsFDyF3PrE
mPvk9frPmMvk9eom+A659YwxD8rx72fMj3Kc3+vrjCnposST4kx8SvxC8bGv
Zf1YXyFTHqc4OI4sP/bF8kxrb5E3yr9neGC+bUBYpsyhFJ/+a4+abO+ZLY/L
/4f7JbvMsR/Zcv5Jz9WvcfTdvSeL4qb8vSzny8bQI9kyL9B8Lj9oeztsZ7b1
WMjbTX89mf0nMdvaW8yf3vdI+trdc5pnifPtkzz/M7qVvXzyM+Vx2lfWTQYP
ndgxy/qieC6ty5DFP2r9F58l3uuTPH/Hym0+7bDIpvNKzotMM4o3u3InU87r
aJ4VxDx/0nzEe22dVKOM99ws+T60jheexz+OGEH3iZXnX6nzvIHFnmTK86F9
2Dl2wm/XF5kyp9C6FAbOvjo8L0PcP1Z+35uruo+5bZJlXSDuQ+/73E7//JtX
pvVEcb3sPxT0LHfLJtPacZhDqV3Nnzyk9xr+tnKTh1sz5Ovpvbz6P1hQ/GGG
fH9al95zejZv65RpbSvyCnqvh1LvqasOZ4rzJFZ+L5uvzs+K7sywHpkVbpsV
HvyQ3qtq45MHtjhmiP0QK+v4jJ7Xuw9tqMxf9vEeDe6y4UgG6cpD2p80/37i
evq+Zon7DKR5kq8l5jMM8i6nyL5FN17OEOfbJ/m9rMX7Doe866dYlyHi/vS+
F0TcCsV96L2kh77FTQoyrCeI6+m99vx8Z/d+dab1aMgnG193G2jjnWFdNO5/
96F1pPUdCvlDlOXhddUWZsl5Bb2Xs3ivIuI+FIfkjfMqTmuVZe0g5iPXKRL7
U3y/chyGjSxW3GpTpvxe8t9tv1q5ZXtnEW/K8Rnec3e93tflc0COQ70p+v/C
lmbJ96E4LBLf42jIf8rT+SDuI/eLyW0w/27dbDk+tO4DxDlA19P7fqgZVHVh
TDbxqax3D5sU1jrzM5PON/m9wrt8PnfToNyH5vlenHu/QMd7dZjQuGkD5Xqa
j3+Z1UMb36O4KfpyMSt33ZVVmdZ+4nqKf6Y4n0n3KZ7HFj1yX/wkQ9Z9mied
83S9zLn9dpdudFG5nuY/UuiF8KNkPeq6bcTrspMyyS+S9eiZ+WWLhVaZ8n3k
3293yy/banYm06Ok8THdqjfUMz2aFjrjditnPdOjtNSMMhGr9EyPqL886hH1
tUc9crgxbHu/BgamR5PWfgq86WVgevQxtPrdOhcNTI/+vF9XfleYgenRl/ZN
3m54o2d6lLd9k/Nabz3To4nxvzy2qfRMj+x8cs8+6WlgelTVbXb6VUcD06ML
3VVhSV56pkc0T9Sj/K0Lmk416JkerZmu/91phJ7p0ZfbG+b479QzPeqxyXv8
iPN6pkc5Dcb3bV9Oz/RoksnPDUEheqZHpdynbLm2Uc/0KO3rrITCdnqmR37p
oQvCbqYzPbLdUn5cQUo606N1zyZkvB6oZ3pUssr9nWXH65kepeQc3Tk+OJ3p
kdcR0/9OeqUzPTKtEJj1qrae6VEdj7BNDkHpTI9o/qhH5cV9UI+SxXxQj2oO
bbiiakI60yNX8b6oR7QuqEcjRNxQj9zDxw4/XFbP9MjZtVS1oTP1TI/2Nos4
nvcknelRabG+qEdtqo8IflPZwPSI3gv16NO8+aP3P9EzPcoT+xP16PrqB9aH
puiZHrWx+11ko5mB6dEz9+sdKgQamB45OS1U5X3XMz2qLr5H1KNfdD6AHn1s
vbyK6WID06Mp4hxAPZoZ5RCfGm5gerT7+DX7Xhf1TI/qNDzUusDewPSIzj3U
I6eHq5oZsvRMjyaeb9Ny8m490yNL32vF1y/XMz2i8xn1yD5yuM2ynHSmR3TO
ox7tK16w6NqrdKZHpBeoR7s9R+VWtdYzPcrblJ/s+3ffoh5VjzV9s765nulR
gXveBWm+junR3SDv0fdX6ZgevbT9cyTio47pEfWTRT2iPraoRy29f+bEZOmY
HlGfXNQj84/fzlq2Tmd6tE30HUY9oj6/qEevp9VqeWeLjumRTaeg6Oo+OqZH
x8f6R3gX6Jge7b9+JqHgm47pUU/Rxxn1iOaJejQ14sSHD9d1TI+oDzvqUfMP
Paa0c9YxPbIMs9pXapeO6RH13UY9Oin6a6Meqf31PXZt0jE9ajNENWZtRx3T
I+oPjnq0edxs3xIVdUyPHAYdG50coWN6ZF60+PSZx3VMjwq0ZyRvEx3TI+rn
jnpk/njrYxMbHdOj7gMqjN8h92dX9Ijmj3rUUNwH9eiHmA/qEfVDRz2aLN4X
9YjWBfVok4gb6tHk0mYBGxbpmB5dt5l/osZ4HdMj6vOOekTri3pEfb1Rj+i9
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
g7yOYv8ki7yF5kP703NXrcGJpspz5XNv5KhZUzcp4/LvDEUeRfeX61eIvFre
V+K5alF/yUtwEO2fpyJvJ26icarPRuOyzsZ9OxR/NUsep/25Jazai2+1lftj
HSeaJ92npcgzvYBb6xrVa1LqNI59+33+hnLK90L7sJHIQ34C51J9J3ouXV9O
5L00Lv9dW+T/9FzaV6bLlkb4PVHmSfswRuRdXsDLVCeK7kPXHxF16miecr1Z
kQfSfOT/Hw9d3+FzgTIu9+cSHET3wTpUNB/ah5TfegGnU30qmqdcV0HU36P7
y3zRs2nvDb2V+dA41bPyAr6mulLyPhHPnRP4uOT+E3L9PXm/LRbc6g3cLdcV
hPqfxL9e4CdEUB0tqOdJXEbX034gnvIC/4HqbhWC/2Al6m7ROF2/tKLlm/kv
lHnSuhMn0jjtE+JTei6tO/GmF/gb/1ddLxqn64N91zUvNkOZD61vY8HLcjzF
uhB303NpfZ8/LfJ93QXl/jSe4FgifuIwZZzW/ceUxnMaLVSeS3GrI/wEb/BJ
qD4YjdN7kV/hDf4J1Q2jcZqP/YD49TP7K+NYNwz9E6qvhf7JsXa/7Ss+0DP/
5PvibdteWOiZf0L1ZNA/2TD97vPnU/TMP6F6NeifjNzf9oX6jIH5J1QPB/2T
vsl3u0cv1zP/ZIPufVxyqp75J5lnDHWdC/XMP9nbsLqUVtLA/BPHR+e3N7M3
MP+E6v+gf+I10HbtkV0G5p8E+szL3yPpmX9SO8/Tu2kPA/NPbjSNW6RZaGD+
yTVRfwn9E6ozhv5Jhlli/vs+euafBIxaU7v7BAPzTwpH/f50pZ6B+SdUtw39
E6qHhv7JtMAj5sODDMw/mTB6Sw/zND3zT6juGfonVF8L/ZMXickhYyQ980+o
Lhz6J1NF3Sf0T87fejeyp4uB+SdURw79kw7NJiVOr2Vg/kmfnxu+mG4zMP/E
Pe3rogXdDcw/Obxnfi2LHD3zT6hOHfon6ppRkWmReuaf3FV3GX23g4H5J1TX
Dv2TJqI+GPonfxLTgyIbG5h/MryEad+DcXrmn1B9PPRPTKOmp5Vao2f+CdWL
Q//k2SZddrC5gfknh2qPeP15nZ75J6H13pU+2E/P/JPAY4emhVzRM//km6jL
h/7JUNXNpfr4dOafUJ069E+oTh36J1THD/2TMq2XN95/Vc/8ky2dezmcz01n
/snUtAP7E5rrmX9C9f3QP3l1ZNeS4O165p9QnTf0T+y6520zeZPO/BOqI4f+
iZPDGcs5L9OZf9IiT3qduU7P/BOqK4j+SZu3a9NK6tOZf1Kz/Zs287romX/S
q3Wgkz46nfknZUU80T9psNGjrkNNPfNPqG4h+icdnw1q4FFDz/yT7PaX+yRq
0pl/0rnD/XIWlfTMP6F6g+ifXLKa737dN535J0PEfkP/hOoEon9Cz0X/hOor
on+Cz8U6iuifWIk4o3+iPZrrvDAinfknxnUXw1ndRfRPFon9g/7JaLEP0T9J
KTxr9SsunfknKjGO/kkr2lfgn0yB7wjrQKJ/QnUO0T9JgzjQPgmqfPlRaBM9
80+oniT6J/Q9on9C5wD6J5OFPqJ/QvUV0T95Kuoron9C9SrRP3kv8gH0T0hn
0T+h8xb9k0rinEf/hOpbon9iLr5T9E/onEf/JE3oHfonTqJOJvonVO8U/RMz
cc6gf+Il9Av9k4NCl9E/aS3OPfRPporzGf0TqsOJ/kkXkT+gf/JSnOfon2wU
+QP6J14ib0H/ZG6N0idGROqZf9K757wvn+obmH9CeRT6JwNEXo3+SY6oF4r+
yRiRt6N/QvWE0T+52LJq5LPuBuafZF6ff67eAz3zT6juKPons0Seif7JIqP6
oop/4nOxVq8N4wzMP3kq8hD0T6geKfonVI8U/ZMLIv9H/8RvUOHxWw8MzD+h
vAv9E6priv6Jg6irjP7JA5EHon8yxKvB+7OjDcw/yRAchP4J1U1F/6S3yG/R
P6F6quifUL1o9E/mZJS9UEOrZ/4J1V9F/4S4D/2T7HjV4ht+BuafELeifyLX
wQb/JE/wL/onct1X8E+Iy9A/uSN4Cv0T4kT0T6hOLPonz24d9Gx/Q8/8E+JE
9E+IT9E/Id5E/+T/qkOL/kmhRZULIybomX9CvIz+iZvgbvRP2tU++Kz1Uj3z
T2JOrOxjbqVn/on7jFebAvrqmX9CfgL6J+Q/oH/yRfgV6J9QnVv0T2abBuxL
b6Rn/gnVuUX/hOrBon/ipb0ZMeq0jvknSWETzEcv1jH/hOrlon9SKSt34qhl
OuafUH1F9E8c/Qr392iezvwTqq+L/okhol3Xu2t1zD+xt3uan3lFx/yTNmGN
Drx4o2P+yZLFTTcNDNIx/+T7uk41fdN1zD+hepXon2zoXcLzRsN05p9Ut/nV
fa6kY/5JuKb+kiLJOuaflDVp+XPXLx3zT7JEvVD0T6guLvonUY23XhmWpWP+
Scdnma33lExn/kn32CsvLsbqmH9CdYbRP6H6veifvDUvCHftms78kytbzib9
9tUx/4Tq9KJ/QvVg0T8JLBoyz9FTx/wTqmOM/skOUacU/RPPeqcdT1ZJZ/4J
1TtF/6R53KxKL+7pmH9SvFzB69O105l/UnlKT3OvXB3zT7x9Ple7+lbH/BOq
q4z+yXH/MV96uuuYf7J997UTfVN0zD+hOszon5wQ9WzRP5lz72T9wlwd80+O
7KqTU/25jvknVM8Z/ZOmvxvvP/dQx/wTqm+M/sm+Wb45l5/qmH9ybM6Mcplj
dcw/mf/ErkRLKx3zTzYd9VxRJFbH/JNpoo40+ic+ebfS6pbXMf+E6iqjf0J1
ldE/obrT6J84TWobeuWcjvknu2q1LPq1jo75J+3Gzp372lrH/BOqR43+yeqb
zQ4c2Kxj/gnVJUb/pG+pGD+XKjrmn1DdY/RPBiV8LBhTQsf8k7ZHXlm9mKlj
/gnVwUb/JLzV2DNlKuuYf7K08HS7wzN0zD+Zey7+eqmGOuafUDzRP7n5ZYV/
RFMd80+ozjb6J3XPT61Ybb2O+SeWPeqVOd1Ox/yT2ZpxI+au1TH/hOpjo3/y
qUHCnsB8ifkntN/QP6G61uif0HPRP6F64Oif5MJzse43+iezRJzRP4kZMPLq
vpI65p8Y1wkPZ3XC0T8ZKPYP+ifWYh+if3Lz+PICq8o65p/cFuPonzyifQX+
SRv4jrBuOfonVJcb/ROMA+2TVIfndY6P1DH/hOqfo39C3yP6J3QOoH/iK/QR
/ROqB47+CdUDR/+E6qujf/JK5APon5DOon9C5y36Jy3EOY/+CdVjR//EX3yn
6J/QOY/+iafQO/RPqK47+id0jqF/slicM+ifWAn9Qv/EV+gy+ictxLmH/skx
cT6jf0J149E/aSLyB/RP1orzHP2TWiJ/QP/klMhb0D9p4fmz22tPHfNP7l5z
61cmRMf8E8qj0D/5KPJq9E9+i/r26J8sEnk7+ifU/wL9k6ixH38M+a5j/snE
421VRf11zD+hOvnon8SIPBP9E+N6+Ip/EjKqgsnksunMP9kv8hD0T6h+Pvon
VD8f/RM3kf+jfxJW90JiVo905p/MFXkX+idUhx/9E+oDgv7JVpEHon+ysk71
Cd9LpTP/pJ3gIPRPKO9F/6SUyG/RP6H6/+ifUH8T9E/elU8sOcZPx/wT6heA
/gnV7Uf/JP74xPxe7dOZf0Lciv6J3LcF/BPiX/RP5D4F4J8Ql6F/0lnwFPon
xInon1BfA/RPXj6X3vZ9qmP+yRPBieifFAg+Rf+khuBN9E/+r74J6J9YnM94
MiNRx/wT4mX0T4i70T/pZVnZ/EmkjvknezQ5y3PydMw/MS+TkpFdJ535J5WF
n4D+CfVfQP8kUfgV6J9QXwb0T9pPKd0gO0DH/BPqy4D+CfUvQP/E42y3AwNf
Ssw/OTjCY+KuuxLzT6i/A/on0XtVHtn3JeafUD1w9E8K+m4J7lZPx/wT6geB
/smrdjEOPb5JzD85em7FoxFvJOafuJpNfhlXg/snzxPabZJiJeafbLwx37VC
vMT8E+orgf7JHSvJdHJjHfNPbphU6d6tFPdPVlVKSayUIDH/ZOv22nkVvkvM
P5kq6tujf0J9HNA/aTIq0mt5hsT8kzs/Pmljq+iYf+J2NtO8Xp7E/BPqi4H+
CfWbQP9kjf/IiykWOuaf3D7fcUuZtxLzT6ivBPon1L8A/ZMQD+egc88k5p9Q
3w30T6iuPvonFcxrjS9fQ8f8E+rTgf6Jx6OtC36ESMw/mb1w6cbqZjrmn/Sv
OHTC6PLcP0k70cgtt1Bi/gn1AUH/xGTYEKuMExLzT64WXzsy+L3E/BPqG4L+
CfVfQP/k27hHJoFluX/y2elAu8gS3D+h/iPonziVGuyzLUNi/gn140D/pPzW
m4UecRLzT35G+xav5SEx/2TASs+km1sl5p+k2qrbBxXj/gn1PUH/ROpVZajl
Won5J9QHBP0T6gOC/gn1oUD/JDwpYL1LlMT8k6UaS+8LrhLzTyqZnxj86ZDE
/BPqn4L+yQuHsmu9H0vMP6E+GuifvNy50Gvdaon5J9SHBf2T/jMd/RqvkZh/
svx3rcTEIxLzT6hvC/onST2G9fq2XmL+ifRs6+VIf4n5J2X6Pm22fZvE/JMI
EU/0T2KvnajUeYPE/BPqC4P+ySG3XU0Gh0jMP3leY6tXlaMS8086tl9bb8ht
ifkn1M8F/ZNlq2ps9FnO/RPab+ifUB8W9E/oueifUP8a9E+Ww3OxTw36J2VF
nNE/KWLWQm25WmL+iXFfm3DW1wb9E9o/6J+8EvsQ/ZOqMb4r1v6z32ifVBLj
6J8k0r4C/wS/I+yzg/4Jfb/on2AcaJ+U3hNQ+OucxPwT6teD/gl9j+if0DmA
/gnpI/on1L8G/RPqX4P+CfUDQv/EUuQD6J+QzqJ/MlCct+ifLBLnPPon1D8I
/RP6TtE/oXMe/ZPiQu/QP6E+ROifUL8h9E/SxTmD/gnpF/onWqHL6J8sE+ce
+id0PqN/QjqL/sl2kT+gf/JcnOfon1D+gP6Jqchb0D9pnFYisWKwxPwTkxCL
KV3eSsw/oTwK/ZO3Iq9G/4T6MaF/8lPk7eifUL829E+67Gpc2LYC90+0tcae
CSzP/RPq64T+yTqRZ6J/Yty/SfFPHM+M2ZttoWP+CeUh7PcnIo9C/4T6PaF/
ckvk/+ifrGlqWkLVRMf8E8q70D+hvlHon1DfOvRProg8kP3+ZFCF5o8sdMw/
IQ5C/4T6UqF/Mkvkt+ifUF6N/gn140P/ZFLsXH3ljxLzT6i/Ffon1GcK/RO7
fWpDnwY65p8Qt6J/IvcZBP+E+Bf9E7mvFvgn7oLL0D8JFDyF/gn14UL/hPpw
oX9yK8S8ws2vEvNPVgpORP/ETfAp+ifEm+if/F99vtA/0e2/5KTJlJh/QryM
/glxN/on/t6fi2z457ny+IweB02zJOafjK67o0eFPIn5J+QnoH9C/cLQPzkk
/Ar0T6iPGPonX77eyxjwzzj2EUP/hPptoX9y81TQIIv23D+x8I451GI090+o
vwz6Jy0OOr2IsOb+CfWvQf/k0qasHxe3Scw/of446J98HHj+697Z3D9ZUT18
9OsW3D9Zeyw3efIaifkn375FP9nRkvsng20X+V5dxf0T6oOG/snJfl0aVnSX
mH8y0iX9ze3lEvNPRiV37ld9FfdPzm2U3OZv5v5JvOjHhP4J9R1D/6Rr5OrY
1CncP5kW7fN10waJ+Se9jx57Hu7K/RPq44b+CfVpQv/E5Grdu808JOafPP1x
I6dXC+6fUB809E+o3xb6JxWOPT+/0Yn7J9QnDv2TVqIPFPonMf3+TKi5VWL+
CfWVQ/+kcyfHZU/Wcf+kuM9om5wtEvNP/LaNa+m9UWL+idPpt2dLr+L+CfWt
Q/9EtfnwwZDO3D/xSN7jmLGJ+yfUVwv9E+oXhv7J6+HHht9zkZh/4jRrxNHq
KyTmn1C/PPRPYi0nR12dw/0T6qeG/knO+15DdN24fxLj8v7Snwwt809udX67
8btKy/yTarGT7SY4S8w/oT596J+MTyxwPBaqZf4J9a1D/4T61qF/Qn390D/5
U3P/+RJzuH/yMmLTwyZJWuaf9F5o2HqjKfdPqN8f+ieJFd9YFu3E/RPq+4b+
yakKfSIGFeP+CfUNRP9k+s+bbQ7Fa5l/snjHxPQ6Xbl/Qn0G0T8pdF9mezdb
y/yT9if7Wo/sz/2TwfHDQh935v5JkVr/iyf6J1FfslVd4rTMP6F+fOifZM+Y
M7LheO6fTG01rdYoW+6fXG4wy85jOvdPqP8g+idLjtWMjHugZf4J7Tf0T2ie
6J/Qc9E/oX6L6J/gc7GvIvonFGf0T/Rbz9ScE6Nl/olxH8Zw1ocR/ZOpYv+g
f0L7EP2TmlvHqleW4P5JNTGO/kk+7SvwT3rCd4R9IdE/ob6H6J+kQxxonzgH
Jy/4NZ77J9RfEv0T+h7RP6FzAP2T50If0T+hfovon1C/RfRP6LxF/4TyAfRP
SGfRP7ktzlv0T+LEOY/+CfW7RP/kpfhO0T+hcx79E9I79E+obyb6J9QfE/0T
OmfQP2kv9Av9E2ehy+ifLBLnHvonN8T5jP4J6Sz6J51E/oD+SYI4z9E/8RX5
A/on8SJvQf/EpMb3ypMXcf/EQ3VofsXV3D+hPAr9k2yRV6N/Qv1D0T/xE3k7
+ifUXxj9k+KXVnf94yox/8TZYlJuiyUS80+oDyn6JyVFnon+iXG/UcU/MS08
9nrWJon5J5SHoH9CeRT6J5T3on9C+T/6J3PH1c4+u01i/skbkXehf0J9TtE/
WSL6LKN/Qnkg+iet26gmjP1n/rQPiYPQP6E+quifmIj8Fv0T6q+K/gn1j0b/
pFlOVHr35dw/oX6s6J8Q96F/kqCzSXNV+kfL+424Ff0TuS82+CdFBf+ifyL3
gQX/5D/BZeifEE+hf0J9Y9E/ob6x6J9ULT3+YlMn7p8QJ6J/QnyK/omd4E30
T/6vvrTonwx9fLvZ1uncPyFeRv+EuBv9k5XaR51bzeX+icXjNaW/TOb+Sei+
oT7jpnL/hPwE9E/If0D/pKHwK9A/ob636J/sHVBs5rWp3D+hvrfon1B/WPRP
7v+eWsrSIY35J3+GFjtm1ymN+SfUDxH9kyIn7utG9ktj/gn1W0T/RNNoy5ui
GVrmn1C/XfRPEibPbNvuiZb5J3sPuF6dVVXL/JOoa7W/tvipZf5J3zk/rX81
0DL/ZP1l2xaFyVrmn1DfXvRPUt/1nuBQkvsnAdXv9ZvspWX+yeZbafNrSVrm
n5yc1n5sjxwt808Wif6h6J9Qn1z0TypdCqnfqZWW+Sd7Pnw1eMZqmX8ydugP
h36ZWuafUN9h9E+o7zD6J5+TbriM/6ll/knHyEW+71enMf+E+vaif3JP9IdF
/0QX3vZWWb2W+SfU1xj9k8Oibyn6JyOne5o1StEy/4T6IKN/8qnK1ad3orXM
P3F4O/SuiU7L/JOaPVKddz3XMv/EkJdqKHlKy/wT6rOM/slW0+zFB85pmX/i
93FfvcHvtcw/ob7M6J98Ef1t0T/pcCRl8cn7WuafZLl5r/IK0DL/hPo7o3/S
8sfAwaP6a5l/Qv2O0T+5+/nkFa9gLfNPqgZYNBvrwv2Tb8njkzv3TGP+yfQX
5aau2KNl/slp0Vca/ZN+x39P7++vYf4J9TVG/4T6LKN/Qn1+mX/ita98wH4t
80/mXivlc+Kphvknn9Z2+jijSxrzT6g/Nfon9kuvhnoMTWP+CfUpRv/kY5Mp
0qU7GuafUB9k9E8Ouv13e/pLDfNPXsWfiRnllMb8E+qLjf7JpcHbcuMrpzL/
xLSG9ujoVmnMP1me6tXZwSyV+ycX/xdP9E/c8s98dTZLY/4J9d1G/+RgWBn9
xPZpzD/Z2nfeqQODUpl/crd6zbHlXNKYf0L9stE/sX+++0CAk4b5J7Tf0D+h
PtfonwSI56J/Qv3B0T8ZBc/FPuDon1Cc0T9ZrjkSX95dw/wT477h4axvOPon
h8T+Qf8kU+xD9E/KPpn/qLBQw/yTCmIc/ZMrtK/AP8mF74jGKQ7on9D3i/7J
MogD7ZPkb15hve3TmH9C5wb6J9QPHf2T2eIcQP+E9BH9E+oPjv7JLtEfHP2T
x+K8Rf+kvMgH0D+hPuzon3wX5y37/x1xzqN/Qv3Z0T/ZIL5T9E+qiXMe/RPS
O/RPPoo+7+ifWIlzDP2TiuKcQf/kgdAv9E8+CF1G/+S1OPfQP6kuzmf0T6iP
PPonlD+gfzJSnOfon1D+gP6Jvchb0D+pEtBXG35Ky/yT7ODziadTtMw/oTwK
/RPKq9E/2SH63aN/ohV5O/onXUPvqQdrtcw/WdvhqXWfcC3zT1rllAy//jcf
Rv9kgch70T/JF3km+icXUvuNX3hAy/yTufMuuAeZcP/kvshD0D9pIfIo9E9m
iLwX/RNJ5P/on1xcNtjmWDHun3QSeRf6JzNVyfnmH7TMP/Fbr9pwuxT3TygP
RP9kzqr5Wx6X4v7JK8FB6J9UF3kv+ieU36J/ckTk1eifnJ1/p+j6X1rmn1SJ
7nru2D/xpPFuhpdzD33UMv9kpOA+9E8yD3ddrP3LR+ifPBDciv7Jb8Gb6J8Q
/6J/YnnkQMeCF1rmnxCXoX+yT/AU+ieVBSeifxJ0Ie58d28t809mtloSfXS5
lvknxInonxCfsvongjfRP2lgu/BO+FEt809K3ylTPN9Gy/yTtgOepg3tqGX+
ST/By+if7BPcjf7JoJTmh8x2apl/Mi52W8hZSy3zT6aufPeql4uW+SdFhZ+A
/gn5D+ifkF+B/slJq5L2xX6kMf/kcVR4m/GZacw/ee5UqfcXKy3zT7rlpnSJ
b57K/JPdNiU0+Y1SmH+yOGX0lVplUph/UqTj//p3o3+S0MvKPlefzPwT6g+O
/snYHT3fmXtrmH8iif7j6J8stqsW+8E1lfknS7WxH3f9zSfRP/ka3e7ouG6p
zD9ZZLkptWCXhvknu4NMLrv5a5h/8lH0W0f/pHi1vMxRFVKZf1LjuOan6WUN
80/yi40/eO6NhvknVXcN2FEyW8P8kzGi3z3rv5O9NmBzBQ3zT8J2OB/yNEll
/klCq9qx9l4a5p+8dK1/YkmZVOaf3L2yOW95pIb5J7n+I+JC/5kPXb9nf8k7
TnEa5p98yOj4+OPPFOafuIxuaK1LSmH+ic/cS5/C+qQw/2St472DP/I0zD9p
8tltQFCLVOaf2L3Uh+0N1zD/5F68X6WKRzTMPzn0pM3xLVVTmX8ypnrNHtsi
NMw/0XSKsdl6QcP8k8E2J/YUX6Fh/kn5K+4RRUZomH/idSbEZeN6DfNPvFc7
vgvaq2H+yST3tcnSFw3zT/pX1Kr+vNEw/8Rz0ao0K18N809MdVVm/ndSw/yT
w2PKVlgfqmH+yduqS38VWmqYf3K/SH5iiJmG+SffH05tvbptKvNPxtSOe+l2
W8P8k8DNU8OslmmYf3J9hUlSkaQU5p+49tn3ofc//gBdP7z8OqlvXQ3zT0o3
fbz6eI9k5p/ogm3P2dmqmX8y36D67dxRzfyToJAt5/WPNcw/2Xy2SuYcXw3z
T7b+7mS2bmwyr39Sv/6iW+kpzD856pg2ZPlhDfNPxmRenXfyYzLzT6Z7hvbp
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
iWzeaNhfx2Xwk8C10b57+yjgJ52qvkvotVUBP3EIfpK3aZwCfrJx8aC0YWMV
8JM1reSiRXdk8JMx1X4pKeYK+Mkvk1vtyuktg588fzF5S8dAGfwkwXpobtj3
CvjJi5k9pyv9FfCTDrGlj6vaKuAnO7ctmmD5TgY/KVkZf8jSXQE/Cf6pTGNo
o4CftIyw0gwqzwc/6XH50PYFV66Dn6SZ97V7ZOTVn/tJs03t79Z2U8BPUk9v
0r9fI4OffJWqSQ0q0ICf3Bz/fevxT2Xwk6HfGemyOijgJ5rSzvrpBzTgJ7YF
BzYsuCKBn3y/YVdc5RsJ/MRku1OLDrc04CevcyuD/ldTBn5iuj66qspaAT/R
7Spd1+eTDH6ye3epQ7RWBj9Zcas4wei0Bvxk4ax0p26PNOAnKbSe3E8GXq3M
GWV+G/wk5UJk9/BnZeAnDzYOsRi1XQY/mbBDl9jsi+dOva+5493RX89RwE/G
vHq+I8OwGPxkStXrvRmGl8BPGtJ+435yhN4n9xP1vtxPfn4sGeXFKuAnP7P7
qvvnssdJzSUzGfxkPq0z95NM3dCvYu+Xgp8839ffxsCqDPxkLFuHz79bR/uH
+8l3tA+5n0TP7XbvWSMZ/GQbXed+skfdV8xP+HP0+fv2aR24n6jPL/eT02wd
1H2SNk4K3H9LBj9pQ3OD+0lreh65nxjRHOB+EkrnI/eTZhbHYm4YKuAn1THh
fX97LoOf/ErzlvuJTHmA+8l7Ome5n+ygecv95A3Nee4n76a02bWoSAN+0o+e
U+4n7WnOcz9RzzvuJyHn9jrodb0NfqLOMe4nYTRnuJ8spvOL+0lTOpe5n7Sg
ucf9RJ3P3E+i6ZzlfrKE8gP4Cc1z7if7KT9wP/Gh3ML9xKO26mxGLwX8ZOoN
/WCvEAX8RM1R3E/cKFdzP1nbzbjSRNaAn7Sh3M79ZPjW5fPHHZHBT/IGH/U8
tlAGP3kS0KPjJAv0ky2Ue7mfFFPO5H7SONk5T/teBj/56bDZP5PPK+An1ZRD
uJ/YU47ifnKOci/3kxzK/9xPHuddi1rtp4CfrKXcxf3EqszVJ+ajDH4SW5DQ
3DVKAT/pSDmQ+8mfwUHrna8p4CfB1IO4n6i5l/vJAsq33E9aU67mfjLo2vP6
chsF/OTY2N4RP95QwE+e6eYlLW2PfvIX9T7uJ0OO9+xpdVcGP1F7K/cTtW9y
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
PWaMl8FPOoxrmZC5TB7wfwDtfCk=
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
4HtGdt+lQwsZ/x9umtxa
            "]], 
           Polygon[CompressedData["
1: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
ACZ2Ifk=
            "]], 
           Polygon[CompressedData["
1:eJwtlulXV1UUhm+CWnppuHVXn/sPWq2GlX1qtcockKSs1DKHypxTFBUR1AJn
BBwQBxTFiTkVJ1BAGRVncUxxqJxSUEtzKHvedfaHB967977nnHvO3vv8Xhs8
JnZ0O8/zUqE9NIee92eE592E61AVeN5e3/Oq4QDsw7aDmA0CvRGKBXFz8c+B
nvj6YFuEPoS+iG6B81BOXCHkowuhANYRcwyOwnH4A9seYnbCCfRb8Casx7cb
22X0b3AFDmObDbNgDvyMbQ0xXpTn9eDfM5H8gVusZT72t/H3hljoRXwZtgb0
fmiEndiysA1AD4RvYGTo1nIcXYOuhTrtE0Qwdh2++4z/AHZDhe/2p4j4Inyb
YCU6C5bCcnzTIQk9FabAamIO8l4TbEcfxtZATD3cR+/DdhXfNVgOywS2YfgS
NB7P0yADorF9hG0z7EHv1r7DL4Hbv0voc/ArHCGmBNs29C59P5Rgm8I4CdAV
/R62GehN9k0663x0ARxCh+zBI3Qn9rwzJBObBJ9j60r8PHQuccnon3RGkALT
IAHbZJgIOcQUYSuEYrhg+fKY9x9Bxyg31+PQ5ZX8Ffhb8F2Elehx2OJhAiQR
MxNS0Sma23JjMrGToDu+N7S+wO1BGfoMnIVSfLHwPnoBvvnEp0Ed1EKz7/JB
ObkI0tDzYS7kWY5v0nz41kIebOWdLVDlO5/yfio6EXrbXDMVE7g6K8O2DbZD
os5E8bAM3wblC/oh+hGc1vkpz7CtgBxYgy0f2xLoi/4UPoMf8H0Lcejx8Aks
JiaXuVdDge/OKpWYLbAXXQ2VsJm4VTZ2QeD6gvrDCe0HXIJbyi1ibsB1uGl1
Ukv8KM2NfwgMUj1YfeSoBmAVLCNmP+M0wlZ89VaXOt+xWissgeTQ9asb6AvE
3oZWrcV6SKV6Bc9XfFfTX2Mbhm84jAhd3DVsV+F36zn9sX2o+oHusBDbGGyj
4UcYbGseG7reoB7xPWRju4LtrnoT87XBHd/1F61/F75yqIAelncT8c+C2VCj
3qr+ge+A6hK9jnfT0ZmQoZwOXQ97B90F3oVobOPgO1tDHHp86OptmuoWpttZ
ZoWu/6gPLVTuErPH5tuGrkRXhS7/arDVQW2E6/c7sB1BH4Oj1pvuwnOca0Pg
6lN12oatFe6Yrz5wfbI9OhLaWR6o9ifpvFV7vFdq9aU6y/bdWY20edULq5WH
sE/1Frge9xU6k9iFVv/qAzfgic7Ual/3QTG2XVDuu/zTGa5QDUK+8ozxnmdd
f6vXwgOtnV4Tw9XxCvaX4SAx2aot9W/ttdXgjND1GvWcROvj1xnzH/SLvNeN
MZ7ynA4LfJc3OqtVulOJvY1ug1armUEwUGu0/cmxestDr4Vcq+lI1heta445
fHjIeB2w9cIW8PwSHCBuSOhqXrUfY3WeFrp+qL44T+Nii+Ld3rz7gOdXefeI
6oW4blYDA5TvsNzunHj0RK1RfS1094bujyrrETXwL/op/GfnoX1+gbFP8twM
l0N3djrDyehR6p2+q6O/0PfgDuwN3F6pr5zBdxbOQTyxE+Bj9OvqvcS04zt6
8h0dmacD3MMfY3dYWuB+n8y1Oqu1HG+y/D+F7SSctp6i3z5a11D1TBitvMHW
FLq7U3foKeu76rH9lJPQH4aGbg+Ui43qZ6oz3VlwHlqsV+jbtKfDle8wIsLd
5+tV/+ofyhur/VR0CvRBf4AtPXC9Qz2kv51VJrYvbS+11r7oflarndmPTvCs
1WU327c4G1fjL8ZWgq0UKvQ/cH1Ia0jHl6Gagy9Cd7dnBC6vld9LdVepX8Ai
6y/Zdl9tVK8hptJ+w+i3zBPf1Z3y4H+a07al
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
8/8A+qq9eQ==
            "]], 
           Polygon[CompressedData["
1:eJw1mHnQl1UVxx/ovpXFg/B74UZoIsgWW6LJJigJyCKLvLILyBrI8gKygywv
ssi+IyCr4IJoirY41VRTU9PUZGGJxbSvQ4stlpWN2ffj9/THmd/93vv87nOX
c873e56W0xbU1NYvimJUvaJI+p2ei2KabHZZFPfL7pWtVv82DY6MsWNqbyj8
zADZArXnqq+vxrYI7xX+rfAJ4Ymye2X3qX+KrJ7aLTQ2Ws9crBTFLuGLwq/I
9qi9Us/s0NiXhFcLz5R9W+2NvENjG2S71f6x+vZr7AHhzcI/ET4s/KTsb2q/
ITun9g6NH9D4P4TPC39Yv81lE9V3vcaGyR5Qe6v6Rml8quy42qvU94bWd4/G
l6q9Vn1DNDZaeLnwduEa4THZZ8MZ/VXPD485mWu0bLLaD2psn54ZK9xMeKxw
B+GrhKfIjqh9VHZK9rDG92v8e7Q19qzsX2r/W/YptT9Z+uwPCY/Lfn6f8BX+
L3xa9ke1/yQ7o/ZYjY+RjVd7P2cU58eczD2h9F7Z87DsOQ+oPbP0u7YKf0f4
Zdl2teeo7yE9/2XhGcJLhB8W/p3wprhr9sqeufPpsnVqn1HfLI3VyX6h9i/x
IbXvkW1We72emaFnF8nWqP0F5ogz3K324sJnSx9jX5St4ezUd1hjqaooPi28
V/iQ8B80/hDnJftKsk/Vr7Z/cl7fwqey73Cn2isK322dbFdhH8KX3pd9V9zZ
dfi28KvCl2T71B4a/jNbuIfwjbKPyQapf7CsvdpDkmOkh3BH4VHCc4RvE+7J
mSb7FO+/RfjB8L/X5U/dhTcKLyNGNf5xYiz5nby7m/B04VrhfsIdODPhacK3
CnfKfifvur302mo0vrDwGvHpwfSV9vUB2X44Ve1psuHC58K/yQU8u0J4SeH/
DBS+U3ZFa/29bITaG5LvnLtvKZukdmf1lRrrLFun9jz13aGx3tlnx36IG/Z0
l+zm7L2uUXtT4TPn7JcJbyucM8gd80vnBnwUX90X91/IH54XblI615Bz6guv
Fd5ZOEaIlTPCj+Abev4FchM5T7i1xquE2wrfJ9xTOAln4km4pfA7TbWWiNc/
Cz+u8aPCR4TfFn4O3458hs/j+0NldxFnxKRsVuTX8xqfr/63K47vzwmvFN6j
8YPC/xE+ln02i4RXJ5/RJuFHI/7Jt/jAfGIv2Td+rvlmCY8U7iJ8C3lYeIBw
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

            "]], 
           Polygon[CompressedData["
1:eJwtlmd0VUUUhS8xqKiPmPuSK00k1FAFBYJChMQlzcRIhxBaIIaaEMRGb4mQ
QpWigYDSUUDBvpa9d5EiUhQQUEFFmkiN315zfnxr7bfnzL1zZ8458+Iyc7vn
RHieVwAVoSTwvL2Rnjch5HmFUATz8ObCfBu7Pux5ZfgriD/P73Mwj99jIRcm
w368Z4hfil4Cq+E6XrAdLybs9Db0Ovz1UIo+xJxp6GIoUTxx3+F9AV/CbGKK
YQ96N+yESGJmETsTlsEVvOcsbhe6IuNT8KfCC7DScx9azlg0Y0nEdYBkGIf3
u+95N+AfQP8MB+07ZgVuDVrLJ+AR04/n9YVBjJXinWXuTfgn0NPxZsBM+BV/
EN5MmAUJeA8zLw0yYCneALwzvtPp6P6QAZmMD4E8+ICxgXhD7H3niM9ED4Vr
6Hfx3of3tI94BfAt+hv4Ciqwtsfx3kJfIf4J9JPwCM/Ogkt4rzGWF7i9/x79
A+yAp/EOMN4JnQTJUMve+w76KfQEmAgDedYAyIZXGBuLd9mePQ79KIyHVYyX
sZWX8S/BYn5f9N2cMYznQC6MgpfxtsJm+I+YcvgQXQdq277oHBajl8By259U
vBXoMtgE//pun5cpT+BZ2/tNcFHPVgyE+P4lep5y2HLzRrxTzC1C50MB9GDs
PN5q9GfwOQzH26h849uOKQfJt4C53fBn8/tv4tMZ7w998BbiLVANwT+MjcR7
Cf0ibIQLvqvLfeif4EerQc2djz7tu/3Wvmsta/A2wHrIJqYQ5kCR1YRqJgs9
TGcPX1tuTGL+RCgIuRxeydgaOIs+o7XBzcRFwVX0x/CR1dudzGkGLZS7eB3Q
g1Ub8Jjl3OiQq4XB6GEwFFozdhivD7qZngPNoQHUh3jVimqRmHro7uhukGZe
R+UTerx6FvyBVwGvJjqK98VBbWiJdze0sjP4i7gE/NZwyN5/V+DWuh39Krxt
dZJMTBJ0U2/Da0rMSd/pzugu0BXCegdeS2ijs1IvwWuI3oWuz/wGsFPfghcP
DZQfxNwbuP3QvoyE48T8BjmqH8iF+4hpb32qK8/prfyBJtAYGjLWg7G2IZen
xei5UALdGWukGGgFD+LVxauKrgKVtPeqJ9sv7VsIrwXeHp6VyO920AnG2Fpi
0TEQga6lXuG79eksdCZ5ka6fKu8L0XPUR2zv0wJXP6qj6fCneqetYbfv1qn1
ap+nqJ/BVNv7RvadvzDWGN0kcHuldbVFt4NE9TBbV5jn1IV6cNB33x7HWG2o
Y73pdbw34Q3rfykwCT1RvQ1OWP4pF9vwnAegY8jdFbrrFqiOYVHg3pGC9xCk
2j6PDlw9qi63WA9Tz7mArhx2d6Tuylutfo4wHo32oRf0hN5W7+oRqsvT6FuY
u5B5iyBK+a3+4Lt8UF7ka290DvBppLu3Nmgt6lH2fvW66sRWg8r2jHjLVeVs
JN79eM1D7n47qTPUmVmPUD/QvbsZvQW2Bu4+P4J3WOdkvTOf+cfR19QzWEqp
eiRxz8Nq+x71lwLrSRFh14/Ul5YL5pxS/1Qu8XstrMKLoL9WgHDYnbHOWrWY
QNxe39VbXXR79SX1TrvLOquOoAvcgXcb8wIoj3U1WxPdRj0SfUx5w+8U63G9
8HpDhp1VDbwh6EzVBuzHu53YGtAU2uq7Y12Nplpu9LQcVv/ri06HftaH9vlu
Tkzg+qr66wgYDlftztUd7/M7GjzreTsYqx64+1n3dKKtJdb2Qz0p0Lcql2Et
3jqYYTVYFa8KVLPvPmp3rf57TMKbDFMCd09vsz6pfqk7fiocRVcKu/9j+l92
j3IfbxSMsL6mPR2OzoYse8f/GD9jNg==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlnesF1UQhRdwKeL+EBZ36f3Re++9916EICBEEQWNUSOxRCxRoxiNsUSN
Rg0gEHqvj0fv0kFAeu8QUBSi38nMHzfn7Ny5ZedOKz9mUv+JuYMgKJMrCPKA
c6MgyIRBsCIJglXwOcjy8T0L/hi4DHl+8FfkeUObk05BcCpjF/whuhsYFfne
jH5nMAd519DWaO1M5rPiIGjH9yl0lvE9E/lWsKTvWRxMGEvgJcCq6HcDL6Ff
Ej4f+Ub0S8HLIl+PvDm4EnlLMI3tzsuRF4vtv1bC2+g/0GkF7md9a/BkYmu0
tj1Yx8+tAebPBMF0sHZq5+ncPWCl2NYeT2yfbOSnwL7I1sBrgpeZ6wRWQfcY
vBm8InwFeil8LbIyfGfBd8Ir+N0qg4cis89p5IcYjeAV0D2OfBU618DSsdl5
k8/rzrr7duYWwcvp3MjstgWdHfB68APwhsy9Cr8GLwLORr8W2DG0/buDzdH5
SLbk33v5f70EjnOdp8FB8hf4ALC/zoEPBeuy9hnwP/YfFpp9hoBfMn6Hvwi+
pneDvwJ+pv+AfwrWwOanwZGp+ZP8KkK2Fv4bfDE4hvlt8GfB8e5jOm8kYwN8
LPiy32eS+6f2Lsaeo8F1yJ8CR7j+SJ+X3kO9lf97cfTf9bPeAc8xNwGsx/wH
7vMfgvMYh+GFQ/Nt+dEZdH8GDyKfAb7H2Af/GNwb+Vuj+7z/+0Twc7fPYvB1
v7/+owl6O+D3WfdtaPxr8AftBf8O/IrxB/x7xRnjGHwa+JPfQXdp7G/RFKyO
Ta/Bm4G9/Sy94XnO2Aq/DZbj/79A1oLzJ8BvwZ+ED2CchY9C1oAxW74TWw6Z
y9pssAfybch7IW8InxvaO3bhezm8NLIqqd2vjfwFfkU+BT8jWwfmB+cVo4Gd
N5C5c+BodMcxLsMbsmfr2GxQCdlzfs82GYtfvdED7lMzNbu0Q3ePv1ch5nvy
vZHvLsx3h6+Dt08tdhRHiqdWsdk7r/43Np+9mlgMKBaOohOk5huKzYue+xT7
jRlv6t+ZL8iYDG+ErD/jAstqc4cbib1BNWSD0dkPL4+8BfwIvC/y3oyd8N7I
2jLWwLspL8K3ylcz5sPypRvcoXZsPn6fve8m5uu1YvPt7ejcdZ1RyP9i/ojn
KOW3LPY6Bh/K3tXRGQi/yXzN2OL7FrxGbHF3IbJ8tRC+JbL8NgO+MLL319vt
AJux12HlMfa+nlhO0f8ejiyHnIksRynHrvfcLl9aA7+H/nC/v/xTd/7H7a9Y
f+B5fjr687VW7468T2rz0vs3Ma54v4JOH/T38t0Pnc0eL/KD3Yzjgdn6emhv
dE22QP8mvG3G4lAxmAd+ST4Kv6h8gs4d8AX2TDO2j/63XsbmxyLfB14OTO84
42xgttabn4ZfBVcyDgQWJ2UzZkP5eQ/2/1M1Eb7a430pWMD9WX79SMbyTAd0
+0lfMcu5B33/RaGt0dqFYOKx2Sm2XKZ4meqxdhFen/3Wew5RbOgOOWAHjxfx
jvJH7BvLD5G1Se1+8s+6em/WtgDv+DvqrZfAq4VWp456/VZ9zJ1aTlSO3eC9
wdLI3kxv93dk9X0afE5k+WQF+q3lX4nlONXKNW7bbP1jxnhlsHNsNmiZGpcN
WqWWY9+CZ+DtY8vZdZyrB6gFfzS1vKz4beA1tIDiOmP2UQzqrE3IuyIvH1sf
sd9jRzXwdmI5Rzqd0Onp8as82TU2n5HvqMdQn3LC+4R5sr/8zu2mfqlxarVH
b6f+SnV8JfKiziUrgs77odmtRGy9x9LE+jf1Y+rp6qEzKzSfmR2ZXPNVGcvl
A6H1gerNVkf2zuo31KNpTn3FKvZc7f2EfKCE3zknsn5OfVw282Vj63F2eQ5R
btkLL6V7qW8JrbdZAN8c2bd6vI2J5SL1GnsSO1d3O+A6Wrsb/rbHuHKuesXS
4LrE7qD7q7dVLVdNvwM/732aarHeS73bPr+nerPtifWf6om2JtaHaM8cvQN2
+yW0mlI0tZ6gKbwq/MfQ6loT3vJqYPn8iOeTo6Hl/xPgcHRbwr9Rzk8t3hR3
ql8dGLcDq7n1Y+ub8qXmJ/L5MvDhsel0RHdIbLlqUGr1QjlwQGp5QGeNgA+D
34CPhw8WVz+csTqvnKA+Isvvn8drq3qKisiGeA5XPboZ2j21V9nUehf1CbLt
FMbjyN4IrT/Rd5bboWnGvqVXWPXFbdiWtZ8oVgKzRX+v74O8XitXN0F2UjER
WF6b7PvrnMYev4VS60/UJ4zx3kQxNSe0vle1715k/a16sRKp2VZ9Yn74Ex4v
escpvn+ujNUL5WHl46YeL+p5NCcd3V915xy8Klgntv40j/c1yvkLwP8BgATT
Yw==
            "]], 
           Polygon[CompressedData["
1:eJw1mHfQVsUVxi/K0vS+lFfuRUAEREBBkCZNhAASIpaACoioERWFaMxkzKRP
TMwkmfQymXQnmUSj2BAJvUrvfPQuIE2RIliINc8vz8kf5/v27Nndd/fsOc95
9raZ8OioL52XZdlttbKstv53qGRZe8ldZZbdLblfcp/kavV1kzSW7Na4J1OW
Xab+qvQmkmFqf1YyUXJUtjc0ppf6V+VZNkXtdupbW2TZw7KfUfuM+u6s6o/G
1Ojf79TXTrbNGj9bekfpGwrv4aDah2NvDSTb1P6b+jrIdoX0jhXvkb3eKzkg
2zHOpPXXab1/q32L+rYU3uMytfdk3nshvRG/Jf0TjX1B8pTaF6hvVuE1j6l9
JPNvsQf2slJ918t2m+QNtU+pb7R+77DmH5J8ormfSjbym7IPl2xS+xqN7yWp
aJ2Gse/XZTuZ2cevae5C2urbrPGt1HeJ5B6N+4KkR8W+xccTpNeRJMm1+u0B
kkWa/5LsbWRfo/k9ZOsuuUjzmkpGqr1Wtv34RONvkL5U+muZfwd/zcA36ltQ
eO7T4S/WWC/7TLVbqm+R7KNkf1ntA+prLftY6dulvyX9cunjpO+L9VtIvz18
hq/GSK5SX+eK+7ANlyzS+EMaX8T4E9KPZh5bT/qj0ldKP629jJG+S/o+6c0q
viPuaqP6bpXtHY1ZLf0J6SVxLOkquUDjLgx/bJKtRvJ5tR+MGCZ2r5HcoT2O
lQxS+zOSa2WbrrEHteZl0h8pHdPE8nhJUt8W2X6mMS3UP0lyKuKxq2wtpb8g
/UVJq9J9XSQPxdiT2u8yjf2R7M3Yr9bsKjlf7dqlfdicfZX27YjSd8jdESvE
3IOa+2rmWLxTtt3hv1FV/x57IUfGy9ZafdOlXyl9hubeUjq2ifGWgQN7pZ9g
jPR9WnO+2jeqb7XGL5Y+VXpD6XOlz5N0SM7f7vSRU7LXU7sO+yKm9f9Z9S3M
vUf2OgwfybZL+lzpd0n/UPpSSdvkeF6i9jnJHWqPk3yg9lnJ7WqPlrxTOCaI
jZvJSemHJEPVHsKdqf227Ksyz39b+pvSl0ofL/1d6XWTcx8MeF62T3Pj02Pq
qytfzCx8Vs7cXL7bH/k6Ekzj/HHeptIvljQtfZfc6VuyLdaYZtJfJh80/131
rVF7cvL9goeb9O+b7EP6Vo3vFr7cVhhbFst+bzLGXKgxX1P765IKuaa+3mr3
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQlVUYh6/knSz5buVX96qICMomsisgKHBlETTBNVMpk5mytLR932Yq
W/9p3/d1xtwVBAUUBQRyQ0pQUQEVlMUFNbVyet457x/PzO/8znvOd9b3fIGF
y2cu83E4HCvACQM8DseHiI/gUYizHY4sWIu+DW4FNzGReAXoe+EeuOw2cWvQ
Y6kfBwkwBG8QXiREQTlxHvzX0K/DO5BMTBKsQL8Fb8IdxNwET0t/1F22HI6/
IQidgJcEiXCQ/m4h7lX0K/ASJBBTgu+LXkmbMiiX9nj34Z1CX4A+qMEbiedP
mxrKuwS8XLwwvFp0HeyHfdAAs6kbTV0xsUVQrX3sRCcylgZ0PvUBLodjBFyn
fhFeITwI0dStJnYVbNZxevCqKVfBfhiPd4S6FkhHp8FEGEXcMbyjcBxS1duC
dqHX0HYbbFdE11MXTN1w4lrRKegJMAmC8U7jZaAzYYrOOxaWyoFgPv3Ax2PW
+WVZd+qu0u81CEVn4+XAZDgjY8NvgR7L9HFS1sc2c2pGH4LDOjcZfyNxrdAG
u3WsAcTvQe+FCzADbybcDWOoO4AXI2sJERBom28k69xSdP3O6X5FUNdB/52Q
iy7DK4bNkM68LPAFl85RzlCFnFX0UHQl7XbAdHQT3njikiEF8mAa5MMe6vKI
yYTf0athlZxX6rJgF7oGquBOYiZ4zBhkLBsg2zbjK0dvgwrZe+kfrw79B9RL
W7xJ4IUMqJS9IyYVvRW9BUpkT/DmQBd6PayTdSSmAFrRx+EozCDGl7M6EIZA
rX5jJHyD/hq+hFTiUuAD9CfwsewVMf4wDIZDqX7XSz/nOULnKJ+FeTqWM+j7
iXsAFkMU/CrnkbpodAwEwRd4n8Oncvapm4yXDTlQresn67wSHYsXB/E6t2My
T+qiGEO0y+SrBXh97OlFuATnYb6MC+bquepP2yXoh2AxxODVs+91lrknkheO
WOZ+PIxeBo/oGb+Rtk+in4DlTpM7u/G7oMdtclk83iXaX7RMHnxbzpKcZ8oN
ECL5Vu/Rdcr/geUyeVXybjflLrgCb2ielBwjuWasy6yt7G+o9nOKfjqgE9rA
q3e+HX0CmumnCdotsz6SxyVPSq6SnLUQoogfTN8eCHKZ8z9Xcjz+8+gX4QW4
GW+W3oFhxIVBuMvcwbvw5sAszZ1X8a7ANc3J8g1puw+9F3brPQqHPL37kgN6
3eZNsWU9ZP5QJn3QdiEsgpPyHWIKVc9GxzGOeJfpbxreY/C4nEu3eRvkjahC
B8jYiVlHeS2Ual4dbJv7L3lgK16s3EV0IzofPV3Oj+YhebeeRT8DT+mey7si
70ur7sFBy4xHxpUm9wRvKe2c6P6Qoeda8sZ829QvkTsvdVBJP/54frZ5M6r1
bRynOVFyYxMxkbT5Hv0D/KZ3zIn3Lvo9+EzypW328jk9u3KGBxKziT43yjui
36pAe4n7Cf0L/AzhHpMP3kdvgiIYgTfKY3KD5IivNG/IGy9ndhB1NtwOaXjf
6fhknGHyz6D3Qv4LhqL9POYNC8QLghCneR+yNA+4WY8QCAUf6Afp1P+o48ui
3EceOiD3Hwok7+KdxTtNuVPyh8vk9mb0YTikZ1zOUIfcIzih58qrfY+mLgLG
eMxbKG/iDfTzrc5D5iY6GB0idxL+JeYfy+yL5LwBxE9E/4n+CzY6zRsQiN+I
7oYuxplIORl60e14bRAh/xdyR+Qsuk2OklyVqe/BVFk/YvxcxtuJtwO2O81b
kYTfQ38tktNknJQ30H49FOvbV2qZN0Vyeo5tcoDkghL5d4Fay3y/SHIpcfNg
geZfeVNS5f7zjV7KPbKmtnnL5H3JJW4KTIX/AQO2X3c=
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtlnm0T1UUx+/PcIVccuW8DElEJVEqWpWU1aQkFFHIFBEPT2YeGQohY57Q
I0KKTLEIkYiQWYpUq2G1ajWsQqalz7e9/9jr+7377nPvOWePlTtkN+tZIIqi
qzNRVBCcHKKoehxFPZIompVG0UH4VVlRtB+8A5t94Ez09eC7sNnI883wDeAW
nneBpbBfB96Cfj24Dv1HYBH03/L9CfDRfOM7+GT4K/A52FTBfgx8Q2Jr94Fb
eV8H/hX4OXJ7xv6xKrH/bgKX8FwNvgjc5vbzwYVIDfg8MB+7qvCxfP9M4Si6
Ab4Z/USkOvx1cKnba90apCZ8FTidtRXhb4GTWV8L/mFia7R2BriA5+ngT5xp
FDbj4F87Hws/Dp/ldzUb3MvzHHA874/Cc+Ej4MN9D6O0N54Xg0d4PxzeH/4F
fAg4GNnn+gHwA/Dt7KE+aw+DeUgl+BLwDWz2YFOG+38ttbv5B/u9YG1sdoOH
3F8HwGykF/IZNj3AK9F3B19N7Yw/Bru7j5E/4H8iefBxep/ad+RD2etufub9
y/Ax8GPwVxL75rTE/iO/y/9DsHmR5x3YdHN9L9+L9rQT/R4kBz4M2x2JxWNZ
zjXe7XXXe9AfAStk2b1WRv822EWxDG8PDk3Np/JtDlIL3Sy+3Vn3hL4jGCEX
gfJgUeQSvIjujvg5BX+QdW35zgWec1hbSDHO2svAFrwrDPbX2X0PbcHeSPmM
nedWpAS8HvgQcgX8AbAhUhx+H3gbksLvAO9CSsLbgS1d/1Rs59G52oBzY4vt
S+wp12NmP3s47XvW3vvFFhuKoz6x5YViqK/r9b49awvorjjH04md/RRrH4Kf
A3vxzSfh59F3BrvovNg/z7pOSKocl69ju+fRscW0Ylu5MV/5D16Hj7bobBl7
VqwqHkujL6V7R19G+RNbzfkaPIrUzZiP52J/H/y4cpQ1X8ZWN+r7XZUDn+P5
CjCX/XTAvoTyJ9h5dK6zYJvUztUbfcfU7IfBq7hPK4LXI5fDb4xNxGvH9k42
V4ED+FddcDhruyoH4RPgNf0sNcCBifl9LNjAffdgbHVVeZpyjoO8uwf9RrCr
x7ZyYqDuF9zCNwfBK6Cfgs2A1Pz/seKN53LoJ4IvoW+BfkMwG8XgZnjP1PY5
D943sXjLBZfx/Aj6HN4Pkn8ylrfNkKbIKv/+4/CVWpsaXw7vlVgMD00sT5QH
A4Jx3bPi6DnsM8oF+F7kTvkU7Ib+Juyme31THKqGNfP6o5rRM7E7fBHbfqnF
/tpgtVBr1gTbo9asVn1FWikHse2emq/eDMaV73nyL3d9Ep6PrhL8mGzgeanV
wix017qN9jkttV4Xo8sga/Vf9EmW9Sr5a6nfoe7zhPc79Y5dXrtU99bDW/ve
sr0mTEos74rLz7z/3vujeuLvwXJb/WKQx8BCdPOROvAeqX0v8J1nldep1ZJ3
g3HF1xL5CH4/fDG8d2o1ZCT//Uv9I7Z++ovXc/XKd4LVnWz43R6riln5Wv6a
GazvK1YP6R7kd/ULxV6wGtoutb6jPnwK3Xux9fFl4OvoPwAvBOt36o/q7Sti
663LlT/eB09jszKxtVsT85XqRn5s+tVghB+mpMYvYn8mWF+flFrv1r/OB5tJ
NM9sc59qPimeZTOPYlKxWTLL7mSGeo3Xn53yJc8nwMq8/yY2ez2fZE3DjMXS
bKQB/Bi6OanVrRLYF/MapRibl5r9t9jsRu6FH00s9jR3lcO2kMfY1NR6lvrj
dva/KLH7Uew9ikTyu3P1oz7BarXyrhVYlnXFsLkGfDixXqD6p36gHtfSc1M9
K5u1Ga9p6mnF3KfyrdarpvXFpkBsa//vh95f1GeeSSyGBwVbo3o7NNha7aF3
YrGnOBynnptajR8D3xqsTw9OrUapN45wG/WUkV6fC6pHq++kVuPHo5/k9bor
uqqx1aJqyjefaV9IzV51+rVgvU09TrNuI68zj8U2w2i2KSpfBZvJNJtp5lFv
XYr9Oq8tquGDPe/GJ9ZHznAPjeC/+YynGUx1STW/P/z9YP9Tje3qe2gHFvS5
Wb7uiU2IrZ+OTK1/bvJ62xi+Aj4lthl1Wmx3fo7/NtVcGuz8ugfNIWfRN0ks
LzTPXgo2r6rGzgTneg1RXR3l/1VPV95ppj6M7gf/n2b1fz2HlVPKX+XoOe+t
isPWrF0UrF6obvzqs6/mw7+D5ZJyqp/HmeqD5qh/Wd44sX6tuaI5ODVY35Xv
Tgab10f7jKE+0sZ7h/rqG7zPDzYzqR429zvX3WvGKwTvBDbhuXTG7nF3sLlH
86TmT825n3qd1Pw1NljP1Ty4IFh/15yjeWeo+13+z/VePDmxGFIsqQ99Eqx/
K56f8DqvfvwfOxq1gQ==
            "]], 
           Polygon[CompressedData["
1:eJwtmHn8lUUVxu9FfhOYjsoV3gsiyFaaSWpoLpmZppZWRm5pEIFSIbIoooLs
Ai6IsohEoCwCsgsKigoii2wqSwIpS9hqZTuCiGDP1+f8cT53zpx5586cOec5
z0yzjt3bdqtVKpWuLZdKtfU7sSiVfi3pnUuluyVz1L40lUqXSeaq/aTkDLVb
S55Se7hkmKSbxnaXPCs5Q3Mtlr2mqrmkN5feUfqrGneX5Ci1j+i/bpDtQcmx
sv9IfS/KdkQyT+35kpK+HyV7Y9lvlP6KbHdKDteUSh/J3L5SKg2VXl+2ssbc
In2ExlfVHqS+FYXnZO5rJUvVHiVppnZzyWi1J0luVjvrmz76tqf0Q5r/gOZv
p/keUV8j2a7UmFmyzZBcrPbx6usr2zBJfbW/q755ss2Wfqr0pdLraP3TC6+d
PfTRfE9L7yT9ROn3Z8sQybTCNtbfULava8xM6eMlX1D7BPX1kK2zpLbaZ6lv
imz3Za+FNc2WPrnwuQxU/yBJV8ltknHqeyLO9kyNPabsM2ZMRe02yd+yjhuS
18zaJxT+L/7zzogJzuvs5FjpJP0o6adJ/5X0ByWXqP159d2RHQPEwhLJ59R+
VvYrkv25SO3LNWaffF1L+j75vYf6Dur3U/VdIdt90nPyHrqG1NXcxyfb+sb+
m0h/WPp3pO8veY4eEZsnJn9DjPaVfhyxRUzqPDpLatSuqq+bbB1jP8dI7yP9
VumHNLye9PsLxwixcoH0wdLbSv+45PH9pY8sHFvE2CNq/1L2pPEXSR9B/Gf7
/lTpYwrnzNHSGyTnEt80VfuU5Ln4piG+K3uu72fHPjnQPc6f2GipMY9J/0n2
3tjjEPJY0jh5DXzPGlkre+ykvQ+Ufn6yD+6JOGmVHHPEXllntpCzktSqOq7q
aewPONPCPsN3n+hvr5PtJclZsr/If2j8h1rn/hrn+43Ze2Sv5OzQwBn8cZX0
56TfLUlqH9T462XrIqkj+9Hqu6ew1Al/dInzPDY5RogHzqhexCu58oD0c6Sf
K3lI7QFh50w7ZJ/hIMm92We7RXKBvt2rMS2r8V/JmFU72Yf8dznZtxOlt5D+
C+mrYq7zknOEOQdk5wIYCpb+mxxUu5X6pnD2+o+npJ8t/RVyS/pO6edJXy99
jeRrai8np2TbwloDTwZUPGYdPqz62xcKn8tdsvWWLCZGyE2NmcD5S/pl5+FC
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
x92Iuzd4Rt0hRolV7mDcs/4PyNHPtQ==
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQVlUYxi8aNlPTZ3aduWilU7bve81kblmae5aWJqCIoiaggJmWAqIs
LiCobG6QmOKSiUvuuZCUuK8kotm+76uZ9nvmvH/85nvuc95zv7O85z33ppjE
vgmNPM/LhHA4FPK8g1AP55p4XpsIzxvpe94d6LvgTpgbeF4yXjd0D+gO7+BN
xytBf4P+Fr6D7bxnN95paBvmecd4LiSuhueP4ENoyn/UEJuAjodX4U1iGojt
RJ+zPDfAYrx5xN2DHkPbJJgMx6EdcbX4+2AXzx8QVw17YbS9T/+7F/0L3q/w
G5T5bp43M4azmjPMx6vDuxGvFbSGbcS+jPcS9IPXiFmD1ws9hT65kAeH8Mbi
JcHrkGZxfdC9oSek4OUTO9vix+Ol4k2GZM0Brxb2w9X6b7xNxFZrXjAOUiAV
nrO13xi49+t/+sM43jUeBqgvbZthC7wPMXhDIFJjJCab92TB3JD7/wOBG0uK
5ql3mfcG3gj0KBgJu/FK6VMClbAQ7yDeDOIWoS+TUJfCndeEeYTDlTafub7L
l1L0ApgPPxPXnPZDeg/shyJiduEPRw+DoTDBd/mnua+kbRWshjl4m/C2wGa4
IsL1jUVPpK2AMc6BtXjvQpXtn/ZjPf462BFyOaKc3IbeCodDLh+uwttJn3Tt
OUTZ+mnMB9DF6H3E1kIMDIF4uN3OTARxAbSAY3glxA+HAD1VcyQ2LuT2fAfe
dthqazUQf4Bynrhr8GLwnue5D0xQnuC9gp5oeojv/l/jyMBrinctNNc6ah/h
FvRtcCvkEbOc2GWwAd6z9dNZ+BhdpvNna9BNeQdj6HOB/Y0kJho82q+HG5Q3
OgfW3sXGrjn0hB6QRNtF2qLotx09QXsEmVpbG18bnUFoBbOJiaZflHIf3Rpv
BDqduFT0EqiAOp0nCEcP9l28+vWGXpBobf3R/eBFGBZye5BA20StJ+SE3NlZ
aHml9Qhj7o2gMaTiN1M+0jaU2Fidf/RKvKXwNvxNTCT+INsDHy/Wd3usvS7H
e1w5pHHht0V3gPbqT9s066P9ykRn2RmMs/Orc7wHL5H+CTCatofx3sKrgCWw
1PJfZybe2hfhLVbtgyIohGKrq6OISbNxJaDT0VMgB7JV46GT6i9tMwK3N9qj
FhDnu7tC+Z5PW4HWDl5gbH1Vq23NBodcbRqIHqS8tXVebu8eS1sGMVOhFO9+
3Ql489ELAncH3Id3L9xtY9b6ax9KLD4Z/aVi0dm0f4X+OnB5Gqbchsaqbfa/
ndFPQ0ebWx39O3CnnOL5pOofzy3Z9xPo43DUzu95/M7E7eL5vNYe7z/VY/QG
WAcFeBfw/oF/VXuUz3gXTeejN+rMWQ6tUk2H1fAXMTPhKXQ7aGnrfAYvQ3UD
pusX7wu8PL0bCm3eR+x+0T10FH0scONbj1eluxn2wGnoyDzO4NdrP3w3X9Wp
Ut99E+jb4E/6rsCrhGUwi7Ys1VbVKZijdSDmJLHted8Rng9DDc/TiMu18Wmc
nxB3Hf/RDHyroar3vwfu/OgclcNM1XurF93tPEXaWJbTnuu72q0arjWtwlsL
a2ydlfePoB+DR+18LNJ9BZm6i23MNfatMEnfGfpOsTP6IN5D8ISdCflqXwyz
bB46v0+io5XfWhu8SuiK7gLPQJLv8lPfUPqWesDyWuui9zTQdhbOwWW4BF6E
2yvlUL1yAT0DcmzPT+tcorNgGmT47v7VXfw9bT/Aj/AH7MGr1vxtTYsZf1HI
5Y3OSYXV0zTLK+XXqcDtr9boU/Rn8Dn8BDvx5vnujtRdWQ5lqp32Haj7/AQc
Vz7YXilfVgSuxqnWPWvr8j+ph4eM
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
v++0f33Hf/YP2lw=
            "]], 
           Polygon[CompressedData["
1:eJw1mHnUlVUVxu9H9B1L/V7xOpzKnGNWFIEYBJR5llnmWQSBj5AZIUEFBVFB
UFE0NQhEzVQSnFAKUVGKBsuKbLUY1MplYSqkZj0/ns0fe93znH3GffZ+9n7v
OWOm9q2uUSqV+leUSjX12zeXSmelUmmAcFGUSsdJkqSX+q+QnK72KOnqacwI
4faS45L70FVJTpRcpv7LJe0k50s/Tvqt5VKpi/AJwqOFs8Z1Ez5JeJjwScL9
hM8UHi58snBjyVS1h6nveul6S05Re4z6TpDuf1U+++nq6yPd+8JdhP9WWSrV
Fz4o3Fn4PeG6wpWaM1j4iPBF2ec8L/mMnPWr0l8pfQPhDsJP68xDhL8lPFC4
geQfmttVfevLtsk3ksdgq29Kxqp9hvp6Zt+Bu7QQniTcUfh7wouF14c9sQU2
wZZ/r/La7FFHeIKkqXTNJNeo3T2HzTSvluSswrbtKP1Q9X+g+d2EP9b8i4Uf
1xkHCldKX5v9JYXa/XjveF/O/qXGN5GuteQr0vdV36OaO0y4j/BVwmdr7GdV
1jGmoXTnqm+8cHPGZI9hbGN8QvjKbFsctYl0g471qf1tbKN2J+mnSL9d+9Uo
7Hv44ODsM31RaR/krPjcBeE/2I434W3Yg3UvlHw9+Q15y0uE/6v5fYQfKfvN
PxUeVGFfaJRtK2z2ke42UriX5k8Uriv9BYXPxhlnSLdMMl7tmeq7FL3wIc2/
Qvjfmj9W+OLk+49TezR34O2IGY3vn+3j+EVZ0kntquSYIXY6C5eTfZTznRH+
1Fp91dJ9V3i6cG/h2cIDJF3VHqm+06RrLlwn+c1PwdeIQ3xbMk3tSyWliG9s
/R1sWuExjG0paSE5tfB6tGsnjzk1zng0VpPPjo2w1VThOZwv1u+hvi9kj5aF
bTVKfQuzfRBf7Km+Q1X2n3Mk89W/QPKh+rpL95ls2ky4h3TfF16nOduItcKx
T0wQG/ShWy95Ofu9P6+0zzSJt/6k0m/0kaST5s/V/I0avz1baD8i+Vn2nbFl
3WRbDBBeJPyi8B7hocI3CT8p/Cq+F/bgzXn7tpI2+KD6j5c8pfY90q2RbA5+
wff+WWlfHSa8RPg+6Z8Ufk7yoNoPSZ4PDm0U/IjttwivFb5f8mzwGevVSvad
XZItam+VvKl2F+mvk/4p4R9n34G7bJP8OvZfLP1m4dezfbiX8IeV9u2B0t8g
vEH6F7I5C+5aIvlR2IP5q4UfF75KeKnwM8KPZb8hbwlHbyrbNjWCL7HRJuHH
mCt5NDsOhlaYk+HmT3Se3sKHtUZT4a8V5i44rGs2LxArxAw5aorkGrWbqr9Z
5C105Axyx9TsOHpBZ3lRMkVjbtX8X0r/5+w1WRv/7hZ8eWJyjOLv9bJzCzlm
Xdkx2EO6ayscm7WC709L5upGwtXC/YXnZnM4XD5JfWeSSyU3q/2y+n4r3e8k
P1d7h+T3alcUjiViitidB3/GfPhkcrwPc5h7fNivZrIvElODkzmaWCMGRwi3
KByb12VzCZzSnFjLPitn3lF2ziJ3teQ9JPt19wPBdx/rbfZJOqr9L/Xtq/R9
LyTmNW9WyPRYD9104Q7Ck4UbFuYkuOlq4drCR6rM1XB2K+muzR6Drk7hHE4u
xyf2V5mTWbNhcDVvPk26ycm+cH7htdljcnZ+hkPgjonZNQh8cnJybUJfq8hX
jG1Q+KxtOGP2GtjhvMJrk/PgeTgM+34Z9Qg+3zjbpjOEBybbuhx8e3ZyLpgc
94d/2ybryQ3YvW3cgbtMIicl50xyQnX4MtI+uQZANwYOTL4Td8PH8XVshK1u
lUzgLpKl2TbFtrdkr79Evx9U2obYckh2LOJT+Nb48Ad8HF/fXfb95qrvPnxX
cpvaN6pvUGFOhpvx8f7CrSIeZqrvLulGhv8z5pngj3GSV9TeKXkt+GwhOa8w
R8FVtwsPhwskfQvz3hvZHA6XExN7dbbFwmPDv3gv9E/AhcH/7LErmbPYezS2
qDAf7Qj/xZdf11q7ys5x3SOfk/sWRTwOSo4r/KV+9A+PeMFfqUEPVLmmo7aj
htpQdo1G/QGnbSw7Z1GL4f/kMjgHLoKT4CJq0pTM+eSSUtRL8AO598bsWpma
+ZLCnAl3Homc2CO7VsZH8dXGwc/k3MNVtif5jvzzU+luijVZq0n4CfYcl8yz
9YMPidn3quzT+Db1G98S8A25f2SyPT6N+GYOXPqfqCexCbU1NSW1Zc3gXHwa
3z43uXYkP8E9B4Jv8GF8mRptZ9mchP5Q5H3qPe5+OPDnVbY1Nqf2I8eT66mZ
qJ22Sh5Orjm6F86x5FpydK/COY08hY/iL7TxFXyGPnLgiuQagdz4g+x8Sc1/
mfCD2FR4jnB74duFlwlfL/yWzr9C+M7knN0laiPq6X7JNVJb4TaS5cSZZCVx
Ld2sCvffAV8Gn5OPnhZ+IPZrVziGiCXqkSeIFcnSmN+68Bxy2ZTktVgTHWPY
8yfZ9ccC9XUtzCfUxNTCrcP3yU3EBDFAjUCtQM1F7bVO+IfZdV3PwhwBV7yr
99gYd7pL42dX+K4PZdsMW3UoPPeGeB/W2BB7sHZnyUWFc91QOABbho24B+ut
VXtenL9b4ZxP7l+N/5adU4ntAcm59p3sMejel/xR7TelW6YxVxeW8ZI/ZOsO
aswBeEJ9cwvXfGuCv94uu4airqOupLZ6OzvPU4dUF9YRe8QgY6jhtgY//aVs
jns+9MQqPso9toTvsha1AzUNa8KvIyS/4J6SeyR3Sy4v7A+r1J6Db8V73p9t
o26xNmNnxXscm8MvdS2+Re7jWwcfxVepYahlVghPCPtgK+rN3XGGlyIfcDZq
0G1hz7/qfm9lr8HcifhS4btwp99k1zRwAxzBtyo1M7UnNSi1LDFCrFDDUMvs
Kfv7Y5Hww9k5ilyFD6yNOCZ2dybnnMGFcws55tWwE3enhufOqyWzk3MeuR2b
Ybt7k2ODN+XdqLN/FbI98tHA8GFigZjAt4kBYv+W5NjA5vj2wuS3wKfxbXIV
OQs8T/rlyb4PL8P1C4QfEB4S61FTb4p3xNeJWXyE73P+M+C/gqPf9oW5gW8O
vj2IQWLxYKX3e0l4U/ATZ6W2g2vhXPLi0Tyt9kr17aOmzv6e4o7clW+OO8K/
4LOdMYex+8vmFLgFDoQLyb+jwo/wBd5gc7zv0MhBcOmY5NxEjBPr5DzyFPXM
BPZKrh2pbcj95CxyF3Ui9Rz56ObsN+At4Gi4unXwHTUS3LY3+AEfxBfhALhg
PnaVrMm2PW/Af1X4GL4GR8FVxN1zcClnln5s4d9p8GzhGohaiBi7O+KDOcfG
tov3mZ8cu32Dv6mJqHlmR3ztFv5TdqyTq9iTdaiXno38RXxQw1DLrAxuxA/4
74j/N/gvpm7wX/3k/0LqBZ/zzcJ/GXAdXPRGMufBWcuFX0vmMmpO/pvhP5ox
oZ8SPPtO+Du8zXc7vkUMkavIWcQWa7L2nRXm0XvDnsQw3yvckbuuEp4n/G7Z
3M0b7Y099iSfib3xMXxtJu9amKPZg7Xh6q4RH/DBqvC5VyKfjw4OgoumS2YU
9mF8uTo5V7cNfuD9sOf/AfepqK8=
            "]], 
           Polygon[CompressedData["
1:eJxNlnt8T2Ucx8+UfqGc9JMOKuRSbMMw7EJqRGRsw2wuu6S5VNta7vdKyv2e
exLb3GfD2MRiWIYshUrXlxdJLqlXV6H35/U8f/TH+/X6PJ/v95zznPN8n+9z
GqRmxKZXchxnOlSG457j7PU5zrd+x0lzHWcojINFAcTwj8EFYgl429Efwxxi
GYwruPYkfAoH8L8j7xS6FH0QPrJeNly7x3GqMK4KzcnpzPVREAPZeB/i/UDe
EfRp9Bk465n57VMciuEbcjK5Zh5zKGK8BwYxzoL5eCWM98MLeg+ujdU8uKY5
4xbwNXoX3m4ohDJytuHVQFeD+6Ab3t/VHecviEAH4G0iZwp6IHoAJOgd8bbi
5aMLYD6cwkvFC9Z7QhvNEa8MXkEvgIXKJScPrxbag4fhebxazPEhaAxd8frq
W0EgOgjuha1cNwpvKHoYjNS64CXjtdS7oetxfX3YgX4crxE0hERycvXO6HPE
4snpD7vQTfF6QjQkaV3xZqHXo7MhBxKgHl59aAI7yfnSb9awiFix6gk6cM9I
OEnsbWIb8FbDJPRkmAafEDsGE62n2DJbB2Xouao1fWfPfPtEdCmxEO7byjW1
prr7Hm8E45dgJ977eGtgNZwhtg3vXfTn6F7k9IYT6Kl4b8DrsJycnlBHNUC8
NtSBcryjcMzuE9VfKXoLejNshK/wYjyzhlrLxyAfbzHeq+gsGAvleAegL7oX
9IYJ5OyGQtgDH+B9YZ+xCd2HOSRDitYIbz3eOlhr81Sft9hbt6GS5oQXiHeZ
8Y+2hlXLf8DvEErsJrEN5F1kfAGexLuEtw7vJuN/IAjvfu53N8/dgl8ZHYlX
ifFdcBHvhN4dbzzjCdpf6N+4T47f3EP30ppobca4Jv8cOU3t887bOWluh7gm
RetB7E2YplrhmiXs6Tz8k3CJnDGe+W76fj201/FOw3L0IlgM28lppT3MM3KJ
3eL+t+EqXIEQG/sTPQk9ESbb+jpo16gfuj/Ew3jP9JI+6DiIgRJyRuI9i+4C
UepRqnW8JHQypMERv3m3VPQQ9SV4y9baI+i6UFtzJudpvE7wjN3HhXgdbP/R
unZEPwXXmfc1aIu+w3v8i25n9Uby7jB2XPPOevcq6im2v7SHxnbfhqHDYZHW
EG8cjLF1qr0/G32Ve16B6eREeaY/qk/6bB9SD9O9nyPWHXrADZ75CwS4pm6a
4P3E+BI0s7W5Xt+P+ALW9zA5h2C4a+at+Ws/PYrnMh4NC8krZ3wUzmsfE49W
Ldg9q+/3M9ddhidsHf5a3fT2B4nXBD909cw+0j6L5r6DIQlm4L1o12smehY0
wm8ILV1Tm1q3sZCBztT3tPW3EG80ehS8pjn6TU9Vb33ZNWeaeli6+iK6I3SG
vbb/TUAvUY+CpZ7pbepxEa6JqScWkddO9YMeorlCDeIPQF3XxNJ0Jnjm/npO
BBT7zbXt0eEQ9r+8SPUqrm0Gga7p4znq1ZDrM2ey+ul76LPEYsmJs71zCt4K
YithlXK0b21PX6MeDPt1dkOJ7WXqk+q96sGJ6tU+c/6Go8PguL2venEbxq1d
c2bovp3Qc9CzYa7t55+RPxw9DEbY9ym2/WAFehWshDxiA2EADPLMP4H2b6yt
MfXqOO1vz/wfaF4bNWfYDG15dih0cc15qL0QjA5yzX5X3Rz2mzO0mc+c+zr/
B3vm3E+3Z4DOgnl4FXjvoGfCDJ85GwsgH3bY761zK0XPRodCa5/5j9jnN/8F
mTpbIMsz59syvKWqI/tdKuy5u1a1Dut0ZnmmP6pPzvOZfxX9M7RCh0AL23P0
z9AA3Y9YPPSHarxrVSiwMf1H6BzQeZBge0pN18yvG7q7eoLP/L/o/++69iPc
gGC8/wAac4DQ
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3mUjXUYx99ruy+D9zI3c19rQ4oUxSGUkAqnXaJOHVkqJWu7FhSylmQZ
QpTIrk2K5DhOtJ6GjihTTEJoGNsUTU2f73meP57zfN/v7/n97m95tpvbf1iP
oeWCIKifCILy6CAdBE3DIMiNg2BZFAQhOASPBe9JBsFvGcNvYz8TfRTuCFIE
fyI7CJbAz4Mv47sM/gxcwBofwpdDz2XsHfAS9CnGV4FL0RX4jfKMn822b/HL
I9uD5q5Dj0beAk9Hj0HywDuw/QVZDt6ftP2sAC9mfAZyWBx7Kco2fAR8AP07
8odjrfkatqexOct3KfwhX0fraT//aE7Gfk+/uxN9kO8C9DHm/YkUgvfB5aMX
YjONNX91LE7rl2gtbM6D05z3JPgk+ITGwTfCfYH9zaGJ8C7W6cD93MZ3Fd5n
M9/r4b+NzOYmpB3j1RnrD+4O7h6aTVcfl11b+GuRkeAcbEOkG/gquK7IveBq
cDtYdwtzC9H3wX0H7hvaGReDZ8OnsXsMrndseAT4rtj2qj3XhLuD7yHw2eBK
qSDYC5+dsvMWc94SzvsvuD4258G52P2AzWnWuJ25j8DXgEshD+kccPPQ85H7
wd9htxn73ei+fD8JX8vtH9SZ4Z5C52PzDLok2/y5InxLpAs4iW1zvyvd6+Xg
teC14HfBu8FL0U2wb43eAl8PfDG4jPVywBnwP+AznOE051qAzXuaz9yF6FLG
6mFzjvGVfC+Fn48OYosNxYj2ltR+FAdIBY+FFDilueCK7LUjOA1X7G8xi3Ve
ReaBJ6AbYbMMm5f8rr6BPwBfF34K34PgH0dmghvA1UemgYfBHWXNN7Afj30E
3w++OfwcvhfAT5E/+xlPYXsoY7En/1eszcdmEvoI33PBL4EXebznoWuz5jjW
vJE1ayE5fm+6v43Y1EVXwuZz8NfY18emsd+zzt4JfKXuBtwOfAX4eo8RxY34
9ugW8OXAV4IviS2nXarzgu8Ozbfl4xsi4xvC9w5trHFs/iA/aBSb1vdFsfnq
OuZuZF6CNVvCN4ttnc/gt6Fr8h35e/2FVAVnwf0HzgXXjs0f5PMZ5xuCY3Av
9PaExbDmZqErx3YnOvsF4FX8xmps1qPbwH0KbhtaPslWvGBTzX21PPOWYrcS
m78ZfwX+I+VzYrAqY3eCO8aGe4KvAx/Ptnx+zPN5Efh4xnxA+ITnUr3pXPdz
/W5xxnxdPi/fqA33fsLynXxA+fNfbKa6LylGij3vnYX/M2n7VF445/lcubgz
63ycML/v4n7SQXXE4zoPPcFz1It6K86yCT2Ls6xG74FfhX4vtNyyRm+Jzc+q
R9zDQc//qgMz3WY2ejryfcJiQ3lJOWcka9ZTfoQ/zv7fhNsF/ljn53sO+unY
8pfW0T3v8PV3Ja1+/Yjen7F685bXrwahvalyRCVkTcL8ppHXTflNq9B8Tz5d
1+9BftPBseJBuUU+U4U9VA7tPpVTUj63Zmh5Revrd3L8ja6WjizvKb9V9xyo
+nQx512LnsSal6E3Jczv73HfU9wo3nWuwozlEPUJBzJWj/WOqrX5XjdHRVY7
87wm9mH+1oTFrfKYauhh5p6LLO+O4XeboT9KWF9S4PX0r6TlYOXtJqGJsGK1
he9fsXssMj8pUaxzlgM6F+/ySWg+sB59Ydre7rnY3lE+U4pumrbxF5SH/B4m
KyeAD2KTYZ0KSCE4SplvTMXm0djyrfBgcOx57yHwK+ivEpaLlQ+1N+1xotea
ycoL8C+gH8R+YGz+XQeuCfIbNjX4rQ2h1dNP0f8xfz+4GnxZZP7+cmy1YDl4
XGxrjgI/AF6B3pmwOpGTsrNclra4kP1YbLLg9ykGWa9Z2n5nemzvIr5qynxD
e1BtX+z3uQQ9Gru3lVfTllPlI51UXyI74/nI8Gvww+Fvcb9SnzLQ87nqd+W0
1XfV+QGhYdWk2z2H9witL1Hsqz94NrR6tzdpvYz8arRiCPkJ/EFoczRX+1qA
/JKwfHErsi1heTDLc2Pn2Oqj9jkEPB79JTZjQ8s1+l29077I3rQosj2rp2qD
/RPIjNDq7Dr/ree1T8/Dl8Dviex3LwBXTNkepzJeEFlP1Qu8yPOM3m+w+496
rx+Sdl7V+UHOa3yo567h6Idj8y35T5nHo/LrPd4v6Xf7xHZ36gkLvPfLj8xv
ddYb1HvG9hvqxwbE9t563xF+Rp094T28evvqXgdVd/q5PygGe3hPqP6wZ2x7
VX+Y5XX/K/Wc3qOq/5wW293prkbFlnPlk91i603Vryp+VQeeki9536iesI73
D6qV6nXVC7eGa+V9g3o/xbVqwkSdA9kYWizc672j+snXnVfv2tvz3lbWvCY2
X1RP3t77c/XkqqH6f/R6ZD4t396u/BNbzVZd/h//6edP
            "]], 
           Polygon[CompressedData["
1:eJwtmHv81uMZx58n5bmL+v7q9yvPlzWaltIBMedlclrMRgsjh6k5jC1NG8Yk
IpUtlXKoROl8opOSyqSYw0wnOZROv1KplhaSWj7v1+f643o91+e+7+99uO7r
+lzX/TTpckfHbjUKhUKnYqFQU79H5IXC2alQmCe8OCsUHhQeIzxW0lv6VLVN
Y6zwIcINJadIX6i2Q6sKhfnqf1VSqfYqSSPJUeqfof6Zaj9b+CzJf6R/kFm/
WP3/LLqtv2SE9C2lQmFnuVAYIjxa+Avh/wnPEH5JuJG+2S28THiR8DXCP9Zc
x0qOk95c0oZ51T9X/SdKb5p7fy8LHyNcFv5G+EPhh4R/J1wt/J7wc8I3Cf9I
0lT6fLXNU98Pcn/LHAuEG+duQ18oqSv9tOQ9slfmXyl9pNp6qm9R7Ody4Z/l
tim2/URtTWW/3ws/ItxHcrv0hyQTpC9T/3/1bS/hUcJrhb/N3LYz7omxxQpd
ouRv0u+X7FXfKo3tq29uFX5L+E3JGdIvSR4zJ9bn271hD9ZgraS25cIvCf8j
t6BPlwyQ/mXmvU0SflR4lvBM4YJwgf1IDuju/i+pIX2/+j9S/1T1PyacY2Pp
r6ptifoO6E6/09j9fCP9EvXfrP5/q3+T+h8If1wqvD3zmqw9WdIvfO6cuB/u
+mPJW9KvVNt56ntZeLbkGOlNcu9xX8n+yd5LwiXmEx6TWV6QHJq7Dxthqxc0
pqvwevW9LtxD+Frhrfi18F3CnYUP6gxF6ZPUNlp9V6vtDuHukmuk19Z8q9mr
8JDcczDXnyXXYX9JjWSbTsgcI8TK7Wq7Qn2HSQ5Pjslp6vtM8rb029T2K/V1
lNzC3Ut+LX2d+t8pev7fCGeSOtJnqW2u+g6POZnrRckKyWL13aAxv8h9B+8X
PR93c6mkK7Ej+aX0GyXPSB8m6ZI7xrHPZcmxf6akQ3LMnxXxxt1eK/xz/FX2
qi+9gWRf2XfUIvbH3f1LskD6pWo7JzencHfc4Xca/6zws8I7hfcITxKeWrT/
4U+jhCcI5/p+v/D5muNu6fdILoz4YP5WwkcLf8qaRZ/v4twcAq+8lplb8Gnm
Zo0pwuMlU6TvVts3ZdtvifD5+ubk3JzJN4yFS+tIr6u+cRozOfMZOSt3UovY
wYeLtud9whVxZ9zVK5JTpJ+rvvaSU6V/jo9ofDfhTsInSs6I+ILP/yI8SHiw
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
            "]], 
           Polygon[CompressedData["
1:eJw1lnt4zmUYx3822142fu+8L9tvMzaHaVkHHShEjkk5JHQgigixoVBUms3M
GNnMKaerQoVCoair+qfz+bqSSmyIa3PY2MFOWp/v9Tz98bn2fe/7fu7n+T3P
/dzPkialj0oLcRwnG8KgLNZxLkXwN+A4r7uOsxmK4BRcggKf4zzvOU46pMFs
eA1bu6DjLMGfoXhyHCNHCTny+b1GY7GVYLuMbQW/c+GynWsDun3Q5J5Dvrnw
HLT0O05xE8fZi30PNBL3DXwNffE/jC2ScR5x54jbwu9P4WZsg/APhMGQhc3D
FgMvosdjewImwBLIgEx4B19HYiaiN6OT0BXMVQmp6KPY8vG1Yb4YmIGeDs/C
SnxtiSm2377Yfre+fyb+VfjzYIWN6wBvonfAW7CYmKvsTQVjK8mxlXHbIIp5
ivi2XcTshFpsFfgvEHcRyuEK4/7Afhxak3cecU+S7xbog74H7oam+BZh24Te
COshEZufOU4zxwf8PgBhfrNmfVMC/svkLYMq2IrtEJwkPpK4Btbi8TsOqllL
BWsZoz3h90yYC0FyxEMOOheWwzPE9LNnGIWvP3oARKNn2LHKMRLbLMhHr4HV
ttam2nONQ19gXRchgvWEQ8BvzqrAjlV9luKvg3o4z5qLtX+sdR2/10Mrxpzh
mz4i9jCkkDcAaejZkA4PkWsKbENvh1cglpgz5DtOvkzyrIVCuEDuv7EVwSn4
h5hcxu5nzD54DzoztgWM13nBRLiPmC7YDqJfgkWw0DM1qFr0sc4Pre1Xfv8C
xa6p6z6eqas30E+hJ8Fk+Bn/T645lzn4Tui+oW9EH0F/CV9BI2tOxnYDdNE+
2/OYjh6GHg4j4GndG2wZ8LLdg1rG+tGtIFp/ifmRnD/A767JobPUns5Cj9LZ
w2jdJ2zzsb0AC2ztjrVrVe08gn7UM3O42FqiXfBDc4jEdg1fJDoKYqEdtuvY
jjL3J7aPqZ81s/G7XTOv7spj2B6HcVDPmBhsvaA3xGCLg3jdW+gA/xITgS0c
fEK1j+1Bz5yhznIq+Mlfhb0pOlz3SneQmGPM/Ztqzu6F6kr1coI6uQY1cI56
CcV/p84Df4rOC5KhK7ZUuA2a2LuQjV4KmbbXNYeR2mflVw/wzLeH2bVE2T1T
Hx2GHg6j7V2sxN7IGmqhDhxiboIx+MfCJJ0BcdHYWkjrnKCOcT2wDUXfr1oG
n63xcepx8CoM0Trsvr3NPhyEQ1DKN59nvkvk2cjvTRbpHRBq968b3KvvIO+3
2L+DW9XTsU2AnrbXaS1D0M2Cpg5VjwdgP3zhmr1t4Zn7rz5wlvnrmX87+gHs
09SnYIo9S625ufJBhD3zQnvn1ZPL1I8DZn398feDvjr3oLlbndHx+NpCArTm
Lp+l5xzB/jF01VuGvRO6IyT9X2vYB6IHwyCdOzFB3SXlsHuhOVT3iej2kAAN
AVPPsbZ2VcNtiFnGerP1pts+uMo1PUd9JU9vFaz2zJu8Fts6KPSZd385sTlQ
Ys+qAP05fAbfwwhba+p176OTg6YnqzeXMyZg6+QK+irkMWYlbHHN23cSW47W
qLlsDvXJpfiz4LTttaUBcz+6478Letiz1F4N8Jk3T2/f7dj2Mm4PHHbNGaiv
ZcFu9LuqQZ9597Ps/wCd0CGsN9Rv3hW9L9Wu6at6p6vsWevdrUZfg6Hqi/gn
q/eCq56IvQbqYk0/0nmoH6iOmxAfAqGeeef13us+aX/2qTbRd0B3W8O6R/Wx
5j7qXlbZt1Z31cEfopzQSMwuxu+EGtsv1YvV79Uz1DtSwCFfkupFb4Z9C2RL
1bzaN+imvLaX6Fx74usFvT3zni/zmTdAb8E0z/xvsQFdztwNcB3mY5sHC6wv
0f4fthD9F9/wZ4R5t/4DeeVbMw==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJwtl3m0T1UUx68n9bsit9yFe81U5sfDM75MeZnnMRIZI7xMLWXJqhVWZVUa
kCnzsKSJVrUa0LRKIiRFmgcRIXOGPt+19x9nfb9nn33P75x99vSrPLSg5/is
IAgqFAqCwuCpJAhuC4Pg3igIdmSC4ATyD8ByzA/Dt8DLwk/B64BfML8I35kx
PenXQt6UPW5g42GRfaNvt4JL2H87mBMHwZ/+7a9gHnp/gW+yXhH+KXwh/Cfw
MjpHwIZ8sx9cifwtxjF4M2THwWv4rRMZ09M+i1nPcIYs5L8xz0XvLPs0Zu+2
jLPItvpv/Yu8HvhtxvZfjbwB+meQ57r8P3hLeF3GPuYr0CnH/hn2H4jsDvhN
8HHwzoxCzNehkx/a2iH4KPZ8Ap6T2rdlGQeRPwrezLePgX35tgx4ILF16X0P
/9rPoLM0ROcguDaxe4mvgdeHn0anPuu7M/ZGtSO7i868HJ328Irs+WNiOnsY
y+DN0TuPfhPWGzEOId8oX4BfgG+DHwAvofMD2JY9ynDm7qHZXG+Uzx55sdn2
ffTHwGuhsxR5Re48Bd17kD0AVkc+FRzMfCJYgfVZ6D2stdTsVhSdwcheYDzP
vAnykejPgjeAz0FeA50F4Epk2fAx4DB0HgKrorMoNJ2F4Fr06sHnguPRaQDf
CJ+kO8M3w4fHdoZb+HYsfAm8NXwamKLzIFiAfDWY62fWXeaBQ/13b07Nb+Q/
rcFzbrczYE3mu8CXsE9jt/OGxN7plMdXK+RZ7LM+sbnkH3ncfQwuQF43Nv4i
vGlsMbQ5Md9WLPQA32N+Enlz1k+BV9nndMZ+V2/4Cuu3w4vxW294XCp+fwen
RXbfx8HG7ue5ocWcYlaxW5t7PoJsRGzxL7n8aa+fWf6lsyn+NrF/vdjiepF8
le9KsWdD+Q/zHLCL/AUshrwa2In914MTkXcAY8WX4gb5XOUo5B1d51XOOY99
fs6YD/dgtEZ+AdkAf7shYB//3V5gD0YE7wZ2lQ/Ce4NT2Wuw8ldqvlQF+RPy
E2QJfAI4mXlpxT7r7yZmX9l5iu9TAL6dWG5SjnqK+a3Ix4LblE9lW/gMRiX4
dLCV5xDliwLf5z5waWJ5Vjmzv99Fd9qF/Fr5J/JLrAdZ5jedPZYV05+hc4W1
lrHFms5+WXmVURU+CJ1OyOvAdyDrE5s9/oAH3L8jvBeyu/ycdys++eY4+zcF
j/pb6u3kk0eQV4isFijnp5Hl/cNeR/ahH6Ofj247xYZyTmS5TufvpFzKWmnm
36HbNXa/g59mtIB3jy3PKJ62IMsL7S3ayCdCs+3nrNWFX5dld+uMfjb4JfqV
wWuzLA9uZ37Z7fOJ26RDbHnvIvKP3Dflk/LN1OtaJcW556hbQ3sH6RQF20QW
7y3Y4xu+L+n31RlKoDOS9Xax7fFrYvbX2f5KLPZVOz6Hd3afrw52jC0mDifG
JfszsXpRHJ2hbjfVjv3IdzKKuG809zOrJrdH7wpn6wWW8rhWjXnZY0dvWt7f
Qm9S1O8VhVZ39O7VIntDfas9EkaRLHuzFu7D8uU2/Pb14OvsXTy039Vc/ij7
B/AbQ8tXJcBuscXjaNXo2H5zd2Jc63sS02kEPw5v5/bP999SHvsqsfqlOpgT
mQ3UA9QILdfpd/uppngNUl2Z47G5CqyPz68AxylWGGvlD8gmRJY3+sd2Pp1z
Etg3tlxyDToDYssbxeEhYyD8ztjqsnL+fM621/1B9q/h+VM5VrnxKGeuDM8g
74e8X2z1biY8G1mj1M6q+rUmtNqqOnR3bHmlXGrnUQ4rDO8dW30ulFquUe9R
Gr4crMm3y0LrSdR7PK2+Q/kO2V2x3UX5sgSy4WBl+a3iKbUcpLN96rEjP893
u61in2WM+uhv8Hqq3FaN9dHwefBm8He8Nqk+Kt/KZ8aCxVLLNbJbSf9tnUe1
VbW3CrJKqfUQ6iVi+Cj4dL6tlVovpXr0uOeBGd6zHcO2t0TWZ6ouN5BvuJ31
ju1S6yH07vcxFisfIyvq76h3V58nn1dv/Eti8a9cob5UPWS2fCS1HDQI2Y1u
T9WIBP4M/NnIeoC/0a+qs3i/3d1rlvLDCORPhtbPbAgtB6sWqEbN9Xd/Dhzi
vdOVxGqG4uA8fGlob6o7jHPbyj7qZ2rDV8BnR/amOk9Pr5Xn+PZqYrVWOb9L
ZHlgkOsov15kfbb7w0w/g/hs79PUX62L7K3ns57HvRcyz0G+PrKeUPLmyBu7
TVTHF4BVs8w/FkXWr7XwHk/9Xt3U/Fz1sDx8U2Q9m3qDZqHF5gT/36H5icRQ
85PwdaHdXfE8OTa7dkmt/9C30u3queUf9M8m5ld6x/v1xui8xv7LI4ubtqn5
ifrDNqnFj2wu/1ddU8/8YWL9lvou1RLZXWdQr/I/vACcmg==
            "]], 
           Polygon[CompressedData["
1:eJwtmHn8XeMRh68r5B4ljrih5wQJRSJCflklSEQSsoiKCI0itVM0xK6lVKpF
LbUFSUiI2PdKtbpQqtRWW221pEJriV1ssfR5OvPHfO4777zrvDPf+Z67/r6H
T57ebDQaU1ZoNDrx++260Tig4JfOY8pG4wSkon0UfetjWx3Zm3ZN30+wfQf9
aPQN0PdrNxon07cO7YPpW6sO6Yb8tAzbLKQ39ouwD6d/D+asjb4X+hroPZDj
aPeg72eM/TWyEe17W4zD9iv3RD+RMRuin1rGWOdsnHvtS7t7M/aci/ShfQV9
g7DVyOlF9GnbBfmau69G31NVo7Em9q7Iz+k/zbvQPsy1GX8Bevdcw7mXIT9O
H+mbDeo483r6roi79ESOoN2LvgvLGHNC+s+57jUNvWcz9jzftWj/kr4K2+A6
zj0dPx2OdKK9i75lzBGMfYkzj0Mfi2yHbI79tCLW8Py7IlOQlxn3SkoP7Cs3
w/Yk+urondAnoe+ATED+RX93+oey3oVFvJnnf5H+9dDXLcJe1PF2vuGR2Mdx
xrHIEsa9VsWb+XZ/Qc5wHvqhRfjoFMa30Hf37dEPQX+IOd8w9iveZDR6me+5
D9KF9hz6ZiPXIdeXEUPGUv9m9D/D/G7o3zB/PPp5SAe2c+kbUodP9PNmdfjK
mDROOuo437FlxL458CVrjeAuX7LWp5zpb+h9GTcz4+tExh7lGWnvTN9K+VbG
2sBmvNnUdrzVrvStYoww/m3We4D1Lma9c9DPRrbBNhI5nHab8eO9QxV9c431
Zoz1DudmPBmPp5eRe+bgethG1OETfaGvdi7jbdfA/hzrfY6Mpr26Z26HT/Vt
V/TjGdvf2M/9DsK+KXqfOs7o/rbNPXPQvpll5KC51wvpjRyf8fIL+uchfWlf
St/Wdax/ZhG+1uf9kFNob8KYs8pY46TMB9e+ApmP3IDciGyLLMN/b+O/33OX
AYz/YREYIVaMQ7/aXDc/Mmd8h5uw3YxcnBg0PH21K7YpyAq0m8h2ZcSeMXgr
61+a+CFmDKwjH/S/MXWR74YsZ/x7jP8z449krSHYrmfMDnVghFgxKHP5ctqb
NuOMnrUn+lvMv5/5s5m/IfpS9MfRr0C/Jf13LeMnMH58HfO824x2rLmwiDXd
a0v0Wfk+YqVyJjKsDtsI2l+w/jusfyfrb0Hf+YnfxtIA5GPsr2Cfi31T9PfR
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
VmKAWPBwK2rdXYkfxpx7iG9yPTFarP4fiAK8QQ==
            "]], 
           Polygon[CompressedData["
1:eJwtlndYVmUYxk+UCs6THsf3mQMRRBRBEQlQERy4cECRpma5F5qKZZnt0NSG
ligOzD3TtLrau8yR2jbtyitL04Za5siR9buv9/njd333uZ/nfc/7ved5R/Sw
SfkTIzzPK4EK8ErI8ypFeV4kHIv0vPTA88b5njcWpsJtioU9LxbdFFaS/w15
SYoFLl6BeEWoBA3gKbynYQLcQc5AGISuTKwKVIWGMAXvTmKz6Gs23IW+B286
3AuNLK8YPRUmw1ByUvBmo2fBEzAKbzCMkIaRUI+cajAQfbveo19ypvCeyTDA
xhQVdm2Ho29E14RacBPcjTcJxtv/GAPz0c/BAkgjpxV9JcJa5uUg89KWnFU2
RynoVGLtYAO0ZuIX0u55WMjzNCiGQfZ+jfkBnmfAk/AIXku8DEiHTFiEN5b8
kYGLN8dLgBYwnzbz8NZAEu9az/M7jOUCY+mC7g/50IzcOIiHB8kdQV910XPQ
o9HPkPMsRENjWEIfO+kjmdgQGE1eQH5tqAMp5LSBZeT9Sl579CZ5jGEpuUtg
qepH/w89A+6DYfQVi/cw+iGYaWOpjjfUvlcNtA+b6fsQfR+GI5BGrAhWkzdO
cwJtyJvAe8b77turj+noJuhoiIH77b0x8mER/R6gvwR0c4iHdDiKV0rs5sDp
LegM/EyBdxbvHPwNbxP7IOS0vMvQgZyJ5BbBTN/N2QVyLkImuj3kQL79j1Xo
royvG+TCUpvzRrRNVu0I8vbi7Yd9sJycMvgYXd/qUPXYA7pDAdSi32/J2Y5O
5Xts4Hm91hJ9NcRrAIutjyS8g+gw8RDUhW54h/C+g8NQz7wVNm9tAvftVQMv
453EOwE/217SDD8O1hH7XusD/SL6B/uGW9HbQm5O/8J7A/0mvBVy60brJ9t3
Mc2z6vkf9EU4r1qj3Xt478L7VuvytqNfgh1QVXONlwGnif8JZ+A1Yl0DN0df
ob/WutU3531pvvuml8jLRZ9C/wGnNS7y+9DuM/Re2Aet8HrhdSY3Bzqi/6Xt
HmIF6J5qA3nwH14E3zgf3R/6wq3kHMNvgo7W3gfd1QfeVbgWcvul9r+R9D/C
d7WUrT7wLplWPV1GX4HPoTpeNahiczBY+w2MgQ5458n50P6navYj1QKcgJbE
W0Az6EmsX+DanFWtwznI0/fHawsp8BveevvWqYGbR83nF3g1tcdCDehCLMvm
aCexT2GX9g9I1v4FiTanWnNae7uJXYfXWzWO3xQdB7HwScitEa2VzVZf7cjZ
YG06oTeiN2me0BW0d0ICHLD36hv2JjZK6xVWwyrYBhs1Fr5ZDizX2Ra4mHI6
4WVBtsXG65wJXJueeDu0NnzXdgVeOSyzPP2nK4z1KkTYODUv13j2VCtWQ7G2
V5fQT6n2LdtPtZ8NJ38Oz3PhhrCrMdXaLVBI7EjIrWet68aQa/v4GPRu+t8V
6fYmfd+OGgNkWW28qrXAvjGX581QHLhzf4CdqzpfdT84o3WjMxFSbX2cxOul
OYV4q6Eztn76Bu6OobuG7geDdcbCEDuT9X1j0D+SfxR+gi3aZxjLSvwXYCXP
W6Et3jqe1+q8pt31tC/UmoICmwOtwR7oIpgIXtjdN6ZFuTNeZ33jsKvn1lb3
qv/fQ27fOGX7mva3162GKhKvrPHCfrzj0Fm1Df00/4Hbs/fQ5jj8AuUhd38p
IT5Pey+U2f1H96AFOnuj3N2iPZShF0NplDv3D9oeXEjeMBjuu3WuPa6zvo3u
Nr5rq7vCOLxynldAH8iDIb6bW62ZVuQlQpKNSXcp7YkBug7UtvND941H0Y/D
Y1HuXqI7gu4Ka3x3fun8/TLk5kPz4ts6171J/ylEPAz14X9V91J5
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
O3g/MrWZbmKwe5FP9N/oP9194FY=
            "]], 
           Polygon[CompressedData["
1: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
BWwRC9M=
            "]], 
           Polygon[CompressedData["
1:eJw1lnt4j2UYx1+bxXZd+L31K7zr5NgJRXUpCqUQIXOKcj4lMqeNHWzsfCDb
aA5RcuokMmFmc8ppzGFmo+xgTDGxYmVTtj739dz++FzX9/ne9/N7n+d97+d+
fs3G+vtN87AsKwa8YIJjWce9LWue27ImoifBKMjGC8HLc1nWWRiNV4EXgzcG
PRZ+xj8AIzX/NPoYZMMIvEN4weSvgI4+lvUBfAjpxObgpRPPg7MwBC8W7za6
MTlNIFZ+A3qie0E/WEPOEngC3RQcWEfOQPiJubt5dg6cgNV47Yl3gC6wknlT
8f4m7x84A+F48+ECOh8KYDo5AyANvVP3I/saLnvGCyI/l/EZyIBd8J7mBxCb
jP4IPoa7eHFusx5Z1zh936F4X8M41jUCRsJ5YvvJ2QfD9FnH0UPRWei55J9k
fAoOwUHIlzGxfvpOd6Ez5T3AYLwq4negrm1Zz/GMH/B6oaMogsWMP4XXGe8l
Zw/012cdRkehIyEaHiUvmd9PBA90XfCU+cQWwwPoW8ypgVqX+ZaV/E4V3JG6
IacEv1h+l9h1vAi8c4wLYIHW11V0OVyDarD53XnyDOY8iHbDQ+oFw+/MiSQW
gg51zLcsxCuGIvB3TP1KHQdp/mV5Hnkl6Bl4M2GWY76nfNcil4nNxlsFLp7X
CBrIfrX+nkQ3h2awlpwNsB42Qku8peR86Zj6lDp9GJLwonXvYcTCZb2Q4Jh3
JO+qBhLIicP7D/0vVGsNzcELhLlQJu9P86TG4uXssO5KCMD7De+K7FXz4vEs
1lDL+J4+4yu8x/EeA1/9vpshDJ0r7wPyINVtauc79PewCRpSMw3gC2LvENuP
V4exBVvQz+Mtk3eg8QNSz3AQtmp8ObE09DapH+Z5QSN4m9g+vNVuo7PQe2Cv
Y3rJK3ivQWfYiefDHG9oCoPxNuNtl34AO2A03gbm1SdezzY9pa/UEroEXQwX
Yarskbwi9DT0JzBFvQy8buiucl7gc7y1MACdTeyYnGvHeH54g2AgnHZMbV/j
nZfDn9pDD+sapJ8dQR+VOnVMH5B+MAzWa738wZybcEPPjPSN8cQnwgQ4J98F
zx9dir4El6EJ+2sMrWwTK8PbDW+hu8MbsIp5BdLP0WNglL4rOed10InEFsIi
uEJtlUGFy8Tun/366HrgBQulr+kZ+Mxtvql8W6mrcLwFMB8qZB34EfShSMYR
0J5xWwhGp0gese62+b3WjFtBCz1bvfGjiS9lvAS2y7fAi8MLYrwCMvDuytpl
XZAAW/FSHbNeWXdDWIS3Bu9VdCd4RM/qLby/4Lb0QLwteD14RiTPiGccBx1t
c46kP6ZIb2TsCVMcc5fInZKr98yveL/ABbkfyP8GL4t3mQl+en8F4q1zmzrO
wTsBJ6FQ7hO8yTBJ56bDMrSHL/2fZ/aHU9IfpM/LmWXcBvLxQvBCYbjWVYGe
i43oFuS0BBtcsh+ta6ndroy7QB/bPMvT17zTRHSa28Qkp1D39C1ea8ZP2aZn
S/9eLucWVjqmN0nvusieb8BNuI43m7ynmfMSvKzrkXW1s00/knqRvcieukES
Xrn0OalL6ev6G5vcprdf5BmXoFT7+Da8ZOLvw1CdG+Y2d+d4x9xBchclo5Mg
Re80qWe5s4+QdxRy9L+SrDmQeADM0ufKvSz38yC518g77zK9RPpKc9bcAV60
zVmdjjcTZui5lPXJnu6ha6AWKrXufiTWiXmdoUruCqjWbyD1nOmYXig98U09
09KDn0E/Cy9or5Ve3Bv9LvTRnt2X34yhnlPlvEo/1fobIpo97PA2/VTugDZ4
7aCtj/kfIeuLRcdAlJ4P6dk9fMz/tZ7ax+XeLdXvcVXv6/8B1pqbbQ==
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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

            "]], 
           Polygon[CompressedData["
1:eJwtmHf8lWUZxo8nP6bnxfHkAcnXVDQ0F4601JTUNA0xmYFKyFAEQVYoyAYB
ZcjeiATIhh/IVLYIKENAAaEYuYg0bPnJLNO6vl73H9fn3ON5n/d57+eep1qL
DvXaFwuFQoOTCoWT9ds3LxRqZoXCrUJv0XNSobBKC04V30h8K+GlUqGwQrLZ
0j0lTBW9RLKzpJsr/hXxZ2j9Q+KfFf+S+Pelryn+euGg6APCdaJnC221dpvW
7NDaJuIz8ZWEpqInSLaQA4qvJ75Czy0S5gnzhUcly6VboDVjtXaisEj0pZI1
lu5XQkPhvbLOIFRIv1r626VvJ/nTwk2iX5VsvnRvC3uEZZIv51tFL5fuXK15
RHwL4WzRZaGl6G7CDaKXac0MrW0r/kLxFwht4vzjhdaiq0n2guglWnuO6Mck
WxTn4RmebS6cKfosoYrQTHzVzOsrZ76PlVpfXXQH6a4UdssOEyVrn/zN35Ku
omhbLBCWir5KsidznwVbYTPOdLawTM8vF8qiZ/HNwn9kqy+Fplo/QuuXSl9F
8nXi13Lnol8UnhE9o+g75W47JJ+FM10r/j7h+3rXxZm//37xX0o3V2ueTwb0
7yW7Uboawg7RO4Vrctu4HPadqbXP8l7ppnL32FP8w/pdJ/1y6e8Q/2fpZot/
Ltn/ZoneLNnF0vUQP038WvEXcFfCIdGHhYtE3xw8a1jbT5guepdkV0j3I2Gv
6H3Cj0UPlf630n8s/mfiLxPeEP2mcLno54W7db6NWvOK1nYSRkJLf17YsLn0
rxdt263CFmGx5EuES3LvxZ7VsaWwQfQLWv+k1nUWJhUdTzfllqGbI/6M2KOb
9t9a9N7cbS/x+4u+41X4E9+Q254V+KTwjmR7hc1aM1lr12u/U4glyYaKnyb+
1Lj//sK9ov8l2YuiXy7a/4m7uUJH0dsl2yndIGGm6Pe09tzc7+Bd7wsfCD+X
7O8l2xzbtxbGiV4hWR5n66T99hb93ODku/5U+nuk255sy5ZaMzj3O74rDIx3
Y3Nsj82w3e3iT5QcL5PE18X3S44RYqW++P+WHLPE7qs8j0x2+apsur/e9W7R
sikR35/rmbul+534g8KHwkfJMYXdj4n+ozAkvoGz/0K4S7hTGCXZ6GT6E/Jd
0bJ7wz7/EL4oOb4u0vtnJedjQG4m5tCtFgaIPiDZJ5w/2RfrSjZCulrCX7TP
YsmGJ8fnL7kXnXFf+Md66e7U+kFxxs+0fk7RZ6+d+xxjkvNvoXKh8D89d0L0
p8Ia6Qfp2d1af0j8pRHf1AxqBzG5seQaQaweLzsXk5P7SfeD3LE7K+L58ogH
Yq5vcnxsFd9LdG+hmvjjoYcnpg9Hvtldtgwde/Bs9YjXCZJ1ke6n4k/JXEPI
n9SPKzLn0GniG+T2CXxhqrCOGif9HumPJteoupFnyf08Q0w0jFrEmiPk0NzP
UlNPzpzTye0jk++aO78t9/O8m3r4gPguwtWZayy19nvi12jtePGb4vuwBXkN
W5BDd0Y+7Cn51eLfJk7Fd8MWwvyiaxq17SfCV9J/LdwqenKyb1CTqE3U7AMR
P32i3hI7H5RsO/bsmpzHedfo2P9vJfs2NeKHuXMGuQP63Yh3ZNRoanUnyTsL
VYU/lJyDBiTHKO87Xed5MHfOJfdiL2JlauQfzs9dUcN7au3Oomv7qLAvPQa9
xnNRH46VXDsmxfcSE+SGsVEvyQn4+g3CSZlzGPkEG/Eu3nlQ5z6fmAv7do+4
JjexX634br6VGCaWqUE8w1rqzcvEjPT36x2jctccfL5v1KKVontEPOFH5Laj
JdfggZFPiE3q01W5ayp1aljU2tXCa9LX1x7jQ876f5Yc96zdF/GNjp7tWMQf
8flR2b53rZ7vnttfRyT7zS3Ca/i29I2knxSy0zLbnLXjks/6b+1ZJzegsW/d
qF9TpP+w5FpHz0UPQO2nF6M+PaX9dhDP4oeJv0f8m9E/0i/RN81L7udYsyu5
bvDsE8J9mW28GHvzTvG7xH9R9h1zFs5EPSNnYWtsvjR3ficmiAX6MXIkuZKc
gL9xZ9xdHWFMbh8ldhZHffk23xLxup56UXItpaY2SPZHYnV7ybnvQPLZOOPC
3D0ltRV/O6Lnu2KP3H6zNLmno7c7L3NdaCnZGGoXMSS0ino6XfRpWlvKTSNr
lGwTeuR2YSt68EqR/w7pfb8WnzLHNLFN70DvRQ9GD0Ff+BCxJUzL3StuKlqG
ron44eIX6p1J/OPJtiCHVRL/KHWEuxFfOXfPtEF8m8y9FD0svWyNzN/NnTM7
1M7sC6MjxoltzsqZOFszYTq+nZwL6IHohYbgY5EfvtEl9yr1JBsp3dBYg25/
8pk425LomZlxmI1WRT6mx6LXairZlNwxRqw1ECaS66R/q+iegd6BGCFWGguT
c98h8XN95rtlpqD3pQd+OHcO46yceWZu3+a89ET4OP5ObGD/ceKPh//QA9AL
fK07PFh0TaY2b5J+s/j2xEzuM3CWLUX3oZy5QfRv6/HP3LMTMwuzy5rIKXzn
hMADme8c3evJe7Hn2NwzIrZbHHMcNq4d8x+2/07uWYOZ47HkmWRlyf0fs0rH
5NpDD3eO+LbJtRt/OjN3T4O9yXH0OvR/9JrUEGoJPrcw6v0G2eKRiI95cZ4Z
0t+l59+gR8C3hHeKnlGZVTeGvYjv4fib0DDznS0NH8FX8C1mqfbCHdHfn9D7
5ovvHPbFNsRIk8hnm5Of6ZfZR9gLn22VuTfHl5n5Lgt/mxP6ZtHff1Z2zaR2
VkQsL+CZ2O/zsvtxvoVveis55og95iH6qI7ia2WOOWKPfoXepg/vzH1mfAZf
mR/vujL8gXfOye1L2AhbtYn4JudluXMy/V3VmG1/I1wT8xH3Rb4aLXq21p8e
8U1ubx3250ysvSTzWelJB+bOQ/Sq9B/U3pUxz1YJf2Imfa3sO+VumSGZJfsL
N4e/kquIYWyLjem18LkVkR83lv3/SB9hWfK8iQ/ii8x07ZL7OmKLGKMPJn8T
88Q6s8Mz8U7exbxHr8asycxJz3Yk6g17sBc9MvPctpJ7Z761Zsy7fDM1pk7Y
+69lxwD+TY5tkRxvFTEvstc3Z4h6x9l6iL8u4oU47plbtjpimzm0S+b6Q63c
EvGMDN28uG98DF97OuKRnppZmN6A3puekh7hcOTH7lq/Ijegqa8rI/9Ry0ZF
bPGfBnfHHZIb6Of4b4aZitmKu7gl4o87ocehb6GXYZbBZ1eGXY9GPiFvdw1f
2RP5smvmfbeX7T/M+Mz69GfEBjFCr03Pzr1wt8w67MMsw0xDz7s86iF3hK9w
x8T+bZnvfkXy/0n8vzYg94zDrIMP4hf8B/Q4d5icX6nR1Odh5NOyey56L+6M
e2IP9uJ9+Mb+qC9PZK5dzMDMwtSLIbH3+ZljcGHkCHoh6im540FsGPFKr0JM
4hu8j1hdE/X8xsy+wvy0JXIH81Tj5LNyZnqLmVG/+I+sV+7/DOh3qPH1o95u
i/xKbmKmZo7+k+QfJ9fQyeF31Nbe8b3YcEnynXF3+4r2Cf6j4L+KUeKbJ/cI
NaLfw6/ot+iFyPnkfnIS38o3ry2776G+kbPJ3fyHsqnknpTetJ4wmFof/RQ5
al7sR+76PwTMPnM=
            "]], 
           Polygon[CompressedData["
1:eJwtlmlUVlUUhm+WEzjdupZ6na2cU8ucspzHyhRFBAUUEwoRlHBAUVEBUxNH
GtTUHHKhtLIMW2kOCaZgggiCCM4IKuKYVsu0nr3O/vGs9d537zN855x9ztcs
KMIrvJJlWQlQGS46lvWqp2W1gdYQ4VrWPbwA9HgIhA14H0Mj9AVioejJ8JNt
WXvgN/DXvLnwJroL9IRS8ncST4YSdFe8aHI2wtewCYLw7hO7pvHZeHMgBorx
GuA1BBcm4b0EP3swLrEI+p0Kq/FWwRoYTd5tYtvwt9pmTm/h7UYHQgC8qH2E
oaegwyAchpFX7pg1kN/0Fd46WA9fwOfwJfgRu0tOPfR5+vkDXR/dAPxhHATA
8+SdI/YZ+j30uzAIbuJdhc66VrJms8iZp3OVdZuPjtU1qI8XhJ4IH8KPskay
VtIO/pJ1xkuGXfAJ3kO8tfy+NbDZNn3I+m2VPtATYYKu/T8yHnogDIAt5GTQ
5iN0LORwaC7aZs5v8D2d+AyYCX/iTZGzA+GwA+8Subm0mcb3VDjJ93XyeqEX
EF8Ii+AGXj+8OHQ8JECI7DFePWisZ07y+qO3s9bbIJgcX6iB5wnVocAxY/RG
94U+8Ck5hXi10HWgNvjhVeB5oUfBSFiBlwjD0R/A+3oOfPCqoavCs5CPF+Wa
WpGa6QhXHLMGYeglxJbCMjnf/OYNtvk9UjvnyfmW7+2QapvfLb9jLYxB+4C3
nt0rxPNYv5l8z4Bc29RHN3QP6K51tAX/G9hlm32Zpf1JDdwh/wh+GpyUPlm3
UrgG78gZgdfJ6wQd9HcckDlKbcERqEXOGTyLeCV4Rs4qXnvII54LOXCcnGDG
mQR1ie3BO4wXLvUF0TIHvHbEjjlGt0a3gbYyDxkHL0POF7qza+pa6ruTxubb
Zi9r6n7Ivowl1gFeg45wWuci99orxIfAUDmDxJKkLqUN+Gr9euM1QTeFdnAJ
z5dxxoCHrC/9/Yo3lm8/qCr1hReEboFOR6fBIThK3mT8UKhB7CheFHoCjIdp
cACvimv24zK6MmNWgV5yV8AP0pdj1kzWzh/Gga2xEPQcmA2Z5BXi9ZD7WWoV
XPQvsnfEcuAOuh9efxgAv+Nl6Jxl7q3w+sBtdAWUwylyeso9BG+Dh9ZWb/RN
4jegDLLwGul4aejGspZS08yjgLMbR7tF8ITYEPzBMFTuC/JPO2YumXJ3wglo
6Zp7aB5tUtF75Y6GUfCU+BN4DHnknNDf3oVYV+gm55lxI6G73slx6GboptAc
ruucF+DHwjLbrM9AYoPgEfohPND5Rcq5Yi7toS1cxvuONilQpneZ3C+B4KBf
AFvv+yR9Iw6SmwXZkO6Y/W/omnnKfH11fc8S28j3Jt3DVPL2wj5d2+Wyx+SF
wmB9Pzz1fPro3ssZSNQ37BbxQ3wftk1N7yBvJyRDTa3BLNlryNa6lHUrQJ+F
C/qmPYV4+tsne09f5VqP2do2X2u2ttbFQcecf6mDCqlXzkEI7ReDVdfcG1Kj
McSWwFKdo8w10zZ3qLwfsr/nyCuGIj3jCcTjIQn+8zD3kNzjI/Rdlfd1Jd7L
cJV4idxBWpcpeNOJR0Gkvo0p+k4+QufLmYW+rrkf5Z68pbUgdXQXfR/u6XmR
9zeatn/LPGlXBMNcc37kHP0rdyOx3XjfS+1qvrzTcp/K/IfjjQAvPX9SF4n0
sw7WQ3W8zXgj9V6V+3U0eEM1je13zNgyhzLb7NV+eU+gJboVPKfvlrz78l8r
nbxTkAPH4RgU26bu5N0vQZ9h3+byHQOFtql9qZ9s+lnB90rbnHv5f1PkmDdI
3qJSyKftQnnn4TGxxeQFox84ZiwZ839J05eu
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1:eJxFlneMVVUQxu++R1l4F9m9u5f2DmXpvVfpVaSEIoEAUgRCLyJBY6LGGE0A
ozGxBGOLRqPRqCGaaNRQBAFBBRUwgDTpIG1XBATB35eZxD9Ovu/NmXPeOXNn
vjlls5aNX5qJoigURFEWrBxHUQEkC1YUR9EpJislUfR5Loo+Y2zJR9GH4OWM
2SqnUfQW+D32bGJ8B/w7xkvwLPMHwWv47wffYVyElyS2/wv8/hbfl8EL2NeC
exh34AfAHOs/AQ/is9vtmj/KuAk/BVbD533wV3wqwU9jr8L+r2E7qcvBT8Mr
4CfB3xhX4Htz5vM6YztrL2jA67NHytgHP4DtOHgd/2NgJeJSSHyGseftnHHZ
FC9hvfD/7zy8Ifv8g18t+Go/z3NgAfbnwU3sf6nY+Ma8nVU+8i30e+3F/hdj
F7wE2y/g1YzF5bDHQfFImPsB/DlvMfkAvg/+psdcsa+K/Sw8l9jvtxk/+hn0
vwXYr3qcr4CN8M9wx77YL/L7X+yXwZrYN4NnWVvKXYvwqQe2SA3bcN91/k0/
BvOJ+Z/Dvyyxb9EpMf+6+LfFfzvzN7DvALf699J9LrJmG1iEb5XUcjLD2tqs
KWBtT53Z80PxuZy3vYrhjZg7j39NcD22cvgW8Bg+X4Mp9o749WCfJuzXgdEA
3lI5AL+FTxl8IX5TsM8MdnftcZ49NoGX2HOD8hCfMxnbU99ip/IMn3I/v85T
AT8PD/A/cxbb6zn7tvqmFcqVxPbUfWvEFvNq4Imc1eY5sE1iscrjUwe+EdsZ
9v7Sa+0r8K7U7Cexn/D71nB/+TQDixKr60PMf+Hfa53Xnb7b79iP+FycWs2r
9uuy7huPp+J6M2+5WDu1mKkuVB8dEstPfaPL5NhBz+2815G+fe3Y4pCCvT2X
uoFD2Ws5uJKYJ2AV7OWsHQ0vgY8E73j+3wDv5T+qYW+b2nrt0wmcwKgD7wyO
xqcZ2J09G4Ex9uaxnUlnW6P9PP9VB2s9JtKIxvgl+DeNLUe0Vns8q1jDx8Sm
h8oB5cJt7vsqc9uITUb6gE8hON7Ps1D3xb8+fAX+XeGl8BnwecwF+FxwHKNR
1mIxEJ/m8GfwGernGQwOZ9SCjwAXx7bnIvAB6RB8JtiXtbPBBdz94cT2Xgwf
lNjZxoNzEtvnUfD+xOI8D4zxrQ6vBfZi5LJWMz3Zcyw4OZhWSOtK4HP8PLN0
BtaPAidhLw0WX9XUG66H0mDVtbRoJ7F6BTyOfVXOhvidYtN2xXMDPrf4fQx7
DfZukJpWFal2Ge34r/bYQmI638J9lDs1mW8f2/d6kd/VY6ut+tg74dMT3hTe
K7FaG5jYN1N85BtccxorzznHIc/5NZ4/Om+z1OLUCt/mjJy0BVtNz+EusfnJ
/2Kx9Und8VOwDn5/SGfZu3ViPAqmX9Kx6qlp+HvYf8KnnvRcfThYL1QtqObU
5/Q7g/2uYP/dNLW76h7ZYKh76fsXeb1Iy991TVP/qJua3lTHv1ZqPfx63vqj
9Ec6lEmtj2/2M+sh0R0s9R76d950WHq4O2/7qLdfy9sZddYC9i9M7F67sFcJ
1ovVI8qC5Z9iWCOYbko/26RWy92w3RNMOzpju5sxDT4H2zLGAni/1OprAHxk
sLWq+x7w6cFqcm5ifV261Ir5TtjLsLeG91Fvx94vtjxRXag+eqSW21PVO1LT
m6HB+qU0bbj6C7/re0/pk1pNzA9WF6rNJeot/J7v5xyn+8CnY1+hO8AHY5+a
2BkWgQ+5/Wn4QNei/ooFfkOkc8xP8H26+1rZxwbrd8rzYfAuHpNRwXpcY/Z5
HHzMuWIyyfVkcmyxlBZ1BGewZqL0ILU4SI8nBtM0xX+2YgumipX0PtgbQu8r
xUp6PCSYhkgrpD1D4C3hq+ErGU3hT4KrErMrDo+onrN296Wx8SVgQ6811ay0
Tnb59nHdW8j8enLro5zVUdbfuj0Se48dIp/Lqcd+rhHtvV7Uf7vgUzeYjqv2
9a5Tz0mwbfX3q966/ZWT7PkU/oNSO9dyfAZ6rKSlyxhN8HnC+6/6RVXwwcR0
ei6+Axit4O3Yo7X3u7ax9Rjpbf9g/eUIa68VWw0eVs8qtnf4UfVE+B6/r3Ty
qL8P1MeP561/6z1Q6G/myom9GfSWOc18Lz+D+qlqU3p7s9jqWm/n/fiMTSz3
lKsDUus501jX2WtHdTQ4WA4pT5qn1udbYuvjWq2+M9p70ACwd7A76+5dg/Vd
1WCzYDolHVvi9aI+Jc3U2/xO3rRE78aGeh+5Pkv/23kNqh6lD8rHWdiGB6tt
6cYY7wsT8Jnq9T7Fa0o9dgy+1YK93/Tuui9Y31V9qY5UfyOCvXXPcYYY/A9u
w5KZ
            "]], 
           Polygon[CompressedData["
1:eJwtmHewVdUVxg/vAg85l/I2Xto5tAc8wCAI0pt0DQgKRJAgRRQJIiCWTMpM
epMkk0kmbdImiZlMkkkymSSmTRJjiS3EAhJQkS4iIl1AAcn3e9/6Y83da699
dl3rW9+6fVZumL++LsuyeS2yrKV+dxZZ9ps8y95SZ0PKsl3S/yT9Icmrap9r
yLLdsn1P+tPSM405IP070r8v+VCZZSurWda5kmW3yfaUxvxI/T8Me736DsX3
T8o2UONrGl+n8RNka6plWX/JIPVfIblK0kv2iuyTZL9bskHyCcknJatkXyJ7
34r7p0taq91Bfe1lu1nyfrVnSRarPUT2KyUNaidJR8kJ7eWS9jRC/T2k12ts
G0nbqs/IXtlzK+2rqjGH1f65+p4rfMaVktWlz17G9xc05qrkNd7R2PN1XvsZ
ffNj6XukV6TfUfoMG+JsB2T/h+xvyN5W+n8L3x13+FNJoT28I9sbal+m7zbL
/jO1H5T8R+3tkl+p/UvJNrUXswfdxwzt6abSdzxeMqD03a+QfFC27hqzRv11
koOa/2v6/hF9/2jhNn2n9PYVjW+v8e0kl0kelv3rsr8ue0vt7YL03dJPSu+h
uRZx15p7osbO1beXGuwvmzTmS5JlsldlnyL7PNkfL7x3zvBHSavSZ+XMgzT2
AbW/Ktkp/XiD+wZKWpYeWyc5xH4kr0l6ydZT0qK03ip5r+z5Ma01TP19OYv2
cC3vIWlU+yb1LZNto/RS+mrpt0hfJ7ld7VWS9aXffZnayyVrSt/tOPy49B2f
0xovaa2zWrOf+j+aHBvMwVwnZX9a9uOyd5FtnaSQ/VbZ18p+n+RutQeqb7ru
92Oy96q4D9vHk/to3y9pofZrdfYZfAffrFW8R/Y6QPoJ2bdzp7JfkxxbxNjI
0mfkrP3Vd43WO6IxT2jsvyWH1R4ueyF7Kbma2JKMVXucZLbap/Umr4b/4DtL
Y07mmiy5OfyxUeNH0C/5isZ+WXKD+j4s+/2ST0k+LZknaafxA2Ubg69K7yT9
CunjiTnpXaXPj/fqrjW6SdqqnYMtgTfg197C3xMTxMLCkNlVz4ntA5IFybjB
fhbE+mAIfcRIt/APYmdGze/ygPo38X3gDd+w927Jb8sb79D6M2QfJntH5pDt
VjAKbJLchi+q722Nf07jTxc+M2cfIBml9tWyX5T9qOxt2GPET0/Zh0q/UtJF
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
            "]], 
           Polygon[CompressedData["
1:eJwtlnlQV1UUxx8gIoKCTx+LvxeLKCayuYGggECCoJZSaYUbpOIKlU3LTE3T
5FTTH03TMtVfTVNNzTTtf7Tnklba5m4ubS6V5koIqKh9vnPPH5+Z884599x7
zz333Jfd2tHUHu153nqIhVWh592Z6HkVgefd73veAzAI+fMEz/sz4nlH4Ch8
Dc+g+2+I5/XDJxZqoQaaoIAYGcTyYQgMhUv4ZxIrWTrsPnSiy0D3LfFeRu6H
3J/xcXCZ2JfgJ2xvYBuALgb7C8gvwYuwFdtS4i0k1hRs6/C5FwZCPAS+W/sx
/DqJdR42Ij+NLgr/OsZOZuw45AX4LoTp6G5GdwuMhyJsIyAaeQDEQYjPceJs
Js4m2ACD8dlksc8yTxSxouFvdH/BP7DR/A4g/wIHYR+6YehSLEdZyBWMq4RG
aIB8dGOYdxo+VTAHeTK6pdiWwXbivMLY2MDtW/svDNw5TMW/AiphJLokdBNg
IoxCd4W19sEgxrxNjK+IdYHvLths5xwduDPR2WxB9xG6ZOQefLphg53fVeRE
fD9B/gw+hd+xXUTfC9tsnTGMzcbvMvIF6IYgdHWketqN35s6c8t9FGtNxZ4G
6XAI+4fYP4B3IAGfofCzahK6FBefFfi2wUqr66n47ED/PXYfeSfyLpiFfZpy
gm4x8y/xna4GXTVUKWeKb7UYh5yATyLstbXGo9uHvB9mM/YGxjRjXw1rrLZU
Y20wD9tifB5GzonBj+87YBXfy3WHJEM2tof4zlMe+B4JOapXxl6PLgM5CzKh
GF0OjNA5W10X41MG85Fvh9ts3nJilkE1JKDLRdcKLcqT3adyxvWyl93sbQ8c
hJTA9Yhl2JdCq+U0T2ejM4JA8dA9Ruxc1r+G79Wq3cCt+TrkAvwLoSh0da56
n+E7m/ahnvOFahG+tPurXqSetB468FuH36TQ7V05yIWxjBuLLkSOQDqMRlcb
uDH3YHuC8U/CIzCS9bWgXwJ38X2YeXYy3y541+pKuc9WL2DsBJgYuvp8Dfvr
8JadfQ+6w8iH4IDlqlv3HHk/7LV7ngq/Il/EdgkuQypzp0CyeiG2TnQh8ink
XuhRXaNLwmcwnLcazkIeYmPOoDsL5yLuLuywc9P5daGLZ90nkIerdpETrR8k
s7dhMBQGh27efxOcv3wGwUn1fHRJsiGfgnrmroMxlh/VZH7o4ijecMv9wMD1
lT0Rt3btISl0d153/7y9AdewXwUP2xF0aaoVfEMY7buc9WG/AseQj+pNMr+n
tA7Oci5z3g3TA5eX77Bvh22W00fxG4VfGz7L4T71m9DFUsyTkM64ExFXd6q/
LbZv3XXd+ROWiwhyM2NvJM5smAml+N0knXq09YBJ2gecZkx/dHEwIHQ9ok5r
hVrzO25vRJrWqftjb4jekh+xvaoY6gXqnzDOd3FPR9w7oPfgQVihfqK7FTh5
LXI7dMB4dFM0H5TAjNC9q88T5z14H74hXiP6BphpvVH9rwRmIDdCg97I0PX7
j60Xqyf/wdh56G+F+TDL8tJscgvrWwvt8LjOlvNo1xqhJnDv+WLkRbDA+pDm
rUeei61J73Po6kB1kkeMEij1Xa9Tb61W74ZanUHo9qn9jrP3XG9Pn94ruKJ7
iU+B7jr2fPURe2uVv5XqSRpnOc1nnrEQsXuie6n7uFV5gx/sbckJXG/NZEwW
ZIfu7v+mHOldtHrWu+/hd009wf6RCuy9L1OvhikwlznnwCLf5UK5L0Yugsm+
eyP1X9Jt/xRB4NaZb/8ChdifQ/9sgvs3079PuebQ+dhbMQ3fKt/11VGqa+XW
ZPXWUr0rVkNT0VXqXxHqQ1fjZ4h9Tv8/VpP/A/bpPL0=
            "]], 
           
           Polygon[{{7207, 7206, 5411, 3084, 3094, 
            5413}}]}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0E0ug1EYQOG3/dpqq02khkwkDNsRasaw9VN0ZmoBKoqgqrUETdgICRsh
YSMNE54vBifn5ObmvT9Lx73uSSYijtBIIjb5nT/Q0lM+5Go1ooIDPctl7OsS
F9HRBc5jT+c4wa7OcgY7kQ6K2KbfSkSb53IRW/zjnG809Rd/oqHf+BUr+okf
sajPuY953U3viLLe4PQ9Z+Zn031sKS74Eo6LK75GXt/wAAV9y0PM6DseoajH
fI+S7hhW4x6fYkE/8ATL+plfUNervIZ1XU/+//cPE9QgQA==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0E1KQmEYhuEvcKpkmGXWoAJXEdgazEqNArVhPyMbplBQwxqmZipqtY6C
2kjYKsLrkIOb6+Ec+AbvZu2ycLEQQihrPRbCAz/4qSf7h0O+x0N408B+5UR9
e8yRXuxh9F89ux9907Pdi1TX7rLDDtv88/4jfznVvf3NLzXtCce6sm95o3O7
xqpO7V3mdWTnWGDC+3tcZJFJLmnfTnFZB3aaKzq0V5lRyV5jNj6/CzdUsXe8
X+cxT3RmN9lSwx5E99K1vcVt3dnZ2P99Z3LoK5E=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0L0uA1AcxuG/oUMlRBM3YJWwokp8TiQam9WuDTeiCXdAfVRJW62PgbFG
EiGMjBTFDXgawy/PO5ycnJyB1fxyrisiVtSdiHhhlTW92ff85XxvxJx+7FnO
6Nue5pTa9iQn9GVnOK5PO80xfdijbHGE72y5/5WPfNCzfcaG7uxtbunG3uC6
ru0slzrn7GEOqWz3c4elnohdllnkMU+0Z1dY1b5d46kO7DobOuy8gecq2Re8
1JE96P46F7ioK3uNOTXtTRZ0a/cxpSc7mfj/3z8TPTbi
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Esuw1EUgPFD8u+whm3CQIcMdeTReka00aIYSCWkC2AFJGyEhI0IO6Be
UY89oPX2E4Mv33cH99zck2ts17a6ImINnSRiyOEgFXGIUX3CM/yUjnjEtH7g
e0zpFt9hUt/yDSb0NV9hXF9yE0V9wQU+57G/O+bn+YxPMaiP+Qg5vc97yOpN
3kCPLnIBKd3Hvfjyh25+5lnzX3iOX7nEZbT1PFfQ0VVewJte5CW86xov40Ov
8Co+ddb8xJvDPIK0rvM6MnqHd9Gvv+3zBwO6nfzv9xfZ6TFE
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0E0uA3Ecx+GfzQgLztAVCdegWtqFBbEiVkRjtF5CWyuWWm1xDuEUziHV
eGvpDTwTi0+e7yST/7zkdtP1w4mI2NIgibhy0ZqMaOvGfuQDL2cjmrq3G6zr
zr7guXr2GU/VtU94rI5dY1W39hHbTNnii/Ov+cwnNeweu6pl9zPVvl1mSTv2
Ihe0aU9zSmX71zcs8XUmYpl95vnGgVbsd36oYH/yS0X7m0Ot2iP+aC07k2OV
7MRzNjjHeW3bBRa1Zx+womp2nncZqp49P/n/v39yBTOe
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LsuA2AYgOGvUyUOLaHU5io04SpsbVKDC9ALIE5xPqzO1W6MLBIdGdnU
QhRFr0Cio6cxvHnfP/nz/YexmdLUbCIi8qgnYTHXFTGPV13mFmfTESP41sOc
wZce4kF86gHuR1OnOYUP3ce9eNc9/Mbd3OBr85+4yhU86CVexJ2e5iJqepIn
cKVHOYsL3XbvX1R0g/d5IRVx0JnFh7zMKzjSq7yGY73OGzjRm7yFU73NOyjr
Xd7Dmf4x/7zzbmdncKnHOYcbnecCbvWzvS+414/J///9A6J4M/o=
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Msug1EUQOHdkvi1EwkjaUXVX62B++URKmFkZmpWiXoQ4Skk7uL6AIxI
PIUEdTdk5pMOVtYanOyzzymtbiw3MxGxgpskIs1GNLoj1jCmN3mer3oiLjGn
L/gcs/qMTzGjT/gY0/qIDzGlD3gfk3qPJ3iXx3nH/Apv8xaKusnr6NNLvIi8
HuUasjrhLvxa/snej/jW9/zM/ea3uMAvXOQBvOpBLuFND3EZ73qYU3zoCo/g
U1e5hi/9YP4Pd7i7Exm7pP9vQE7XeQG9+tbZOxT0ddL+3z/ByStf
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0DsvA1AchvE/W02kEtZ+iAp1j2sbWmrQRidhVBsREvfL7IswKQ11KbuE
L0LC7NcYnjxPcnJO3pzU6max2hYRZVwnIrbaI5Y7IkrY1zt8wYtdEQs41wXO
40zP8xxOdY6zONGzPINjPc1TONKTfMgTfMCX3t/mPd5FVVd4Bes6wwOo6F7u
wZL+tfUHOf3JHxjXde7nm073+JYzfMd1DOp7fsCQbvAjhvUTP2NEv3ATo/qV
3zCm372f5S/+RlEnbepubdZp7sNaa4PzGjb0VeL/f/8ApZouuA==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0LsuA2AYh/G3TRhq6iUISd0IiY4Nouq8iA51C1anOoyEpZUYGBkrLDo6
HybVIo734NcYnjxP8iX/vPm6ZxdypURE5LGXirhIRvR3RQzgUs/xE/+mI37w
qL/5Cw/6kz9wr9/5DXf6lVu41U1+wY1u8DU/8xUv2q9zkedxqrM8iBPdxxkc
6U7uQLW979YWdvQ5n2FLH/AS5+wv8xCv8DCPYFWPch5reowLKOtxnsC6nuQp
bOhpnsGmrtnfbt/PDVR0wk1JHOoe7sWxrnrfR03vpv7/9w8MtToJ
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0Lsuw3EYx+FXhaVaaRdGVceJhBtxWKxGAzfg3NR50sRVSLgREkbnw0go
WnWqeKTDJ883/+HNL//c9Nz4bFNETGknGdHRHDHUFjGsLnuMg9zKRmxqwN7g
uvrtNRbVZxe4ql57hcvqsZe4qLy9wG7OM8cZ9zs5yQm126McUaudZUa/iYiK
972pap/yRI/2IQ90b+/xjE+ZiHOWecEXvury/w6rurLfWdO1/cFP3dhf/Nat
/cO67ux99x94xGNV7GeWVbdT3ppWi7fv+lZS2t5ONv7vH+jtOTQ=
          "]]}, {
         Line[{2, 812, 11, 825, 826, 20, 851, 852, 29, 885, 886, 38, 919, 920,
           47, 953, 954, 56, 987, 988, 65, 1019, 74}], 
         Line[{3186, 810, 3203, 5453, 4749, 5454, 3221, 5476, 4757, 5475, 
          3239, 5502, 4765, 5503, 3256, 5528, 4774, 5527, 3271, 5551, 4783, 
          5552, 3288, 5581, 4794, 5580, 3307, 5606, 3305, 3327}], 
         Line[{3188, 811, 3204, 829, 5456, 3222, 5479, 4758, 5480, 3240, 5506,
           4768, 5505, 3257, 5530, 4777, 5531, 3272, 5556, 4786, 5555, 3289, 
          5583, 4797, 5584, 3308, 5608, 3309, 3328}], 
         Line[{3190, 4747, 5449, 3206, 4752, 5459, 5460, 3224, 5487, 4760, 
          5485, 3242, 5513, 4770, 5511, 3259, 933, 5536, 3274, 5561, 4789, 
          5564, 3291, 5591, 4800, 5589, 3311, 5614, 3315, 3330}], 
         Line[{3193, 4748, 5451, 3209, 4754, 5469, 5471, 3227, 5498, 4763, 
          5496, 3245, 5519, 4772, 5524, 3261, 4781, 5545, 5547, 3277, 5576, 
          4792, 5571, 3293, 5598, 4802, 5603, 3313, 5620, 3321, 3332}], 
         Line[{3195, 3202, 5455, 3211, 3220, 5477, 5478, 3230, 5473, 4766, 
          5504, 3248, 5500, 4775, 5529, 3263, 5526, 4785, 5554, 3279, 5549, 
          4795, 5582, 3296, 5607, 4804, 5579, 3317, 5605, 4811, 3334}], 
         Line[{3197, 3207, 5458, 3214, 5484, 4759, 5483, 3233, 5510, 4769, 
          5509, 3250, 5533, 4778, 5535, 3266, 5560, 4787, 5559, 3282, 5586, 
          4798, 5588, 3299, 5610, 4805, 5612, 3319, 5625, 4813, 3337}], 
         Line[{3199, 3212, 5463, 3216, 3231, 5490, 5492, 3235, 903, 5516, 
          3252, 5541, 4780, 5540, 3268, 3280, 5566, 5568, 3284, 5596, 4801, 
          5595, 3302, 5616, 4807, 5618, 3323, 5627, 4814, 3339}], 
         Line[{3201, 5446, 4756, 3219, 3236, 5464, 5466, 3238, 5493, 4773, 
          5522, 3255, 945, 5517, 3270, 5542, 4793, 5574, 3287, 1013, 5575, 
          3304, 5602, 4809, 5623, 3326, 5629, 4816, 3341}], 
         Line[{3329, 3314, 5613, 3310, 3294, 5592, 5590, 3290, 5563, 5562, 
          4788, 3273, 934, 5537, 3258, 3246, 5514, 5512, 3241, 3228, 5488, 
          5486, 3223, 836, 5461, 3205, 3187, 5448, 3189}], 
         Line[{3331, 3320, 5619, 3312, 3300, 5599, 5597, 3292, 5570, 5569, 
          4791, 3276, 5546, 4782, 5543, 3260, 5523, 4771, 5518, 3244, 5495, 
          5494, 4762, 3226, 5470, 4755, 5467, 3208, 3191, 5450, 3192}], 
         Line[{3333, 4810, 5604, 3316, 5578, 5577, 3306, 3295, 4796, 5550, 
          5548, 3278, 5553, 4784, 5525, 3262, 4776, 5501, 5499, 3247, 4767, 
          5474, 5472, 3229, 854, 5452, 3210, 4750, 5447, 3194}], 
         Line[{3336, 4812, 5624, 3318, 4806, 5611, 5609, 3298, 4799, 5587, 
          5585, 3281, 5558, 5557, 3275, 3265, 4779, 5534, 5532, 3249, 5508, 
          5507, 3243, 3232, 5482, 5481, 3225, 3213, 4751, 5457, 3196}], 
         Line[{3338, 5626, 3335, 3322, 4808, 5617, 5615, 3301, 5594, 5593, 
          3297, 3283, 5567, 4790, 5565, 3267, 5539, 5538, 3264, 3251, 904, 
          5515, 3234, 5491, 4761, 5489, 3215, 4753, 5462, 3198}], 
         Line[{3340, 4815, 5628, 3325, 5622, 5621, 3324, 3303, 4803, 5601, 
          5600, 3286, 5573, 5572, 3285, 3269, 946, 5544, 3254, 5521, 5520, 
          3253, 3237, 5465, 4764, 5497, 3218, 5468, 3217, 3200}], 
         Line[{83, 1050, 92, 1063, 1064, 101, 1089, 1090, 110, 1123, 1124, 
          119, 1157, 1158, 128, 1191, 1192, 137, 1225, 1226, 146, 1257, 155}], 
         Line[{3342, 1048, 3359, 5637, 4819, 5638, 3377, 5660, 4827, 5659, 
          3395, 5686, 4835, 5687, 3412, 5712, 4844, 5711, 3427, 5735, 4853, 
          5736, 3444, 5765, 4864, 5764, 3463, 5790, 3461, 3483}], 
         Line[{3344, 1049, 3360, 1067, 5640, 3378, 5663, 4828, 5664, 3396, 
          5690, 4838, 5689, 3413, 5714, 4847, 5715, 3428, 5740, 4856, 5739, 
          3445, 5767, 4867, 5768, 3464, 5792, 3465, 3484}], 
         Line[{3346, 4817, 5633, 3362, 4822, 5643, 5644, 3380, 5671, 4830, 
          5669, 3398, 5697, 4840, 5695, 3415, 1171, 5720, 3430, 5745, 4859, 
          5748, 3447, 5775, 4870, 5773, 3467, 5798, 3471, 3486}], 
         Line[{3349, 4818, 5635, 3365, 4824, 5653, 5655, 3383, 5682, 4833, 
          5680, 3401, 5703, 4842, 5708, 3417, 4851, 5729, 5731, 3433, 5760, 
          4862, 5755, 3449, 5782, 4872, 5787, 3469, 5804, 3477, 3488}], 
         Line[{3351, 3358, 5639, 3367, 3376, 5661, 5662, 3386, 5657, 4836, 
          5688, 3404, 5684, 4845, 5713, 3419, 5710, 4855, 5738, 3435, 5733, 
          4865, 5766, 3452, 5791, 4874, 5763, 3473, 5789, 4881, 3490}], 
         Line[{3353, 3363, 5642, 3370, 5668, 4829, 5667, 3389, 5694, 4839, 
          5693, 3406, 5717, 4848, 5719, 3422, 5744, 4857, 5743, 3438, 5770, 
          4868, 5772, 3455, 5794, 4875, 5796, 3475, 5809, 4883, 3493}], 
         Line[{3355, 3368, 5647, 3372, 3387, 5674, 5676, 3391, 1141, 5700, 
          3408, 5725, 4850, 5724, 3424, 3436, 5750, 5752, 3440, 5780, 4871, 
          5779, 3458, 5800, 4877, 5802, 3479, 5811, 4884, 3495}], 
         Line[{3357, 5630, 4826, 3375, 3392, 5648, 5650, 3394, 5677, 4843, 
          5706, 3411, 1183, 5701, 3426, 5726, 4863, 5758, 3443, 1251, 5759, 
          3460, 5786, 4879, 5807, 3482, 5813, 4886, 3497}], 
         Line[{3485, 3470, 5797, 3466, 3450, 5776, 5774, 3446, 5747, 5746, 
          4858, 3429, 1172, 5721, 3414, 3402, 5698, 5696, 3397, 3384, 5672, 
          5670, 3379, 1074, 5645, 3361, 3343, 5632, 3345}], 
         Line[{3487, 3476, 5803, 3468, 3456, 5783, 5781, 3448, 5754, 5753, 
          4861, 3432, 5730, 4852, 5727, 3416, 5707, 4841, 5702, 3400, 5679, 
          5678, 4832, 3382, 5654, 4825, 5651, 3364, 3347, 5634, 3348}], 
         Line[{3489, 4880, 5788, 3472, 5762, 5761, 3462, 3451, 4866, 5734, 
          5732, 3434, 5737, 4854, 5709, 3418, 4846, 5685, 5683, 3403, 4837, 
          5658, 5656, 3385, 1092, 5636, 3366, 4820, 5631, 3350}], 
         Line[{3492, 4882, 5808, 3474, 4876, 5795, 5793, 3454, 4869, 5771, 
          5769, 3437, 5742, 5741, 3431, 3421, 4849, 5718, 5716, 3405, 5692, 
          5691, 3399, 3388, 5666, 5665, 3381, 3369, 4821, 5641, 3352}], 
         Line[{3494, 5810, 3491, 3478, 4878, 5801, 5799, 3457, 5778, 5777, 
          3453, 3439, 5751, 4860, 5749, 3423, 5723, 5722, 3420, 3407, 1142, 
          5699, 3390, 5675, 4831, 5673, 3371, 4823, 5646, 3354}], 
         Line[{3496, 4885, 5812, 3481, 5806, 5805, 3480, 3459, 4873, 5785, 
          5784, 3442, 5757, 5756, 3441, 3425, 1184, 5728, 3410, 5705, 5704, 
          3409, 3393, 5649, 4834, 5681, 3374, 5652, 3373, 3356}], 
         Line[{164, 1288, 173, 1301, 1302, 182, 1327, 1328, 191, 1361, 1362, 
          200, 1395, 1396, 209, 1429, 1430, 218, 1463, 1464, 227, 1495, 236}], 
         Line[{3498, 1286, 3515, 5821, 4889, 5822, 3533, 5844, 4897, 5843, 
          3551, 5870, 4905, 5871, 3568, 5896, 4914, 5895, 3583, 5919, 4923, 
          5920, 3600, 5949, 4934, 5948, 3619, 5974, 3617, 3639}], 
         Line[{3500, 1287, 3516, 1305, 5824, 3534, 5847, 4898, 5848, 3552, 
          5874, 4908, 5873, 3569, 5898, 4917, 5899, 3584, 5924, 4926, 5923, 
          3601, 5951, 4937, 5952, 3620, 5976, 3621, 3640}], 
         Line[{3502, 4887, 5817, 3518, 4892, 5827, 5828, 3536, 5855, 4900, 
          5853, 3554, 5881, 4910, 5879, 3571, 1409, 5904, 3586, 5929, 4929, 
          5932, 3603, 5959, 4940, 5957, 3623, 5982, 3627, 3642}], 
         Line[{3505, 4888, 5819, 3521, 4894, 5837, 5839, 3539, 5866, 4903, 
          5864, 3557, 5887, 4912, 5892, 3573, 4921, 5913, 5915, 3589, 5944, 
          4932, 5939, 3605, 5966, 4942, 5971, 3625, 5988, 3633, 3644}], 
         Line[{3507, 3514, 5823, 3523, 3532, 5845, 5846, 3542, 5841, 4906, 
          5872, 3560, 5868, 4915, 5897, 3575, 5894, 4925, 5922, 3591, 5917, 
          4935, 5950, 3608, 5975, 4944, 5947, 3629, 5973, 4951, 3646}], 
         Line[{3509, 3519, 5826, 3526, 5852, 4899, 5851, 3545, 5878, 4909, 
          5877, 3562, 5901, 4918, 5903, 3578, 5928, 4927, 5927, 3594, 5954, 
          4938, 5956, 3611, 5978, 4945, 5980, 3631, 5993, 4953, 3649}], 
         Line[{3511, 3524, 5831, 3528, 3543, 5858, 5860, 3547, 1379, 5884, 
          3564, 5909, 4920, 5908, 3580, 3592, 5934, 5936, 3596, 5964, 4941, 
          5963, 3614, 5984, 4947, 5986, 3635, 5995, 4954, 3651}], 
         Line[{3513, 5814, 4896, 3531, 3548, 5832, 5834, 3550, 5861, 4913, 
          5890, 3567, 1421, 5885, 3582, 5910, 4933, 5942, 3599, 1489, 5943, 
          3616, 5970, 4949, 5991, 3638, 5997, 4956, 3653}], 
         Line[{3641, 3626, 5981, 3622, 3606, 5960, 5958, 3602, 5931, 5930, 
          4928, 3585, 1410, 5905, 3570, 3558, 5882, 5880, 3553, 3540, 5856, 
          5854, 3535, 1312, 5829, 3517, 3499, 5816, 3501}], 
         Line[{3643, 3632, 5987, 3624, 3612, 5967, 5965, 3604, 5938, 5937, 
          4931, 3588, 5914, 4922, 5911, 3572, 5891, 4911, 5886, 3556, 5863, 
          5862, 4902, 3538, 5838, 4895, 5835, 3520, 3503, 5818, 3504}], 
         Line[{3645, 4950, 5972, 3628, 5946, 5945, 3618, 3607, 4936, 5918, 
          5916, 3590, 5921, 4924, 5893, 3574, 4916, 5869, 5867, 3559, 4907, 
          5842, 5840, 3541, 1330, 5820, 3522, 4890, 5815, 3506}], 
         Line[{3648, 4952, 5992, 3630, 4946, 5979, 5977, 3610, 4939, 5955, 
          5953, 3593, 5926, 5925, 3587, 3577, 4919, 5902, 5900, 3561, 5876, 
          5875, 3555, 3544, 5850, 5849, 3537, 3525, 4891, 5825, 3508}], 
         Line[{3650, 5994, 3647, 3634, 4948, 5985, 5983, 3613, 5962, 5961, 
          3609, 3595, 5935, 4930, 5933, 3579, 5907, 5906, 3576, 3563, 1380, 
          5883, 3546, 5859, 4901, 5857, 3527, 4893, 5830, 3510}], 
         Line[{3652, 4955, 5996, 3637, 5990, 5989, 3636, 3615, 4943, 5969, 
          5968, 3598, 5941, 5940, 3597, 3581, 1422, 5912, 3566, 5889, 5888, 
          3565, 3549, 5833, 4904, 5865, 3530, 5836, 3529, 3512}], 
         Line[{245, 1526, 254, 1539, 1540, 263, 1565, 1566, 272, 1599, 1600, 
          281, 1633, 1634, 290, 1667, 1668, 299, 1701, 1702, 308, 1733, 317}], 
         Line[{3654, 1524, 3671, 6005, 4959, 6006, 3689, 6028, 4967, 6027, 
          3707, 6054, 4975, 6055, 3724, 6080, 4984, 6079, 3739, 6103, 4993, 
          6104, 3756, 6133, 5004, 6132, 3775, 6158, 3773, 3795}], 
         Line[{3656, 1525, 3672, 1543, 6008, 3690, 6031, 4968, 6032, 3708, 
          6058, 4978, 6057, 3725, 6082, 4987, 6083, 3740, 6108, 4996, 6107, 
          3757, 6135, 5007, 6136, 3776, 6160, 3777, 3796}], 
         Line[{3658, 4957, 6001, 3674, 4962, 6011, 6012, 3692, 6039, 4970, 
          6037, 3710, 6065, 4980, 6063, 3727, 1647, 6088, 3742, 6113, 4999, 
          6116, 3759, 6143, 5010, 6141, 3779, 6166, 3783, 3798}], 
         Line[{3661, 4958, 6003, 3677, 4964, 6021, 6023, 3695, 6050, 4973, 
          6048, 3713, 6071, 4982, 6076, 3729, 4991, 6097, 6099, 3745, 6128, 
          5002, 6123, 3761, 6150, 5012, 6155, 3781, 6172, 3789, 3800}], 
         Line[{3663, 3670, 6007, 3679, 3688, 6029, 6030, 3698, 6025, 4976, 
          6056, 3716, 6052, 4985, 6081, 3731, 6078, 4995, 6106, 3747, 6101, 
          5005, 6134, 3764, 6159, 5014, 6131, 3785, 6157, 5021, 3802}], 
         Line[{3665, 3675, 6010, 3682, 6036, 4969, 6035, 3701, 6062, 4979, 
          6061, 3718, 6085, 4988, 6087, 3734, 6112, 4997, 6111, 3750, 6138, 
          5008, 6140, 3767, 6162, 5015, 6164, 3787, 6177, 5023, 3805}], 
         Line[{3667, 3680, 6015, 3684, 3699, 6042, 6044, 3703, 1617, 6068, 
          3720, 6093, 4990, 6092, 3736, 3748, 6118, 6120, 3752, 6148, 5011, 
          6147, 3770, 6168, 5017, 6170, 3791, 6179, 5024, 3807}], 
         Line[{3669, 5998, 4966, 3687, 3704, 6016, 6018, 3706, 6045, 4983, 
          6074, 3723, 1659, 6069, 3738, 6094, 5003, 6126, 3755, 1727, 6127, 
          3772, 6154, 5019, 6175, 3794, 6181, 5026, 3809}], 
         Line[{3797, 3782, 6165, 3778, 3762, 6144, 6142, 3758, 6115, 6114, 
          4998, 3741, 1648, 6089, 3726, 3714, 6066, 6064, 3709, 3696, 6040, 
          6038, 3691, 1550, 6013, 3673, 3655, 6000, 3657}], 
         Line[{3799, 3788, 6171, 3780, 3768, 6151, 6149, 3760, 6122, 6121, 
          5001, 3744, 6098, 4992, 6095, 3728, 6075, 4981, 6070, 3712, 6047, 
          6046, 4972, 3694, 6022, 4965, 6019, 3676, 3659, 6002, 3660}], 
         Line[{3801, 5020, 6156, 3784, 6130, 6129, 3774, 3763, 5006, 6102, 
          6100, 3746, 6105, 4994, 6077, 3730, 4986, 6053, 6051, 3715, 4977, 
          6026, 6024, 3697, 1568, 6004, 3678, 4960, 5999, 3662}], 
         Line[{3804, 5022, 6176, 3786, 5016, 6163, 6161, 3766, 5009, 6139, 
          6137, 3749, 6110, 6109, 3743, 3733, 4989, 6086, 6084, 3717, 6060, 
          6059, 3711, 3700, 6034, 6033, 3693, 3681, 4961, 6009, 3664}], 
         Line[{3806, 6178, 3803, 3790, 5018, 6169, 6167, 3769, 6146, 6145, 
          3765, 3751, 6119, 5000, 6117, 3735, 6091, 6090, 3732, 3719, 1618, 
          6067, 3702, 6043, 4971, 6041, 3683, 4963, 6014, 3666}], 
         Line[{3808, 5025, 6180, 3793, 6174, 6173, 3792, 3771, 5013, 6153, 
          6152, 3754, 6125, 6124, 3753, 3737, 1660, 6096, 3722, 6073, 6072, 
          3721, 3705, 6017, 4974, 6049, 3686, 6020, 3685, 3668}], 
         Line[{326, 1764, 335, 1777, 1778, 344, 1803, 1804, 353, 1837, 1838, 
          362, 1871, 1872, 371, 1905, 1906, 380, 1939, 1940, 389, 1971, 398}], 
         Line[{3810, 1762, 3827, 6189, 5029, 6190, 3845, 6212, 5037, 6211, 
          3863, 6238, 5045, 6239, 3880, 6264, 5054, 6263, 3895, 6287, 5063, 
          6288, 3912, 6317, 5074, 6316, 3931, 6342, 3929, 3951}], 
         Line[{3812, 1763, 3828, 1781, 6192, 3846, 6215, 5038, 6216, 3864, 
          6242, 5048, 6241, 3881, 6266, 5057, 6267, 3896, 6292, 5066, 6291, 
          3913, 6319, 5077, 6320, 3932, 6344, 3933, 3952}], 
         Line[{3814, 5027, 6185, 3830, 5032, 6195, 6196, 3848, 6223, 5040, 
          6221, 3866, 6249, 5050, 6247, 3883, 1885, 6272, 3898, 6297, 5069, 
          6300, 3915, 6327, 5080, 6325, 3935, 6350, 3939, 3954}], 
         Line[{3817, 5028, 6187, 3833, 5034, 6205, 6207, 3851, 6234, 5043, 
          6232, 3869, 6255, 5052, 6260, 3885, 5061, 6281, 6283, 3901, 6312, 
          5072, 6307, 3917, 6334, 5082, 6339, 3937, 6356, 3945, 3956}], 
         Line[{3819, 3826, 6191, 3835, 3844, 6213, 6214, 3854, 6209, 5046, 
          6240, 3872, 6236, 5055, 6265, 3887, 6262, 5065, 6290, 3903, 6285, 
          5075, 6318, 3920, 6343, 5084, 6315, 3941, 6341, 5091, 3958}], 
         Line[{3821, 3831, 6194, 3838, 6220, 5039, 6219, 3857, 6246, 5049, 
          6245, 3874, 6269, 5058, 6271, 3890, 6296, 5067, 6295, 3906, 6322, 
          5078, 6324, 3923, 6346, 5085, 6348, 3943, 6361, 5093, 3961}], 
         Line[{3823, 3836, 6199, 3840, 3855, 6226, 6228, 3859, 1855, 6252, 
          3876, 6277, 5060, 6276, 3892, 3904, 6302, 6304, 3908, 6332, 5081, 
          6331, 3926, 6352, 5087, 6354, 3947, 6363, 5094, 3963}], 
         Line[{3825, 6182, 5036, 3843, 3860, 6200, 6202, 3862, 6229, 5053, 
          6258, 3879, 1897, 6253, 3894, 6278, 5073, 6310, 3911, 1965, 6311, 
          3928, 6338, 5089, 6359, 3950, 6365, 5096, 3965}], 
         Line[{3953, 3938, 6349, 3934, 3918, 6328, 6326, 3914, 6299, 6298, 
          5068, 3897, 1886, 6273, 3882, 3870, 6250, 6248, 3865, 3852, 6224, 
          6222, 3847, 1788, 6197, 3829, 3811, 6184, 3813}], 
         Line[{3955, 3944, 6355, 3936, 3924, 6335, 6333, 3916, 6306, 6305, 
          5071, 3900, 6282, 5062, 6279, 3884, 6259, 5051, 6254, 3868, 6231, 
          6230, 5042, 3850, 6206, 5035, 6203, 3832, 3815, 6186, 3816}], 
         Line[{3957, 5090, 6340, 3940, 6314, 6313, 3930, 3919, 5076, 6286, 
          6284, 3902, 6289, 5064, 6261, 3886, 5056, 6237, 6235, 3871, 5047, 
          6210, 6208, 3853, 1806, 6188, 3834, 5030, 6183, 3818}], 
         Line[{3960, 5092, 6360, 3942, 5086, 6347, 6345, 3922, 5079, 6323, 
          6321, 3905, 6294, 6293, 3899, 3889, 5059, 6270, 6268, 3873, 6244, 
          6243, 3867, 3856, 6218, 6217, 3849, 3837, 5031, 6193, 3820}], 
         Line[{3962, 6362, 3959, 3946, 5088, 6353, 6351, 3925, 6330, 6329, 
          3921, 3907, 6303, 5070, 6301, 3891, 6275, 6274, 3888, 3875, 1856, 
          6251, 3858, 6227, 5041, 6225, 3839, 5033, 6198, 3822}], 
         Line[{3964, 5095, 6364, 3949, 6358, 6357, 3948, 3927, 5083, 6337, 
          6336, 3910, 6309, 6308, 3909, 3893, 1898, 6280, 3878, 6257, 6256, 
          3877, 3861, 6201, 5044, 6233, 3842, 6204, 3841, 3824}], 
         Line[{407, 2002, 416, 2015, 2016, 425, 2041, 2042, 434, 2075, 2076, 
          443, 2109, 2110, 452, 2143, 2144, 461, 2177, 2178, 470, 2209, 479}], 
         Line[{3966, 2000, 3983, 6373, 5099, 6374, 4001, 6396, 5107, 6395, 
          4019, 6422, 5115, 6423, 4036, 6448, 5124, 6447, 4051, 6471, 5133, 
          6472, 4068, 6501, 5144, 6500, 4087, 6526, 4085, 4107}], 
         Line[{3968, 2001, 3984, 2019, 6376, 4002, 6399, 5108, 6400, 4020, 
          6426, 5118, 6425, 4037, 6450, 5127, 6451, 4052, 6476, 5136, 6475, 
          4069, 6503, 5147, 6504, 4088, 6528, 4089, 4108}], 
         Line[{3970, 5097, 6369, 3986, 5102, 6379, 6380, 4004, 6407, 5110, 
          6405, 4022, 6433, 5120, 6431, 4039, 2123, 6456, 4054, 6481, 5139, 
          6484, 4071, 6511, 5150, 6509, 4091, 6534, 4095, 4110}], 
         Line[{3973, 5098, 6371, 3989, 5104, 6389, 6391, 4007, 6418, 5113, 
          6416, 4025, 6439, 5122, 6444, 4041, 5131, 6465, 6467, 4057, 6496, 
          5142, 6491, 4073, 6518, 5152, 6523, 4093, 6540, 4101, 4112}], 
         Line[{3975, 3982, 6375, 3991, 4000, 6397, 6398, 4010, 6393, 5116, 
          6424, 4028, 6420, 5125, 6449, 4043, 6446, 5135, 6474, 4059, 6469, 
          5145, 6502, 4076, 6527, 5154, 6499, 4097, 6525, 5161, 4114}], 
         Line[{3977, 3987, 6378, 3994, 6404, 5109, 6403, 4013, 6430, 5119, 
          6429, 4030, 6453, 5128, 6455, 4046, 6480, 5137, 6479, 4062, 6506, 
          5148, 6508, 4079, 6530, 5155, 6532, 4099, 6545, 5163, 4117}], 
         Line[{3979, 3992, 6383, 3996, 4011, 6410, 6412, 4015, 2093, 6436, 
          4032, 6461, 5130, 6460, 4048, 4060, 6486, 6488, 4064, 6516, 5151, 
          6515, 4082, 6536, 5157, 6538, 4103, 6547, 5164, 4119}], 
         Line[{3981, 6366, 5106, 3999, 4016, 6384, 6386, 4018, 6413, 5123, 
          6442, 4035, 2135, 6437, 4050, 6462, 5143, 6494, 4067, 2203, 6495, 
          4084, 6522, 5159, 6543, 4106, 6549, 5166, 4121}], 
         Line[{4109, 4094, 6533, 4090, 4074, 6512, 6510, 4070, 6483, 6482, 
          5138, 4053, 2124, 6457, 4038, 4026, 6434, 6432, 4021, 4008, 6408, 
          6406, 4003, 2026, 6381, 3985, 3967, 6368, 3969}], 
         Line[{4111, 4100, 6539, 4092, 4080, 6519, 6517, 4072, 6490, 6489, 
          5141, 4056, 6466, 5132, 6463, 4040, 6443, 5121, 6438, 4024, 6415, 
          6414, 5112, 4006, 6390, 5105, 6387, 3988, 3971, 6370, 3972}], 
         Line[{4113, 5160, 6524, 4096, 6498, 6497, 4086, 4075, 5146, 6470, 
          6468, 4058, 6473, 5134, 6445, 4042, 5126, 6421, 6419, 4027, 5117, 
          6394, 6392, 4009, 2044, 6372, 3990, 5100, 6367, 3974}], 
         Line[{4116, 5162, 6544, 4098, 5156, 6531, 6529, 4078, 5149, 6507, 
          6505, 4061, 6478, 6477, 4055, 4045, 5129, 6454, 6452, 4029, 6428, 
          6427, 4023, 4012, 6402, 6401, 4005, 3993, 5101, 6377, 3976}], 
         Line[{4118, 6546, 4115, 4102, 5158, 6537, 6535, 4081, 6514, 6513, 
          4077, 4063, 6487, 5140, 6485, 4047, 6459, 6458, 4044, 4031, 2094, 
          6435, 4014, 6411, 5111, 6409, 3995, 5103, 6382, 3978}], 
         Line[{4120, 5165, 6548, 4105, 6542, 6541, 4104, 4083, 5153, 6521, 
          6520, 4066, 6493, 6492, 4065, 4049, 2136, 6464, 4034, 6441, 6440, 
          4033, 4017, 6385, 5114, 6417, 3998, 6388, 3997, 3980}], 
         Line[{488, 2240, 497, 2253, 2254, 506, 2279, 2280, 515, 2313, 2314, 
          524, 2347, 2348, 533, 2381, 2382, 542, 2415, 2416, 551, 2447, 560}], 
         Line[{4122, 2238, 4139, 6557, 5169, 6558, 4157, 6580, 5177, 6579, 
          4175, 6606, 5185, 6607, 4192, 6632, 5194, 6631, 4207, 6655, 5203, 
          6656, 4224, 6685, 5214, 6684, 4243, 6710, 4241, 4263}], 
         Line[{4124, 2239, 4140, 2257, 6560, 4158, 6583, 5178, 6584, 4176, 
          6610, 5188, 6609, 4193, 6634, 5197, 6635, 4208, 6660, 5206, 6659, 
          4225, 6687, 5217, 6688, 4244, 6712, 4245, 4264}], 
         Line[{4126, 5167, 6553, 4142, 5172, 6563, 6564, 4160, 6591, 5180, 
          6589, 4178, 6617, 5190, 6615, 4195, 2361, 6640, 4210, 6665, 5209, 
          6668, 4227, 6695, 5220, 6693, 4247, 6718, 4251, 4266}], 
         Line[{4129, 5168, 6555, 4145, 5174, 6573, 6575, 4163, 6602, 5183, 
          6600, 4181, 6623, 5192, 6628, 4197, 5201, 6649, 6651, 4213, 6680, 
          5212, 6675, 4229, 6702, 5222, 6707, 4249, 6724, 4257, 4268}], 
         Line[{4131, 4138, 6559, 4147, 4156, 6581, 6582, 4166, 6577, 5186, 
          6608, 4184, 6604, 5195, 6633, 4199, 6630, 5205, 6658, 4215, 6653, 
          5215, 6686, 4232, 6711, 5224, 6683, 4253, 6709, 5231, 4270}], 
         Line[{4133, 4143, 6562, 4150, 6588, 5179, 6587, 4169, 6614, 5189, 
          6613, 4186, 6637, 5198, 6639, 4202, 6664, 5207, 6663, 4218, 6690, 
          5218, 6692, 4235, 6714, 5225, 6716, 4255, 6729, 5233, 4273}], 
         Line[{4135, 4148, 6567, 4152, 4167, 6594, 6596, 4171, 2331, 6620, 
          4188, 6645, 5200, 6644, 4204, 4216, 6670, 6672, 4220, 6700, 5221, 
          6699, 4238, 6720, 5227, 6722, 4259, 6731, 5234, 4275}], 
         Line[{4137, 6550, 5176, 4155, 4172, 6568, 6570, 4174, 6597, 5193, 
          6626, 4191, 2373, 6621, 4206, 6646, 5213, 6678, 4223, 2441, 6679, 
          4240, 6706, 5229, 6727, 4262, 6733, 5236, 4277}], 
         Line[{4265, 4250, 6717, 4246, 4230, 6696, 6694, 4226, 6667, 6666, 
          5208, 4209, 2362, 6641, 4194, 4182, 6618, 6616, 4177, 4164, 6592, 
          6590, 4159, 2264, 6565, 4141, 4123, 6552, 4125}], 
         Line[{4267, 4256, 6723, 4248, 4236, 6703, 6701, 4228, 6674, 6673, 
          5211, 4212, 6650, 5202, 6647, 4196, 6627, 5191, 6622, 4180, 6599, 
          6598, 5182, 4162, 6574, 5175, 6571, 4144, 4127, 6554, 4128}], 
         Line[{4269, 5230, 6708, 4252, 6682, 6681, 4242, 4231, 5216, 6654, 
          6652, 4214, 6657, 5204, 6629, 4198, 5196, 6605, 6603, 4183, 5187, 
          6578, 6576, 4165, 2282, 6556, 4146, 5170, 6551, 4130}], 
         Line[{4272, 5232, 6728, 4254, 5226, 6715, 6713, 4234, 5219, 6691, 
          6689, 4217, 6662, 6661, 4211, 4201, 5199, 6638, 6636, 4185, 6612, 
          6611, 4179, 4168, 6586, 6585, 4161, 4149, 5171, 6561, 4132}], 
         Line[{4274, 6730, 4271, 4258, 5228, 6721, 6719, 4237, 6698, 6697, 
          4233, 4219, 6671, 5210, 6669, 4203, 6643, 6642, 4200, 4187, 2332, 
          6619, 4170, 6595, 5181, 6593, 4151, 5173, 6566, 4134}], 
         Line[{4276, 5235, 6732, 4261, 6726, 6725, 4260, 4239, 5223, 6705, 
          6704, 4222, 6677, 6676, 4221, 4205, 2374, 6648, 4190, 6625, 6624, 
          4189, 4173, 6569, 5184, 6601, 4154, 6572, 4153, 4136}], 
         Line[{569, 2478, 578, 2491, 2492, 587, 2517, 2518, 596, 2551, 2552, 
          605, 2585, 2586, 614, 2619, 2620, 623, 2653, 2654, 632, 2685, 641}], 
         Line[{4278, 2476, 4295, 6741, 5239, 6742, 4313, 6764, 5247, 6763, 
          4331, 6790, 5255, 6791, 4348, 6816, 5264, 6815, 4363, 6839, 5273, 
          6840, 4380, 6869, 5284, 6868, 4399, 6894, 4397, 4419}], 
         Line[{4280, 2477, 4296, 2495, 6744, 4314, 6767, 5248, 6768, 4332, 
          6794, 5258, 6793, 4349, 6818, 5267, 6819, 4364, 6844, 5276, 6843, 
          4381, 6871, 5287, 6872, 4400, 6896, 4401, 4420}], 
         Line[{4282, 5237, 6737, 4298, 5242, 6747, 6748, 4316, 6775, 5250, 
          6773, 4334, 6801, 5260, 6799, 4351, 2599, 6824, 4366, 6849, 5279, 
          6852, 4383, 6879, 5290, 6877, 4403, 6902, 4407, 4422}], 
         Line[{4285, 5238, 6739, 4301, 5244, 6757, 6759, 4319, 6786, 5253, 
          6784, 4337, 6807, 5262, 6812, 4353, 5271, 6833, 6835, 4369, 6864, 
          5282, 6859, 4385, 6886, 5292, 6891, 4405, 6908, 4413, 4424}], 
         Line[{4287, 4294, 6743, 4303, 4312, 6765, 6766, 4322, 6761, 5256, 
          6792, 4340, 6788, 5265, 6817, 4355, 6814, 5275, 6842, 4371, 6837, 
          5285, 6870, 4388, 6895, 5294, 6867, 4409, 6893, 5301, 4426}], 
         Line[{4289, 4299, 6746, 4306, 6772, 5249, 6771, 4325, 6798, 5259, 
          6797, 4342, 6821, 5268, 6823, 4358, 6848, 5277, 6847, 4374, 6874, 
          5288, 6876, 4391, 6898, 5295, 6900, 4411, 6913, 5303, 4429}], 
         Line[{4291, 4304, 6751, 4308, 4323, 6778, 6780, 4327, 2569, 6804, 
          4344, 6829, 5270, 6828, 4360, 4372, 6854, 6856, 4376, 6884, 5291, 
          6883, 4394, 6904, 5297, 6906, 4415, 6915, 5304, 4431}], 
         Line[{4293, 6734, 5246, 4311, 4328, 6752, 6754, 4330, 6781, 5263, 
          6810, 4347, 2611, 6805, 4362, 6830, 5283, 6862, 4379, 2679, 6863, 
          4396, 6890, 5299, 6911, 4418, 6917, 5306, 4433}], 
         Line[{4421, 4406, 6901, 4402, 4386, 6880, 6878, 4382, 6851, 6850, 
          5278, 4365, 2600, 6825, 4350, 4338, 6802, 6800, 4333, 4320, 6776, 
          6774, 4315, 2502, 6749, 4297, 4279, 6736, 4281}], 
         Line[{4423, 4412, 6907, 4404, 4392, 6887, 6885, 4384, 6858, 6857, 
          5281, 4368, 6834, 5272, 6831, 4352, 6811, 5261, 6806, 4336, 6783, 
          6782, 5252, 4318, 6758, 5245, 6755, 4300, 4283, 6738, 4284}], 
         Line[{4425, 5300, 6892, 4408, 6866, 6865, 4398, 4387, 5286, 6838, 
          6836, 4370, 6841, 5274, 6813, 4354, 5266, 6789, 6787, 4339, 5257, 
          6762, 6760, 4321, 2520, 6740, 4302, 5240, 6735, 4286}], 
         Line[{4428, 5302, 6912, 4410, 5296, 6899, 6897, 4390, 5289, 6875, 
          6873, 4373, 6846, 6845, 4367, 4357, 5269, 6822, 6820, 4341, 6796, 
          6795, 4335, 4324, 6770, 6769, 4317, 4305, 5241, 6745, 4288}], 
         Line[{4430, 6914, 4427, 4414, 5298, 6905, 6903, 4393, 6882, 6881, 
          4389, 4375, 6855, 5280, 6853, 4359, 6827, 6826, 4356, 4343, 2570, 
          6803, 4326, 6779, 5251, 6777, 4307, 5243, 6750, 4290}], 
         Line[{4432, 5305, 6916, 4417, 6910, 6909, 4416, 4395, 5293, 6889, 
          6888, 4378, 6861, 6860, 4377, 4361, 2612, 6832, 4346, 6809, 6808, 
          4345, 4329, 6753, 5254, 6785, 4310, 6756, 4309, 4292}], 
         Line[{650, 2716, 659, 2729, 2730, 668, 2755, 2756, 677, 2789, 2790, 
          686, 2823, 2824, 695, 2857, 2858, 704, 2891, 2892, 713, 2923, 722}], 
         Line[{4434, 2714, 4451, 6925, 5309, 6926, 4469, 6948, 5317, 6947, 
          4487, 6974, 5325, 6975, 4504, 7000, 5334, 6999, 4519, 7023, 5343, 
          7024, 4536, 7053, 5354, 7052, 4555, 7078, 4553, 4575}], 
         Line[{4436, 2715, 4452, 2733, 6928, 4470, 6951, 5318, 6952, 4488, 
          6978, 5328, 6977, 4505, 7002, 5337, 7003, 4520, 7028, 5346, 7027, 
          4537, 7055, 5357, 7056, 4556, 7080, 4557, 4576}], 
         Line[{4438, 5307, 6921, 4454, 5312, 6931, 6932, 4472, 6959, 5320, 
          6957, 4490, 6985, 5330, 6983, 4507, 2837, 7008, 4522, 7033, 5349, 
          7036, 4539, 7063, 5360, 7061, 4559, 7086, 4563, 4578}], 
         Line[{4441, 5308, 6923, 4457, 5314, 6941, 6943, 4475, 6970, 5323, 
          6968, 4493, 6991, 5332, 6996, 4509, 5341, 7017, 7019, 4525, 7048, 
          5352, 7043, 4541, 7070, 5362, 7075, 4561, 7092, 4569, 4580}], 
         Line[{4443, 4450, 6927, 4459, 4468, 6949, 6950, 4478, 6945, 5326, 
          6976, 4496, 6972, 5335, 7001, 4511, 6998, 5345, 7026, 4527, 7021, 
          5355, 7054, 4544, 7079, 5364, 7051, 4565, 7077, 5371, 4582}], 
         Line[{4445, 4455, 6930, 4462, 6956, 5319, 6955, 4481, 6982, 5329, 
          6981, 4498, 7005, 5338, 7007, 4514, 7032, 5347, 7031, 4530, 7058, 
          5358, 7060, 4547, 7082, 5365, 7084, 4567, 7097, 5373, 4585}], 
         Line[{4447, 4460, 6935, 4464, 4479, 6962, 6964, 4483, 2807, 6988, 
          4500, 7013, 5340, 7012, 4516, 4528, 7038, 7040, 4532, 7068, 5361, 
          7067, 4550, 7088, 5367, 7090, 4571, 7099, 5374, 4587}], 
         Line[{4449, 6918, 5316, 4467, 4484, 6936, 6938, 4486, 6965, 5333, 
          6994, 4503, 2849, 6989, 4518, 7014, 5353, 7046, 4535, 2917, 7047, 
          4552, 7074, 5369, 7095, 4574, 7101, 5376, 4589}], 
         Line[{4577, 4562, 7085, 4558, 4542, 7064, 7062, 4538, 7035, 7034, 
          5348, 4521, 2838, 7009, 4506, 4494, 6986, 6984, 4489, 4476, 6960, 
          6958, 4471, 2740, 6933, 4453, 4435, 6920, 4437}], 
         Line[{4579, 4568, 7091, 4560, 4548, 7071, 7069, 4540, 7042, 7041, 
          5351, 4524, 7018, 5342, 7015, 4508, 6995, 5331, 6990, 4492, 6967, 
          6966, 5322, 4474, 6942, 5315, 6939, 4456, 4439, 6922, 4440}], 
         Line[{4581, 5370, 7076, 4564, 7050, 7049, 4554, 4543, 5356, 7022, 
          7020, 4526, 7025, 5344, 6997, 4510, 5336, 6973, 6971, 4495, 5327, 
          6946, 6944, 4477, 2758, 6924, 4458, 5310, 6919, 4442}], 
         Line[{4584, 5372, 7096, 4566, 5366, 7083, 7081, 4546, 5359, 7059, 
          7057, 4529, 7030, 7029, 4523, 4513, 5339, 7006, 7004, 4497, 6980, 
          6979, 4491, 4480, 6954, 6953, 4473, 4461, 5311, 6929, 4444}], 
         Line[{4586, 7098, 4583, 4570, 5368, 7089, 7087, 4549, 7066, 7065, 
          4545, 4531, 7039, 5350, 7037, 4515, 7011, 7010, 4512, 4499, 2808, 
          6987, 4482, 6963, 5321, 6961, 4463, 5313, 6934, 4446}], 
         Line[{4588, 5375, 7100, 4573, 7094, 7093, 4572, 4551, 5363, 7073, 
          7072, 4534, 7045, 7044, 4533, 4517, 2850, 7016, 4502, 6993, 6992, 
          4501, 4485, 6937, 5324, 6969, 4466, 6940, 4465, 4448}], 
         Line[{731, 2954, 740, 2967, 2968, 749, 2993, 2994, 758, 3027, 3028, 
          767, 3061, 3062, 775, 3091, 3092, 784, 3125, 3126, 793, 3157, 802}], 
         Line[{4590, 2952, 4607, 7109, 5379, 7110, 4625, 7132, 5387, 7131, 
          4643, 7156, 5395, 7157, 4660, 7184, 5406, 7183, 4676, 7182, 5412, 
          7205, 4693, 7237, 5423, 7236, 4712, 7262, 4710, 4732}], 
         Line[{4592, 2953, 4608, 2971, 7112, 4626, 7135, 5388, 7136, 4644, 
          7160, 5398, 7159, 4661, 7188, 5409, 7189, 4677, 7212, 5415, 7211, 
          4694, 7239, 5426, 7240, 4713, 7264, 4714, 4733}], 
         Line[{4594, 5377, 7105, 4610, 5382, 7115, 7116, 4628, 7143, 5390, 
          7141, 4646, 7167, 5400, 7165, 4663, 3075, 7194, 4679, 7217, 5418, 
          7220, 4696, 7247, 5429, 7245, 4716, 7270, 4720, 4735}], 
         Line[{4597, 5378, 7107, 4613, 5384, 7125, 7127, 4631, 7154, 5393, 
          7152, 4649, 7173, 5402, 7179, 4666, 7206, 5411, 7201, 4682, 7232, 
          5421, 7227, 4698, 7254, 5431, 7259, 4718, 7276, 4726, 4737}], 
         Line[{4599, 4606, 7111, 4615, 4624, 7133, 7134, 4634, 7129, 5396, 
          7158, 4652, 7155, 5404, 7181, 4668, 7208, 5414, 7210, 4684, 7203, 
          5424, 7238, 4701, 7263, 5433, 7235, 4722, 7261, 5440, 4739}], 
         Line[{4601, 4611, 7114, 4618, 7140, 5389, 7139, 4637, 7164, 5399, 
          7163, 4654, 7186, 5407, 7190, 4670, 7216, 5416, 7215, 4687, 7242, 
          5427, 7244, 4704, 7266, 5434, 7268, 4724, 7281, 5442, 4742}], 
         Line[{4603, 4616, 7119, 4620, 4635, 7146, 7148, 4639, 3045, 7170, 
          4656, 7196, 5410, 7193, 4672, 4685, 7222, 7224, 4689, 7252, 5430, 
          7251, 4707, 7272, 5436, 7274, 4728, 7283, 5443, 4744}], 
         Line[{4605, 7102, 5386, 4623, 4640, 7120, 7122, 4642, 7149, 5405, 
          7176, 4659, 3081, 7171, 4675, 7198, 5422, 7230, 4692, 3151, 7231, 
          4709, 7258, 5438, 7279, 4731, 7285, 5445, 4746}], 
         Line[{4734, 4719, 7269, 4715, 4699, 7248, 7246, 4695, 7219, 7218, 
          5417, 4678, 3076, 7195, 4662, 4650, 7168, 7166, 4645, 4632, 7144, 
          7142, 4627, 2978, 7117, 4609, 4591, 7104, 4593}], 
         Line[{4736, 4725, 7275, 4717, 4705, 7255, 7253, 4697, 7226, 7225, 
          5420, 4681, 7200, 7199, 4673, 4665, 7178, 5401, 7172, 4648, 7151, 
          7150, 5392, 4630, 7126, 5385, 7123, 4612, 4595, 7106, 4596}], 
         Line[{4738, 5439, 7260, 4721, 7234, 7233, 4711, 4700, 5425, 7204, 
          7202, 4683, 7209, 5413, 7207, 4667, 7180, 7177, 5403, 4651, 5397, 
          7130, 7128, 4633, 2996, 7108, 4614, 5380, 7103, 4598}], 
         Line[{4741, 5441, 7280, 4723, 5435, 7267, 7265, 4703, 5428, 7243, 
          7241, 4686, 7214, 7213, 4680, 4669, 5408, 7187, 7185, 4653, 7162, 
          7161, 4647, 4636, 7138, 7137, 4629, 4617, 5381, 7113, 4600}], 
         Line[{4743, 7282, 4740, 4727, 5437, 7273, 7271, 4706, 7250, 7249, 
          4702, 4688, 7223, 5419, 7221, 4671, 7192, 7191, 4664, 4655, 3046, 
          7169, 4638, 7147, 5391, 7145, 4619, 5383, 7118, 4602}], 
         Line[{4745, 5444, 7284, 4730, 7278, 7277, 4729, 4708, 5432, 7257, 
          7256, 4691, 7229, 7228, 4690, 4674, 3082, 7197, 4658, 7175, 7174, 
          4657, 4641, 7121, 5394, 7153, 4622, 7124, 4621, 4604}]}, {
         Line[{814, 5575, 1014, 5601, 1008, 1006, 5595, 5594, 1000, 5588, 998,
           5587, 992, 5582, 990, 5550, 978, 976, 5571, 5570, 970, 968, 5564, 
          5563, 962, 5555, 960, 954, 950, 5552, 986}], 
         Line[{821, 980, 5574, 5573, 974, 5568, 5567, 972, 966, 964, 5559, 
          5558, 958, 5554, 5553, 956, 944, 5547, 5546, 942, 936, 5536, 934, 
          928, 926, 5531, 920, 5527, 916, 952}], 
         Line[{824, 810, 812, 811, 815, 5448, 816, 5449, 817, 5450, 818, 5451,
           819, 5447, 827, 5455, 828, 5457, 833, 5458, 834, 5462, 839, 5463, 
          840, 5468, 845, 5446, 846}], 
         Line[{18, 3219, 3218, 17, 3216, 3215, 16, 3214, 3213, 15, 3211, 3210,
           14, 3209, 3208, 13, 3206, 3205, 12, 3204, 11, 3203, 10}], 
         Line[{849, 822, 5453, 825, 829, 831, 5461, 835, 5459, 837, 5467, 841,
           5469, 843, 5452, 853, 5477, 855, 5481, 861, 5484, 863, 5489, 869, 
          5490, 871, 5497, 877, 5464, 879}], 
         Line[{880, 5466, 5465, 878, 872, 5492, 5491, 870, 864, 862, 5483, 
          5482, 856, 5478, 854, 844, 5471, 5470, 842, 838, 5460, 836, 832, 
          5456, 830, 826, 823, 5454, 850}], 
         Line[{883, 5476, 847, 851, 857, 5479, 859, 5486, 5487, 865, 867, 
          5494, 873, 5498, 875, 5472, 5473, 887, 889, 5507, 895, 5510, 897, 
          5515, 903, 905, 5520, 911, 5493, 913}], 
         Line[{914, 912, 5522, 5521, 906, 5516, 904, 898, 896, 5509, 5508, 
          890, 5504, 888, 5474, 876, 874, 5496, 5495, 868, 5485, 866, 5488, 
          860, 858, 5480, 852, 5475, 848, 884}], 
         Line[{917, 881, 5502, 885, 5506, 891, 893, 5512, 5513, 899, 901, 
          5518, 5519, 907, 909, 5499, 5500, 921, 923, 5532, 5533, 929, 931, 
          5538, 937, 5541, 939, 5544, 945, 947}], 
         Line[{948, 5517, 946, 940, 938, 5540, 5539, 932, 5535, 930, 5534, 
          924, 5529, 922, 5501, 910, 5524, 5523, 908, 902, 5511, 900, 5514, 
          894, 5505, 892, 886, 882, 5503, 918}], 
         Line[{951, 5528, 915, 919, 925, 5530, 927, 5537, 933, 935, 5543, 941,
           5545, 943, 5525, 5526, 955, 957, 5557, 963, 5560, 965, 5565, 971, 
          5566, 973, 5572, 979, 5542, 820}], 
         Line[{982, 1039, 5623, 5622, 1035, 5618, 1033, 5617, 1029, 5612, 
          1027, 5611, 1023, 1021, 5579, 5578, 1012, 5603, 1010, 5599, 1004, 
          5589, 1002, 5592, 996, 994, 5584, 988, 5580, 984, 1018}], 
         Line[{985, 949, 5551, 953, 5556, 959, 961, 5562, 967, 5561, 969, 
          5569, 975, 5576, 977, 5548, 5549, 989, 991, 5585, 5586, 997, 999, 
          5593, 1005, 5596, 1007, 5600, 1013, 813}], 
         Line[{1015, 1047, 5629, 5628, 1046, 5627, 1045, 5626, 1044, 1043, 
          5625, 5624, 1042, 1041, 5605, 5604, 1037, 1036, 5620, 5619, 1031, 
          1030, 5614, 5613, 1025, 1024, 5608, 1019, 5606, 1016, 1040}], 
         Line[{1017, 5581, 983, 987, 993, 5583, 995, 5590, 5591, 1001, 1003, 
          5597, 5598, 1009, 1011, 5577, 1020, 5607, 1022, 5609, 5610, 1026, 
          1028, 5615, 5616, 1032, 1034, 5621, 1038, 5602, 981}], 
         Line[{1052, 5759, 1252, 5785, 1246, 1244, 5779, 5778, 1238, 5772, 
          1236, 5771, 1230, 5766, 1228, 5734, 1216, 1214, 5755, 5754, 1208, 
          1206, 5748, 5747, 1200, 5739, 1198, 1192, 1188, 5736, 1224}], 
         Line[{1059, 1218, 5758, 5757, 1212, 5752, 5751, 1210, 1204, 1202, 
          5743, 5742, 1196, 5738, 5737, 1194, 1182, 5731, 5730, 1180, 1174, 
          5720, 1172, 1166, 1164, 5715, 1158, 5711, 1154, 1190}], 
         Line[{1062, 1048, 1050, 1049, 1053, 5632, 1054, 5633, 1055, 5634, 
          1056, 5635, 1057, 5631, 1065, 5639, 1066, 5641, 1071, 5642, 1072, 
          5646, 1077, 5647, 1078, 5652, 1083, 5630, 1084}], 
         Line[{99, 3375, 3374, 98, 3372, 3371, 97, 3370, 3369, 96, 3367, 3366,
           95, 3365, 3364, 94, 3362, 3361, 93, 3360, 92, 3359, 91}], 
         Line[{1087, 1060, 5637, 1063, 1067, 1069, 5645, 1073, 5643, 1075, 
          5651, 1079, 5653, 1081, 5636, 1091, 5661, 1093, 5665, 1099, 5668, 
          1101, 5673, 1107, 5674, 1109, 5681, 1115, 5648, 1117}], 
         Line[{1118, 5650, 5649, 1116, 1110, 5676, 5675, 1108, 1102, 1100, 
          5667, 5666, 1094, 5662, 1092, 1082, 5655, 5654, 1080, 1076, 5644, 
          1074, 1070, 5640, 1068, 1064, 1061, 5638, 1088}], 
         Line[{1121, 5660, 1085, 1089, 1095, 5663, 1097, 5670, 5671, 1103, 
          1105, 5678, 1111, 5682, 1113, 5656, 5657, 1125, 1127, 5691, 1133, 
          5694, 1135, 5699, 1141, 1143, 5704, 1149, 5677, 1151}], 
         Line[{1152, 1150, 5706, 5705, 1144, 5700, 1142, 1136, 1134, 5693, 
          5692, 1128, 5688, 1126, 5658, 1114, 1112, 5680, 5679, 1106, 5669, 
          1104, 5672, 1098, 1096, 5664, 1090, 5659, 1086, 1122}], 
         Line[{1155, 1119, 5686, 1123, 5690, 1129, 1131, 5696, 5697, 1137, 
          1139, 5702, 5703, 1145, 1147, 5683, 5684, 1159, 1161, 5716, 5717, 
          1167, 1169, 5722, 1175, 5725, 1177, 5728, 1183, 1185}], 
         Line[{1186, 5701, 1184, 1178, 1176, 5724, 5723, 1170, 5719, 1168, 
          5718, 1162, 5713, 1160, 5685, 1148, 5708, 5707, 1146, 1140, 5695, 
          1138, 5698, 1132, 5689, 1130, 1124, 1120, 5687, 1156}], 
         Line[{1189, 5712, 1153, 1157, 1163, 5714, 1165, 5721, 1171, 1173, 
          5727, 1179, 5729, 1181, 5709, 5710, 1193, 1195, 5741, 1201, 5744, 
          1203, 5749, 1209, 5750, 1211, 5756, 1217, 5726, 1058}], 
         Line[{1220, 1277, 5807, 5806, 1273, 5802, 1271, 5801, 1267, 5796, 
          1265, 5795, 1261, 1259, 5763, 5762, 1250, 5787, 1248, 5783, 1242, 
          5773, 1240, 5776, 1234, 1232, 5768, 1226, 5764, 1222, 1256}], 
         Line[{1223, 1187, 5735, 1191, 5740, 1197, 1199, 5746, 1205, 5745, 
          1207, 5753, 1213, 5760, 1215, 5732, 5733, 1227, 1229, 5769, 5770, 
          1235, 1237, 5777, 1243, 5780, 1245, 5784, 1251, 1051}], 
         Line[{1253, 1285, 5813, 5812, 1284, 5811, 1283, 5810, 1282, 1281, 
          5809, 5808, 1280, 1279, 5789, 5788, 1275, 1274, 5804, 5803, 1269, 
          1268, 5798, 5797, 1263, 1262, 5792, 1257, 5790, 1254, 1278}], 
         Line[{1255, 5765, 1221, 1225, 1231, 5767, 1233, 5774, 5775, 1239, 
          1241, 5781, 5782, 1247, 1249, 5761, 1258, 5791, 1260, 5793, 5794, 
          1264, 1266, 5799, 5800, 1270, 1272, 5805, 1276, 5786, 1219}], 
         Line[{1290, 5943, 1490, 5969, 1484, 1482, 5963, 5962, 1476, 5956, 
          1474, 5955, 1468, 5950, 1466, 5918, 1454, 1452, 5939, 5938, 1446, 
          1444, 5932, 5931, 1438, 5923, 1436, 1430, 1426, 5920, 1462}], 
         Line[{1297, 1456, 5942, 5941, 1450, 5936, 5935, 1448, 1442, 1440, 
          5927, 5926, 1434, 5922, 5921, 1432, 1420, 5915, 5914, 1418, 1412, 
          5904, 1410, 1404, 1402, 5899, 1396, 5895, 1392, 1428}], 
         Line[{1300, 1286, 1288, 1287, 1291, 5816, 1292, 5817, 1293, 5818, 
          1294, 5819, 1295, 5815, 1303, 5823, 1304, 5825, 1309, 5826, 1310, 
          5830, 1315, 5831, 1316, 5836, 1321, 5814, 1322}], 
         Line[{180, 3531, 3530, 179, 3528, 3527, 178, 3526, 3525, 177, 3523, 
          3522, 176, 3521, 3520, 175, 3518, 3517, 174, 3516, 173, 3515, 172}], 
         Line[{1325, 1298, 5821, 1301, 1305, 1307, 5829, 1311, 5827, 1313, 
          5835, 1317, 5837, 1319, 5820, 1329, 5845, 1331, 5849, 1337, 5852, 
          1339, 5857, 1345, 5858, 1347, 5865, 1353, 5832, 1355}], 
         Line[{1356, 5834, 5833, 1354, 1348, 5860, 5859, 1346, 1340, 1338, 
          5851, 5850, 1332, 5846, 1330, 1320, 5839, 5838, 1318, 1314, 5828, 
          1312, 1308, 5824, 1306, 1302, 1299, 5822, 1326}], 
         Line[{1359, 5844, 1323, 1327, 1333, 5847, 1335, 5854, 5855, 1341, 
          1343, 5862, 1349, 5866, 1351, 5840, 5841, 1363, 1365, 5875, 1371, 
          5878, 1373, 5883, 1379, 1381, 5888, 1387, 5861, 1389}], 
         Line[{1390, 1388, 5890, 5889, 1382, 5884, 1380, 1374, 1372, 5877, 
          5876, 1366, 5872, 1364, 5842, 1352, 1350, 5864, 5863, 1344, 5853, 
          1342, 5856, 1336, 1334, 5848, 1328, 5843, 1324, 1360}], 
         Line[{1393, 1357, 5870, 1361, 5874, 1367, 1369, 5880, 5881, 1375, 
          1377, 5886, 5887, 1383, 1385, 5867, 5868, 1397, 1399, 5900, 5901, 
          1405, 1407, 5906, 1413, 5909, 1415, 5912, 1421, 1423}], 
         Line[{1424, 5885, 1422, 1416, 1414, 5908, 5907, 1408, 5903, 1406, 
          5902, 1400, 5897, 1398, 5869, 1386, 5892, 5891, 1384, 1378, 5879, 
          1376, 5882, 1370, 5873, 1368, 1362, 1358, 5871, 1394}], 
         Line[{1427, 5896, 1391, 1395, 1401, 5898, 1403, 5905, 1409, 1411, 
          5911, 1417, 5913, 1419, 5893, 5894, 1431, 1433, 5925, 1439, 5928, 
          1441, 5933, 1447, 5934, 1449, 5940, 1455, 5910, 1296}], 
         Line[{1458, 1515, 5991, 5990, 1511, 5986, 1509, 5985, 1505, 5980, 
          1503, 5979, 1499, 1497, 5947, 5946, 1488, 5971, 1486, 5967, 1480, 
          5957, 1478, 5960, 1472, 1470, 5952, 1464, 5948, 1460, 1494}], 
         Line[{1461, 1425, 5919, 1429, 5924, 1435, 1437, 5930, 1443, 5929, 
          1445, 5937, 1451, 5944, 1453, 5916, 5917, 1465, 1467, 5953, 5954, 
          1473, 1475, 5961, 1481, 5964, 1483, 5968, 1489, 1289}], 
         Line[{1491, 1523, 5997, 5996, 1522, 5995, 1521, 5994, 1520, 1519, 
          5993, 5992, 1518, 1517, 5973, 5972, 1513, 1512, 5988, 5987, 1507, 
          1506, 5982, 5981, 1501, 1500, 5976, 1495, 5974, 1492, 1516}], 
         Line[{1493, 5949, 1459, 1463, 1469, 5951, 1471, 5958, 5959, 1477, 
          1479, 5965, 5966, 1485, 1487, 5945, 1496, 5975, 1498, 5977, 5978, 
          1502, 1504, 5983, 5984, 1508, 1510, 5989, 1514, 5970, 1457}], 
         Line[{1528, 6127, 1728, 6153, 1722, 1720, 6147, 6146, 1714, 6140, 
          1712, 6139, 1706, 6134, 1704, 6102, 1692, 1690, 6123, 6122, 1684, 
          1682, 6116, 6115, 1676, 6107, 1674, 1668, 1664, 6104, 1700}], 
         Line[{1535, 1694, 6126, 6125, 1688, 6120, 6119, 1686, 1680, 1678, 
          6111, 6110, 1672, 6106, 6105, 1670, 1658, 6099, 6098, 1656, 1650, 
          6088, 1648, 1642, 1640, 6083, 1634, 6079, 1630, 1666}], 
         Line[{1538, 1524, 1526, 1525, 1529, 6000, 1530, 6001, 1531, 6002, 
          1532, 6003, 1533, 5999, 1541, 6007, 1542, 6009, 1547, 6010, 1548, 
          6014, 1553, 6015, 1554, 6020, 1559, 5998, 1560}], 
         Line[{261, 3687, 3686, 260, 3684, 3683, 259, 3682, 3681, 258, 3679, 
          3678, 257, 3677, 3676, 256, 3674, 3673, 255, 3672, 254, 3671, 253}], 
         Line[{1563, 1536, 6005, 1539, 1543, 1545, 6013, 1549, 6011, 1551, 
          6019, 1555, 6021, 1557, 6004, 1567, 6029, 1569, 6033, 1575, 6036, 
          1577, 6041, 1583, 6042, 1585, 6049, 1591, 6016, 1593}], 
         Line[{1594, 6018, 6017, 1592, 1586, 6044, 6043, 1584, 1578, 1576, 
          6035, 6034, 1570, 6030, 1568, 1558, 6023, 6022, 1556, 1552, 6012, 
          1550, 1546, 6008, 1544, 1540, 1537, 6006, 1564}], 
         Line[{1597, 6028, 1561, 1565, 1571, 6031, 1573, 6038, 6039, 1579, 
          1581, 6046, 1587, 6050, 1589, 6024, 6025, 1601, 1603, 6059, 1609, 
          6062, 1611, 6067, 1617, 1619, 6072, 1625, 6045, 1627}], 
         Line[{1628, 1626, 6074, 6073, 1620, 6068, 1618, 1612, 1610, 6061, 
          6060, 1604, 6056, 1602, 6026, 1590, 1588, 6048, 6047, 1582, 6037, 
          1580, 6040, 1574, 1572, 6032, 1566, 6027, 1562, 1598}], 
         Line[{1631, 1595, 6054, 1599, 6058, 1605, 1607, 6064, 6065, 1613, 
          1615, 6070, 6071, 1621, 1623, 6051, 6052, 1635, 1637, 6084, 6085, 
          1643, 1645, 6090, 1651, 6093, 1653, 6096, 1659, 1661}], 
         Line[{1662, 6069, 1660, 1654, 1652, 6092, 6091, 1646, 6087, 1644, 
          6086, 1638, 6081, 1636, 6053, 1624, 6076, 6075, 1622, 1616, 6063, 
          1614, 6066, 1608, 6057, 1606, 1600, 1596, 6055, 1632}], 
         Line[{1665, 6080, 1629, 1633, 1639, 6082, 1641, 6089, 1647, 1649, 
          6095, 1655, 6097, 1657, 6077, 6078, 1669, 1671, 6109, 1677, 6112, 
          1679, 6117, 1685, 6118, 1687, 6124, 1693, 6094, 1534}], 
         Line[{1696, 1753, 6175, 6174, 1749, 6170, 1747, 6169, 1743, 6164, 
          1741, 6163, 1737, 1735, 6131, 6130, 1726, 6155, 1724, 6151, 1718, 
          6141, 1716, 6144, 1710, 1708, 6136, 1702, 6132, 1698, 1732}], 
         Line[{1699, 1663, 6103, 1667, 6108, 1673, 1675, 6114, 1681, 6113, 
          1683, 6121, 1689, 6128, 1691, 6100, 6101, 1703, 1705, 6137, 6138, 
          1711, 1713, 6145, 1719, 6148, 1721, 6152, 1727, 1527}], 
         Line[{1729, 1761, 6181, 6180, 1760, 6179, 1759, 6178, 1758, 1757, 
          6177, 6176, 1756, 1755, 6157, 6156, 1751, 1750, 6172, 6171, 1745, 
          1744, 6166, 6165, 1739, 1738, 6160, 1733, 6158, 1730, 1754}], 
         Line[{1731, 6133, 1697, 1701, 1707, 6135, 1709, 6142, 6143, 1715, 
          1717, 6149, 6150, 1723, 1725, 6129, 1734, 6159, 1736, 6161, 6162, 
          1740, 1742, 6167, 6168, 1746, 1748, 6173, 1752, 6154, 1695}], 
         Line[{1766, 6311, 1966, 6337, 1960, 1958, 6331, 6330, 1952, 6324, 
          1950, 6323, 1944, 6318, 1942, 6286, 1930, 1928, 6307, 6306, 1922, 
          1920, 6300, 6299, 1914, 6291, 1912, 1906, 1902, 6288, 1938}], 
         Line[{1773, 1932, 6310, 6309, 1926, 6304, 6303, 1924, 1918, 1916, 
          6295, 6294, 1910, 6290, 6289, 1908, 1896, 6283, 6282, 1894, 1888, 
          6272, 1886, 1880, 1878, 6267, 1872, 6263, 1868, 1904}], 
         Line[{1776, 1762, 1764, 1763, 1767, 6184, 1768, 6185, 1769, 6186, 
          1770, 6187, 1771, 6183, 1779, 6191, 1780, 6193, 1785, 6194, 1786, 
          6198, 1791, 6199, 1792, 6204, 1797, 6182, 1798}], 
         Line[{342, 3843, 3842, 341, 3840, 3839, 340, 3838, 3837, 339, 3835, 
          3834, 338, 3833, 3832, 337, 3830, 3829, 336, 3828, 335, 3827, 334}], 
         Line[{1801, 1774, 6189, 1777, 1781, 1783, 6197, 1787, 6195, 1789, 
          6203, 1793, 6205, 1795, 6188, 1805, 6213, 1807, 6217, 1813, 6220, 
          1815, 6225, 1821, 6226, 1823, 6233, 1829, 6200, 1831}], 
         Line[{1832, 6202, 6201, 1830, 1824, 6228, 6227, 1822, 1816, 1814, 
          6219, 6218, 1808, 6214, 1806, 1796, 6207, 6206, 1794, 1790, 6196, 
          1788, 1784, 6192, 1782, 1778, 1775, 6190, 1802}], 
         Line[{1835, 6212, 1799, 1803, 1809, 6215, 1811, 6222, 6223, 1817, 
          1819, 6230, 1825, 6234, 1827, 6208, 6209, 1839, 1841, 6243, 1847, 
          6246, 1849, 6251, 1855, 1857, 6256, 1863, 6229, 1865}], 
         Line[{1866, 1864, 6258, 6257, 1858, 6252, 1856, 1850, 1848, 6245, 
          6244, 1842, 6240, 1840, 6210, 1828, 1826, 6232, 6231, 1820, 6221, 
          1818, 6224, 1812, 1810, 6216, 1804, 6211, 1800, 1836}], 
         Line[{1869, 1833, 6238, 1837, 6242, 1843, 1845, 6248, 6249, 1851, 
          1853, 6254, 6255, 1859, 1861, 6235, 6236, 1873, 1875, 6268, 6269, 
          1881, 1883, 6274, 1889, 6277, 1891, 6280, 1897, 1899}], 
         Line[{1900, 6253, 1898, 1892, 1890, 6276, 6275, 1884, 6271, 1882, 
          6270, 1876, 6265, 1874, 6237, 1862, 6260, 6259, 1860, 1854, 6247, 
          1852, 6250, 1846, 6241, 1844, 1838, 1834, 6239, 1870}], 
         Line[{1903, 6264, 1867, 1871, 1877, 6266, 1879, 6273, 1885, 1887, 
          6279, 1893, 6281, 1895, 6261, 6262, 1907, 1909, 6293, 1915, 6296, 
          1917, 6301, 1923, 6302, 1925, 6308, 1931, 6278, 1772}], 
         Line[{1934, 1991, 6359, 6358, 1987, 6354, 1985, 6353, 1981, 6348, 
          1979, 6347, 1975, 1973, 6315, 6314, 1964, 6339, 1962, 6335, 1956, 
          6325, 1954, 6328, 1948, 1946, 6320, 1940, 6316, 1936, 1970}], 
         Line[{1937, 1901, 6287, 1905, 6292, 1911, 1913, 6298, 1919, 6297, 
          1921, 6305, 1927, 6312, 1929, 6284, 6285, 1941, 1943, 6321, 6322, 
          1949, 1951, 6329, 1957, 6332, 1959, 6336, 1965, 1765}], 
         Line[{1967, 1999, 6365, 6364, 1998, 6363, 1997, 6362, 1996, 1995, 
          6361, 6360, 1994, 1993, 6341, 6340, 1989, 1988, 6356, 6355, 1983, 
          1982, 6350, 6349, 1977, 1976, 6344, 1971, 6342, 1968, 1992}], 
         Line[{1969, 6317, 1935, 1939, 1945, 6319, 1947, 6326, 6327, 1953, 
          1955, 6333, 6334, 1961, 1963, 6313, 1972, 6343, 1974, 6345, 6346, 
          1978, 1980, 6351, 6352, 1984, 1986, 6357, 1990, 6338, 1933}], 
         Line[{2004, 6495, 2204, 6521, 2198, 2196, 6515, 6514, 2190, 6508, 
          2188, 6507, 2182, 6502, 2180, 6470, 2168, 2166, 6491, 6490, 2160, 
          2158, 6484, 6483, 2152, 6475, 2150, 2144, 2140, 6472, 2176}], 
         Line[{2011, 2170, 6494, 6493, 2164, 6488, 6487, 2162, 2156, 2154, 
          6479, 6478, 2148, 6474, 6473, 2146, 2134, 6467, 6466, 2132, 2126, 
          6456, 2124, 2118, 2116, 6451, 2110, 6447, 2106, 2142}], 
         Line[{2014, 2000, 2002, 2001, 2005, 6368, 2006, 6369, 2007, 6370, 
          2008, 6371, 2009, 6367, 2017, 6375, 2018, 6377, 2023, 6378, 2024, 
          6382, 2029, 6383, 2030, 6388, 2035, 6366, 2036}], 
         Line[{423, 3999, 3998, 422, 3996, 3995, 421, 3994, 3993, 420, 3991, 
          3990, 419, 3989, 3988, 418, 3986, 3985, 417, 3984, 416, 3983, 415}], 
         Line[{2039, 2012, 6373, 2015, 2019, 2021, 6381, 2025, 6379, 2027, 
          6387, 2031, 6389, 2033, 6372, 2043, 6397, 2045, 6401, 2051, 6404, 
          2053, 6409, 2059, 6410, 2061, 6417, 2067, 6384, 2069}], 
         Line[{2070, 6386, 6385, 2068, 2062, 6412, 6411, 2060, 2054, 2052, 
          6403, 6402, 2046, 6398, 2044, 2034, 6391, 6390, 2032, 2028, 6380, 
          2026, 2022, 6376, 2020, 2016, 2013, 6374, 2040}], 
         Line[{2073, 6396, 2037, 2041, 2047, 6399, 2049, 6406, 6407, 2055, 
          2057, 6414, 2063, 6418, 2065, 6392, 6393, 2077, 2079, 6427, 2085, 
          6430, 2087, 6435, 2093, 2095, 6440, 2101, 6413, 2103}], 
         Line[{2104, 2102, 6442, 6441, 2096, 6436, 2094, 2088, 2086, 6429, 
          6428, 2080, 6424, 2078, 6394, 2066, 2064, 6416, 6415, 2058, 6405, 
          2056, 6408, 2050, 2048, 6400, 2042, 6395, 2038, 2074}], 
         Line[{2107, 2071, 6422, 2075, 6426, 2081, 2083, 6432, 6433, 2089, 
          2091, 6438, 6439, 2097, 2099, 6419, 6420, 2111, 2113, 6452, 6453, 
          2119, 2121, 6458, 2127, 6461, 2129, 6464, 2135, 2137}], 
         Line[{2138, 6437, 2136, 2130, 2128, 6460, 6459, 2122, 6455, 2120, 
          6454, 2114, 6449, 2112, 6421, 2100, 6444, 6443, 2098, 2092, 6431, 
          2090, 6434, 2084, 6425, 2082, 2076, 2072, 6423, 2108}], 
         Line[{2141, 6448, 2105, 2109, 2115, 6450, 2117, 6457, 2123, 2125, 
          6463, 2131, 6465, 2133, 6445, 6446, 2145, 2147, 6477, 2153, 6480, 
          2155, 6485, 2161, 6486, 2163, 6492, 2169, 6462, 2010}], 
         Line[{2172, 2229, 6543, 6542, 2225, 6538, 2223, 6537, 2219, 6532, 
          2217, 6531, 2213, 2211, 6499, 6498, 2202, 6523, 2200, 6519, 2194, 
          6509, 2192, 6512, 2186, 2184, 6504, 2178, 6500, 2174, 2208}], 
         Line[{2175, 2139, 6471, 2143, 6476, 2149, 2151, 6482, 2157, 6481, 
          2159, 6489, 2165, 6496, 2167, 6468, 6469, 2179, 2181, 6505, 6506, 
          2187, 2189, 6513, 2195, 6516, 2197, 6520, 2203, 2003}], 
         Line[{2205, 2237, 6549, 6548, 2236, 6547, 2235, 6546, 2234, 2233, 
          6545, 6544, 2232, 2231, 6525, 6524, 2227, 2226, 6540, 6539, 2221, 
          2220, 6534, 6533, 2215, 2214, 6528, 2209, 6526, 2206, 2230}], 
         Line[{2207, 6501, 2173, 2177, 2183, 6503, 2185, 6510, 6511, 2191, 
          2193, 6517, 6518, 2199, 2201, 6497, 2210, 6527, 2212, 6529, 6530, 
          2216, 2218, 6535, 6536, 2222, 2224, 6541, 2228, 6522, 2171}], 
         Line[{2242, 6679, 2442, 6705, 2436, 2434, 6699, 6698, 2428, 6692, 
          2426, 6691, 2420, 6686, 2418, 6654, 2406, 2404, 6675, 6674, 2398, 
          2396, 6668, 6667, 2390, 6659, 2388, 2382, 2378, 6656, 2414}], 
         Line[{2249, 2408, 6678, 6677, 2402, 6672, 6671, 2400, 2394, 2392, 
          6663, 6662, 2386, 6658, 6657, 2384, 2372, 6651, 6650, 2370, 2364, 
          6640, 2362, 2356, 2354, 6635, 2348, 6631, 2344, 2380}], 
         Line[{2252, 2238, 2240, 2239, 2243, 6552, 2244, 6553, 2245, 6554, 
          2246, 6555, 2247, 6551, 2255, 6559, 2256, 6561, 2261, 6562, 2262, 
          6566, 2267, 6567, 2268, 6572, 2273, 6550, 2274}], 
         Line[{504, 4155, 4154, 503, 4152, 4151, 502, 4150, 4149, 501, 4147, 
          4146, 500, 4145, 4144, 499, 4142, 4141, 498, 4140, 497, 4139, 496}], 
         Line[{2277, 2250, 6557, 2253, 2257, 2259, 6565, 2263, 6563, 2265, 
          6571, 2269, 6573, 2271, 6556, 2281, 6581, 2283, 6585, 2289, 6588, 
          2291, 6593, 2297, 6594, 2299, 6601, 2305, 6568, 2307}], 
         Line[{2308, 6570, 6569, 2306, 2300, 6596, 6595, 2298, 2292, 2290, 
          6587, 6586, 2284, 6582, 2282, 2272, 6575, 6574, 2270, 2266, 6564, 
          2264, 2260, 6560, 2258, 2254, 2251, 6558, 2278}], 
         Line[{2311, 6580, 2275, 2279, 2285, 6583, 2287, 6590, 6591, 2293, 
          2295, 6598, 2301, 6602, 2303, 6576, 6577, 2315, 2317, 6611, 2323, 
          6614, 2325, 6619, 2331, 2333, 6624, 2339, 6597, 2341}], 
         Line[{2342, 2340, 6626, 6625, 2334, 6620, 2332, 2326, 2324, 6613, 
          6612, 2318, 6608, 2316, 6578, 2304, 2302, 6600, 6599, 2296, 6589, 
          2294, 6592, 2288, 2286, 6584, 2280, 6579, 2276, 2312}], 
         Line[{2345, 2309, 6606, 2313, 6610, 2319, 2321, 6616, 6617, 2327, 
          2329, 6622, 6623, 2335, 2337, 6603, 6604, 2349, 2351, 6636, 6637, 
          2357, 2359, 6642, 2365, 6645, 2367, 6648, 2373, 2375}], 
         Line[{2376, 6621, 2374, 2368, 2366, 6644, 6643, 2360, 6639, 2358, 
          6638, 2352, 6633, 2350, 6605, 2338, 6628, 6627, 2336, 2330, 6615, 
          2328, 6618, 2322, 6609, 2320, 2314, 2310, 6607, 2346}], 
         Line[{2379, 6632, 2343, 2347, 2353, 6634, 2355, 6641, 2361, 2363, 
          6647, 2369, 6649, 2371, 6629, 6630, 2383, 2385, 6661, 2391, 6664, 
          2393, 6669, 2399, 6670, 2401, 6676, 2407, 6646, 2248}], 
         Line[{2410, 2467, 6727, 6726, 2463, 6722, 2461, 6721, 2457, 6716, 
          2455, 6715, 2451, 2449, 6683, 6682, 2440, 6707, 2438, 6703, 2432, 
          6693, 2430, 6696, 2424, 2422, 6688, 2416, 6684, 2412, 2446}], 
         Line[{2413, 2377, 6655, 2381, 6660, 2387, 2389, 6666, 2395, 6665, 
          2397, 6673, 2403, 6680, 2405, 6652, 6653, 2417, 2419, 6689, 6690, 
          2425, 2427, 6697, 2433, 6700, 2435, 6704, 2441, 2241}], 
         Line[{2443, 2475, 6733, 6732, 2474, 6731, 2473, 6730, 2472, 2471, 
          6729, 6728, 2470, 2469, 6709, 6708, 2465, 2464, 6724, 6723, 2459, 
          2458, 6718, 6717, 2453, 2452, 6712, 2447, 6710, 2444, 2468}], 
         Line[{2445, 6685, 2411, 2415, 2421, 6687, 2423, 6694, 6695, 2429, 
          2431, 6701, 6702, 2437, 2439, 6681, 2448, 6711, 2450, 6713, 6714, 
          2454, 2456, 6719, 6720, 2460, 2462, 6725, 2466, 6706, 2409}], 
         Line[{2480, 6863, 2680, 6889, 2674, 2672, 6883, 6882, 2666, 6876, 
          2664, 6875, 2658, 6870, 2656, 6838, 2644, 2642, 6859, 6858, 2636, 
          2634, 6852, 6851, 2628, 6843, 2626, 2620, 2616, 6840, 2652}], 
         Line[{2487, 2646, 6862, 6861, 2640, 6856, 6855, 2638, 2632, 2630, 
          6847, 6846, 2624, 6842, 6841, 2622, 2610, 6835, 6834, 2608, 2602, 
          6824, 2600, 2594, 2592, 6819, 2586, 6815, 2582, 2618}], 
         Line[{2490, 2476, 2478, 2477, 2481, 6736, 2482, 6737, 2483, 6738, 
          2484, 6739, 2485, 6735, 2493, 6743, 2494, 6745, 2499, 6746, 2500, 
          6750, 2505, 6751, 2506, 6756, 2511, 6734, 2512}], 
         Line[{585, 4311, 4310, 584, 4308, 4307, 583, 4306, 4305, 582, 4303, 
          4302, 581, 4301, 4300, 580, 4298, 4297, 579, 4296, 578, 4295, 577}], 
         Line[{2515, 2488, 6741, 2491, 2495, 2497, 6749, 2501, 6747, 2503, 
          6755, 2507, 6757, 2509, 6740, 2519, 6765, 2521, 6769, 2527, 6772, 
          2529, 6777, 2535, 6778, 2537, 6785, 2543, 6752, 2545}], 
         Line[{2546, 6754, 6753, 2544, 2538, 6780, 6779, 2536, 2530, 2528, 
          6771, 6770, 2522, 6766, 2520, 2510, 6759, 6758, 2508, 2504, 6748, 
          2502, 2498, 6744, 2496, 2492, 2489, 6742, 2516}], 
         Line[{2549, 6764, 2513, 2517, 2523, 6767, 2525, 6774, 6775, 2531, 
          2533, 6782, 2539, 6786, 2541, 6760, 6761, 2553, 2555, 6795, 2561, 
          6798, 2563, 6803, 2569, 2571, 6808, 2577, 6781, 2579}], 
         Line[{2580, 2578, 6810, 6809, 2572, 6804, 2570, 2564, 2562, 6797, 
          6796, 2556, 6792, 2554, 6762, 2542, 2540, 6784, 6783, 2534, 6773, 
          2532, 6776, 2526, 2524, 6768, 2518, 6763, 2514, 2550}], 
         Line[{2583, 2547, 6790, 2551, 6794, 2557, 2559, 6800, 6801, 2565, 
          2567, 6806, 6807, 2573, 2575, 6787, 6788, 2587, 2589, 6820, 6821, 
          2595, 2597, 6826, 2603, 6829, 2605, 6832, 2611, 2613}], 
         Line[{2614, 6805, 2612, 2606, 2604, 6828, 6827, 2598, 6823, 2596, 
          6822, 2590, 6817, 2588, 6789, 2576, 6812, 6811, 2574, 2568, 6799, 
          2566, 6802, 2560, 6793, 2558, 2552, 2548, 6791, 2584}], 
         Line[{2617, 6816, 2581, 2585, 2591, 6818, 2593, 6825, 2599, 2601, 
          6831, 2607, 6833, 2609, 6813, 6814, 2621, 2623, 6845, 2629, 6848, 
          2631, 6853, 2637, 6854, 2639, 6860, 2645, 6830, 2486}], 
         Line[{2648, 2705, 6911, 6910, 2701, 6906, 2699, 6905, 2695, 6900, 
          2693, 6899, 2689, 2687, 6867, 6866, 2678, 6891, 2676, 6887, 2670, 
          6877, 2668, 6880, 2662, 2660, 6872, 2654, 6868, 2650, 2684}], 
         Line[{2651, 2615, 6839, 2619, 6844, 2625, 2627, 6850, 2633, 6849, 
          2635, 6857, 2641, 6864, 2643, 6836, 6837, 2655, 2657, 6873, 6874, 
          2663, 2665, 6881, 2671, 6884, 2673, 6888, 2679, 2479}], 
         Line[{2681, 2713, 6917, 6916, 2712, 6915, 2711, 6914, 2710, 2709, 
          6913, 6912, 2708, 2707, 6893, 6892, 2703, 2702, 6908, 6907, 2697, 
          2696, 6902, 6901, 2691, 2690, 6896, 2685, 6894, 2682, 2706}], 
         Line[{2683, 6869, 2649, 2653, 2659, 6871, 2661, 6878, 6879, 2667, 
          2669, 6885, 6886, 2675, 2677, 6865, 2686, 6895, 2688, 6897, 6898, 
          2692, 2694, 6903, 6904, 2698, 2700, 6909, 2704, 6890, 2647}], 
         Line[{2718, 7047, 2918, 7073, 2912, 2910, 7067, 7066, 2904, 7060, 
          2902, 7059, 2896, 7054, 2894, 7022, 2882, 2880, 7043, 7042, 2874, 
          2872, 7036, 7035, 2866, 7027, 2864, 2858, 2854, 7024, 2890}], 
         Line[{2725, 2884, 7046, 7045, 2878, 7040, 7039, 2876, 2870, 2868, 
          7031, 7030, 2862, 7026, 7025, 2860, 2848, 7019, 7018, 2846, 2840, 
          7008, 2838, 2832, 2830, 7003, 2824, 6999, 2820, 2856}], 
         Line[{2728, 2714, 2716, 2715, 2719, 6920, 2720, 6921, 2721, 6922, 
          2722, 6923, 2723, 6919, 2731, 6927, 2732, 6929, 2737, 6930, 2738, 
          6934, 2743, 6935, 2744, 6940, 2749, 6918, 2750}], 
         Line[{666, 4467, 4466, 665, 4464, 4463, 664, 4462, 4461, 663, 4459, 
          4458, 662, 4457, 4456, 661, 4454, 4453, 660, 4452, 659, 4451, 658}], 
         Line[{2753, 2726, 6925, 2729, 2733, 2735, 6933, 2739, 6931, 2741, 
          6939, 2745, 6941, 2747, 6924, 2757, 6949, 2759, 6953, 2765, 6956, 
          2767, 6961, 2773, 6962, 2775, 6969, 2781, 6936, 2783}], 
         Line[{2784, 6938, 6937, 2782, 2776, 6964, 6963, 2774, 2768, 2766, 
          6955, 6954, 2760, 6950, 2758, 2748, 6943, 6942, 2746, 2742, 6932, 
          2740, 2736, 6928, 2734, 2730, 2727, 6926, 2754}], 
         Line[{2787, 6948, 2751, 2755, 2761, 6951, 2763, 6958, 6959, 2769, 
          2771, 6966, 2777, 6970, 2779, 6944, 6945, 2791, 2793, 6979, 2799, 
          6982, 2801, 6987, 2807, 2809, 6992, 2815, 6965, 2817}], 
         Line[{2818, 2816, 6994, 6993, 2810, 6988, 2808, 2802, 2800, 6981, 
          6980, 2794, 6976, 2792, 6946, 2780, 2778, 6968, 6967, 2772, 6957, 
          2770, 6960, 2764, 2762, 6952, 2756, 6947, 2752, 2788}], 
         Line[{2821, 2785, 6974, 2789, 6978, 2795, 2797, 6984, 6985, 2803, 
          2805, 6990, 6991, 2811, 2813, 6971, 6972, 2825, 2827, 7004, 7005, 
          2833, 2835, 7010, 2841, 7013, 2843, 7016, 2849, 2851}], 
         Line[{2852, 6989, 2850, 2844, 2842, 7012, 7011, 2836, 7007, 2834, 
          7006, 2828, 7001, 2826, 6973, 2814, 6996, 6995, 2812, 2806, 6983, 
          2804, 6986, 2798, 6977, 2796, 2790, 2786, 6975, 2822}], 
         Line[{2855, 7000, 2819, 2823, 2829, 7002, 2831, 7009, 2837, 2839, 
          7015, 2845, 7017, 2847, 6997, 6998, 2859, 2861, 7029, 2867, 7032, 
          2869, 7037, 2875, 7038, 2877, 7044, 2883, 7014, 2724}], 
         Line[{2886, 2943, 7095, 7094, 2939, 7090, 2937, 7089, 2933, 7084, 
          2931, 7083, 2927, 2925, 7051, 7050, 2916, 7075, 2914, 7071, 2908, 
          7061, 2906, 7064, 2900, 2898, 7056, 2892, 7052, 2888, 2922}], 
         Line[{2889, 2853, 7023, 2857, 7028, 2863, 2865, 7034, 2871, 7033, 
          2873, 7041, 2879, 7048, 2881, 7020, 7021, 2893, 2895, 7057, 7058, 
          2901, 2903, 7065, 2909, 7068, 2911, 7072, 2917, 2717}], 
         Line[{2919, 2951, 7101, 7100, 2950, 7099, 2949, 7098, 2948, 2947, 
          7097, 7096, 2946, 2945, 7077, 7076, 2941, 2940, 7092, 7091, 2935, 
          2934, 7086, 7085, 2929, 2928, 7080, 2923, 7078, 2920, 2944}], 
         Line[{2921, 7053, 2887, 2891, 2897, 7055, 2899, 7062, 7063, 2905, 
          2907, 7069, 7070, 2913, 2915, 7049, 2924, 7079, 2926, 7081, 7082, 
          2930, 2932, 7087, 7088, 2936, 2938, 7093, 2942, 7074, 2885}], 
         Line[{2956, 7231, 3152, 7257, 3146, 3144, 7251, 7250, 3138, 7244, 
          3136, 7243, 3130, 7238, 3128, 7204, 3116, 3114, 7227, 7226, 3108, 
          3106, 7220, 7219, 3100, 7211, 3098, 3092, 3088, 7205, 3124}], 
         Line[{2963, 3118, 7230, 7229, 3112, 7224, 7223, 3110, 3104, 3102, 
          7215, 7214, 3096, 7210, 7209, 3094, 3084, 7201, 7200, 3078, 7194, 
          3076, 3070, 3068, 7189, 3062, 7183, 3058, 3090}], 
         Line[{2966, 2952, 2954, 2953, 2957, 7104, 2958, 7105, 2959, 7106, 
          2960, 7107, 2961, 7103, 2969, 7111, 2970, 7113, 2975, 7114, 2976, 
          7118, 2981, 7119, 2982, 7124, 2987, 7102, 2988}], 
         Line[{747, 4623, 4622, 746, 4620, 4619, 745, 4618, 4617, 744, 4615, 
          4614, 743, 4613, 4612, 742, 4610, 4609, 741, 4608, 740, 4607, 739}], 
         Line[{2991, 2964, 7109, 2967, 2971, 2973, 7117, 2977, 7115, 2979, 
          7123, 2983, 7125, 2985, 7108, 2995, 7133, 2997, 7137, 3003, 7140, 
          3005, 7145, 3011, 7146, 3013, 7153, 3019, 7120, 3021}], 
         Line[{3022, 7122, 7121, 3020, 3014, 7148, 7147, 3012, 3006, 3004, 
          7139, 7138, 2998, 7134, 2996, 2986, 7127, 7126, 2984, 2980, 7116, 
          2978, 2974, 7112, 2972, 2968, 2965, 7110, 2992}], 
         Line[{3025, 7132, 2989, 2993, 2999, 7135, 3001, 7142, 7143, 3007, 
          3009, 7150, 3015, 7154, 3017, 7128, 7129, 3029, 3031, 7161, 3037, 
          7164, 3039, 7169, 3045, 3047, 7174, 3053, 7149, 3055}], 
         Line[{3056, 3054, 7176, 7175, 3048, 7170, 3046, 3040, 3038, 7163, 
          7162, 3032, 7158, 3030, 7130, 3018, 3016, 7152, 7151, 3010, 7141, 
          3008, 7144, 3002, 3000, 7136, 2994, 7131, 2990, 3026}], 
         Line[{3059, 3023, 7156, 3027, 7160, 3033, 3035, 7166, 7167, 3041, 
          3043, 7172, 7173, 3049, 7177, 3051, 7155, 3063, 7185, 7186, 3065, 
          3071, 7191, 3073, 7196, 3079, 7197, 3081, 3085}], 
         Line[{3086, 7171, 3082, 3080, 3074, 7193, 7192, 3072, 7190, 3066, 
          7187, 3064, 3052, 7181, 7180, 7179, 7178, 3050, 3044, 7165, 3042, 
          7168, 3036, 7159, 3034, 3028, 3024, 7157, 3060}], 
         Line[{3089, 7184, 3057, 3061, 3067, 7188, 3069, 7195, 3075, 3077, 
          7199, 3083, 7206, 7207, 7208, 3093, 3095, 7213, 3101, 7216, 3103, 
          7221, 3109, 7222, 3111, 7228, 3117, 7198, 2962}], 
         Line[{3120, 3177, 7279, 7278, 3173, 7274, 3171, 7273, 3167, 7268, 
          3165, 7267, 3161, 3159, 7235, 7234, 3150, 7259, 3148, 7255, 3142, 
          7245, 3140, 7248, 3134, 3132, 7240, 3126, 7236, 3122, 3156}], 
         Line[{3123, 3087, 7182, 3091, 7212, 3097, 3099, 7218, 3105, 7217, 
          3107, 7225, 3113, 7232, 3115, 7202, 7203, 3127, 3129, 7241, 7242, 
          3135, 3137, 7249, 3143, 7252, 3145, 7256, 3151, 2955}], 
         Line[{3153, 3185, 7285, 7284, 3184, 7283, 3183, 7282, 3182, 3181, 
          7281, 7280, 3180, 3179, 7261, 7260, 3175, 3174, 7276, 7275, 3169, 
          3168, 7270, 7269, 3163, 3162, 7264, 3157, 7262, 3154, 3178}], 
         Line[{3155, 7237, 3121, 3125, 3131, 7239, 3133, 7246, 7247, 3139, 
          3141, 7253, 7254, 3147, 3149, 7233, 3158, 7263, 3160, 7265, 7266, 
          3164, 3166, 7271, 7272, 3170, 3172, 7277, 3176, 7258, 
          3119}]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}}}, 
      VertexNormals -> CompressedData["
1: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
r72D7VkGlx0hWnX+9+FAdyzwT9Y7SeZ/FSmv27TCEA0atk7z+x2G6pb+Cw3I
+tekoiM8kwOB44hy4W3JQ6g0//YdfjJfaa6JT6JDBDxem7xTrP0KeDgUHp1O
5hd4/vhxcTAJPLZPvWW+wA94m9ziD5H7Oz8nsqBQIAIMPqQbHkt2geAPBV3D
JB7jrNyZVmFeIM3x2e+UjycaBMvOYvqhcqJk8BXlK3h6KN38rFkE/lH0UZhJ
xg9qLf88ncMI9Vtr338XdMWSM/J3U0g8ClYZC4TumILGgGi3aJo7nlquddeD
jGs3ZSyetTEcGoobnR9n2MD1qi2HFcg6ake4NvTcSYB/OeJnV4uFgvk/yAMS
Z9+kV02B65Ng1Cmtm6vEBfbf9n/bQ8Yzhd9weC8Ih+S/FzPj/5yCAqHevgtk
HSnhpLO/TgRC11t8d/KiBaqumj1nMrlu9ez95pMNnOFXlHT3ydmxaNf8oXA+
2e/T2jPqBe+uwvSAh6+r56fgiZPPbZjX1b3jsrfrjRM++elZ2bwlAUK85i65
RHRSkXDiVlCeMxhLCETK8IZC+uBhZUty3fpSn9QpXYHw9Nf99dprwyCHJ9kh
lazvn2oTtlXeGpb+KtaoibYElYPOTvdJPD7dRi/dNebf4vj//OsH3pp9VxPX
uCKXan7jnnJn3Mf3+ZYBmV8ld313An8gtujN4mTMCkHOdr+uP2R9cSoevEHF
g3Q87PiBHT/S8e+4w9ovtviz9gva7P0+5GXlB9uiWfkBOj+uVD7RhMon0Pns
GHg8/GVuDN5Z7aH0YrYFPrfqLLYk86tzJYzWj8Vi+++rWvvFnHFSnIT8R3Jd
J+d1s2aS83F5xsXGJ3tDML3z2Ddd4ucjz3Xbuh6F4fbIlR5/BW0x+92sKnUS
f5cNSz8YzmDpB2j9LDnK0ht4PmfpDWi96VP6hMwBlj6B1qewc9nsrUG+6N2p
3rv18VU4dqX62DIyvzg9b6Nnaizy6XAv/+1viz6Hyh/wk/jnzvV/XxwSh7Of
y95bs9wPn5YY3lQm8U/u9HJpN4jAbVlrfkStMcaHajet1jD1Vt+45LeBN1Ya
7CusPLsLUzz8ey6S9SOXseoXVlP1C3T9ig+x6h1fKbPqHQrZ9Q4pLH/A32Es
fwDaH/wpP4Hz01h+gmfZfhI7GO673GkpVjY84uDljcXPyvufHifzM+fmtlft
6Jf9Xm1SrBNoj3khLtOfkPmyajxF/sdDYMRKVaqpUQ821PJoPCbxfNj8ZsoB
n0QwfPjrYnR1AKyIHl/oSPRgXpJ+YG1fNKyWWDB/3xl3CCoOFV9P1o+n/BZG
O1l+i7Tf5nOy/BlOUv6MtD93abL8HGUtWX6OtJ+z/R/Z/o+0/3/oYPECsile
IM0LO4ovEEvxBZTZfFlJ8Qhm/WDxCGgesfkFfhS/gOaXEsU7KONn8Q5o3kX1
s/gI3yg+ogmbj7y+LJ6CJcVTpHnK5i9so/iLNH+bGNu/9U0/AHuOckvFrwiD
lirGYDDJA8xzeTrc6oLOJY6a+0rd4H2kvJkyk3c3za29O0NxFga0Vbi5w/jq
bUWbyPx3PSpmp6Wi8Faf/LFcY3X0rpg96QPJm9yme9IWt+JQSy5snleSGT63
/ar4jeiT0R7CL3g4AXsU8uoG7uigwkedrmQynp9fFGpmmYBHd6gMPQu2w533
fgqYkfHuu4ZP1ymGYFtmx+Kn7mdwe/cZJeZ7nqtnJUSiRZxx8HTH7Z9WZ/HQ
ZblVN0mc6kkXPUxFdNFJvXBIJtkUtD5nZvaS8aUzagufD9jjuzxu62W1OjA7
a//uB2S8TKXg189ffqi/Uklwg8xmCFPvOyBNxg+uKn/2Wy0E36VcHI3Tt8To
HM0XzOfKL28Lt3yaEYzHPuk/TNY1waEjU+f0k/GAvFYx43tu2DUjPsEtVwnm
9ynZJpB1HEpkZb4oeODQ5rogW3d9HJyyrN+TjA8+KLUeuS2Ku7cXfM9bZQ08
ScLK3WT89ZeSTQ72+qhaK67bKGMG6T/exX8i42KH9cI35lhCgstho6gxT7Q0
XrjlLBn/+LVuzs6rpgCbNbZ+m3MJF3udmNtDxruc93w6W3ABPtednT35kDm+
GPNteM/08wu7fdRf+8Ldjq7tRVuVYcXw5oqDZHxToZzz6ClvuJi5U/F1xTl4
fWwevz4Zz9V+9cR0ZRhM79ZeLvjVCubJ9R+3IPv9LhHwWvqxL/hfqqiXKTOF
H817a5h5u/Txwt2yW54ge/fQ+MIP57Dt4DOxK0yeLg5/c+uHCfg535m8JV0b
eV92cH9nxtlh9TOlxQQOrxD57u42DS3kFVYPkPH2p+9bltxwgZ97t9SreemD
wEPJ+GwyvoD7gcjSL4Gg9ESCV+XNVZCMvBHzlsSz+mCDoA7xhUTvJ9f2eViD
tYmi2BRmPe6dp6NUEgJZO1USjOfpwrknLsK1zHPXctW4PnsvUCg8FzHepQ7H
z/32siTzeY5ve1S/wh1qtzBaciz0cSS4Lj+UjBfwR0V80LKGr08aTtkU+6KB
4NFUcTK+VdA2/ve587D0r9K8G2N+2FD4hWsL8/2M7It3pY2a+DSvJ1NgbThc
+tppx/RVnDdHMGSeMbSICBwQ7PCGwX5D6eNkfl7imkvNZ4h/Wsyv6V7uAnsM
nNckMXnhmvTK9IQWqIW9VzSzV4P+4iurx5i6td3hpa3RsytJUW1BUc7k/56X
nd6s+y578jzuWpiWmyp6Hlu5bd8z8/n+X/YTw35LDH5vsU5B3gmbThc7XmOe
D/lZ8SCIsuJBOh52/MCOH+n4Jan9YiC1X6D3+30eKz94+zErP0Dn5+kxVj5x
LZVPoPMZ/mp185E9AWhXZvo1pPAMOuweXbyKjH9TXJDyfNgXj/rO3nPA9hTa
HhHo30fGi7QNNLLbQlH02NaoenFr1L+5S4zp25Hrm3U/dfih7uvUEnXHK2hR
sWHnfDLfvpmlHxyj9IO0fkzfsvSGQWYsvQGtt0WCLH2iWyBLn0Dr075xpnxy
hCdKpezKXXVIG+Tn7At1IOP7d2sHKV0IRuGOmmWrHazw8f21va0kHhGNTq0t
i4MxtlTi18tyC1zb6e71gYzrCdi+4ov0w2yPX1GuT5TRmKurZjdZR/jFeksD
bV+c1X3zYvD+81iwRFX2EBm/Q9Uvyt5l1S/Q9av4jVXvmCTJqneg612C8gd8
4sryB6D94TnlJ2Baw/ITpP1E5kN7qi6vAUTqS3SN9l7Bjt8j15n8XTF78t6O
ISvQbt5huclQFiah3TWmL2mq8GuPZvpC+36BBXzt0nDIfI7UEeb9+tj89W9b
CHzZrOIoVmABmyY1nsom+61cFnbn5s8A8BzLql5oaQZNdcP+s8n8Ycpv4ftO
lt8i7bftM1n+DBezWf6Ms9j+/CmF5eegpcbyc6T9nO3/wPZ/oP3/H8UL2JLN
4gXQvGim+AJKFF+A5st3ikdwWJ7FI6B5xOYX6FL8AppfGz6yeAdfvrB4BzTv
Nlax+EjyxeIj0nxczMfiKWhSPEWap2z+ojzFX6T526NuG/SyywvmnfoRlp0X
CgZajWX8ZLzkjGS43HttqN596ei9zXZw75z0rBayzoVF65aYjdjiQAXs/Wbg
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
+3p7wv+dQ1cgyqcWL7TZlwKxubftDci5Ltj0wj3XiCjsfTtV8BSfG/64fLCS
+fcmgSqrUEPdFb+qTbq9YtwTS8U2tzB1xdsV/Wgfhw0UbR7TFll2FTMPuf4o
IuMjm5NqW63tocZN1K1S0w8V1vI6Mb8raaq4r+s5QM4xvxdsncbpg2P+33cw
f8dSIc6n3BKqAjmvmtITFkdhUMhv2S/kugsadvuYjnjCE53e5ctGLkOUybvS
8+PM89j21r5yfUhIOihkVxsAVfFTwgSY3/Wmf3iiOxaIfvv2Wc1Q9gL/A1JL
vMn6QU+i5+XMs8QxiXqvkDeuwLuqtSuAzE/ZP9Vz1ic1yN9+2djxpRvYKiaJ
xpPxbwXLos0nRYGCb4LcQsUwGN+Sm2BH7mOMn3BDWUUsqEqaTpWutMCwdil3
IRKnUM4j0U3+3rAl7raFTnUaWn7SmqpG8rzDIS1ra6MctBbunOXaVoTlNuU6
u8lzUNgnsyDDBwGgvyq3siptNVpZDe8RYX4PEuvoLo/zA9Ob/TxVO9RB0vPI
P+b3bqu/U2W23/SAr1NElIUvOcOOs27hzN8FHWwrlbHhqYCdtr0Co5NKoWtf
Xur8ewx4vmKP36xl9WBt8THEX7AS3r2QfDxJgQGv2geK5n6qh9wVDUqfOcsx
xOK8srs8Ay49uwYXsiJBebp7ztSvBag0L8mCm0HWd2kbHza2xcc82/KTl+Rh
q77FGqchBhhNc38aGmkBPPiheu2RTNy3qqNfmJz/A2xen4q44IqH46y+j00+
i1rq/2ozSZznyjwjF1m4wBhfwk31/ADoDG/Ma2P+Tn7R8nMFu4pAY8tTFbeG
Wsj6y9PRmsSAOXvTIk7WVIHR2rJD97taIETkySfhs99h6vQZi/p3nJCm/re7
RXM5WX/RwmMpFejoszuE/8hTLBIt0T7b8B0+FJwUNJGNwW32BxT0Je8jR2FQ
k7kLA/ZS8WA4FQ/S8bDjB3b8QMfPmM7aL06l9gv0frWcWPmBmTNY+QE6P/lU
PpGdT6DzOTWtzMbhRh1G6a59f8m9GJ7mOOV5O5Nz5qvNtzXPPcVKt5vDt5tq
cH5txMrwjO+QJpA0q4m3Ar/w/5bUEvfAqb4Shw+R5/Ebt1rvBOmmYdPvTcc4
jbLxt8Q1iSn95PywnqUfFKlg6Qdp/Tyk9IaOgzlMvQGtt82UPvEJpU+g9XnD
zU/VhC8AtV6ND02WTYWfHk9HfhE9p6653GN/PQ5nOZq2XkIJ1AvI38nB/Hux
ne93HS2KI+fzoXnfeUxxypQu4UFSL1zph8d9Ow3xmHLMo085gVg65agBD7nu
rl/K1n8cbOFO3iPrYRF/fH1HNpz59xE1VP2CNlW/SNfvGqreMTuZVe9I17s7
5Q8ob8DyB6T94dEalp9gBuUnQPvJySNpk+bmeCKkT/e+0uoLtm99/ZhcCPBZ
tfyEijeuW+OdL6LrBiIx7juZv9da5eoleUntBJpf1303NOAKIYPvg9KYPvwz
9Wn/e2vYfbdK1mJyCFTyNn9kntPK8+T3DWyMgG9tgnVbvGxgtquk0BLm77cp
v4X9lN/if35L+TPYUP6MtD8vbmT5Obi+Y/k50n7O9n9g+z/Q/j/6mMULKKB4
ATQvXPpZfIE1FF+A5ks8xSPQpXgENI/Y/AI2v4DmlzPFOxhWZvEOaN6JPmTx
EXZTfESaj0IUT0GJ4inSPGXzF7dR/EWav2Wxq6P1fMxg5KOAZ6GIPUTKpptU
M5+bar5wR228hC0rofa4UyrEbNc6HUfyJjS67a71ijis9hVftcqqHmQE9TeI
6DPgb+bGql1adzBtd/viUMdqCMMv6gqWDDiQ8WDeseIGTHQpTdZ6Yom6nW6n
Hx5iQPjhSt0HKfWIS4QruWTT8FZH/I8xHQakr0wunnOsDq+5KXn/mJKHelv2
aNj5MSDRiXet97NK/OMwI9FVJhfV/M/K+TWQ+7jDePlRzMNM/pJllmHlaOAZ
wrvkGQM0Lg9/SRf2ganuIc7n+jxhyVnrRubvRkaONcYoDwTA9QzXxl7HaLhg
XXrtAcnz4I4GiUX+Cegq7p73QKcUDi7McuTrIdz5dSpBSKMSuWUeFVY7hoDc
dQ6dqBcM6Ck5yRDRq0S/BetyB/QsUDRf3cWtjQFx3j4uImtKcOeiRkVx9EHU
4XCp6GXA7pc/zZyul2JP/dX0b0fiEWdPkQ78QPxq4+naB8PXkMtx3H0TTwx+
4Ht3JmyYAevu3hjaszobi47OS7/zNBV5L501DiE+w9W6V7ZgRRw0b/1m5r4v
EorCRgrEyXmsTYxLSqwtCyqc4/g169PApmW3604y37uoMWKvbR7USiq4388I
hUs2JXw/B8i54rfwb8FFlSD+STz9inA8lK2vWGTeygDXpHmX/14sg5dJG/uk
ZE8D76eu7r3vGfBF6aTKB7lawmHe30PrI3HQqufsrlIGHKkSl1PTyYR2G1u7
7QbRKF9dOv/lDzL/0/WFN0edof6SqF5+QRHqGC/bdIT42zrxTTMO5Png+9bT
VsoHIlBIqVoykvjDdTvFSSYmyTBl9zMBBd9yULuf2zJI/NbQOGFceFMeNOoM
7g2ZcgOOJy1Zq9VC+FV2dtirtAraTe2H3zLKYfaZLydrCxjwZGdTmq3jfXj8
USijTqIKwl9MO22hyoD606+vP8yuhwyxb4lHLZIg+Hryt4BzDLg4b+q/qYb1
IL8vuPahSz5yeTzoqdcmeuuc75SccRt8VWsf7zh4H12ffA0a30fOS7PlZWON
CuGBmDvv6Jk7qFY0OcwvjjzvbJVj/G5Og1cBhjf238vDww0uA5++Ej888+3x
t8dxeMw+Ql1c7R6oiq975+DLABH7ZCvloHh02BZwoqb1LiRFFg40xzBA0fcu
3xzxbFD+ePXGk5UN0KLn5CysyACzC+fbg5wvg5rhsT2GARVwV9JacPUr4qsn
HCMLpcLQJ//vBWGzCnz6YHzhinZyHlMTPZAr5IKr5TjvcDc+wYhrzy95LSX5
p64LZtR1MZl9XXacwI4T6ThVqH1hIrUvOMLeVy+VB2yg8gB0HuqovKEflTeg
88Zv7vNIuLAeq3/ek9W5dw30UpsUd54izzuMbJk5G+oxwk3hyqL4DKySu+i+
9DwDMtaIv/N4Wo8yk+uXt/3Mx2A/+XvymsTPTQPdrnEhzus/9GsVowr790Yu
0QplwBlKJ/iS0gnSOqmkdIWzKF0hrau/G1g6hEnPWToEWofnn6+9L77NGcW9
uG/nrSyApJauCC9SLz/F9xiebylGrelru8vcE+Fxx9z5dp/Jc/RO7bM/lt3E
PGtp9YWiyfD8scuwaDPxpVfRF/N9b+J72QcdM2cEYXTUsi+fSDx71vS9Ouxe
gUFzlp98fD8Wp00bkvEmvnGVqlNMpuoU6Tptouoaf1B1jdbsul5B+QAabmP5
ANI+sIPyDTClfANo37Bfwq1hn1QAjQUJd0X0QqC82yBgFRmvXbGlx1AjH9Dv
wKmvv+NhMGvbSjlyXlp7N9r+k2EZZBx9lLNpnT+sjBk+6faOnFdL0ld9unUb
3J8Fb7581R6ujt8d9K4j/ll9ZZa6axmkOpg/MmwPwpkB75bzkPn3KV+FEMpX
kfbVLsqH8SXlw0j7MFC+jcqUbyPt22yfhyTK54H2+SyKC9BCcQFoLlynOAL3
KY6ALpsjbO5AJcUdoLnD5hR0UpwCmlNjFNcgluIa0lxTpTgI9ygOIs3BOxQ3
oZfiJtLcZHMWf1GcRZqz6qo6hv0DRrjV/Z/MFrUwkDJQCWF+358q6eNWdyEa
p6fMEzpSpAq24sndzPdjDYOfxiJzPFAu9t5rj6V+cOFqd20Lmd+7gfNZm7Ad
fLsy5/s3gTiQAH6nEZLP7ew+M/0T+sxsH5OLcVNKw86YFO+ihqWw7O7S3A1k
XLRJKEzPJRtfNkT1P5QJQ99ohv9ZwiNzKT+rGM1idFs6fZXqplTsCnQs4iD6
T2z7+WJKdjkan4va0BqahX/t7padInxUcE1beY7Um3+qmuHzjkwUVl+06w/R
eabY+/HuT/rYPhzmVTLuhQc3uTcx/35Th93nZ82EPj++ReeLJ+v7YKfBmmMa
Ec5ov2r6z8XM97HsPlrT2X20Bth9dZL7PzSkcbvC9eOcLXuSU8D8+HOfZ2R8
q0+WScqXMByd987OUNAfD7+6/zH/7//145o5YR33XYfrJrlV4qoTK1e5vc3C
DB6TxU5PyDn59pVUky/FOExO9ty5kdg+7ifx5QsDZsR/7ZSsTsZvL9w31bvE
4uMVVY1d5DnFeUK/L3r9xf/quI0q07DY59Tb4bcZmP2vbKvJIAOG2H3A/Cb0
Abu1Me7FDdtcdHJtT+mLcsPZ5bojLeR5py4oOkyvPB0VF4UNSLpYA/+jC1Hr
yXnvYN6hK73v83C50d5VPJYFqGE19vkSOW+M/I8+Y6+HbohNwjgMnivHpfU+
GfWOLLZkfq+/x+4/Fjqh/5hLxIGzeTfEsHJlbk9PYDLIJ2T+LCf+c17B4MHC
pSHwUK8/sHrtNfi7RMnahpxLz6cd3juwNw7zBqbE3z2RiMHva3wcSZwP2OsH
T1jfc99c49BZPiinXHhvg4c3pkgN1DD/HjOf3fdMhN33TJrd90zl5fPt7xpc
YQ33Yh+ui8kweb9RkTmJJ3abXqZCShyUThYSEluXAHmvMs8Wk+u66W771d/p
g9Mmid9vnhaDMTmTxnvIdaXZ/c02T+hvlv7Q4kTuhivo8evYlfW33HGK0ob3
RkSHO9l93non9Hl7K/Ejz5njKk45JiHDeTYa74xXjzsRvUmx+6RFT+iTFlzY
mpLOGQoBXbrbGh4FQOCpKeodZH4pe79iE/YbK5H0IG1tEnBUF/nfuBcPkWun
KPwi98uG3f/tMLv/23t2/7fpccvbRK28QBY8WrtMvfGZa82ybnLdvez+bJYT
+rPNfLqkXobXBoR6bBVmOiagRIv9PVuSn93s+fIT5murdZ1G5SjQw/n7B5fE
w0/BV08ekjwYsvvOJU/oO3d/egjHYaNU4M4qG+6vyYD0xltDB4meL7Lnp06Y
b84nkKD7JQX0r8hgvvw5dOTM5vtJ1j/EjsdnQjy52kHRDfeyocdhHZ/v71AI
jb3cJUV8jIfdd05yQt+5VH7nj2nzcyF2/9jssGN50MYXFD70iQFG7HgyJsQj
p3knrHFKKvxSPpQnKpMCGd1KefuJzrPY/fSSJ/TTm31Q2CTtTA5sHHuzXWeh
FzxvPGcQS+LZw+53583ud1fB7nd3fyTLe1FHEbTonNrbkZQABzT/bL9H6lSe
PT9gwnzu+SYvkg7HQ1ghX2v1aDhc+bZebhXRfzo7nsAJ8azRrJU1zgqExZ9f
7fExDIZUrusx04ge3rL7/gVP6PsnNhJ0TnfID0SmzxDotbkMonw7TzLfQwqw
++PdY/fHa2L3o0sSZ/EI+ykeIc2jJez6kppQX+ZvYx5tWxsOVYfP89fyW8Gt
QP/yw2Rc6H+s/1SSbz7viuvwlfvg09SqDEi+P2y2mdzHfez8hE7Iz7xraZH/
sgvhk35Fx+vZidAZvEGpnpxjO9l9BY9O6Cu47pVk4DGVNFjKsaU+1jQEtC+9
XTpK6mslO55HE+I5K3xCZf3JTMi1buv1CoiBsvh4e2Yfp0h2n8Dz7D6BK9h9
AmeaxCdt9ciG6ke9C9ctjYFpC5eaaQ0xv5NS/QyFJ/QzdJ42f6A1OgPm714Z
VGcdDVcvxx47TfRm9T/mb9lXz7VYqgDENh1pk9G/BvPvu91YQzgVy47n0oR4
tOeIyu0m9bAKxYL37U6BwWNBPF+Iz1iz+xm+nNDP8KnasprVXDHwN01+tKXr
LGT1vf7kTfzKkB1PzIR4ggPkXu2/5AliebLdcjm+uG6OVshTMj5G9SFE7wl9
Gv9EJDKer8sGO1Wn0tN8ccAns+XhTpIfG3Y8zyfEo7E87PO+njRQrm54M3tN
CIxk9thm/6J/5xPK/o7o/N/3RBEzea0n/U6gmTWNR03AH2dLX3jA7F/0mt0f
0m1Cf0jFoz7l/H8sMGz49aUZSeR8Ht2v4M/sd8Se7z5h/g4rvT2dcZFwzDQ0
VT4pCbTHyjUWkfF/7H6MNux+jIvZ81euZ52LIIU6FwF9LprL7ktpMKEv5cEq
m4GCc2GwrtSSv+lTIuwPOZXymKzz4n/0dRS+zX/1vXMkfE4Y0T7QYAyX1+dm
//xL58eTnZez/+Un/k1fineMM6iJ3/YS4XfFzQo3zhsyf5/J7ldZP6FfZfMa
M9M+RWvozj45r704EJremun9YH4/ZfeTlJzQT/LN00seP496QcVUxTcVtlGk
fjrfqjD//og9f/eE+RkCfjXKM8yw7p+OQ9ovP1z8KuGwGPP3+ex4GibEE6Ni
aRd1yAN5bk+NOBAdgXUPirfcIusPs/tq6kzoq5ky73KwodQ2qKlokj512BMs
Yv3d3cj6qex4VkyI57Li7xTZD6Go2Na2+cGzrTCmcnwolvm7XHafzFkT+mR+
pvKDQVR+kM4PP7ufpyO7nyftJ+z7i00lrPuL9P0VZM/3mDD/TcAN6XrzBAy4
vr9GcYUbPuX/vnkPqYsmdjxzJsRzaan+vczhFCz59Sf3C3cg+sasBX6yfjy7
n+f0Cf08JSg94wFKz0jreQk7Hs8J8WjfCVy0nMML02XkGoec0vCO7r+lvsz3
q+w+pcYT+pSu8tIPlj3shTq60RxRX12hZ/Gj8qUk/0bsfp5TJ/TzPE6tD/HU
+kCvT/c7tZ1QX5v0036L1QTgx8CY6DB7F2AY9e158e9/rz/+cc2boZnZuH3G
iOyye3H4cNchYbGh/8vPjAn5if7yyTxoYz66v8zcPqcvBX8obTbK+MaAj+w+
qD3sPqgH2X1QnfdU/phWGI/hH2dsjzx0FWuVB5xix5h9Kal45k2Ih0dK5FGB
TibyWBafsU+JwjKDhD9jhC9R7L6m5uy+psnsvqYfyzRfhN9MxWmemvEJOiG4
MVtrjyZZZz27/+ryCf1X7Xo+rK6ckYm5H4K/3P8TjTPzInVGfvxfv9aVE+a/
Dt/xe/Kra1heuqXzyp0Y/N6b/8CVnGeWsvupTp7QTzVq3XqzlJtFuCSY8wWn
QioOFQ7y7CU8EmHPnzphfjNX7z5l1zTc8uLHj8+3Qv8fXd8dj+X//V8h7URU
0tDQUqQtHERblDKKkJ29d/beI3uXJKKBdoeSKNGWFonMIimi8buu+37d7+/n
fT1+739fj/M49/M612uc87yv13niyj9ceeeH/xt/Ejt/QJs9rPwBOflDJekr
G8/oK3vgQN3gwomF+OGl+Af1whi8ek581IN6v8Gk76s+o++r1tDPce3birHg
0qRZfSKJuFR+5Y87fX0QSuzNGPa57HwJ3/Oy8iXk5Es7SZ27klHnaj9g1Rdw
l11fAKe+kCf9VDUZ/VS/ndY82PQjC1fbPPhkGJeCFzvTLjlQ7zeD9I+9xOgf
a8E+v2An+/wCzvl1hvTR9WH00eUvEWmpHcnGzWVjx84OysN6xbX+QL3fF6QP
7RhGH9pvj/Jfi6+/iF4+a3x/iWdi1bCnUjc1HkHi48iIT6W3YvXdRwX4e+Pm
uHm+cTiXd9xsecp/Hemve5DRX3fnk+lPH9dl4KYfE69f/JhGzSMVN7rv4rgZ
7P63cYz+twpTk5+lfD6DqzwCpRO1zuDGWUvrh6j3NZXYpzDsm19q6Q7nZ+LF
gqFLck948Fnsmt/q1HosJHjsGHh+KPNa7sx2xWWey8suSaaDM0jJIWW/gfQB
tmX0Ad5YPtEoxOQsrr3yeul083w8bOO3fd6XPuAjeFIZeNrvnjP6+jIO53kI
rOqfkIzHj4lKHKH83yR9fata/93X95ww9sbIhqDxBpVTA88DYfnNgV76fEkl
/YdFSP9hDv+QyK5PIYxdn0IlqU/zif1Shv05ub/1jp9ccEHjIpc8f1ts3XRf
/iE1T+4QPH8ZeGIPhR3k/xsFHQb7PUNbkiCFPz/kBYXfiPQfnkP6D1eR/sOq
7HocprLrceDU40UEjxgDjzSb58EiNs+DHJ4nhM0D4FI2D4AcHmAuu95BE3a9
g5x6J4asl2LGennrvnRtdFUQVv2aXNYhVoDTbo7bmkrN24e9Hj9NEoNBpjxS
Nkc8Bi7WhyvaUH6SSf/kuaR/8hfSPzlCIHPZtYkZcE5pr6xbUxrEF+yJL6Lm
bTqxX8Cw7z5XGLWw1xMTZv2d6RiXg0vEezYMU8819mSZRsGvbPBTlJo+KecE
Lk6vq1Wknssq4ufWhjvnIK0qa+lUriKQWcU1L4A6j3KI/xUM/0ps3gny2LwT
cHint6TPcw2jz3Nk+9EI/8ESiLn5cNMUnSjQ+52fupBaRwWPVXgdxEph2/yi
9Y2T0+HOiYytPtS5I8TmweAXmwcDDg/2mvi/yfDvw+blIIvNywGHl6sn/aUT
GP2lF896G+rqdQ14FqldTxsthFynVb9GH1D54ZJc7uGAcoh+OKnly3ABZNpd
u0XfH1xxkcUfwiIzFn8IHP7QiOyrOox9NZ3NF2EVmy9CDl905nfJplfJZTAy
e6WE3yIqTgHx3CJv+mBZhO3368oXwFq4VN/dLwtu5V8aDO+hzms2jwqERwUO
j/p+lMW7wrswFu+KHN51UILF98LsbBbfixy+9wWb74X7bL4XOXzvfjZvDFJs
3hg5vHHfUVR7O98Zlcq29I6894EOu2aFVJqn0hcSuDchAX/tvff+1C1rLNt6
+KkeZT9BopFf1ywI0+dnWezKN4b1XHVLPCh7ofmp3hEKnrDxVaLMs8mJsNl8
yd8OCs9R0h+1jvRHFST9Ufsf2rrNasxEV7tdT433OuEebmkVcWp8oqX5d084
hcHXYw3Hc8di1tJN1QI072d+0Ef6UT5+rDjdaC+RjN48N6e8oeIz/CbjjrX5
efxjIZxsEp+BJVs9oqZQ8y16bvCcH6eLcMC/6sxDoxRUExZwy6PqVv/q3tS0
u/ooIBJ6JfF3IK6+blFGf888SPrTXmb0px3BvAo9cX/04nbU/ysZgFOnd62Q
o+ND+j97Mvo/T52csU3hrht4NOQWZkxJBoNHLdMSqDjYHv5dXx0QhQF58beb
8qLRY8Why/T3Bpw+0icYfm5Jdgzb+RbjuPz9RyNl0vBE6OYJ4dT+v+Gip2uF
6Bm8YJt2I0knDKvOP+0ooPb/GWh/XUooGbF0epCWXiJW+AeMv0+td3ni35fh
f4uuhL4WpuABz9mGgp8zcFfbQHcnFec80r/6OqN/dYZQvaDymmzcJTKDy7XR
B0OmxwTl0P2xZ0rd/iyXhEpbhjRbPfaik9mce630vZtXrd+DrXIw41OQkl1E
Lj60XrCd7iN3lvi/wfB/uiZ2k7ZcDKa7xwh+uBOH01f48idTfhJI3+yF4//d
N1v7bve0UjUjWKk3P+HQ+zjonsvlc5Ia99q6wvfa9TA4kNLrFJaTCYklQ89y
KZxjp8Q3m5lHYqmNbeNxsUj0kP6rSPdF5PifyfDfoc2ffGHQHTdE/5mmb+eB
DjUv/envSVaQft2PSL/ucaRft164TtbLG/5w7M++ys27k2F5En8IXZ/OjXqb
WL8sER6kaZuqHk4Cbr20oG+U/XDnvKIJSYEoN2FYsUU1AZWmPX76hf7uhfTl
nkX6cnPmId+bH4YdFi6Ybh02VrAgGCU/XqnYT+HRI/3Jj5H+5Jz+w6WWowq1
253x+0K5hlGzBFwW5qkrT8eH9PduJv291Uh/5spmi7mCAgFgN5n3tdYLT4gu
i91F8wmryfM2Mp5Xx+JgWF5lHMx5qdu742AMzL4p5nySwq9G+pbvJX3Lz5O+
5R9V/a97r3SH6v1LAr/xU+ewR0IoXS/XkL7itoy+4rk9MQ5bgx2g74OsnE5y
DI7OKrn9nMJZTex1GPaBfQ2d9dJhcGWag15WVSy0LjSXnU331SH90mMZ/dLr
FjmkPNmaCEWTZBdt2EPlDykjCbF0X2hiH8+wX7Whu/6idxLwhptwTxLVAdMj
u07T328/I3giGHh81G36+Hqy4UqZCG/b40i4XeVqcpbat2+RfumrSL/0zaRf
ektI9dFvQdkwZfynvm1BuVA/01dDlzrv1hA8Jxl43B8/Ug3xTQbsmv9B7UcK
HH37cQLPKP3dGrsPfA+jD7xickDeVqkcmL5SXjZ2gw+I6WsJL6DtSZ/2Ekaf
dpO035cXrM4DvU6LN6M50VAVVTOXi1qnE4l9KcNeUq1+e8/Yk+CdY/dOPCse
Hj+a7nePigM3wfOJgac8x93vR3wwrOr+5h2RFQuugelGcvR5RPrVv2b0q78U
O3yI56g/PBT//aGv3gA63cYr09+3C5O+7ldJX/dtpI/6ffZ5hO+aWOcRcs4j
dbK+5jDWV3xOtl3vk0j47tGZY81rAHVvRpbS32XN+w//bVHOyt+DC0BD9vzE
ts/JkNbqcEn/2//1vb/OiE9gg0r+1/bTYLnmcyY6xMG5jaqhjdS+LUP64Z8i
/fDnkn74qVoO/UNcaaDSgjNfjw2He3nPMmyo311E8Nxi4HkvvLN+W0gm2C8U
/174KQ5WH/8r+oPOE0h/+0WM/vZXg5vCE7hzoKhhodrledHAuwwnB1P2UaQP
/+b0f/fh3/XrbbuHcTqIBu7+7fA3Bs6fGGN9lcIZRux3MuwLmobjl1ifhsKF
Vf2/eLJh3ISVF+j+ACMEz3IGnvg9qbqzJ2VDw9Gtrl77E2HSNaWdEyg83Mrs
Pvy3GH34YwK8hs0b48Flb7P6mGwX2BcRZkjv54EETx1DR+CyafmvT3lUSRp8
wzus2wK/VgqoxtP3gHjZ+gJbGPoCkr8e7vbYnw13+ay7hnmj4a3Gi/J2Cs94
gqecgedibVxZXUwKTNmkm5cy4g9t363cpv3Dl4YQntT+H7501yTfnMvWbvDb
bqFa635nVNvZZ3OVvvdHdA0qGLoGL6s7jpp+MsFler+OZ6qdQM0PEkfpe4Lp
xL6SYW9mMzh1aF8sXDh3fm74zQT4evPGLjH6PPoPHYHfVay8CKTnsvIiWEPy
ol6ip3CKoadwwlx0YkpJOExYd9DyWl4c/BZel0D3l3v1H3oEm065VfPsjoHH
nqrysdMtAfRDNOl7Sf/m2XX+iU/2njo1swVuIF68eL6FqR2qjOfNukfh8SA6
C7wMnYUHe3dHbUq2hjEqM1tf+/pB6965t9NoPpDoIFxg6CC46iTcfaPrBXkG
N5rP7ouE0KSUw9+ocQtin82w1y1IH/Wr0cSbzhHPw3954pXfF7bXUv5PEDyT
GHgCPMfubr3kjnOOKVfuGx+GhVN/zVtJ32chehDjGHoQyhe75u4U18Qff0U1
7M85wPG9M27Q/RKtCJ4aBp6yhKquvoVhuGGC8ZW/WjJoLlMxn76vwUf0HY4y
9B0G2PHBzL2s+CAnPoeJDsU1okPB2U9mH2e9XzzAfr/Ieb96DN0Kjn3cuecz
ZBYn4NoF5700Wl3wwfH86u0UzhkEjz4Dj1v1C8mFkITFYb+/bu71x48BfMo+
lP99RIcikKFDYcqez7iykDWfkTOfDQgeZOAR0PDUTLbzx5r6e30XfDLQQjH9
tfT/6GvkM/Q1JBrNC/livHFtyJ9zNUstQDDaYDPdl16X6FCcZehQ7GX7B022
f+D45+h0NDHWl3T4Mpv48iAcPbJxplzTQZjfbKpO9+fUI/7PM/ybVes9XpKd
jWLZS3YMP47Fwm25TvR9XlUSn2BGfDaLWXwvL87FqjdcS08EJKFVcnWLAbWv
phH9jhVEv2OQ6Hfw1dyZm6t3Erm9Vc+aSfjgtRtRGd8pnKYEz3UGns4d0/c1
eWbiyoddMs8pPFtkL15fSO3/JkSPQ4ihxzHJpzlnxsoUnGk7Wa1tMBijv42K
Dv36P92QN0Q3xIrohqhGiDn1aGfiCW3tPRW3YtFnXmXJKsp/NrF/z7Df3+Y9
r8EkC+c+8Lnq9z4KB/vHHNlE2Z8iOiCxRAdEleiAfNe72T7eNw9bNg2d9HqQ
gMaxxx7NHPo/3ZCTDPvLP243GPukoUMFHP07FI738qpad/wP/rcMPKXs/AGf
uLDyB+TkDy+IHspioofCybePef6eDmNy0e52yzufRH9sGlVyj6bebxvRK7nO
0CsZqzGH92/kKTRVid33KSYcZXco1+yg1tEnYn+PYW8Sx8qXsE+ClS8hJ1/q
JXVuOaPOvcOuL8DHglVfAKe++EF0QNQYOiDZcVNiR0IT8WZxFk9t/UmcGecu
sZyKw3Oie2LH0D3pv886v6DzEOv8As751Uj0X+oY+i/tvCpO1bZJGDgaVLN7
QSZuKyou2UfFR5Popxxj6KcIPgwsS03PQ/cnzWOfeMRjzbisro3U++0m8XnF
iM/NpIPHbuhmY9Rn37dCDhH45d6dd3T+rEJ0YeYQXRhNogvjseN5bShPPJq0
qfjy3o3DTXuKp2yk1ssyotvSQXRb/Iluy1Ip3oAZi9Lxbcy7NzM901GpZ0zY
Tep9bSD2fQz7GqPep6+CEvDJg982+m7G6JytbkrnMzIEjw4Dz5/ie2uOuTkh
V0Yxn+q8GHh2ysGjmbIXIfo1Zxj6NfuXj4xumpKB/jenXC0UTsWnM37LTaLi
uYng+czAM2KZJli/MAiFQ7IuTzgTiqFHrgnT3//wED2aCoYeTVHDwPpYEU9c
7ng3sVbEF8ZsMjam9QUOEt2c5QzdHBkrVn0KR0RZ9SmIkfpUl9ivZdgPrrA/
sH+jLVqKXJs6e54upotwb+ul/E8meNoZeD7/uZNT9dwHSlNdhxUig2GpG7c3
3eeZm+jmXGbo5lSw63G4zcuqx0GZ1OMG/4FnzyQWz4PI5nmQw/NYsXkAbGHz
AMjhAT6y6x307mXVO+hC6p1HZL3YkPVyg6yX2sQjHxtDAlFZpSvPQCUbhdtP
njeixnNvDpg4TnGDqJF93d73AsCtMaeb/t/nBtH92cbQ/dnlWqo/9W4MXNFS
2um6Oxr21C9eO0DhuU3sdzLsa9WvXUswdsPG4CJpBbmTWKJkf4TuK/g768+P
Vpt4mDtld232PU3sCvH87k//H7Sr7XxrdxaYnotvX74pByI2u2Qdo9ZdFfGv
wfCfyuadgPBOwOGdLhF9ogaGPtEc9amXJMpyYfP0g1fOpAZD1ISiLb8oe4WA
5JxtZ8+Cw8Gdq25Hx8AHvReTLCn/wObBIIvNgwGHB7tA/Ncy/JuweTnYw+bl
gMPLZRJdpOsMXaRrN/OmSH8ohgV/2vcsXZIJXN6lX+g+bGqVZ7Y+4j4P780O
PD++Nx2m+dhfuNTXB/4VLP4QznGx+EPg8IdTStj7qgZjX93I5otQLZ3FFyGH
Lzqrz6eW+7UQBFzxolJXKhgr/a4fpM5xj/E+pYsPUe/xbvaSiYEnoTRa09OI
2g9XsnlUaGXzqMDhUdPqWLwrnGXzrsDhXSPYfC/o72HxvcDhe1ew+V6qrmTx
vcjhe9fqs3hjMCtn8cbI4Y2Pdobszqx2xM/WYmICGSkw6eHmNwep+VZRNrtD
IzUOBd/61f86HAMC++o1U+l+LI1HxGJ5g5B/xzuf8NpkCD79bNFCavyw2VCl
hKwParVv5A6fGQ5rmtSu0ffiNxFdjyGi6yFEdD0edFc/nliehGnlIiZRUb5Q
OlMpm84nG2xnHdIvSEETcfdXd64owPLexfxW1Pj8p6r3rZ5nYta+vea1ph64
wVNDS5iKQ/3dZfWNf3MwY4HCBS/FYFS6Ga5lRs2T6cmLFEr4cnFPbeyd4LHB
WHt4c60BNS5QP9Lo0ecM39bFz6haHoBDqyYE0joCi4iuiifRVblMdFXWzC/5
w3vIB8Z+avfyinGCE4O3ge5PpUx0iyKJbhFHx+SOy4H4R2HHISykb0/LslOw
5IzTJTpfHfts6pqcymPgtWu/7eNt9nBacUo+XS9s/Q8/iQOySytNT2FEpb2A
El8YDtXVydL//4YaPu6/uj4T57Uer5CQ9cChMTCO/g5kwqSAtD/Djthpk63o
0WeNHlXyUXRfjrXEfwLD/7MCsS0vZANx7r0T40WtfXHC/Q4Zuj/GuMVs3SVD
hu5S6ejvQ8luyai6ujN5/lxXHJPnHR1AvRfeJ5cu3K5MwFvdXqnNdYb4MLl8
dDd9//pm9That8tyscjF9/NjUDpFrHIczYsS/yYM/3b73g9Lgzs6q8w0vbzV
HSe1iX+h++onE72nnQy9J1NB4xItUTeMVHSNuOTuB+83JS2j+cmClvdNTid0
cevhfRtlqH2Cd+3sagFq3O7kMZnJ1e44M1aovfqaG7YHar/4X//yDP8HGgQP
N7ywxJ2BJyf9ljLBtX9b9/VQ49uIztRths4Ul/JpQbev7ljzqY1PtyAIMHeB
zAHK3uzalJPOlSqQ+WiZ59lDQbBs1U5Luk6XOZ6/zcFeH0yP6dcGHPLHNfef
7s+k+VuiJ2VG9KQ48/AT3zZbBecImKi5tbRrjxZ0v/ywYh2dVxBdrUKiq8VZ
X/fu5frcWuECEw4Ih01LCcDz9/qMaB0KVaJLpUF0qY4SXaHhJqV88fGOsKDm
XsG3JAu4teP1pDfU+HbyvDWM501z0+J77hoA2gdbJs4f8gCHE0KadP+NM0Rv
y4eht2UwwqM1rp7aF9Qtb2m4GmDeyi0DWyh7LaKHVUr0sMqIHtZOhzOxy6f6
gtBmmwppUU/sEPF5TeM8ROwLGPZ5XNp2u+SpOtxO/nS7tz1M22hl/4y+R090
vowYOl8HfyZe8eXzBWH5U7XrD/uA3vdTWnR8+Ii9CcP+ovGdlxcrYuGLW/g5
BCOIGNtndpv63cMEzx0Gno0RFTgcmgjtp2rPfzngC3n3vVqv0vUy0fn6SXS+
7InO1ziHPbN0voZCqOKfGWGGEaDQECZN97XmJ3gsGHg6RXVK0rJ9YPhzhMTm
DFtQG+bKoeezBdEvW0v0y8yIfpmjmefjZXJJMMEpfP/uPzZgfCK+9Bnlp4Po
i30n+mI7ib6YScuMRYUHUwESw2ovZ56AZ2Nsvk+n7LuI/QjD3r3V11JZ1wI8
uYz6Nn8RBy+rEhik1ynBs56BZ1WR0On8SGecplUXm23rgMuvVSfSfUU4Omva
RGdtlOhYDXaKaGdpG0LETy5nXi578Hxj00zvn5eIHpkJQ48s2pR1HkF4B+s8
Qs55NIOsLyvG+mpc5BNdluEKNWYLJzsPWUPv2fYl9PcP5f/hf0f9frdx0VnQ
Fn77HhgFwVuh1WaZVBx6SXz+MuLzY9r5movcqbBbYmDShJcn4PDKNs8FVDwL
iY7bO6LjVkJ03BblnVlzMjgCFH+KF34aDgaHR4VPTlPjtwme4ww8AtJKkwwf
x0KHs/H87/yhEF0mZr2UGn9AdNkeMXTZHs1Yetk4JglOjz/rmmRgB1vG2VfT
ebg80Y+rJfpxB4jeGc+XSUYblsSBm9XJutdFenD1846vlyj/W4h9PcN+pdfB
Hs2URFjqF67TfC4OFlz1zj1Nn9f/oRP3ZeXMswbnYkHouu+cDweCoWh71Aeg
/J8i+nGriH7cfqIf5/n8xSOFoTCo6XqWtXeBD0Zxf9xI94dZR/B0MfCsMNbo
1vvtDwvnKCfnF8RhTPpoJe0fiS7eN4YunuWhrn3FR+Pgt6eA+/AfDzjyeTCI
/v89j+BZzMAz99a8k1Hi0bC7VFUw6ZIdRCz+4vDzH770BOFJ9f/hS+d8SjEv
v+MH8/JzfJyvJmK63e9Lp2jemOjxcTP0+NaK3Cp8m7IeVEv8ZDbXp2HRgV+p
dH9yJPbjGfbBvz5+nv1aGdTr+Jwq56XCZDkr3UN0f0Kif/eEoX+n0cDKi/Ao
Oy8CTl6kR3QAqxg6gAH7J2f6GM6AlaETjXmnJ8K3PxsOz6Get4ro6L1k6Oh9
3f+q7b5QAPzaWvV3dEQF1l7Ukqbzz3/z7P/XD2rhRak2QR5nuPTCkCfzizly
TeaSpPvbjyX6gGMY+oDOmcoPLXUtULA/bbxmdxA47BnPTfcD9CD6fc5Ev48z
H5IT04xGfRdC8bHY4hruEFAcmlRpQ427E3sXhj1+jtwpZmwGrtEucr0W7niq
HWfQ+wM3wcPFwBN5JVPycNIMsHodOkmmKxC7zJ4NBVPjxUTH8DHRMeQhOoYX
VcxvztvigJIDBR+fjHWE4GNvWxsoey+Cx4aBh//XNC13X3/sWnNpulnWcjAf
F9NI56WviC7hTYYuoXIWKz5gxY4PcuKzmOgnljL0EwOOs94vtoWw3i9y3q8Y
sb/GsG/h5w415w/FAE3fnZumG2K6etNKXcr/a4KngoEnpEK05umvMCzjWZNf
KG6Lscmno+h84BrRT3zJ0E8cHmbNZyxnz2fkzOdlBM8NBp5PJe736pq9IIY/
efr5C1mo5T/hwhtqnh8jupD1DF1IkyVTJO/IB2C38o81d6IT4Mkzk3S67hYh
+okXiX6iFtFPFLnA8o+abP/A8S/9H/qSUg+b3uh6BOLPcv2yDp8YcBi9Ke1J
338h/vMY/pXQI+j4hDj0nltYa2Xng83WByVcKPvr/6Ev+ejxm9Qzpifx0++L
u12zQlFkalNqLK13wNCdzCO6k5m7Fv2d7RSBm5QG9fakuYCsvP1luo/QIoIn
iIFHX2C3/srOBPzT9sEmJUwJB1ry7eg8/zzRkeRi6EiK99ls3t0Sgc5RZqlH
qjyxVoq7fpSy/070LqWJ3uU5oncZUTP/7UqLWFwcL2E6QTAYA6K9tff8+T99
TGDYqzUpHO7SO4nmBlMsZS3t8Eu60Jwl1PgUol85hqFfqW5Uvqh5fyouFggc
OHTQD1HxAovf5iP2Exj2cEHI2GhRBI6cOdprKxSCQs2GEwr+B788A88fdv6A
76xY+QNy8od2ouMZSXQ8Ofm22NNnxm0ySegtmTsj/okt1rZmwFMqblxEZ1Oa
obNps36B4BSpZKyZ5nrO2dkFjxz2nEnzV9zEXolhf7qblS+h1CgrX0JOvjSd
1LnejDo3ll1f4CRTVn2BnPqik+hXSjD0KzdKS30xPmeLaUWbn1UKGmJb7qJv
nXSdRfQ6tYheJ0f/N3Yh6/zCbcWs8ws455c60S0tIrqlnHzPqH5Mpcwjd1Td
l9p4S8QfDQfK7tM6Nb5DbN3PEqL72UV0Py+ORvkoUO/x6pazX2d1BWDTrpxw
+nv78SQ++oz4fNn/xjhmKBEnP5j/98ZFX2zkq1lG5yFKRM9U3/zfeqZKi3qG
TILd8aDw2ik+yrMxb8mUsXS/+jF/zrH0RpsYeqPTjnVfmZwVhkcvz/GVj3LH
7y6Ot+i+QGO62fa9DPt9SQ/yB/5Go9v0FsFVT83xXUh6LP19rzTBI2/2bzzj
Dyp9/57vg+8vfjo675MH7D6q/SeU5m+J7uo8hu7qttixG9SiwlEv9oxucWkA
/t7W/YO+HzGmk41nmIEnOEsyutzBEeukTXxHvzihZ95oLa2btproqNYwdFRN
T+ieeGoWjlPFLEwXjzOAGbbVZ+j+SPJE77Weoff6qppVn+IuNVZ9Cpz6dPl/
6MOOLX344IesPra/LEw6XCqP8eU8aXS/QQmC5yMDz8TPOoLRSvYQviRAMMTJ
GcqfN2bQ6/Ep0XvVJXqvS4nea6gVqx5HIQNWPQ6cenw+wdPEwHPMicXzYDab
50EOz/NYicUDwIkOFg+AHB7AhV3vANdBVr0DnHonmqwXFcZ64Q7/xOfSYAvn
uot3rvGJw5exP3iTqefafdMgxVtEByYKTFg2X/w4mE+4v4Huo65P9GrnMfRq
PT4GXvG1cQOljJxTcwMdIImnDpGyNyT2Cxj2S3DvN6eZdoDnhtVTZ/phwu+h
iXTftssf4hQSbsdB4veUbVnGxoAdc51TKDzp1zeki/NFwHX9PJPSFVGgsm5y
liY1bk78r2H4b2TzTnCvisU7AYd3SiS6ulcZurqLppWLbzFLgy98Hs0Jq0/A
yNZ11Y3Uuu7Y1eiUFpsNPq/1DOvzfaAu4fEWW1pXjs2DQY8FiwcDDg8WT/y/
YPiXY/NyaL6bxcshh5eLInq++xl6vhpPPG5YvjsFu/oT9Nx7I2Dz/tfZXD/7
oEwkRl0/KBf2aBQK3X0XCuWR1e6j1HjNPBZ/iEc7WfwhcvjD92RflWLsq/3l
LL4Ip9Sz+CLk8EXrVx4N7J2fAxKqUxWL1wTCslGNgRFqvuVEOyxx58+AkoGr
DrzyLmB788bLGPr8smPxqPBqJYtHRQ6POtrD4l3hFpt3RQ7vuq6cxfeCDJvv
RQ7fW8nme4GLzfcih+/d1c3ijUHGhsUbI4c3bp83opuZ6Yw6Azv8TdI8wO9M
+zG6b+GCRx/2hXcE4TP5zbsUVRzhS1fETFovw+2yaLDLMh+clqP6PeWjCwSN
zp9Ff+dgzy/659lEe3RY+OiD1EwXOKIYoEf3015N9CirGHqUR6Njx8VZxWAb
9+Ow8nlO4KAgvZXe3xzmL213S47DY6sez3guI4tZzvuG8qjx91X9fy9vS8Ar
XjZZfIrm+GX9bs0j1PgSgdr7tcGJ+NHspqaovz3OgKE2+n+l6y4B2UptJ5FL
ZpuH2xMb7MnNaeGjearO8PVhFupY7FhnlzEvAG+M3aibQuExJ3qgYyz+rQf6
9u5EqfyLO2Hb1FWH1GSl4LvTnQO0PuB7ore7gejtChP9zdo/H61T5Xfj5YrA
ow2zg0G89MIgXZfVB4+BaLPD2DjQbleapYSbhBTf0n2PXxI/mxl+luyufJhd
lIg8a55IHI83xfcPfy2gvx/QXl/wZXFyPJ64eiH1iOQ23LtlTaE3zScc6uc9
KuyI5ye08YcUaKFq5Sndtr/0/Qi2/60M/9vGjt5PeOSEhuaLYzRm6eNefUU5
un9pNdELbmPoBScp3JFsLIxHT7sOr0ujJpjFq1RB5+3Lwtbr905OwLzi6uzb
XfZYnax4k95PNkTs/nvF3RPVusPtpzTZY5h2lvAVys9t4r+L4f9v1LR7Nqv0
cG+Y1CklH33sWab6bYgaP0F0inOITvFSolP8PsdIZkVvOKZVqYx3WWyI97uq
tGk9rwLVa+avbH3xVab2SwjXgS+rZe/R8/nDp+92XgMHccX5ev64RA2c+ezX
bjr+3sR/PsO//bg3GwQ7j6JE5FXxxRo7sCEg9yZ9fi0j+sgGDH3kF7rTBD7M
DkCfTZdeH7ymBu7ftn+h5xXfH6XKO5VOuGi7w0XtyfvAytorhNZ3s1Zzu94v
ZgMbjwSf/219BB21Y9rpe14cHWQfsX/rIOv91esRk9KA6izBqEMrrHGjv+tb
uk+vGNGDTmLoQf+9Vvxu6KQb3NXbmGYvJoWjuSvH0vV4I9FT7iR6ynOJHq7V
JNdo72MHYPmKF6IL2rThfvSZ6XR8VpLnNWM8782+4459gfbwQDGmYpOfObzs
tzFsocbziU40D9GJFiA60eExqmeFjfzhD15J7szXAZ1mz1r6vJ5GdJzlGDrO
BjFlX/zD/CCtJHr/g0WHIKHLSvXs/9jLMuy3Ln3y5spcHVieJDLP0NYQAlQt
xtHzp53oU4cw9KlXvp6z/PocDeh8Mp6rzUARbIaE7v7+H3s/hv2IAe9bhdYI
2CsTMk7yrg1MO9+TT9dZggSPEgOPtKg9v97eCFCbhidFLY8Dl/3jD/T9aI4+
dQrRp3Yh+tRBvetDTb3cIXnMjsjKMQ4QOBAcR/cj6iJ4ohh4pl5+J/LWyhnK
ms5kmJlrw1lfkYn0+jUlutvriO72K6K7vW2a+7TRBdHwxDGxa17LYfgcrfWT
7j/pRnSxTzN0sS0lv2/e/yESklbL9Z9tPwY7N15bR+tNuP6HjnZE2fJ35fPs
4HzAVS5ZiT2QWvR+qPd/8Gxg4JHcO7ModEAeVOt2FUQWHICo311H6D7P+4k+
uBtDH1xs/LyRWwNW0Gl3o6Psnivc8YrPofNDjo52HUNHu2EG6zyCGQtY5xFy
zqNWsr7GiP97fRXxH3J7NeoKcxxm+U3xPgELFXjf0vOzlvivZ/jfG3r9XrNF
HKx3P9Vw0MkGim62Ls/483864xcY8bHrCVg19DEK9BpPqa1sOw7OvMaiNL+t
QvTHdRj648vdpX1HhPyhe3aRzg1jf5i5MPQp3ef2JcHzmIFn23adCyf3BgDE
ut5YyucNyZ4riui8t5zoiRsx9MQ9JN+f/7EpEoZ3KxafNjoEevd+Vi2nxmcQ
3fNCons+RHS6NSwiFSNdg+H9MSuxNf6K0CCQ1e9Ez0NiX8Kwn5N5YHNZuT98
FzXYnWHkCRUe1xzo7yjK/gOP96JMVVtHHzjVFWoascQCAgoGHtL7dgrRPTck
uudfie757uM9SWgbCHF5z8s/FBrhF/dk4yBqfApDt52DJ3npWLvOQR9Q3PxF
4tRxb+zOFbByp8avED33T0TP3YzolUeMf3hZeKc/hNRGBjWr6cDD1vgeGmcB
waPJwHPkRZyz6yVfGOWaJZrBrw4GYrd20PjZ/Kgt4UmV/uFLFU8W2OUKeoKJ
lJHnz8M++POg8zNan1SF6MjPIjryD4muusadjj3uVP2gtuLuOEM7b7xg0ulD
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
z5d/5ByPlbvSQop5i6AoOdp5K63L9la1y2zeWWzZJ1EnZ54LO9+eqE79Ss3D
F3WbbCZnopz1p9b5MXnQXrTuzLrvfSCiFPfSUUMFS7ZO2CdZ7gffFspk099d
TFj+c8OHUHMYc8JY8PHPRHj0pKOpnYrzir32T+cGluLfwUt+8YW5UOZzr0q8
hVqPr0Indy29gprRxl02K0xhsmvdabP3faC+4KnWusarOJifF+AQ74MKrU7X
+JuofOzH3kqpzTcwYsRbcKJVGn7hEVBMq+8D7h+1e1WdrmHAy5EF2nuz8dqN
bRKbn/VBvfcL+WdVzjhn0yKsfBKLhm+kJuVS74UnKei4nrAjlilnp2nx2aG9
12gYfZ9l5tr79yNOBuDNs9yWm/UTYaDy4L4c+p7R4heb53SF4MJdD9+sS1bH
lZPVdGg+f90k3rVPfzjA9k47o5CIy3C5V8lrtKMPssaUfK16l4DzBua8FHnn
B7yisXHfKD+TiR9bhp9tRmM/xj4tRddjqo0+fWfx1OVYbeE3VP6sGxLiIViM
l6tqlrwbzMPB46Pz93ZT+6R9+6qswFO4x2TpX+9vZtDxw3fn2JE+mE38JzL8
h0u6KR2uPYWGBn9q8YM8jjF5OvfDzz4Q0rW1tRofjrz9+3Zd4vXF08K3Po6h
6+vAtBm7NNPw2y2LRW8jUlHqZeVUdVo3cN6+kA7vaFx1OdHHrToBz9y33Uzf
P9Lg2dV4bU0+6nWXFnhZBeOkgbYn04coPMQ/H8N/l/OHRae601ClYcLEibUe
wPNYW57Wg+5/rlq+wyIJam/YXLh7Lx3kBFplsqjfzTMPU76hpoCqr83dh37N
w2MLQy7S6/SHQCov/5AHWH1bKnXR2QNGDuSN0LyHfpWwe05jAvbOMlxVdVwH
6m72Gu9m3V9j+7/P8B8bZf8wvM0OH+s5LyyYGoBa+l0O9H3VwrmH462mF0Hu
53Fn+184gv/qkK8J3/qA/+Pie6s2OsMrkz/cmvdN4N1TnNZE2au5cV1+sDAY
tj04zO+zZxcmVtacpv/HjKiTGl141QqXbYqc23hQC/jf8X6k872viax5CDLb
WfMQOPOwWX2847fTzphYzaNgNSYYjsdLnKfrxy8rWOsLj3mx1hdy1tfy1Unb
jbMUoaL6yNcVJ/QhPVPOnD5PgzasuDEsEw6zD7ncbDJ0Aufurq4V1Pj7oxuq
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
i81aaNZz+uKW26cxbFXvKbLvc+ubM+PDe1t8ZJ9UK7zOCGxylveT83UXMuw/
YrG/NbLUzULdFv0FzfiCJk/AF43GLPL79IaflgW6bMdhICa86tykIRQdz1tJ
zsG4XRW7ypLjJKYc/x405GeB+Ta66+lzt4RpWSqZ+rjvkY7/bBlHrOnYnviM
uK7cwdvqedYY3QsPV8bOOoip+VILSDvtDPu9LPZxZvaFDa1ncEa3YnGwtwH+
dn+R9Y24XiG7fdaVKH1gWzEzx+VISyOPXaAO6YdLAyOKqplWeLNfXTnxgQ/O
vLkiPJS47uh9ZVb0AwekLXcXShj3Rn4ZkWxSb/9rXdLHlWsF06ujhyotfKBe
dEA5ktz3uehxCKa69DgEZhxu0v/x9pWpH5Sn8z6ZrhoH1rfXrW0n8uUjlV/g
fIWeX3CPkV8jluv2rVc3A0+L5JgjpZ4QkPnQiJxvwxF8OHNryj7orTkun3fX
CjLdhbvI7yxaVuyf1FKSh3L27I8t/gp448oia/J973bm/XL/7/32P3f38pNw
hjVdfcXBh/dBjaXXbXLOxubv2+as/R0MskfWyDeaGMHXZjZrct5+do+cxLwd
5+HQCq46rmhPmPu6pp383jnwAt9KKTNNcHRcael7zAo0QlQek3y0JzinXqhq
gtGwhWn0H0u4+1YynHy+Ngz8BRb8tmvLmuexG0NJ44FhHY1TqHdnZA/5vIqG
eT+nxjtBzQTOb4oxwV8B0UB+5yJ4NnvX+gdn4Na+xxw5DUaoklyyduy/8HUs
+JUPRU06qo6CQcF2Y+lHZsDV4HSNxNsx+Jxj4SPUuFpgVM4FpCX5XRfmucLQ
/A+5ZB3o4uczfl0uADgjx4/OHQ6AXXcz5n0gv99JNZ1xbdoZ8LDyWmp9zAZ5
rI9oDf0Xn0YWPl4GyV/nWujiK749VqU1ITi85pC8LHHduWPs+exAfawIeP9L
8WQcPv8x2r+NsH/03aTWh69esFtZu+9smxv4DqbNdiLwjaFxwzU2kaCYnb1X
cWYQWBTe79Qi8O6bGww59bxhi8n7NUc5naH5aVu873/h5VnwbEpzex9tsMTZ
t3Z2BI1H4VoldzNSn/dn8Kli4bOjbofD+3xn9NZ9WFummYD7pU9m1ZDn0Wzp
nB/TfhFzrAvqEnkysHdysLCdqAf0XDW1Sg9vhiSzBRYnlvvAbFer4hxyvdrb
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
1uJ55UrfpNQKNFBd3V03Qjxfdue2Kv/KxZdsTJ/YPuXj53DejCvTk8D5xOnA
sY4EVL76WUCAyJNXZstPjhDzIWC2aedlMWds2aA18nuLFlQc999G+h2e26cy
p5bug6/sypfs/AzweK7cn9/kum08/3Xsowb0MFTp95kswfz6WG3e58Q8FLyy
yqk+Dh8Xt+T3+efAW7O4Hj2yDkCEVq9mazEe0WBfdiQyHPK4pj2dfhD6kxYv
XoZ4PZunZy6xpg6Dslt2GXRZoVdJYpf9x0lQC0xfoayVjr+uXBR4EZGGO552
Llcn7t9Di4scQ1we7osY3b6oDj0E+sflORJQSq+zg/sDkadS+w7IKNZgsHVE
VOKeVCw6e9z3xwSR77SOHlD8VoAbtNQE+eXj8X3m0Kban8T6bxF2sE1VAS8M
mrv/nFuHhvwhtaSv5PPTmX/qchyWjHKJf70UhnOSZYNTxPM7f4pZ8GuoBzZ1
pccaPPPE9sPxxuT/p0ppB/iin9rB3v3bU5I+n8XOEqfDpJ4cOqP4fWA2GGpU
uscLdjhBuZodL/n/lystLuMMcXF+JrT2bWA8LH7a1789JgSM0l5PfSR+16in
6+Vt7jhosvwh9DXIB6LPDKWROuqZ3s7u0sY4KOI43DXGaYtRQ4JdsUT7zO4r
O3iPe6N0diLTFakQtDyeqLGNuP/M7Hat+z9DccKUe1GnuwOeavxdQ/q+n7q2
tlYLw3HBl5PKdYt8sYD3yut5RHvTSe6Enl4H+LgrojFLMQDcOU/f9iHnD41P
AQOf5X0qTYcvJsPdNpuarusZsI/zlVw2EUemnQuOB77Oh5uST666/I2BIiv5
9TUzk5DKNfyPK74YNq2GD1cDs6FvrdITy2+T0Mp3Nt6KvQLw04KSL32O4C8Z
MpXwjZxvpzlupdfBUAQbV+K0H0zo2Yr+fk/4/cxPTGf35IPZwR1LD26NBO7c
5/zGvwifPq/cVG5LM/wr3bcj0iMcZKYubCPrJOzl+Pz2bFcd7KniOqxZGAWd
57etXUbcJycodHBpVQVsVnNXHXkTA/OcRZVYvhK6Qu1VWsWbcpDedN929JwJ
aum0DPYQ/XGfzyM33JwLe82qljiCH7IE5CZ0E+NtVqnvKuAth3D5LS5cnkmo
7r/gXQhxn897lHiGwzNA+ptlZfveGMxobLK+TazznCN3N28o9IPibb9sBfc6
gKZVzmwsmU9PaGjON86Cq0pYep7wNQZHTy/mIOsv0biJM3Az8iy6yn+7BkYe
3sr91VIJw95TZUEj/8fhOwOHY1yd9553NULklivy8o8b4WuZS6ZpN9Ef25Xy
9QmN0L5lS1HD8TpY/9Ri5D6xTv65nvr45kA9fEv+HWIZ1QAfA7lbHvQQ6/lk
Rf8l40ZQPz13PyKsEniVFzIV902CjHbh2rOydcD96Lv/CbssaKwVDYwdJ/KL
++nOcr4q8L27emDKUBekv043P5gi9PDkzd+tAmXQs78u68LJUHTI68qonSb3
x76PLhMpAhHxl3xXOdOx6eUfJ6fvk2DXv0BA5GA8nBYsjP3BVoNszdyD5sQ6
00jjX8jAv/5L+Javci7oE69yZZ1aK9o8T73T2D8JYdVSLr6rvTDsY3ztqnct
+I7TedWHgUnYvC10pbBvOtTsKtlnM1cGw1NwrJjop+VZVd9382rArmFZbybB
gzlHWfsQcZ85Gp8pBj7ZLRpMBzZXw/aB07yqj6rgeMvzp1NEXhOdkJF2ii+C
2/em0jT9CmDzOmtPB+L+Oq7WkQuTkuC7S/P18oAEeFNiUaZLrOcZ75QEVuQH
tGeOte1KFPH4jz/9e7rma9SlDKw6P3vhp0I8jrctjjAg5skmGjd+Bm7JHCEu
9i4V6LIn+u5WyMcBfq9A8vupHY3XnM/9q8KAT6xPFnypQfe9r33+EPn03PFh
rmMdNWilMX/JdbkWjKpNHom5PQmsY/LnlryvwLcqE0V11Y14mvtiqw0Rd/9N
71iFVEtQ3ObW48yN9VhY0CT9eJjwF1SemEfliXSem2op/CGKyh/o/M2p8cUj
1PgCPb4nqePCcTHKuIA+rvS+yVx2k0qEm4cSBZuCYR935e5J4v5JtPE6Mow3
Lzzd3EG1Dle/LXFY+NMCVXjCN/4k8gj/i0hP+c/1uD5m6bukrAI8vCRQwJV4
jlxq3izvD2jERInlBUJd9bg6PNnW7c4kfPVPKnIYacSFS2JbOhQbcM7poYUs
oRNePGmRdvUpw7sTqz6delyGPx/oOHQQ64wQi2LvIrkm3PCd5++p7gaU+vRu
89T1SRjYKM1qc6wOD7ENvAkg+ssy+PaKNsH/u/lPi4OVFajCVuHegFkY72Z9
03aS0Jk7r3EWYi5uaObvv7o8Di9zy5jfI+tB0fiL0fgX0fhX7BRtm5ELx0YN
l/ZBIyd0/vD+vSiZ76jrD+ZR1x+krz+LJD8aJnxOw1l3dSN57UhISr+8QZ2Y
h8IW9uL/WKtxIm10NVeYGVYZ/dZ484Xwrd8V1jcfqcNmlZNpfv6pOHdrNiz4
HbHeeqw/EWZXh7++nnmXIBCHZhZ3wywJDqMq0/Lr0+owYsVutkd+gXg25NW6
MaI9Tn1Mn/9PNX60rff4Jh6HbdMzc/VE3Edk9Tr01wSiFv/ij+cuumL2XL41
eX76gH7qyvbuMjy7bNK3KzEVt2zslpMjnndmoagVdbmZ6D6pfZPVOgaba4Ka
/InnYorG8wQDTyZOw5bqJ84ov3DPhmY2T1yiv7eojLj/r57++dd220Dftz+e
PExKMMxcrf+FaJcx2nuLKSUNnHbvM1n4Ox76mrnNyfcPI89R8imMUPMp0POp
+hwl/wKLOSX/Aj3/Sm7q273mfQi4Hb/7XCpFHcSWquoaEe0l1DwOC3IoeRzo
eZxtbNN18V3O6Gfyl1nrpgkOPUI28n3+XhoHTQYOT18llmXNxKBavCOabruE
lhnTSL4/yV5h3a89EI6JRry/vN55oS53nC2537t3U/JOqcXGqDRkPKonY43V
3uj8kdzPp/E/yMD/n0ZDq8YyHxCNZA1a23EJRC8wXYom2s/Q+AQw8Olat/Ql
7/FSePpxy8hUbSoUi3S4mRP5y4aqb2GUqm+Brm+NzzUKdR7MhrS8I1z+HzKh
yt94TxVZZ8zszoBMQR2MVJ1essQkG4oW7b9vROhDrW3fHkk9rwXOhuALxdWJ
cD1mpEOaeK471qxVbFtRC2v00m2sp4Lhx4Y4s53EOlBWY25h214DM12yju1L
DUG043ukIzHf9lP1OehR9TnQ9fmKmI6tFguawMWSVbrfrQyCOES7yp4S/p2q
e2EZVfciXfeqUXUyWFF1MtJ18lZa3GWO/XfcQ3ndh5cdyoRHR0+aS/Ek4N3t
kzs4yXlL1eEwQNXhSNfhzncpeh4HqXoe6Hp+FdUXgCbVFwDdFzjROL9h4GxC
9R1gRPUdQPcdSjQO5xk4lFN9Dbym+hqg+5psqg+Ct1QfBHQfdJbqm8CO6puA
7pvo3A4wcBul+i8wcaT4LzhN818+VB8HQVQfh3Qft4Xq+2AD1fch3fclUX0i
rKD6RKT7xMp2idoPPVnAL8CRLB5ag+IdWdmShB+Z1aD4UHCm+lCk+9CM39cS
gp8qYEx5Rkq1bQ2oSFUhD7FutPh9c3dXykTRkM/3fvPmwJPRWZZUYn7mZQtx
BWgnYfi/kO/q7Y2w6+HMJyeCp/487nO9ziVoJf1XDIWaIOGy3PdRQj/86N0o
tMKzHBsv9EKydhGcDkkwP0f4Fzb+oem84kLc1H37HkuGC3r9P7rePKymqH0f
TwoJURkLiZKEZCgaHhXRPCmKaFYqjZo0z/M8z5MmjRqU6GnQTCqijImEkDIm
9Nu7c877+b3n+r7/rmtf66x1P2s/z33vs9a6H1+OCiL6l7n66dcaxzLMrnrO
1N0gB0nyQ3luRL1TNgo85MxRgbf4C5QPhMag0/E8ZTcCT5ZgyyHjDxVYp3Fy
Qm4sBw3+/v3nReRn93t1ezTuFOJk6+8zjey5aGd3PvUGkc9nS8Rk64wyMeSf
b0aJVC4OLh7sPkOs22U/w3vDnsZjX7qwtfHPROzXep34mrynItP/eVBuEE6U
9qHWSx8sFdy/i41Yh3ob+yaT9EJxyyFF3TNP/FDt8IVlQ0T+0fnlxZ+3NgJP
svBK6w0G4KtLKZKpRHsVx4sZk9loNLqwbPLsUx/8eWyqxoj8np94fk3Xm3Rc
JenKLBydjl6pjy+sJeqd4ofh8AfHfaDy7eCrI+WVsPy085kNBG6LVljLmDf6
44Fuq4h+riLo1ws7U0bwhBpqvATo4vUuPGDxE74cfG48c/q4Wgjk/ND7S96D
Z7TMrTJwpwt6qZyvL5d2ReXP4WqlxLxYqHFZRReXkHz1Y+c/ZaO3bSHD3dAQ
/CXP2i5P9GNaktR2xCQNH1Qf0bbOi0MpL8bDewjcVvBbKfEUh2GN68V9p7SD
cIX0jGsGMd8V57cs/Hn7Cm7PXfCqerM/yi9P0dYnfvcmh42j86wwNn4USxwM
skLjqD6lafI7f7urZT2PJNg6nl093eOKgj9fvCe/t+zxSHI5eF8D2K+allab
++LPr4GmWUT759G0+11DznC30aHc55cf7lY2dSLzuQo1LgZ0cVmsKfuo1yMA
xma7C3YHBmBxZm4SWS/2e7AuWbHWHsIccrR09ePw47lFs/LE8zeXSXB/XO0G
dlP7Xp6VU4cmrrgg8jzIrE60V9ODGDhesTfAxSIVhNecMCXrQvPle9sfDZzC
DxwtTZoRMeC5aN8l8hwoN+8nz+Zj3vjk+5z3KVsviJC9329L/i/MeUtL2f80
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
mRC6e5WCyCLPTmyKN2Q72F2Edw8Y6v0l+hHZs17Hi8jzLTeY+V99bcIlG7Uv
dRLvb57A7lH/vk48wti55fHPUowKPdp2VJt4fkTnffvuO5h9YYnWT9caPOFz
w+mo2ySMWEf4FjAjsn9R/MU/2YBTsgncOgRu4h/fcj6MqcX4vJJxOXeiHprb
jojdIHQ3Ff9LdPiftUqf4xEpwSH9adnohTfwdCb3Dh2CD5ym5CUUpeQlrKLm
pbK1LtdPThiC5FuDNVtN88DOavqoC8Hr3Iw/xh95lotFzI0cpjfyYVfNgu8t
RB2Z2S1tbjJQibpLdryq8cuAe89XrXZ9R6zP/lUdH2dqcFtE1w1f00y4ZXE+
6A2RhzUOnzH4vvkmFjhKaK7dmgWDd72/be0n/WEv8gmcuomrr36ufNDsBVNF
/m1SDwn9te3AmLlWKWDoCb2PM2kwXSjKJzM5CVFPki6WhtzEcamO58tYIzEp
cfP7cWJeLenxy/MC6/EHy0cxef54DLFt/n1h8P/wXEGH5xGBiSfKfnUYsXLL
2bvtKbh48VfJIAKHc6UGabIGVZgj5qjleyMBrW8x2jsTfIa7Nclt3LwGEk72
FIsIhgF/8rezvgTfcKXUWcyn1Fmk1dmfevN1GbnvztdlpNXle0LM+4UeF+JX
r1RO7c5cdBo44nOY0NF9lPqOWnPz9R2bqPU9tMlB0OxAFdxg1zLTZCmAWeM/
WgkjkxBIxeE1HQ5ab0pcB15fA0fV8bvHfFPhTeJZzhGi/36+Qa6436UQ9qua
c8ueRLhZdsPzMYGn1O9+vjtHqkFrV/eTzy/y4BBb126Pl5PQSsX/Nh3+/jsm
fB4uvQ5Smb0btwbFw/hjS8W+95Owk4pPNhUfPio+q94t943kvAmSsxtuvt3v
D7syFlybJOJbReG90ErhvWBE5b2rV6cKW3MgLL16dY1taDb0aBjYxTROgvn1
PP7xW41g/yBqn90VN7gy1zodRPDJ7YIr/Xm33AT+Td+EbqTZotETs29bibh/
ue2yXNOnBsrdbXvMhyNxWfjolqXEeLyD7zT6TpRA2t61K6f0C/BBtPbMWYLn
xFJ4O9RSeDvQePtQ+b0iQaY7cPiZszv7QAJcEmQ8LkC8XzcpfBgiKHwYaXz4
zcA8fwZ9Cn9GGn/uocZ9mi7uL071JqtOhePDqz69HzyS0MyxqqCD0E35FH6O
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
focuyAsd+fJPnhv1CtWTnIE2Wd+cvsUONtr4qRG7b46Xd2MeL6+wLfaXgNJZ
6DBUqbXoUocb0VGxRB84NMuPezSPHxfxx51uZF0MWNQNbo75GwkHipwnuUg8
wNVS5V9T8dD959R0cUAyBIcHfSZx0VO3FQxL1ybAbhtFM6vwENDUOONH3iWt
Hf7kq33uNAwarNRe36kLH/ueWZD+H5jl9FXO4/Rp5ryMo5EPAGnR3CwuM2lo
2edIT87NsVlu3ZF53LqZ+JMzEqr/fnX+l3dUapbrlzuP6+c9WN9TfFkdMipN
39+YPAdmQfQ65P4rtM+jLTQtFh609pZmTNtjDrf5tRqqP9OSympWeudgZQoo
eO+Ohyw0ySZ5s2NmeX8F83h/nrUfb0s4x4CURRTd3ZMuyPqY7hl5f51XMt2i
+SYSOLlLleUZA3A6YZn8Nap8le3WgUGeULhsLP1didqnpVi2WAz/8/PPcAN7
5nEDF7Mu6arKsQOWvq2+qXZxkC8qeIHkfxj4vIVni2ggXKyvMaZxSQR+g/rf
Lb//P87g83mcQYYFwWNcNb4gq8UqmW2eBhM/H9i0UOXJarLp7VW+8KZcMl9q
1A5d7kg1EP+GQXNdhNRCJ1i0YO1G9twQXN7QLk3sHZMZeaJz1T954pw8t131
/xh+xh8iZa+e2+UdA8MZw9axJJ52lmO4ZR7HcJftibZ96fqwYBX9yDYjd2zT
GdtP7u/cxXoZe5T50KzGesW1LyGY1gfHTKjyIc2mrQ5b9mMTh/Zq5Z++yC26
kpHMh/L/4Cf2PetPf7BvJ/JkPCtWmnCA2KOjnoQ71hWzHd1++KBaeIF+iLgM
ct9+UEL87Tv+gxs4qfavXeiaaRfm2t03y1t0n8dbvHvwxzFvKV3cIizeK3vZ
AyOGPAuI/e42y1UMn8dVZJmRM3LMyBnm5LxydW/6Araz0J1vYjiqF4KfNj1S
Jv7wj//BYeSc5TDSzuMw9gnQ3V+77hw+GXR5e7s3DnU76emdqXFJyQvdGq4b
gRf3G1QobQ2Ax0N9kmTeuif0jlXRyuPVR0E3JNvjIdjunAjh2cmd99zRvkMa
KnrCQ++2xGKmbeqBm1T5GHsbp5OqH8bJ7GIa10vGVbFeMmHUPAxMVBotpeYH
S53qc5adsXjLV06xjPr+wiwX8u08LuSxWe6h2jzuofTW1PMtV/0wsN3ttrGH
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
e2KvinLW6zmgh+UI7xv5GIxZO/8smdjzPz4BUtc=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.709857394019914, 
       2.709857394019914}, {-1.7138642998702553`, 1.7138642998702553`}, {
       7.468614699858337*^-9, 0.936718005555705}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = 
    0.25, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 0.25, {1, 1, {0, -1}} -> 
     0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 0.25, {1, 1, {1, 0}} -> 
     0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 0.25, {1, 1, {1, -1}} -> 
     0.25, {1, 2, {-1, 0}} -> 0.25, {1, 2, {0, -1}} -> 0.25, {1, 2, {-1, -1}} -> 
     0.25, {1, 2, {-1, 1}} -> 0.25, {1, 2, {1, 0}} -> 0.25, {1, 2, {0, 1}} -> 
     0.25, {1, 2, {1, 1}} -> 0.25, {1, 2, {1, -1}} -> 0.25, {1, 2, {0, 0}} -> 
     0.25, {2, 1, {-1, 0}} -> 0.25, {2, 1, {0, -1}} -> 0.25, {2, 1, {-1, -1}} -> 
     0.25, {2, 1, {-1, 1}} -> 0.25, {2, 1, {1, 0}} -> 0.25, {2, 1, {0, 1}} -> 
     0.25, {2, 1, {1, 1}} -> 0.25, {2, 1, {1, -1}} -> 0.25, {2, 2, {-1, 0}} -> 
     0.25, {2, 2, {0, -1}} -> 0.25, {2, 2, {-1, -1}} -> 0.25, {2, 2, {-1, 1}} -> 
     0.25, {2, 2, {1, 0}} -> 0.25, {2, 2, {0, 1}} -> 0.25, {2, 2, {1, 1}} -> 
     0.25, {2, 2, {1, -1}} -> 0.25, {1, 3, {-1, 0}} -> 0.25, {1, 3, {0, -1}} -> 
     0.25, {1, 3, {-1, -1}} -> 0.25, {1, 3, {-1, 1}} -> 0.25, {1, 3, {1, 0}} -> 
     0.25, {1, 3, {0, 1}} -> 0.25, {1, 3, {1, 1}} -> 0.25, {1, 3, {1, -1}} -> 
     0.25, {1, 3, {0, 0}} -> 0.25, {2, 3, {-1, 0}} -> 0.25, {2, 3, {0, -1}} -> 
     0.25, {2, 3, {-1, -1}} -> 0.25, {2, 3, {-1, 1}} -> 0.25, {2, 3, {1, 0}} -> 
     0.25, {2, 3, {0, 1}} -> 0.25, {2, 3, {1, 1}} -> 0.25, {2, 3, {1, -1}} -> 
     0.25, {2, 3, {0, 0}} -> 0.25, {3, 1, {-1, 0}} -> 0.25, {3, 1, {0, -1}} -> 
     0.25, {3, 1, {-1, -1}} -> 0.25, {3, 1, {-1, 1}} -> 0.25, {3, 1, {1, 0}} -> 
     0.25, {3, 1, {0, 1}} -> 0.25, {3, 1, {1, 1}} -> 0.25, {3, 1, {1, -1}} -> 
     0.25, {3, 2, {-1, 0}} -> 0.25, {3, 2, {0, -1}} -> 0.25, {3, 2, {-1, -1}} -> 
     0.25, {3, 2, {-1, 1}} -> 0.25, {3, 2, {1, 0}} -> 0.25, {3, 2, {0, 1}} -> 
     0.25, {3, 2, {1, 1}} -> 0.25, {3, 2, {1, -1}} -> 0.25, {3, 3, {-1, 0}} -> 
     0.25, {3, 3, {0, -1}} -> 0.25, {3, 3, {-1, -1}} -> 0.25, {3, 3, {-1, 1}} -> 
     0.25, {3, 3, {1, 0}} -> 0.25, {3, 3, {0, 1}} -> 0.25, {3, 3, {1, 1}} -> 
     0.25, {3, 3, {1, -1}} -> 0.25, {1, 4, {-1, 0}} -> 0.25, {1, 4, {0, -1}} -> 
     0.25, {1, 4, {-1, -1}} -> 0.25, {1, 4, {-1, 1}} -> 0.25, {1, 4, {1, 0}} -> 
     0.25, {1, 4, {0, 1}} -> 0.25, {1, 4, {1, 1}} -> 0.25, {1, 4, {1, -1}} -> 
     0.25, {1, 4, {0, 0}} -> 0.25, {2, 4, {-1, 0}} -> 0.25, {2, 4, {0, -1}} -> 
     0.25, {2, 4, {-1, -1}} -> 0.25, {2, 4, {-1, 1}} -> 0.25, {2, 4, {1, 0}} -> 
     0.25, {2, 4, {0, 1}} -> 0.25, {2, 4, {1, 1}} -> 0.25, {2, 4, {1, -1}} -> 
     0.25, {2, 4, {0, 0}} -> 0.25, {3, 4, {-1, 0}} -> 0.25, {3, 4, {0, -1}} -> 
     0.25, {3, 4, {-1, -1}} -> 0.25, {3, 4, {-1, 1}} -> 0.25, {3, 4, {1, 0}} -> 
     0.25, {3, 4, {0, 1}} -> 0.25, {3, 4, {1, 1}} -> 0.25, {3, 4, {1, -1}} -> 
     0.25, {3, 4, {0, 0}} -> 0.25, {4, 1, {-1, 0}} -> 0.25, {4, 1, {0, -1}} -> 
     0.25, {4, 1, {-1, -1}} -> 0.25, {4, 1, {-1, 1}} -> 0.25, {4, 1, {1, 0}} -> 
     0.25, {4, 1, {0, 1}} -> 0.25, {4, 1, {1, 1}} -> 0.25, {4, 1, {1, -1}} -> 
     0.25, {4, 2, {-1, 0}} -> 0.25, {4, 2, {0, -1}} -> 0.25, {4, 2, {-1, -1}} -> 
     0.25, {4, 2, {-1, 1}} -> 0.25, {4, 2, {1, 0}} -> 0.25, {4, 2, {0, 1}} -> 
     0.25, {4, 2, {1, 1}} -> 0.25, {4, 2, {1, -1}} -> 0.25, {4, 3, {-1, 0}} -> 
     0.25, {4, 3, {0, -1}} -> 0.25, {4, 3, {-1, -1}} -> 0.25, {4, 3, {-1, 1}} -> 
     0.25, {4, 3, {1, 0}} -> 0.25, {4, 3, {0, 1}} -> 0.25, {4, 3, {1, 1}} -> 
     0.25, {4, 3, {1, -1}} -> 0.25, {4, 4, {-1, 0}} -> 0.25, {4, 4, {0, -1}} -> 
     0.25, {4, 4, {-1, -1}} -> 0.25, {4, 4, {-1, 1}} -> 0.25, {4, 4, {1, 0}} -> 
     0.25, {4, 4, {0, 1}} -> 0.25, {4, 4, {1, 1}} -> 0.25, {4, 4, {1, -1}} -> 
     0.25, {1, 5, {-1, 0}} -> 0.25, {1, 5, {0, -1}} -> 0.25, {1, 5, {-1, -1}} -> 
     0.25, {1, 5, {-1, 1}} -> 0.25, {1, 5, {1, 0}} -> 0.25, {1, 5, {0, 1}} -> 
     0.25, {1, 5, {1, 1}} -> 0.25, {1, 5, {1, -1}} -> 0.25, {1, 5, {0, 0}} -> 
     0.25, {2, 5, {-1, 0}} -> 0.25, {2, 5, {0, -1}} -> 0.25, {2, 5, {-1, -1}} -> 
     0.25, {2, 5, {-1, 1}} -> 0.25, {2, 5, {1, 0}} -> 0.25, {2, 5, {0, 1}} -> 
     0.25, {2, 5, {1, 1}} -> 0.25, {2, 5, {1, -1}} -> 0.25, {2, 5, {0, 0}} -> 
     0.25, {3, 5, {-1, 0}} -> 0.25, {3, 5, {0, -1}} -> 0.25, {3, 5, {-1, -1}} -> 
     0.25, {3, 5, {-1, 1}} -> 0.25, {3, 5, {1, 0}} -> 0.25, {3, 5, {0, 1}} -> 
     0.25, {3, 5, {1, 1}} -> 0.25, {3, 5, {1, -1}} -> 0.25, {3, 5, {0, 0}} -> 
     0.25, {4, 5, {-1, 0}} -> 0.25, {4, 5, {0, -1}} -> 0.25, {4, 5, {-1, -1}} -> 
     0.25, {4, 5, {-1, 1}} -> 0.25, {4, 5, {1, 0}} -> 0.25, {4, 5, {0, 1}} -> 
     0.25, {4, 5, {1, 1}} -> 0.25, {4, 5, {1, -1}} -> 0.25, {4, 5, {0, 0}} -> 
     0.25, {5, 1, {-1, 0}} -> 0.25, {5, 1, {0, -1}} -> 0.25, {5, 1, {-1, -1}} -> 
     0.25, {5, 1, {-1, 1}} -> 0.25, {5, 1, {1, 0}} -> 0.25, {5, 1, {0, 1}} -> 
     0.25, {5, 1, {1, 1}} -> 0.25, {5, 1, {1, -1}} -> 0.25, {5, 2, {-1, 0}} -> 
     0.25, {5, 2, {0, -1}} -> 0.25, {5, 2, {-1, -1}} -> 0.25, {5, 2, {-1, 1}} -> 
     0.25, {5, 2, {1, 0}} -> 0.25, {5, 2, {0, 1}} -> 0.25, {5, 2, {1, 1}} -> 
     0.25, {5, 2, {1, -1}} -> 0.25, {5, 3, {-1, 0}} -> 0.25, {5, 3, {0, -1}} -> 
     0.25, {5, 3, {-1, -1}} -> 0.25, {5, 3, {-1, 1}} -> 0.25, {5, 3, {1, 0}} -> 
     0.25, {5, 3, {0, 1}} -> 0.25, {5, 3, {1, 1}} -> 0.25, {5, 3, {1, -1}} -> 
     0.25, {5, 4, {-1, 0}} -> 0.25, {5, 4, {0, -1}} -> 0.25, {5, 4, {-1, -1}} -> 
     0.25, {5, 4, {-1, 1}} -> 0.25, {5, 4, {1, 0}} -> 0.25, {5, 4, {0, 1}} -> 
     0.25, {5, 4, {1, 1}} -> 0.25, {5, 4, {1, -1}} -> 0.25, {5, 5, {-1, 0}} -> 
     0.25, {5, 5, {0, -1}} -> 0.25, {5, 5, {-1, -1}} -> 0.25, {5, 5, {-1, 1}} -> 
     0.25, {5, 5, {1, 0}} -> 0.25, {5, 5, {0, 1}} -> 0.25, {5, 5, {1, 1}} -> 
     0.25, {5, 5, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$94542, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    5, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10, 15, 20, 20, 20}, "numberOfMasses" -> 5, 
     "latticeBasis" -> {{0.1, 1.3}, {1.9, 0.8}}, 
     "latticeNorms" -> {1.3038404810405297`, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.07669649888473705, 0.9970544855015816}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {30, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.33472803347280333`, 0.7949790794979079}, {
      0.5439330543933054, -0.04184100418410042}}, 
     "reciprocalNorms" -> {0.8625743986647825, 0.5455399502261631}, 
     "qMaxVec" -> {5.419714788039828, 3.4277285997405107`}, 
     "mObliqueComponents" -> {{0.2552301255230125, 0.4602510460251046}, {
      0.8200836820083681, 0.1673640167364017}, {0.6778242677824267, 
      0.6485355648535565}, {0.4074476987447698, 0.175397489539749}, {
      0.3012133891213389, 0.8167782426778242}}, 
     "mPosFirstCell" -> {{0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}, {
      0.3740000000000001, 0.6699999999999999}, {1.5819999999999999`, 1.045}}, 
     "pointsDataTable" -> CompressedData["
1:eJw9kk1IVFEUx998No42RFi0iCAXYUELs49FxDkS0qJFFCESEhFmIVGzaBES
EokLiciKMIeExIUtokULKQjPQ0iosZpIMBPyo6yGjJlGZxx1HLv3nnO9cDnc
c949/9//3Lfz/NVTF3yO4wTUjqjtVXt/tV7zFOvWK+A2mfUTLppYpPcjevmR
6//IRq7n5JwE7vOdurkPPjLxLayZlaIn5vxK+s2B1eEYRMesPMS5TtXMBZxP
S3SQ8xvQ3mO9JHF5nVP6hpG5VoTT48aEy/Izj4OWn+tL9EE4OP8ZLD/redDy
Czex33GISbT8/J0XLX+T6HJ9Re5PgeXnvA8tv8EYWRB/IcspfSPiN0ke/sC1
/u272nuPmYuEmy5JtJyd7A9YLyS6c7BP5iIReF4Lop8TvyXC4cGCee9J0Sna
Oct3gXVfzFUm/8k42T72P+C4Cf11kb0velboS1/0SHgs4G5tc9/11g7DTEv5
82PTRWo8PHniTpeDW9SppTxDza+vPdjmXyau5yjTP3z8UMcn2NNwdyhb+YOq
Qs+2n2n0oJutVJk3kKiYWGptztNT3b7PpXotlxoDc4zOQnH0enJXlRfb/5x8
uaN9EQ521JybTeRIHVQmA4Naru4bcH0N4r21A/OrXtxt9ILYk9IAWRoyej68
//cGHDg7A1wPY6FVE0+JP6+rxBRhTvwpLo1fE0bm/02dXVc2t7lfxV+abulx
DCzCaQOUIIMTKUXmn4ZKY3iU6vX1ho+gzKuJLQHzp0G7qZgoFX+rcPPh0duX
f8XFXx6UGTWBZWB+L5rx9JeJvxKM3tOGBsVfENVjKMCC+NuI/wEtgwzL
      "], "lineTable" -> {{
        Line[{{-10.6, -42.2}, {-4.6, 35.8}}], 
        Line[{{-8.7, -41.4}, {-2.6999999999999993`, 36.6}}], 
        Line[{{-6.8, -40.6}, {-0.7999999999999998, 37.4}}], 
        Line[{{-4.9, -39.8}, {1.1, 38.2}}], 
        Line[{{-3., -39.}, {3., 39.}}], 
        Line[{{-1.1, -38.2}, {4.9, 39.8}}], 
        Line[{{0.7999999999999998, -37.4}, {6.8, 40.6}}], 
        Line[{{2.6999999999999993`, -36.6}, {8.7, 41.4}}], 
        Line[{{4.6, -35.8}, {10.6, 42.2}}]}, {
        Line[{{-10.6, -42.2}, {4.6, -35.8}}], 
        Line[{{-10.5, -40.900000000000006`}, {4.699999999999999, -34.5}}], 
        Line[{{-10.4, -39.6}, {4.799999999999999, -33.199999999999996`}}], 
        Line[{{-10.3, -38.300000000000004`}, {
         4.8999999999999995`, -31.900000000000002`}}], 
        Line[{{-10.2, -37.00000000000001}, {5., -30.600000000000005`}}], 
        Line[{{-10.1, -35.7}, {5.1, -29.3}}], 
        Line[{{-10., -34.400000000000006`}, {
         5.199999999999999, -28.000000000000004`}}], 
        Line[{{-9.9, -33.1}, {5.299999999999999, -26.700000000000003`}}], 
        Line[{{-9.8, -31.8}, {5.3999999999999995`, -25.400000000000002`}}], 
        Line[{{-9.7, -30.5}, {5.5, -24.1}}], 
        Line[{{-9.6, -29.2}, {5.6, -22.8}}], 
        Line[{{-9.5, -27.9}, {5.699999999999999, -21.5}}], 
        Line[{{-9.4, -26.6}, {5.8, -20.200000000000003`}}], 
        Line[{{-9.3, -25.3}, {5.8999999999999995`, -18.900000000000002`}}], 
        Line[{{-9.2, -24.}, {6., -17.6}}], 
        Line[{{-9.1, -22.7}, {6.1, -16.3}}], 
        Line[{{-9., -21.4}, {6.199999999999999, -15.}}], 
        Line[{{-8.9, -20.1}, {6.3, -13.700000000000003`}}], 
        Line[{{-8.8, -18.8}, {6.3999999999999995`, -12.400000000000002`}}], 
        Line[{{-8.7, -17.5}, {6.5, -11.100000000000001`}}], 
        Line[{{-8.6, -16.2}, {6.6, -9.8}}], 
        Line[{{-8.5, -14.900000000000002`}, {6.699999999999999, -8.5}}], 
        Line[{{-8.4, -13.600000000000001`}, {6.8, -7.2}}], 
        Line[{{-8.299999999999999, -12.3}, {
         6.8999999999999995`, -5.8999999999999995`}}], 
        Line[{{-8.2, -11.}, {7., -4.6000000000000005`}}], 
        Line[{{-8.1, -9.7}, {7.1, -3.3}}], 
        Line[{{-8., -8.4}, {7.199999999999999, -2.}}], 
        Line[{{-7.8999999999999995`, -7.1000000000000005`}, {
         7.3, -0.7000000000000002}}], 
        Line[{{-7.8, -5.800000000000001}, {7.3999999999999995`, 
         0.6000000000000001}}], 
        Line[{{-7.699999999999999, -4.5}, {7.5, 1.9000000000000001`}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.5, -1.9000000000000001`}, {7.699999999999999, 4.5}}], 
        Line[{{-7.3999999999999995`, -0.6000000000000001}, {7.8, 
         5.800000000000001}}], 
        Line[{{-7.3, 0.7000000000000002}, {7.8999999999999995`, 
         7.1000000000000005`}}], 
        Line[{{-7.199999999999999, 2.}, {8., 8.4}}], 
        Line[{{-7.1, 3.3}, {8.1, 9.7}}], 
        Line[{{-7., 4.6000000000000005`}, {8.2, 11.}}], 
        Line[{{-6.8999999999999995`, 5.8999999999999995`}, {8.299999999999999,
          12.3}}], 
        Line[{{-6.8, 7.2}, {8.4, 13.600000000000001`}}], 
        Line[{{-6.699999999999999, 8.5}, {8.5, 14.900000000000002`}}], 
        Line[{{-6.6, 9.8}, {8.6, 16.2}}], 
        Line[{{-6.5, 11.100000000000001`}, {8.7, 17.5}}], 
        Line[{{-6.3999999999999995`, 12.400000000000002`}, {8.8, 18.8}}], 
        Line[{{-6.3, 13.700000000000003`}, {8.9, 20.1}}], 
        Line[{{-6.199999999999999, 15.}, {9., 21.4}}], 
        Line[{{-6.1, 16.3}, {9.1, 22.7}}], 
        Line[{{-6., 17.6}, {9.2, 24.}}], 
        Line[{{-5.8999999999999995`, 18.900000000000002`}, {9.3, 25.3}}], 
        Line[{{-5.8, 20.200000000000003`}, {9.4, 26.6}}], 
        Line[{{-5.699999999999999, 21.5}, {9.5, 27.9}}], 
        Line[{{-5.6, 22.8}, {9.6, 29.2}}], 
        Line[{{-5.5, 24.1}, {9.7, 30.5}}], 
        Line[{{-5.3999999999999995`, 25.400000000000002`}, {9.8, 31.8}}], 
        Line[{{-5.299999999999999, 26.700000000000003`}, {9.9, 33.1}}], 
        Line[{{-5.199999999999999, 28.000000000000004`}, {10., 
         34.400000000000006`}}], 
        Line[{{-5.1, 29.3}, {10.1, 35.7}}], 
        Line[{{-5., 30.600000000000005`}, {10.2, 37.00000000000001}}], 
        Line[{{-4.8999999999999995`, 31.900000000000002`}, {10.3, 
         38.300000000000004`}}], 
        Line[{{-4.799999999999999, 33.199999999999996`}, {10.4, 39.6}}], 
        Line[{{-4.699999999999999, 34.5}, {10.5, 40.900000000000006`}}], 
        Line[{{-4.6, 35.8}, {10.6, 42.2}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {2.709857394019914, 
    1.7138642998702553`}, $CellContext`qPlaneLoc$$ = {{-2.709857394019914, \
-1.7138642998702553`}, {2.709857394019914, 
    1.7138642998702553`}}, $CellContext`rawArrayOfMasses$$ = {10, 15, 20, 20, 
    20}, $CellContext`rawNumberOfMasses$$ = 5, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    1, $CellContext`tick$$ = True, $CellContext`u$$ = {{0.1, 1.3}, {1.9, 
    0.8}, {0.9, 0.7}, {0.4, 1.2}, {1.3, 1.4}, {0.3740000000000001, 
    0.6699999999999999}, {1.5819999999999999`, 1.045}}, Typeset`show$$ = True,
     Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, 
           "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = (2 Pi) 
           If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$774]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$774]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           
           Ceiling[(12 $CellContext`scaleKValue) 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                  2 $CellContext`f)) $CellContext`nd, $CellContext`h 
               Sin[((2 Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t,
              0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$774 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 10, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.601595184710431*^9, 3.601595194105968*^9}, 
   3.601595238917531*^9, 3.60159558297221*^9, {3.60159563385112*^9, 
   3.601595692016447*^9}, {3.601595722040164*^9, 3.6015957901640606`*^9}, {
   3.601595883095376*^9, 3.601595901713441*^9}, 3.601595934410311*^9, {
   3.6015959690682936`*^9, 3.6015959705093756`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`bInitDefaults$$ = 
    False, $CellContext`bRefreshDynamics$$ = 
    False, $CellContext`bRefreshDynPlot$$ = 
    False, $CellContext`bRefreshFreqPlot$$ = 
    False, $CellContext`bRefreshMatrix$$ = 
    False, $CellContext`couplingData$$ = {{{}}, {{{
       1, 1, {1, 0}, 0.25, 1.9359439999999997`, {0.9, 0.7}, {
        0.9620000000000001, 2.09}, {{0.0019855946246379068`, 
        0.04451575045559174}, {0.04451575045559174, 0.9980144053753621}}}, {
       1, 1, {-1, 0}, 0.25, 1.9359440000000003`, {0.9, 0.7}, {
        0.838, -0.6900000000000002}, {{0.001985594624637906, 
        0.04451575045559173}, {0.04451575045559173, 0.9980144053753621}}}, {
       1, 1, {1, -1}, 0.25, 3.7263439999999997`, {0.9, 
        0.7}, {-0.9379999999999998, 1.29}, {{
        0.9065840405502014, -0.29101446350632154`}, {-0.29101446350632154`, 
        0.09341595944979854}}}, {
       1, 1, {-1, 1}, 0.25, 3.7263440000000005`, {0.9, 0.7}, {2.738, 
        0.10999999999999988`}, {{
        0.9065840405502015, -0.2910144635063215}, {-0.2910144635063215, 
        0.09341595944979851}}}, {
       1, 1, {0, 1}, 0.25, 4.25, {0.9, 0.7}, {2.8, 1.5}, {{0.8494117647058823,
         0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {0, -1}, 0.25, 4.25, {0.9, 
        0.7}, {-0.9999999999999999, -0.10000000000000009`}, {{
        0.8494117647058823, 0.35764705882352943`}, {0.35764705882352943`, 
        0.15058823529411766`}}}, {
       1, 1, {1, 1}, 0.25, 8.645544000000003, {0.9, 0.7}, {2.862, 
        2.8900000000000006`}, {{0.44525179676374316`, 0.49699359577604363`}, {
        0.49699359577604363`, 0.5547482032362567}}}, {
       1, 1, {-1, -1}, 0.25, 8.645544000000001, {0.9, 
        0.7}, {-1.0619999999999998`, -1.4900000000000004`}, {{
        0.4452517967637431, 0.4969935957760437}, {0.4969935957760437, 
        0.5547482032362568}}}}}}, $CellContext`dynamics$$ = {{
      Complex[0.20408228405594964`, 3.702600292588967*^-18], {
       Complex[0.9794652314602676, 0.], 
       Complex[-0.20161314530675842`, -1.3800209172216703`*^-15]}}, {
      Complex[0.1969381053879981, 4.971553622850537*^-18], {
       Complex[0.20161314530675897`, 1.3800209172216762`*^-15], 
       Complex[0.9794652314602676, 0.]}}}, $CellContext`dynMeshSize$$ = 
    14, $CellContext`dynPlot$$ = {CompressedData["
1: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
44LywH+F14OWw/8D8Z+//w==
     "], {10}, 1, {{
       Line[{{-10.638000000000002`, -71.31}, {-4.561999999999997, 64.91}}], 
       Line[{{-8.738000000000003, -70.51}, {-2.6619999999999964`, 65.71}}], 
       Line[{{-6.838000000000003, -69.71}, {-0.7619999999999969, 66.51}}], 
       Line[{{-4.938000000000002, -68.91}, {1.138000000000003, 67.31}}], 
       Line[{{-3.038000000000003, -68.11}, {3.038000000000003, 68.11}}], 
       Line[{{-1.138000000000003, -67.31}, {4.938000000000002, 68.91}}], 
       Line[{{0.7619999999999969, -66.51}, {6.838000000000003, 69.71}}], 
       Line[{{2.6619999999999964`, -65.71}, {8.738000000000003, 70.51}}], 
       Line[{{4.561999999999997, -64.91}, {10.638000000000002`, 71.31}}]}, {
       Line[{{-10.638000000000002`, -71.31}, {4.561999999999997, -64.91}}], 
       Line[{{-10.576000000000002`, -69.92}, {
        4.623999999999997, -63.519999999999996`}}], 
       Line[{{-10.514000000000003`, -68.53000000000002}, {
        4.685999999999997, -62.13000000000001}}], 
       Line[{{-10.452000000000002`, -67.14}, {4.7479999999999976`, -60.74}}], 
       Line[{{-10.390000000000002`, -65.75}, {4.809999999999997, -59.35}}], 
       Line[{{-10.328000000000003`, -64.36}, {4.871999999999997, -57.96}}], 
       Line[{{-10.266000000000002`, -62.970000000000006`}, {
        4.9339999999999975`, -56.57}}], 
       Line[{{-10.204000000000002`, -61.580000000000005`}, {
        4.995999999999997, -55.18}}], 
       Line[{{-10.142000000000003`, -60.190000000000005`}, {
        5.057999999999997, -53.79}}], 
       Line[{{-10.080000000000002`, -58.80000000000001}, {
        5.119999999999997, -52.400000000000006`}}], 
       Line[{{-10.018, -57.41000000000001}, {
        5.181999999999998, -51.010000000000005`}}], 
       Line[{{-9.956000000000001, -56.02000000000001}, {
        5.243999999999998, -49.620000000000005`}}], 
       Line[{{-9.894000000000002, -54.63000000000001}, {
        5.305999999999997, -48.230000000000004`}}], 
       Line[{{-9.832, -53.24000000000001}, {5.367999999999998, -46.84}}], 
       Line[{{-9.770000000000001, -51.85000000000001}, {
        5.429999999999998, -45.45}}], 
       Line[{{-9.708000000000002, -50.46000000000001}, {
        5.491999999999997, -44.06}}], 
       Line[{{-9.646, -49.07000000000001}, {5.553999999999998, -42.67}}], 
       Line[{{-9.584000000000001, -47.68000000000001}, {
        5.615999999999998, -41.28}}], 
       Line[{{-9.522000000000002, -46.290000000000006`}, {
        5.677999999999998, -39.89}}], 
       Line[{{-9.46, -44.900000000000006`}, {5.739999999999998, -38.5}}], 
       Line[{{-9.398000000000001, -43.510000000000005`}, {
        5.801999999999998, -37.11}}], 
       Line[{{-9.336000000000002, -42.120000000000005`}, {
        5.863999999999998, -35.72}}], 
       Line[{{-9.274000000000001, -40.730000000000004`}, {
        5.925999999999998, -34.33}}], 
       Line[{{-9.212000000000002, -39.34}, {5.987999999999998, -32.94}}], 
       Line[{{-9.15, -37.95}, {6.049999999999998, -31.55}}], 
       Line[{{-9.088000000000001, -36.56}, {6.111999999999998, -30.16}}], 
       Line[{{-9.026000000000002, -35.17}, {
        6.173999999999999, -28.770000000000003`}}], 
       Line[{{-8.964, -33.78}, {6.235999999999999, -27.380000000000003`}}], 
       Line[{{-8.902000000000001, -32.39}, {
        6.297999999999998, -25.990000000000002`}}], 
       Line[{{-8.84, -31.000000000000004`}, {
        6.3599999999999985`, -24.600000000000005`}}], 
       Line[{{-8.778, -29.610000000000003`}, {
        6.421999999999999, -23.210000000000004`}}], 
       Line[{{-8.716000000000001, -28.220000000000002`}, {
        6.483999999999998, -21.820000000000004`}}], 
       Line[{{-8.654, -26.830000000000002`}, {
        6.5459999999999985`, -20.430000000000003`}}], 
       Line[{{-8.592, -25.44}, {6.607999999999999, -19.040000000000003`}}], 
       Line[{{-8.530000000000001, -24.05}, {
        6.669999999999999, -17.650000000000002`}}], 
       Line[{{-8.468, -22.66}, {6.731999999999999, -16.26}}], 
       Line[{{-8.406, -21.27}, {6.793999999999999, -14.870000000000001`}}], 
       Line[{{-8.344000000000001, -19.88}, {6.855999999999999, -13.48}}], 
       Line[{{-8.282, -18.490000000000002`}, {6.917999999999999, -12.09}}], 
       Line[{{-8.22, -17.1}, {6.979999999999999, -10.700000000000003`}}], 
       Line[{{-8.158, -15.71}, {7.041999999999999, -9.310000000000002}}], 
       Line[{{-8.096, -14.32}, {7.103999999999999, -7.920000000000001}}], 
       Line[{{-8.034, -12.93}, {7.1659999999999995`, -6.53}}], 
       Line[{{-7.9719999999999995`, -11.54}, {7.228, -5.14}}], 
       Line[{{-7.91, -10.150000000000002`}, {
        7.289999999999999, -3.750000000000001}}], 
       Line[{{-7.848, -8.760000000000002}, {
        7.351999999999999, -2.3600000000000003`}}], 
       Line[{{-7.786, -7.37}, {7.414, -0.9699999999999998}}], 
       Line[{{-7.724, -5.98}, {7.475999999999999, 0.41999999999999993`}}], 
       Line[{{-7.662, -4.59}, {7.537999999999999, 1.81}}], 
       Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
       Line[{{-7.537999999999999, -1.81}, {7.662, 4.59}}], 
       Line[{{-7.475999999999999, -0.41999999999999993`}, {7.724, 5.98}}], 
       Line[{{-7.414, 0.9699999999999998}, {7.786, 7.37}}], 
       Line[{{-7.351999999999999, 2.3600000000000003`}, {7.848, 
        8.760000000000002}}], 
       Line[{{-7.289999999999999, 3.750000000000001}, {7.91, 
        10.150000000000002`}}], 
       Line[{{-7.228, 5.14}, {7.9719999999999995`, 11.54}}], 
       Line[{{-7.1659999999999995`, 6.53}, {8.034, 12.93}}], 
       Line[{{-7.103999999999999, 7.920000000000001}, {8.096, 14.32}}], 
       Line[{{-7.041999999999999, 9.310000000000002}, {8.158, 15.71}}], 
       Line[{{-6.979999999999999, 10.700000000000003`}, {8.22, 17.1}}], 
       Line[{{-6.917999999999999, 12.09}, {8.282, 18.490000000000002`}}], 
       Line[{{-6.855999999999999, 13.48}, {8.344000000000001, 19.88}}], 
       Line[{{-6.793999999999999, 14.870000000000001`}, {8.406, 21.27}}], 
       Line[{{-6.731999999999999, 16.26}, {8.468, 22.66}}], 
       Line[{{-6.669999999999999, 17.650000000000002`}, {8.530000000000001, 
        24.05}}], 
       Line[{{-6.607999999999999, 19.040000000000003`}, {8.592, 25.44}}], 
       Line[{{-6.5459999999999985`, 20.430000000000003`}, {8.654, 
        26.830000000000002`}}], 
       Line[{{-6.483999999999998, 21.820000000000004`}, {8.716000000000001, 
        28.220000000000002`}}], 
       Line[{{-6.421999999999999, 23.210000000000004`}, {8.778, 
        29.610000000000003`}}], 
       Line[{{-6.3599999999999985`, 24.600000000000005`}, {8.84, 
        31.000000000000004`}}], 
       Line[{{-6.297999999999998, 25.990000000000002`}, {8.902000000000001, 
        32.39}}], 
       Line[{{-6.235999999999999, 27.380000000000003`}, {8.964, 33.78}}], 
       Line[{{-6.173999999999999, 28.770000000000003`}, {9.026000000000002, 
        35.17}}], 
       Line[{{-6.111999999999998, 30.16}, {9.088000000000001, 36.56}}], 
       Line[{{-6.049999999999998, 31.55}, {9.15, 37.95}}], 
       Line[{{-5.987999999999998, 32.94}, {9.212000000000002, 39.34}}], 
       Line[{{-5.925999999999998, 34.33}, {9.274000000000001, 
        40.730000000000004`}}], 
       Line[{{-5.863999999999998, 35.72}, {9.336000000000002, 
        42.120000000000005`}}], 
       Line[{{-5.801999999999998, 37.11}, {9.398000000000001, 
        43.510000000000005`}}], 
       Line[{{-5.739999999999998, 38.5}, {9.46, 44.900000000000006`}}], 
       Line[{{-5.677999999999998, 39.89}, {9.522000000000002, 
        46.290000000000006`}}], 
       Line[{{-5.615999999999998, 41.28}, {9.584000000000001, 
        47.68000000000001}}], 
       Line[{{-5.553999999999998, 42.67}, {9.646, 49.07000000000001}}], 
       Line[{{-5.491999999999997, 44.06}, {9.708000000000002, 
        50.46000000000001}}], 
       Line[{{-5.429999999999998, 45.45}, {9.770000000000001, 
        51.85000000000001}}], 
       Line[{{-5.367999999999998, 46.84}, {9.832, 53.24000000000001}}], 
       Line[{{-5.305999999999997, 48.230000000000004`}, {9.894000000000002, 
        54.63000000000001}}], 
       Line[{{-5.243999999999998, 49.620000000000005`}, {9.956000000000001, 
        56.02000000000001}}], 
       Line[{{-5.181999999999998, 51.010000000000005`}, {10.018, 
        57.41000000000001}}], 
       Line[{{-5.119999999999997, 52.400000000000006`}, {10.080000000000002`, 
        58.80000000000001}}], 
       Line[{{-5.057999999999997, 53.79}, {10.142000000000003`, 
        60.190000000000005`}}], 
       Line[{{-4.995999999999997, 55.18}, {10.204000000000002`, 
        61.580000000000005`}}], 
       Line[{{-4.9339999999999975`, 56.57}, {10.266000000000002`, 
        62.970000000000006`}}], 
       Line[{{-4.871999999999997, 57.96}, {10.328000000000003`, 64.36}}], 
       Line[{{-4.809999999999997, 59.35}, {10.390000000000002`, 65.75}}], 
       Line[{{-4.7479999999999976`, 60.74}, {10.452000000000002`, 67.14}}], 
       Line[{{-4.685999999999997, 62.13000000000001}, {10.514000000000003`, 
        68.53000000000002}}], 
       Line[{{-4.623999999999997, 63.519999999999996`}, {10.576000000000002`, 
        69.92}}], 
       Line[{{-4.561999999999997, 64.91}, {10.638000000000002`, 71.31}}]}}, 
     14}, $CellContext`dynTab$$ = 1, $CellContext`freqMeshSize$$ = 
    14, $CellContext`freqPlot$$ = Graphics3D[
     GraphicsComplex[CompressedData["
1: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
fKjeRYoSeNFh3jXKxTyPFHnRiuEjwwdFCLyoQ5TZlMGnwgRedIN6UbVdMSEC
L1pr2nmbqWbBAi+67cX8ZzNSAwVeVGlvbnD4ZIDAi35a/yxvbXl/gRe1TWry
ZNUWP4EX/W3b9M20/8qPODv3SZo5LiNC4EVv/34tOf9SC7zox2ue30+uixZ4
Ud/6jkYhc2IEXjQt2X7b1L6RAi+qnzzs/IyAMIEXXRNRWjf5W7DAi2YYjIsJ
SwwgebKkDhMK6vVw9xV4UauW2ekN/V8LvOiK9pe/Vr3oLvCin34dmWDv7ibw
osb2S9a+SnMWeFGrw5/OmTV+I/CinYYmTjA8FEzG57IRO53HmlYLF3jRos0j
L8w4JPO0iHO5jn/MSpaoKJ7M8dvCZ51j1AIvev3kxhONXBUCL2rbe2mU3+YI
gRc9MaJruI9niMCLVhi3t0vy6QCBF/264aDjtVo+Ai96r7VFweKlbgIv2tez
wnSry3f/v3lROh5xpvkR5//9enIZvX7Emd4v4kzxQZwRT8qLIv6UF/3XQWe+
+L6bzC/fd4/UrQe+7+6oWz98303qje+7SX3y+yD1zPfdpP75vps8L3zfbaT7
fPF9d6bu88j33eT55ftuPd3nne+7ddcHmRfVXU9kXjQT1h/Ki96C9Yryoi6w
vlFetBjWQ8qL7oP1k/KiObDeUl5UBesz5UWtYD2nvGhdWP8pL7oR3heUF70O
7xeBF4X3EeVF8f1FeVF831FeFN+PlBfF9ynlRX/B+5fyokXwvqa8aFV4v1Ne
1BH6AcqLNoP+gfKiq6DfoLzod+hPKC/aGfoZyotuh/6H8qJG0C9RXtQC+ivK
i2I/RnlR7N8oL+oF/R7lRX9Cf0h5UewnKS+K/SflRbFfpbxoZ+hvKS+K/TDl
RdtD/0x5Uey3KS+aDf055UWxn6e8KPb/lBfF/QLlRffC/oLyooGwH6G8KO5f
KC8apbvf4TiT/RHHmeynOM6uuvsvjjPZr3Gcyf5Ofv/o7gc5zmT/yHEm+02O
c0/d/SnHmexnOc5k/8txXqa7X+Y44/6a8qK4H6e8aD3Yv1NeFPf7lBc9A/wA
5UW/AZ9AedH7wD9QXtQQ+ArKix4EfoPyom2AD6G86E7gTygvGg18C+VFkZ+h
vCjyOZQXVQP/Q3lR5IsoL4r8EuVFs3T5KI4z4a84zm10+S6O8wtdfozjTPg0
jjPh3zjOhK/jOBN+j+NM+ECO8zZd/pDjTPhGjjPhJznOhM+UcQb+c+bwX2sf
7NHzXVrdbvX264WSYrmJ99i8OB6/NjZ3yyunX5LD1Epxg2fIccTfyrd+QYsb
ccypLP8H/ryE758zJ61aEh+P8xLZ7/ES8yVynsPDTt1yifgh/RhxZtO78XIc
5yumZPtOA3s5/sHK/MbCd1+ltP2Fh2rZ0OvJko5GnK0yvXo8j3uuvl080zhT
OnjzccbRanIc57dbq7ZOC2om8Hizl6EPr31OkQ40Nn5WsUMCGf+f93IXZYbJ
4UQeP1V2v+FS0iHJeaiPHMd6CFxbHD6mezK7XYZPtKyDV2r6Pqt8Mit3eV85
179/JYWlXuTcSr+lr5cHPR2bLN8X1n8jizUPpifE8/GIv99Uq2du+vJ9hZZd
5w3Wfcux90esk+n1s98NT3wZdi2F5+n+cXOdmEE/JefnTm2PPZPz43xlDHA+
P95Fzp9+83GPM3PVrN6C1DNJb1Monmxx9tJRehtSeZ67S4Z3nDblh7RB71F6
SICcn++zPi9bWeol42yYVn+wamk685/2MNboeiqPc7+NwavDntvk/Nr5+iLN
azv6xd6MBIJPllT+19tQy6ZyHb7X1g9jbRJrRjjS689lIbbnLy90k/H54VSt
4oVeH6VbasuzS1ck8TjWT53f4anOz2WcN/w+dfit4hsLeFrQZs6TFFr/bP6A
grxts+V5X18Wj5ZOXB3hdy8iheRXSOd3bSk43l3GYWKFjhe3+Oczs/q9BqX3
l/8uPu/OExTdM90SeR6rsniINHJKw4SRDjJuWJ/fXcapN49P43mWaNcBVmA6
cFWDE4m0Dln83s2D54xOYLMeNjRuUFok5Zx8ObX4aLH0L2V57z6N5PnFuvV0
uHT/QvN4Ph7r9pnZoHXPD8njtXX7jE2ppH8s8kYaxYFdqaHufEdK43niDs/a
W/C8QHKyiHVySJbzY91O3njnfVB0AsWZPe9VuH9INs3/n/11/Aw7u41yfj/b
wiffY75LDstt2y+ZnMjjWLfVT1rsbr1Drod8bZ0wL1u9J+//qz6xbr9suDTh
xtpUnmd2fveXyfk5knmhu/0Vg2SCT5Y0Kvb++jYmcj3UeLYm/nLtTyx18630
kK6p5PpzmcepjdP6pst5nMqeu/fStoRhn/v8S+FxrNun6/JOLborPKdsbacl
4+vYJtF1gHk5HGr8uEUSz1Oh7HoSpXWDnu6b0yON5FdIplUCdh89l0bXGZbc
+ET/I8/l+sS6vXj4b9v1O+W6Mi/7uwHSkf4Lf7f6IufHuj1+quv5j5Fy/hFf
1O/jGxexuOs3H81vkUDrkK2sYRx0e0I8e1K2DudL1cuuv1jqnOj/+VtX+e9i
3V6wDXWzLS+P5/6NH5YfptjJ40+Xxd3Zi3oNMqakCjiwly1bZIaNSuN5tHVS
IFUPMEhPnJDI41i341PKhWfVknEuKhsfy7p/j8z6Uo3mT2Mqm14XPrVM5XnS
ytbn79KQcPvhTf8m8TjWrU2T+a3aPZbr5L62Ttg8ZbUHl27LdYJ1W3rgmvnH
K8k8z5kyfD5LK00nbVx0PIXgkyXZdm9QcDFfzqMue699Zhb1DjZpnp9Erj+X
2d5bsq5jJfk6V5Xh8EHaeqXwWJKDfF+8bh2sk7Ouy8/RX5/FHt3T8ticH4nZ
9Wcl0nWA/Qkcfi/cKYHn2VF2nfFS4415mx7m0PwKKWr528J+B+X8sdp1hgWa
95zl0Eued6zb1pctIo47yHVyriyPj3T9YUsnMws5P9at66wrgXpPZHw6RjVf
2O98EVs92XnOC9N4WodschVVzQP/6cfKl9XzV6m9dryU8MgofI2VXD9Yt7/K
d1534z/Xg+OxbhdUuL4zMj2RXicr1XdQtPdPpjiw3kkDVJ5jk3meOsE+R3t5
/pS+tK2QvjA6icexbi+vfbBodHM5zwEtzizrnW9H9xNJdB5Ze5sVAxt4JvI8
Jdp5lG7VfLZZ80v+u1i3qY/ynr39K+fXrucf2NZ4p9XTP8rzi3X74cuNnyVz
E3ieSG0dStKaTzMy96QQfLKkot7biuJN5Hq+pK1zNrfblOtrr8WT689lT45p
HC8ulXG+Bevt3u1xVx/0kPNj3e587/Ch0ZFk+pyy+mZ13W2XxNN1gIU2umI4
Klae91ztOiAtPF9xfESlZJJfIbXIZYff15NxLtCuM0zfRBr6ZUccj2Pd/qt7
2t33gpx/G6y3l9Z3bN2rgjwvvE84xA53biDjXE27frLP9x7svLYkjtYhe9Hl
pud5ZRx7pt0XSMO167Ok6T309Z23cv1g3c50/JQz3CeBj8e6zTC6VLfb7yR6
nWziQt9z8f/1XGDdjp76n/XHUP67r8v6/1/SmG+NFj5ITuJxrFvHXebzdlrK
eNbSvtfY2dp3TkTWiaXzyAqXjpzT3iOG52lc1q/mSY3dP2ou7E7mcazbQ62T
1nY0lPPfhvV21linnOFhMTyOddty+TWHhk3l/G2gvz3Q7UzV/A1JBJ8sKT/k
wZQ4RSKtcxb45ebFN0tjyPXnMuN0/atbDeX8KWV1+E7Kvm6a7rZDxh/rtmLX
NXvPnJDrPEDbF7HHZuo+TZrE0HWAdfqxp3S3jZx/GfS3B9JTC6V7sSS/Qlox
q+ORYSfkPAmw3naoHXhm9HU5jnVbpcvZgbMT5DzW2r5RmjHz1+uPlhoex7ot
tWvQNHmFmuf5qu1X2d4ZleyjlsTROmTLcpcU17SJZy7a/ZpkDvtiTcLo00pz
9Nv7ep8jPnz8u1jPYbD/xTxYzzU9Z+46N1bOQ3375L6YIj7NtVw5NcWN7dpb
92upk4LnH6/dF0gWlpcreKcl8fx7SH4cj/WfaltqPvKWPB7jW8A/j3/3Stl9
JbEaUQ6Nlo6IonXCDt3IWKp8HsXzr9Pug6S5BbE/h41M5PnXkN8j4Hh8Xi51
ypnzLT2Bj8f4fPD5498tgn5br9/qF2N/yteDz1GvybuX9uyl5PmHla0/2dLR
JIsKHvZxPL8T5MffEejO13/eCwt8tu/RiyPzlSW9ht8j4N9trX1OWYbHyIer
OqkIPrnsz13f1DtL1Tx/I+0+V4pVl7unH6Lh+XdBfi/Ij+PxeTx3a3ju91by
eIwPhd9N4N91gn6+qHaz9evba+i6xyZ2uTtrXo9onr8N8B4DTNMzT6xQ8/yu
8Jy2gd9r6F6PQjp91V962jKCXI9Cag7j8e+aQP+/dv6zZg//RvM4Ptc9L4zb
GLoljudfqOUxpE6F1+YuSwzg+a9D/kbkevB5975bzmrVBH8+vpzOvydm+HdV
Wr6F/QvVmzr2bgJ9ftmOu10Ss9skct7mxZSJo7z2/ZaCx9SokLBdfo74756Q
z4G/S3+ng3nweb88xur+Q2+5/q9peSQW5lZ+dGoliVz/KzPt/4/MCP5M06XF
4bV1/Cj+rAHgg3/3KvB4VeallO+5N4HH8Xlv+dJj0k33WFoP7K+9Y601R/xp
PbCG/2s9pLEXa1c1N/0XQOuTDYD6xL9rB7zfvE9RLuOnx/I4Pu/Gdpv21XKS
6/+NlsdjOQOda3xYFMrzP4P8+LshHI/rgOU1Y5sKj8P4eIy7w/OFf3cMrA+3
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
77bk3Hmsk7uPYl+ObZrI3pTNVw6/zjBHj+D9D+TrRxzqeUXGvr0Vz3bB9eM8
bu9XN6m5UsYf76uk1YWTS+zjWIuyuv3E70uq+MjkYpJ8v1g/5ifqllTPks+j
x/z/vg47tepJLPusc56Rh/d3OEcYx2Od7PUuXvHLQ86DddLFrXuHnqWx7FrZ
+yKP4zBwzg69vQMT+DlEWD9mOQvbr3aVz6PH+jEYGrXQeW0yW1k2Lyk8vnjl
4FlmH+XxWA+fW/2z8LifzBzK1v9vHM8NNQofLA2Vz5PC+d2kcIqvPCKZVSp7
7t7zPKdd+2b//U8d4nicL4+xqkmeJvLfRZy7nxh8Jd4ygW0qw+Edz5/qmL62
VbdEPh7rJ77B428RXePIuVEe3t8AZ4wjbkesT2SM8Vez82X39ZZfz+vTCZUu
n4/n4/F+i4KGO5wKU/E41kmixsnv7yMVmw144vUbteoZ2POd/HexTtZY1rh3
r6l8nhTWSaNkH+9zKWrWtKzeEvl9nQnY34zZKvh4rBPjzQaqvClyfqyT872U
+Tbt+PndvB40J+/sSJ7Fz+Pm8344eUrlE1XkOM5XyWO3SZu/8/O+Of5XVtXN
+1BRPqcecRuYNK3ZqInyufaIw9ve9wdszOTnBPH7umfeoc/HbvJ5WDhfQ3TP
Mefzlf19399brfx5HOelnbuRde2/chznxXHY/XIjj8jnTyH+cRdcFhpMlM+Z
QvzvTGz6a8UTfh46x/laQHH5io1lPBHnlz5dDYd6yufLI84vuv7++c1JPl8e
cT5jta76lxaJPI44371x22PBM/m8IsS5+sguLjvNZR8A4vx+5+5XwQ7y+VaI
c0z8sW2nugfxOOLcf//xzcEvX/I44qz9/7YZRhDnDmQ84hxJ8vP6J9fD+zFy
/Yjzbbjfl6Dz4nUqdL57Vq4c4n+a4Ib4I85Gv/9nXpwYXv8I5+MduuZ58fOV
cF7cYb4wjvNyQ3d+UceRnKAeVpWtP2qGOMSNCBq14LKSj8f5StOtK4bzdRfq
8EBZHj+GuPVscuLUrCz5/Cycx/a69czxydStf4bzaAbPS3FZPJgh/lZvu9tv
+K/7Qnxu6j53/L5S4DndXLaORTKcL8WYgTu68fPH4/j194Pn/QXonnj9NeH7
kDger+cirBtbAU+c3xyzxa82RSfx8fh3f8P6k6FzzpSH9xdYz3E85iHrGMM6
UcO6Z6JdVzkODrCu4vlQWCcXddbPTF4nuN5e174HeTy1Tf9ONV1i+Xisnyaw
nq/Vvhc4zsbwXsDxWD8W8F7AONZPErxfKmvfpxz/HufGLV+VFc/H8/0dvKcw
jvVjD++7bIInvh/XaN+zfL6S4D2L4xE3fM9W1PqN+XX6wXeKcDzerwm8x+vA
9eP8noF+AMfjfblDP3AXcMb72gr9Bo7H69wM/cZCwBnrwRz6GRyPf/cL9DO3
tH0Ux2co9FE4HvM0gH4J41hX2F/huVdYP12hT8M41gn2dWO1/TmPr904cuJE
63g+HuunXK62bzTS9p8cT3/oP3E81g/2nxjHecE+NlTbJ3Oco6BPxvGIM/bJ
T0Ffw/zz4HtBOJ6/x6EP1z2nzMO7DfTt2nn5wudLdexfyuQD8t/lfSz0/7u1
/Tm//mDYX+B4xAH3FxjH+6oE+5QJgDPel95q7T4Ix+P1lOun3QdhHOsE91OZ
OueCyftZHI91ooB9GcaxTnAfx7T7RH6/t2CfiOd5Yf3sgf0gxrFOcP+IcawT
3IfW0u5zOT4xsM/F8TiPuM+dAzoU5pkL3+3B8bwfhn00xhHPwbDv7qDd1/P8
02Ffj+OxTnBfn03wHAF4YhzxQT6hQMtX8OtJBb4Cx+P9HgS+Qsuv5vN5TN+Q
9KlqE/l6sE5uAh8SpN3v8/t6AbwKjsc6+QO8CsYxvwPwM+e0/A+/3xHA/+B4
rJNM4HkwjnXiD7yQnZZvHIL1IEmV/1Tuk8g8tfwVxydXl7+S31/AU2Ec66cJ
8Frwe1Iex+/q4Hish2DgzY5o+TeOc39d/o3Pe0Xg34CH5HkuFPjOerCV83t8
Hs8Dv4dxxB95Qkct38jzO+jyjRxnwjfyukLeEuN8HwE8ZyRcJ15PJV2+lN9v
sS5fyutnC/Cujlr+dgh/LnT5W14/kbr8La+fOsADH4Z5x/s6ossz8/ohfDKv
H+SfZ4GuhPWA373poeXDOQ6pwIfj+Ws4vhR4b4xjnVgDTw76BY9fNXF3tpiR
zMdzfht4eIzjPPYAPr+9Vhfg41EXwPGcdwJdAOOIM+oLoFPw/MUNml9O+ynn
QTxRp9A9F8/D+xXoHRhHfMJAHynQ6iz8epxBZ8HxvH8GnQXjWCdhoNekAG54
/YdA98HxWCeo+2Ac6wT1o0CtPsXvqwboUzge6wR1KIxjnRSBboXnweG8K0H/
wjjO72hdvYzPF9HXOP4HdfU4jtsgXf2O49AcdECM430119UN+Xx10dUZ+XwV
6eqSfF6IjsnnxUNX9+T439LVSTn+RFflOFfQ1WE5zoeIbst1Q+ff/Z7UiRX0
XLMj4fpGrtGCnttXsmz+/I9K0HOddjjWca4UKei5Nbo/HbNte4ig595O9ak/
pEOQoOc6RnUIyWkcJOi55BxDWQ8N+zTWd3iIoOeWHB6YnjYnVNBzUfenem7c
dsuzz/aECXruZwv9ZS+8wgU9t+35PYpa+pGCnjuj9qTiK4OjBD33wC6D9kNn
KAQ9d/2/4DvbK4cKeq5U1WCxV3qMoOfabvhgcvGMRtBz34ytMLDmWpWg514e
79qlt1+YoOcGPG609IZHlKDn/vTYNa1z1UhBz93Y4HiHNgciBD33fkncoNfH
IgQ917lTpZCB/hGCnmsH535SPXf1pOumAUOjBD23ape1z+/9jBT03CC7LzOa
hUcJeu7Ibr5TMjsrBT23z7zAWrMCFYKeW73lpRbTU5SCnhvua7ltl41K0HNN
twZmVDugEvTc3sbFpRc/KgQ917RvYKR1Y7Wg57YpqH125W21oOeucXEc+Htq
lKDnlvTd1CUvJ1rQc62SNnScYK0R9Nwjb44vPjBTLei5ozIi/ErNFYKea5PA
1ieeUgl67qDyo87Z1VcJei57aT27v49S0HOrjvcd0OysUtBzzzl3O5YzTCno
uXjeLtVz22YF12sxTSXouY93PPOot1Qp6Lk58RuzlUqloOc2SbgybXKYStBz
7S+tKFANUAl67obebxJm5CkFPffUQOP6/R6qBD331tBG0d36qAU9d9KjvNxr
ZkpBz/329MOh6Z/Ugp47ySm9sG64RtBzDW91WTq7h1rQcx0PNC2pP1kp6Lmd
ps/99bNII+i5R7Oso2uO0wh6btPlqr7vr6oFPbfTjafXdh1QCnruj63WDSr+
VQl6rm/MhKojN6oEPbdbipv9lBCloOfWvWV3+HCuUtBzr4OvmOq5I9wWmt7o
pBT03A5wLjbVcxN3+i3eVE8l6Lm7+udtyhuuEPTcBp7Tb3f5pBD03BVFtkmJ
HRSCnvtpV5ewxZMUgp47o9WooCDLKEHPzWh85GalTIWg5xb/fuu0Pkst6Ll+
28fX6G6oEvTcPikTPK3LRQp6rtffoUP1BqsFPXfCeO+uOR81gp77a4dD8bGP
KkHPHXzkj2LKAZWg51b5e8xkxz+loOdmVFyxfHFppKDnTj7RyC48XiHoufh7
BKrnelr39It4GCXouS7nasw0mBYp6LlX36/Yc/FIpKDn2oVY7O+REiHouTcf
Pi5/em+EoOeuhPPrqZ7brs/XFvNfhgl6rou+ouE7tzBBz93ds/2u0Iphgp77
d8ix8V4pSkHPvblm1uwsvTBBzz3o+HzHkwshgp679/TgES2Xhgt67jnb9o0q
HYkS9FyNvbnB4ZMBgp6bu8KkxdLmakHPDR5QVOwTGi3ouSZFuUGtY0MFPffR
9cN6kjpS0HP7uM5zm+AQIei5jqP3T0xcHCrouef9p0a6dA8X9Nznv2uvaNE6
RNBzDykndk11DhX03JDjHxvvOBcq6LmP3202WDcwRNBzH3SyG302I0jQcz/U
uGLar22QoOfeGt+sxMY1UNBzVYAz1XNXOrfbpujlL+i583NVic3D/AU9d96/
wbtXX/IT9Nxj770uOlwIEPTcqG/JewcOkQQ9NzrZxl5hHirouR0WbQtyzVII
em6H4X+3frbzFPTcHssG1ug0QyPoub4WF4saHOV6B6+HFq8tusfUDRf03CnK
U5s974YIeu7sxPXj6+gHCXqu3Yub+bvHyPop4lb6qGqXkImSoOf+bGVwt747
19f4fV1iVon9B7gLeu7nX0cm2Lu7CXpuhpVTsKq/i6Dnph8+XDV5rJwf56XZ
2YCI14cDBD2396KREfdGhwp6boeiKnaL5kQIeq5np821/s5Q8DjibGBuZDz0
tErQc++WW34oMilC0HPDbX8f/Xc/VNBziw87Hu7eKkjQcyVfcx+DCX6Cnvvr
+7z0ihu8BD13Vd5G/7gUZ0HPbdLm7pFVFW//H3ruaUHPrUrGI87mJD/inEuu
h/s/yfUjzr/gfqme21Tn+w+ynhtGcEP87wDOVM/VLA5OHtvzvqDn1of5onqu
l+78ch6yE9QD1XO9ntXKv7mc1y3nG/vq1hXnCdtAHVI9t6X6ofVn0zeCnput
W88cn/e69c95y2x4Xqie22C8181K7WT9F/E5r/vc8fvKg+eU6rkBo/a+CJrI
1wF+/X/gead6rgH8HpzqubhuUD0391687/k6Mm74d2fB+kP13EhYz6meO0l3
HeM8ZzNY96ie2wPWVarn+umsn7Kei+st1XN7fO00dIyhrJNi/RjDek713AR4
L1A9NwHeC1TPPQHvF6rnhoQ6qUybBPLxiP98eE9RPXcVvO+onqsEPKme+xbe
s1TPxfcs1XOL4ffaVM99BO9xqueGQz9A9dwn0A9QPfcV9BtUz7WDfoPquTeg
n6F6LvYzVM/tDX0U1XN7Q79E9Vzsr6ieGwJ9GtVzv0FfR/XcrQYDcipvUwt6
7gXoG6meexT6T6rn7of+k+q5t6GPpXquB/TJVM/dC30y1XPvwu+mqZ7bHvpw
queugr6d6rljLxR33/Y0QtBzsf+neq4H7C+onov7C6rnesE+heq5n2AfRPVc
3AdRPbcq7KeontsW9rNUz8V9GdVzcR9H9dx+sE+keu5E2A9SPfc17B+pnusP
+1Cq586GfS7Vcz/CPpfqufgdUarn4j6a6rkrYd9N9dwk2NdTPXcn7Oupntse
8KR67nDgE6ieawp8BdVz6wFfQfXcTftzjDrdlq8H6wT5EKrndgZeheq5yKtQ
PdcQ+Bmq5yL/Q/Vce+B5qJ5rBLwQ1XNrDAvdmJ+kFvTcybr8Fa+fycBTUT03
D3gtqufi74upnou8GdVzLXX5Nz7vyL9RPdcrdeiKnG8qQc9Ffo/qucgTUj23
jS7fyHEmfCOvK+QtqZ6LPCfVc4fo8qX8fglfyusHeVeq547Q5W95/RD+ltfP
YeCBqZ67Updn5vWzTZdP5vVTDPwz1XPxe+ZUz+0JfDjVc1sD7031XOTJqZ7b
7s+v+2dtFIKeizw81XOrAp9P9dxhoAtQPbcX6AJUzw0EfYHquYfN/kweMjNK
0HOrgE5B9dyDoHdQPfcZ6CNUz7UAnYXqufdAZ6F67g/Qa6ieex50H6rn+oLu
Q/Vcb9CPqJ67BvQpqufuAR2K6rlvQLeieu5+0L+onkv0Mj5fRF/j+BM9juNG
9DuOwx/QAameW0dXN+TzRXRGPl+3dHVJPi9Ex+TzUlVX95T1XF2dlOPfW1dX
5TgP1NVhOc6o26Lex/nb8IX2H/JjuH6HeA6ZO894f0wMqwa6G+K59k28z4Am
sVxH43i+zbAe+jOWDQRdDPHsEXD46umT8ewh0We7gg5+CPQs7nO+8djO5l4c
ewm6DF+3a8Z18pwbz3UfvJ4FjRaXZmxNYBGgN+H1zLq499vrFknsJuhZeD3e
Hcc3tG+UxNYRndEdfBQzQP9F3ArAf3Ia9BS8zq2OiWfs28QzP+DnEc+e84Y/
eV0Yz76DroHXn5m9OH7E1ESuO+D1d7hVtae6ZjL2Ffz6T1vsHLuqawr7q/3d
Oud/ksHvtOj/+J1jN9AZ8fpjXyY6nG+VwHl4vE6HvKVvXCYksu3AP+N19mrY
uGHdKslsOnz/HOsNz8X7SPSUoeB/ewl6Fv5dperAnMZD40FPzOO4ZRm5OmfP
S2SDQafA56Xau8zdHa8kcl4Xr9Pfsfm5Rxp+Ph3nzfD8x2qgpyA+Q8xW99lV
Lw7eg3mc30sceOf3yrbJUJ8yjz1re963DfpxgM9Hfp2hP9/XHJqcxEKAz8fn
tLFVubGrOkez5aAj4PXMMp5iVVkRzXxgPOJm2XPqp9Y1o1kr4O3xOqOqx9ZI
mh3N3hN+GP3h+8v6nGx+ndscTqr1M/G7cNHy72LgnNyuwNPy3yHOSPtQsjGQ
rdbyGxxP9KvD9744b6kHvvdpWr6F10MU+OeRP+f7GofzPaf1iGRxWp6H1/M2
8O3D/p3jM/nyT68hz6PYfC3vxOu8B/yO4CLw3ojb8Svb9PvdVLMdcP34/H6G
3y+8JTztAPgdwdWyuBOf977we4pWgA9fDzM+/ftnm8CKtON5v1r9oDR9/PEk
dgdwRjxd4Pcd2vGveL864/CL1TuvJCAvx/GcdUwxd+YDP7YHeDbEM9RstN2t
9bFsIuCMeKZmH6q1dEIoSwDeDPGsEb801jNJxX4DzohnJYhvB36M+0shjzng
jHji3wU8eX+7AK4zVntfvD7xvrT4+pvp8rRPzGIBZ8QTcTMCXgvx/A04g77D
cVuQtNh9gkUse6Cdd44PzvsW4H+4fxvqB+qE3++pieZTch9HoE7B+3AN1P8z
4HX57yngedHuI7L5dVrB84W8BF7PVnh+VwJvgNdjrY7q9KhXNPtC+Ksf8PyO
164n/O+GwHoC6x7/u3Ng/YF1UuaNYb1Kg/0jXk9hSLZ+/eNxrALwXdxXAL97
vQU8Fc6jH6yfsO5xfCrDegvrJL9OXJ89YH+H16mC9fww7L9wHofcXLh2epUE
Zg08CdZz8Lek0pj8FM7bYN2ugt9fjwc+BK/zKryPPv8f/mrDtaePv20j70/b
rxheb35kPOcN8O/iuZbIA+Dfba/7nuW4ZcN7ORD23Xg9+B5fSvZxFeE9exb2
13g92A/cgP0XrgMS9Btq2N/hdc6A/uQa7CvxOtuYPmzf9XsC89D2P7zfw/4H
+hm53/t5/vjt0DhmSfYRrtDP4D4Or/MV9Fe4L8N6i4XvlmjrU95HdIX+rQPs
j/D6NdDv4X4Hr38l9IftYDxev95V5wUr/sSib4pf/5bJ03xCnsSxANhH8N/H
Tf39yjk6TuhXB7kZ1LxzI1roV+c0m/3MyEol9KsGp15+n5ofIfSrn6I7xho8
CxP6Ven+6loWKWFCv/oI+nzarzZtZLBX4xsj9KuVShQv1DtVQr9q0tAg/auB
UuhXNw44cMzxokLoV7+5PKswfFOk0K8ehn0i7Vefwv6a9qsvbGKNd76IFvrV
N/mWj1KGa4R+1bJv3Z9X56iFfrXvn+qDHgephH41blCQl4GxSuhXkc+h/Sry
IbRfXT7XqMmh/+wTab/a6PToH51C1UK/2jW9s9O2YpXQr5oDf0j7VeT3aL+a
5zrdYn2ARuhXPZ1S1FY3VUK/+mb1yZjhfcKFfvW55y3LVH+l0K/idz5pv9pn
cp+t8zNVQr/63OLpo1k3w4V+VePgaLvfKVroV3ubez8LcIwU+tX+5neObpsX
LPSr8z/EBS+wDRf61Y7Zy35rnkYJ/eq3ZPZp2GyN0K+i/kX71Z7nV2/NeBMt
9Kv4PWTar+6z6bp0n52b0K/mgR5H+9VKoOvRfjUI9EHar5b7/aXu2z3+Qr/a
EHRJ2q/mvJ471aVXmNCvtgadlParep+Smy+XooR+NRT0WdqvfgSdlParfqAX
03710t2NXjHpKqFf9Vw7kW3dESn0q//ge+y0X82p1OrVhD9hQr/q5T25v9kK
D6FfXXYlzPXIhBChXy3/tvqG2x/9hH71/Mgn3r+rBQn96mWI0361JuSh/epC
+Lu0Xw2B66T9ajbc1//er14T+lV3wI32q5cBZ9qvPs9QZY9KUgr9amWYd9qv
foP6of3qY5szU7bfCBT61U1Q/7Rf3QLPC+1Xe8PzRfvVzvD80n615Mj7SmeG
hQr9Kvq+aL/aB9YT2q9Gw/pD+9VHsF7RfrVZN9OMx2+jhH4Vzxej/aoLrJ+0
X30N6y3tV3F9pv3qd1jPab/q8mJkqyymFvrVVmt2mHa6pRT61ZvgL6X9amN4
H9F+Fd8vtF+t0CXkRKcnGqFf7QDfL6X9KnnPctw2wHuZ9qve8B6n/epueM/S
fvU59AO0X/0O/QbtV9dBf0L71eOjDixYFqAU+tUK0P/QfvXD9sSBATM0Qr+6
H/oZ2q8aQn9F+9Wp8LsM2q96Qv9G+9X30O/RfrUO9Ie0X3X40uzRuTyV0K/u
HnalXVMnjdCvelrWeX3sv84Lxnq78tQx7+bCOB7H56KiZn/VpA1ynH+HYU7k
1ikecpz7dnYOfLZ7hnxONK6HleyHjdkxJ4HHOd8F/bzuOcge3gFwrjeey4nP
y43ULwlt/sh/F3Eet9659sXNKTyOOI/1NctdNjKV58H78iiwa7uMydeD+Hfs
FtvQ0U4ej/d7Zo2yZvsJ8nXivMxsFv68xp8UPp77aZ8+DLO8lsTH43wZtDTM
+zFOHo/49D+Uv2dOLfn6cR4natyjJunLOCBu6zIDV65ZkcrHUx5Y99xeD+/v
LuPUm8en8fMi+b7+V12TS5bxfDzieeKYSZ3OXvJ4rJPqVaYu37cxgY9HnEvH
p3ezvCyPR5zPJY94bxMsXw/i3Le2170HN1P5eM6fvHFrnj1Bvl/EWaMe6HzJ
J4WP57+7v6NuceGxjCf/7kFKtqLtf+oHxyPOcYWNTSuWT+PjEWf8fS6OR5zv
NL71p66zPJ7vT89OWpUxIYGcM+vhffxU1/MfI9P4+Yb8ewVPRtzrt1Eez38n
++nlx4zl8njE+ZGyWmz6U/l6EOdCq02fPu9O5eMR51otfGyuG8n3y/ufPY99
XvVLoedU8u/L4XjEudqyFwEeAUl8POLc599gp6qb5PlCnPH37DgecV56yM0p
NFAejzg3UcV5NN+RwMcjznpWlh+Kd8vjEeeMvV3vXd4eT85F9fB2m3UlUO9J
Cj+PD3FOGmg1ZNYb+XoQ59V3NcqYVcl8POLcPnNANb0v8v0izpVNzpmubJvE
xyPOjsBf4XjEWZ1y99hu/wQ+HnEueujes/EKGX/EGb/zgOMR5w+/GvxsbSqP
R5yLT+0zDV4ij+f1vOCs0+IZ8vUgzh/bdDG5cj+Oj0ecRwf0XfHAQ8YHcf7d
5+ID9yNx5BxPD+8fh9jhzg0S+HlniPP8butWfvoi48P9SI/uxOgtjePjEeeu
RT8q9h4s4484LzZO3MnyY/h4xLlCQjsDs53yeMS55ozbppcPyOMR5wfuw1uf
7y9fD/+9zAHbS2NmyOMR52891l8e2S6RnifLrDOcje82kcfz76T5DJj267OM
D+JstHxV/9VH5PGI80njliur9JTP4eXv36ja42PzY8m5k//p/w83aJq8Qj4n
DvGM0vlek683/f6VC9m3os6C+TFP1x4mT2J6y+dq4byche8+YR6M96+RsOjf
1ySeB+cLvzuEeXC+7sH3pjAPxr8efbfA+UEiz4Pz2GispuhttpwH57EmfM8K
8/D378i5F+2OxvM8/HtHr+30R+XL94Xzmw3fy8I83Nfnembl2JvyfOG875i3
4V6VQBl/nHfjLxW6TU6UzxfDeKLOd7p8ven3sjAP1oNZ1LsWdxrI5zzi+Jjm
a4b0VMeRcwk9vP3ulrNaNcGf58c8Y3S+G4bn/eH+0d2MnOskzXp1zKK4JIGP
x3roDHlwPNfZM/wNcvfL14Pzzm6VrHaZJl8PxsMBB8yD8/78xZu3m/rL88h/
99Tu2rziFvL5oRiPhfnCPDjvefMLu3dZpeDjua5E6gTj72E85uHf34a/i+Nx
3h/CdWJ+rlNAPWMenPdBgAPmwXWgP+CGeTB+Cp4vzIPzGATPNTk3lk2H+dI9
n87D+wnUA55/hPObAPWD4/n8Qr3heP68s4SQ5RVi+Hicx9ZQ5zge59EGngsc
j/N1FZ4jHI/zdQ6eRxyP83ICnl8cj/Niuf/1wF915fGI/2dYN3A8/74QrD84
nuMP6xWOR5xbwrqH46m+pns+mod3oZ12HcbzehBnL1i3cTzifBjWeRyPOK+p
6Gp5ZII8HnHuDO8Rcp6RZAXvHRyPOLvaRFZOeJjAxyPOG3xb3Bj2Tj5PDXG+
B+9BHI84e8N3w3A83//CexbHI87z4L2M4xFnE3iP43jE+Qq893E84ox9gu55
Xh7eOdBX4PkyXIeFPgTHI85DoG/B8YhzkP2+md0/yOMRZw30RTgecd680frx
2mJ5PN93Q9+F4xFn9G/geMQ5pc+zLTdD5PyIcxT0gTie6p44HnEuD30mjkec
sS/F8YjzcuhjcTzinAJ9r+75Ux7eL6BPxvNQEOcP0FfjeM7HbtP24Tie9wNs
TX7DIfJ8Ic7LoM+fRnzRs2FfgOMR5/XfX+alF8jXgzhXhn0Hjqc6LI5HnMvB
vgbHI84VV/U6tLsoiY9HnAtg34TjEeensM/i5zoBzlmwL8PxiHPfN2EHdi1J
IOcleXifgH0fnt/B99eW0l/rOfJ4/l1l2FfieMQZfVM4HnFOgn0rjuffNTV8
k99qRDIfjzjvBX0ZxyPOSthH43jEeSHsu3E83/fBPh3H83MfYF+P4xFn5AFw
POJcE3gDHI84nwKeAccjzshL6J7v4+H9E3iM6YRnw/MsphMf7y/gQzAPjt8I
/AmOR/z3ePypOz07ST7HB/AfBPwMjkf86wOfg+P59xWB/8HxiH+Gte3Gaiap
fDzib221tfXYo/L1I/6dgI/C8dzXCvwVjkf8JwLfheO53yx4fOMKO+Ll84YA
/8nAm+F4xP8m8Gy659R4eIcDL4dxxKc68HsY53wa8IEYx/v9APwhxrmu1+lK
y0Yn5Dhef+2lPceYP5Tj/P3iN+THCClO4DNb/R7ycL2PRuAza99/12LHOpXA
Z15q92/k+NFRAp/5ze+lUdshEQKf6axu2aG+W7jAZ84AvpfymZ3hfB/KZ14y
2dkywChG4DMHjjOxtxkSKfCZZtP6KQqaRwl85tfbNW0tS1UCn1kr81B9l+YK
gc8M/X7XxKimSuAz3z+a0/b5/+wTCZ/ZtJOdgWEzpcBn6pW7MyWhp0rgMx+v
9zLqdFgh8Jl/S5rcsglTCXzmycknmkZvVgh8JvrwKZ8pwTlflM9kT+NNr42O
FvjMzs2U47tHKAQ+8876n4MLRmkEPtPVLqP70ZlKgc+cOLYw+eAWtcBnJqcO
7rmgRCnwmSsNO7rui1YJfObcusX1Hu9WCXxmL5sSJ79RKoHPtGj0UXO7mlrg
M12WrfZxTFcKfCb6GSif+XhwxyFrBysFPvOL3obOCyw1Ap85Gs4BpHzmqLu/
enYtUAt8Zos6F5atf6UQ+EybEyZn3s1XC3zmmPGXBhrHKgQ+M3HvsrgDISqB
z7RpNj7OvrtS4DNR/6J8ZrkhB92NY5UCn3lucklOwkSlwGfi77konzlkfKVK
ziMUAp8570+dre5n1QKfqep3/Q6bHyXwmZkrZ4+bHqQR+MwQOCeU8pkPfy3Z
1qlEKfCZe2Z4HCr5ESHwmWM+NCixrKsU+MxAafK6/Y8jBD5TAfom5TM/tst+
velBhMBn/vGYdaDx1UiBz7wNvhHKZ3qWLvCrPi5C4DNfTkytuWyFUuAzz/tV
29W6drjAZy61P+Vxtrxa4DNVPw9Ym+WGCnzmG+sn+4qmRwt85mk4R5jymbXb
DffrOTxS4DNXS4nPtucFC3zmi4xVWSq7cIHPVKkarYntFSzwmbV+LvrXp3mY
wGf+WTb1odnaEIHP7L1hy/Ojn4MFPvOuovvKKOtwgc+cb3v5YpOtQQKf6eHT
qL/bjSiBz2zYpDTQNypA4DO/tnI/MM1LLfCZvZb3q5m1wV/gM58c2mTSODBa
4DMHwTnjlM801Plegcxn4ncJKJ+5DXwFlM/sfPJojQtvJYHPxO9FUD7zppdr
k/tJIQKfWR/8OZTPxO9LUD5z54Mt/hOaBgl8ZvI108Ghyf4Cn+kL33OgfGbn
2U4tzJm/wGemjV+73jc8VOAzi+F7EZTPjPm4YKDinY/AZ47vZrG/6yaFwGe+
XXUmIrGmp8BnrtX5ToXMZ94j84L1sN8uv1y5My8FPnNMrVXVN4VoBD6zYUJh
m8utXAQ+s6POdzMon+kk8JlHSxeldx2oEvjMWpCH8pmf29aeefRqlMBnTrlt
cevYbE+Bz1wGOFA+85/zUv+e9uECn+n7OFlv0R9/gc/Mh/mifGaNxjcr77QO
EfhMH1InGK8N4ymfGQh/l/KZei7a66R8ZhHUM+UzpwMOlM/8CrhRPjMCni/K
Z9aC55rymSdgviifqQ/1QPnMUVA/lM+0gnqjfGZ2vQKTjofVAp+phjqnfOZk
eC4on6mA54jymR/heaR8Jj6/lM90mPbI5vi/AIHPxHWD8pm1Yf2hfCauV5TP
bAbrHuUzt8I6SfnMXrAOUz7zKazblM/sAus85TOPGOsvuzxJLfCZdeE9QvnM
1/DeoXxmPfXnMw7tggQ+M/Fo/4tbw0MFPtMU3oOUzyyA72ZQPrM6vGcpnxkB
72XKZz6B9zjlM5fCe5/ymTWgT6B85jHoKyif6QN9COUzI6BvoXzm6KR0J9Vs
tcBnnoK+iPKZ5m3eti4/WyHwmW7Qd1E+0xH6NMpnjqs/1K6adaTAZ76DPpDy
mWHQN1I+0w/6TMpnjoS+lPKZO6CPpXzmXeh7KZ8ZCH0y5TOzoK+mfGYU9OGU
zzxTMT257QK1wGcOgj6f8pno06Z85j2NOmuXmVLgM0uZdt9B+Uz8DiTlM61h
X0P5zKD3LkWGMSqBzxwN+ybKZ+6AfRblM5vBvozymQlGf1//z/cNKJ+J579T
PnNJoYWh7yGNwGfivpLymfqwD6V8pivsWymfuXBGmv3symqBz0T/IeUzcR9N
+Uzcd1M+MwX26ZTPnAD7espnvgQegPKZyBtQPtMYeAbKZ5oBL0H5TDyvnPKZ
c8k5zog/PZccx58G/oTymRUCbvcbFaYS+MynwM9QPrMC8DmUz2wJ/A/lM9ev
zFt7coBS4DPfvfE9EdRPJfCZdYGPonwm8leUzxwKfBflMx08sxK2rNMIfOYQ
4M0on3keeDbKZ+K525TPfAX8HuUz84EPpHzmZeAPKZ85L3bJy4yLKoHP3DPH
52HCVY3AZ3rn5yb++RzD/h/Q5Kl5
      "], {{{
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
RMrsQf506mnM9yPB/W6QWrcz/fwt81g7wA/W/QGvRv4vyHeVL1yxHyB/YHtm
P0F+fVvk+6T2H6QvP3k6fN/UPmci31n3O+0/HuyPyg+UvsrtVvb7Qm1kZfsA
Kdim8L1rgC3kLypfPknm/u8Or1p2f6qAldTlWhbvBfky7eE/Rt+/KtumGJf6
P57+HIV8HHgvOkfAbwC78t0P3g2cFL3Oz8oHp0wn5BdGy3vorIF3kfcptrq3
fC7SvujP1hsRXhc+C14PPBT9vRPfccLnkDcA2wWXOQ15U/jxYDW+u2ns2muJ
+9YBbJ+43XaJ921H3RvU00R5yBvLdtPPtvBTyX8xcx0z0Kmd+OzXLXTqgDOR
/zO67tfhSzLPx8fyb8Ge6HfWXsx8rp9E97DE89ApsU3Seemn847O4eAi+bqF
/df3CaQhGhd4fXR9b6LTA+yFvLvGkLm++cjfgY+RDdB7F/0R8PfhT0T3QXZ4
RrRdehAcUszPQHBw4rM8CByp7+DyU7Kd131oo3J89w9u4ybSqGAbuph0ZbAv
2wy9UrCPJH9sPbK67J0qiW2yzlIP5FXh7eVzZt6n7dDpz/fuyDuCh5NqB/sS
T5L0pG2F7Ck4f6F1tHwJ7dxAB1uW/dbTO7MreauQ34a8HbwO8p7gC+i3lE2D
78jtc8vXfRvdmrr3S9ZfAd4kPyKx3663/SfIGsHXgH11l4D/yt3/J5DXTL2X
68M/A3dnPEsS+zDTSLV0LihXqdhfkU9YLvt9oXP+ccm+5Yfgrqlt0V6p5WpX
7as++d5LE9e5Admd9GF65rnqHm1zHtU8p+6H+qO+TuB7A7x27vp17lsrngBf
j7xW7hjOWvh4ZCspUzd4HgdH90F90btYb/Cm6MylrRbSj95v2lfPRN/5feFD
E9+zut9fRH5p9NmUvyd/5iT4rGi/SHv+kui3vmIOIwrbeyB8dPQ5GkV9H9D+
6MLO6HtCxb6LxqXY0UqdF3By9Ln5sDgXut+nRMt1b85Uf0lRa5w7ZiJbtxXZ
uGibcCa4PPP9uU5vI/lCzMG18FnwLfB/546f/IrOgfRlAHx/9R+cmnlN9W7Y
XLJ/srVk+fvgLZQdJX8rOC6g9/4CeG+wXRGHOQRcmvkeXpPb15TPqfv6l8Sx
HbUtnZ33Mzo3JI7L6W2sN7L8plXIT1dduvcVryjOu87905n3fxfq7hR3uryh
rcZEH5vB/wCb0KcXZT9T+9Fa910S3yU770Rwe8n28zdwVHS5x3OX1R3elYqH
IW8S7NMOjJ6PB3Of62XwG+FLS97P+k4Tz6fWaXHJ50hnfiNpb/gm8DnKNoYP
iX5/SP+rkvdnRrmncvuHFY01tx2oCp9avKEU47w/d3xyje611O+4b5A/kHtN
xe/Lfe8r1nRwanul9u/VmaK+fYPr7VWso+IVO4o51Fw2ZA6mBPs32mPqzxS9
pcBWwW8D+Tn1yD9EMbHE7zuNoXHquM3v9Ktuat+no+7kxO9r7UXZatmum3PP
rc5vn+j5+QX5I7lt127aV2qfOu6A5/L9c98Hi/RuLnmNPgc7FLZad7T8B+m2
qtjmKP9u2QPFQ+APwd/Nvbd0v8iv0HjrpbbJVTRv0f6S7KriImtLXjvZstWk
evB1YOfosyObo/tCsjuoe2i0zhHR+1b2+PbcPo72YQR/QHZQcJ90ecm3PJC2
nshs46/PfT8p+4OSY49vwHug807hz8tX7Fd2HECxSL1/FW/skPqM6F1+K7rf
gw2Cz/P8woYvAOuU7ctpLSfT7lvIrsvdB4qHlvxbhKxGcN6Coqzsy4LcvtSN
0Wut+F7r1LZIPvv63P6z9sN+RbxR53pw6vhnT8UaFWOMtv968x5KucOD/Z7z
o/2Tq8Aji/nUe7lX4Yer/MLM/sld0Vz+8mLqPgo8Fvkx8lNSx/n7g9dE+yR6
B5UK3yyRrxb97lBcehtjaxO8F++P9jWW574/ZE/0DpUPLx/jDnjvwj+XH39R
Ub/a6VrEexVH7lf0QTFPvdHaovtqsSd1Zw0ufEuN/UrwTPKHwScV8yC/by76
bSm/UPsKbFTYt4aJfTz5n+dF+7GSzSn0FaM9ouJ5UBx6QMXj0ttqut4NuX/T
GFzE9uWrb0e+JXPMqXbFMZbXdXenvl9QD82j4/Wy7YpTSV+xjs+Qr6HcLcF+
1a/R8T3Fwb7JHBfZtWKuN+OK6DiMYkcLo383UUzgbY2p4reT7In8cvml2m83
R/uVC3Pv212Qt4j2UXXn3h7t646ET43+PUa2TnF83a+6Z/WenlbMg97deiNo
vyyjzmEV/8ZQyR3H1l3fJXVMXr+5DEjt08p/uKXoj3zRf4OzM9ulY6PvF+3t
foVcd85juX/HeRf5cal95kHwB8B/qA/we6Lj4a/oXkZnbNnzf2LZ71/Ft+dE
/370CXwMOER+mM5R6nu/IXwQOv8r2T/5Sfdc9Btf9lPrvgo+VndFtP+jOXk/
87v/c407c+zn5YLLL5J/pN/adD+fVLF/onN0RnRZxRK+yP020Tk6JfqtpPtl
THT8YQJ8bvSbqBb6z8ivA7sHv1uOTP17xfCKY18bkE9M/VuY5mC0Yo/Ucza6
/8mt/yE6o0D9QKj4vPIUT9AZ2oBOdfCQ4PZUVnGIT5Fvyh2v0e9lstuap4dz
x7vUn8uQnVz8RiL/U79zKQY1nLYGpbZp2icXUscZmh/5c5ljHl8iH1n0Tb+5
KO5xOfKvcv/2Ib+pT8Xrrjffa7njO9qflxf1qL6NyFsn9qlkO7TW+t3veMr+
HwvgqxE=
            "]], 
           Polygon[CompressedData["
1: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
            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {
         EdgeForm[], 
         GraphicsGroup[{
           Polygon[CompressedData["
1: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
aFyxc52yyN8KHX++C94ZOxfrnDj+Hw1vhexj7o0NHO8qH5FumYLtKF7qELsm
UwK+MLLfUI6/Hb4tMm+c2D8Up++TzPGo0D5T179kfmMr2BG9UfBrVA+JHfsf
VTBXTH5jFv8Pg18J7xQ7pqtZcIyoWFFxm2Kth+EPxI4PVacaIn+c8TZZ36Xw
YbF9mXyafN/20HHUj6Fjb9nsHDv+1/q0zmJ7xYH3xh6zYvZjGMPX4EOB48sX
NA6da6FjUdk7AZ0ixYbIi4GlaGcE3seq35YGn2V9KoU+p8qErtnqvHoceQWu
mwb24/Ltv4OPIN+Xt//fm52/qvUuRf5r3n74N9Uk8j5n1Uc1Ytn/MPK3qm9W
+0/fmuo6W/Rtht5XqvccH9o/yC9XC312yA+Wo50KLyufETu/Ob7g83Enz3kY
O69FXtvNkb/TY9BZndqfa75rsvNFNp6Rr5ZvCuy7K2pdAvv3Y0PHFeq/Le81
1DPO57pJ4PrXkazmcCjv5+q8nY/NX/I+W3flfebuBhci35N3fLI7O5d1f0Hq
s1X23448rznyh7HzT+WDd8TOxZSj3QMfEbv2eSZzLwE+Fri2qxrmCvjE2HVS
7T3Vc4ckjn9PL7jvM8hnKhePXZsdBc7I5ENj16AUSw+OXE9QXqw8u0Jsf3Jy
7LxDNeQ+8JGZnZ7aq6lja9WFJsQeT190Xw6dIyvn3x96Ln+EHoNyrFMY26LY
8Yz8jGLmKoy5WcH14XXI54KlkS3UGVrkGrKwEToLubcB+YjEeZZsn4y8apHH
IFuKydfD58fOs1S7HhM733wKPi12niX7/eElszp58aym/Rx8duy4/UX4gthr
+zx8HrxN4vpNMZ5bJasDnKlvGll3+UPwbnTuh5+oXJzrLvDJYGOu+8BPiF2P
Uo00jq2vvOev1OuvmtNuePksn6otPxq6r/KoQ7RlgWv6qhUoh+0WO1dVfX5A
7PqG/ETxgush8rc3xM7RNJb9qWsjqlFcFTv37wdvBrZOXBPah84zoeWqcTwb
eq8+F3odVJ9phH6D2LWlf1Jz1WTOj10PUW5YP7OpfLB67DNAZ0ETcFnoetrK
0DU18baJ61eqw5wTe021tvNC116Eh1LXi9SviDmuCG1TtaGzC36v+g9Cdcg9
7PMe4IHU+arWcwl8f97x7fOZf1R8Oyf1fwPKTVQTlu/trv2Q+v8n5VN/pM5v
9R73wkeGrjGuSO2LFZeqLqd4QDXIVanjWp1ZO1LX1xQDjE39/4Ri8nIF1xB1
Vj6ajU2+dHPqmEOxx6LM/yqeL4n+xtA1sWGpczb9F9ag4P9R9I2XynRUszqj
4P829J0ezuqJ2rf6X0/540psrkwdi+vcVA1He2wsOm9l/1UohqxWcK1E592u
1PGHapVhwTU7vdMnUvtN5U36f0T1nBnwwan/x1I+Oz31/3bKQ/MF11713lVb
kA9RvU3/Fygmz8X+L6Olzh30axdcx5EvqlhwbUv+82Dq71B1Kv2X9yNdO6Kf
Frx3VWPslbp+rVrQr9m7U+23RcH5v3zL59lZpTjzf8erlPQ=
            "]], 
           Polygon[CompressedData["
1:eJwtmnfgVmMfxp+n5/6dc57HKqGkNJTKKJtk7z1f81W2hKKM9pB2khaikE1F
g1C212uP7NemiEr2Du/1cX3/uOu+7u99znPOub/z+v5annHhMT3rlUqlc/RP
0v8756XSZeVS6RaBv6ql0sHCw4TvF85rpVJn4THC9won4TOEJwqvFm4rXGjM
13ys1vaRbA+NAWWvIdtWo15dqTRba1dKto7wI5INFz6/KJWaae0izUdr7Xv9
fiF8ovBI4e+E62v/U5oP0dp+kp2ma07TfLjWvpV8a631Ep4g/KPwZsL9hScK
/yS8qXC3uN83wnW6332aD9XaQZKtJ/yE8AjhHrp3A+FnhK8R7i75usKPCY8X
Pll4A+GXhCcIdxXeUPiVeP9jc4+x8f6ZZA01Xkz+hhfq/vtLfnF836pkbYV7
CE8T/kPPt77Wno/nOyr3GbCXa/YSrgkvFB4nfKDwuYX3ztZaRbIhusesSqn0
u852YiaZ8GzhBtpzp/Bw4XnCDYXvER4hvEB4LeGbhK8Qni9cE75ReLDwXcL1
he8QHhbXJ+G2+u3L4/eqwtMl7ybcX3iZfr+R5KuFr0g+swZ63j7C10leJzxV
+78Wvlzys4WboouSjdL4Ttf3zYz7aiwV7iZ8rUauvTdrbYCuHahxu+ZlrbXW
7/UVniH8p/aP097+wjOFvxW+THiQ8B0V32Oa8AXCw4R/kbyX8OUav2o+XGs9
JDuf59P8Z60NkayX8ATherr+6sw2gW2gc7vq+dcSXix8qfCOws1D/27F2CRb
W+NRzQdrbW90X/e7SvdbKfEA3W8LrV0o2Uzt+btqHeH8sclDJeuttYlxviO1
/2LhKcI/CTfX+18qfG2cz2TJzxUeIPyD5P35nsLXC68WHiF8nvBQ4eXCTQrr
LLqLDXcX7i75IMl/lHyg9l8oPKbib3SFcE/h0cLfCzcrbGPYGja8iZ53XMVy
zmdCZh1FV7FZbBebwrbe11ozyX7W9ZNC3lGyK4X/o+sL4dt0/asa7TWvac98
yV4Qbiv8ufbMEB6r8Wic7xZ6njHCi4XXEd5S+B3t76g5zm+OZN8L7yu8h/BD
wp8I74AuCi+uWn9u1PV/6ZLNdP1Vws8KN9KeBdr7ocZemhfaf1/VOnlzfJ9W
hfXzVuH1tOf2zDr4Tcn35N5DM+vedOF+Vdvb3aFfbXR9J42dNc90/3sle0X7
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
            "]], 
           Polygon[CompressedData["
1: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
            "]]}]}, {}, {}, {}, {}, {}}, {{
         GrayLevel[0], 
         Line[CompressedData["
1:eJwt0bkuRGEUB/DPNraxRU+UlhlDbAWtSNCoGPtYgoJKwhNQCQ1PwBNQEB3x
AGMY+/IEIhG1300k3//+TnLvzTk5X1NmY2y9IISwKTeKQ+YLQzjmD09ZVxTC
FZPMcpifXI6F8MElvnORb1zgKzN84TyfOccnznJGHtXTfOAU85zkPdO84wRz
HOctV/S+5ijPmOIJ63nEXzPv8pHbvOQaD7gvk9HcHOEQB9jKJKvZyG97qGWO
0W6aS0LwKrSwKPqexWyjExIesWg/LGU7U1Km7mA5O1nBLlaym3H2sIq9rGYf
a/ilcQPjGieiGdjPQQ5HO2aae1zlOS9kS531787/ff4BJDMz/A==
          "]]}, {
         GrayLevel[0], 
         Line[CompressedData["
1:eJwl0UkrhWEYBuD3ZNqxUxJlzy9gI1bs7FjamA5HZj+AU7I1z8eRrM3zkPwK
KfM8LaVwnSzurvurt97n+d6i+lhNWySE0C39aSH0+hhKD2GQyxzhKZO85Cp/
eMJkVgjHXOQREzzkAg84z33OcY+z3OUMp2VHn+I2J7nFCW5ynBsc4zpHucb8
jBCWUgNzlNdmifOMfVxhE4dZxxirWckKKdPzWMJv+xbygjk8ZkjtxU81zis2
ZLqHjbxhE2/ZzDu28J5RPrCVbfKox/jEdj6zgy/s5Cu7+Jb6/3xnDz+YcPcv
D5ltpnMW8IvFzLVDKctZxShbpVYfcKYx8v+ef9kXR50=
          "]]}, {
         Line[{1321, 451, 1338, 1963, 2192, 1360, 1970, 2206, 1383, 2221, 
          1381, 1406, 1983, 2236, 1430, 1990, 2251, 1452, 2268, 1997, 2267, 
          1467, 2011, 2290, 1484, 2025, 2310, 1507, 2032, 2325, 1531, 2037, 
          2340, 1555, 2044, 2355, 1579, 2370, 1577, 1603, 2386, 1601, 1624}], 
         Line[{1322, 1957, 2185, 1339, 472, 1361, 1971, 2208, 1384, 1978, 
          2223, 1407, 1985, 2238, 1431, 2253, 1432, 1453, 2271, 1999, 2270, 
          1468, 2013, 2292, 1485, 2026, 2312, 1508, 2327, 1509, 1532, 2342, 
          1533, 1556, 2045, 2357, 1580, 2372, 1581, 1604, 2388, 1605, 1625}], 
         Line[{1323, 1958, 2186, 1340, 1964, 2195, 1362, 1972, 2210, 1385, 
          1979, 2225, 1408, 2240, 1411, 1433, 2255, 1436, 1454, 2274, 2001, 
          2273, 1469, 2015, 2295, 1486, 2027, 2314, 1510, 2033, 2329, 1534, 
          2039, 2344, 1557, 2359, 1560, 1582, 2374, 1585, 1606, 2390, 1608, 
          1626}], 
         Line[{1324, 1959, 2187, 1342, 1965, 2197, 1364, 1973, 2212, 1387, 
          2227, 1391, 1410, 2242, 1415, 1435, 2257, 1439, 1455, 2277, 2003, 
          2276, 1470, 2017, 2298, 1488, 2028, 2316, 1512, 2034, 2331, 1536, 
          2346, 1540, 1559, 2361, 1563, 1584, 2376, 1588, 1607, 2392, 1611, 
          1627}], 
         Line[{1325, 1960, 2188, 1343, 1966, 2199, 1365, 1974, 2214, 1388, 
          2229, 1396, 1412, 2244, 1419, 1437, 2259, 1443, 1456, 2280, 2005, 
          2279, 1471, 2019, 2301, 1489, 2029, 2318, 1513, 2333, 1520, 1537, 
          2348, 1545, 1561, 2363, 1567, 1586, 2378, 1592, 1609, 2394, 1615, 
          1628}], 
         Line[{1326, 1961, 2189, 1345, 1967, 2201, 1367, 2216, 1375, 1390, 
          2231, 1399, 1414, 2246, 1423, 1438, 2261, 1446, 1457, 2282, 2007, 
          2283, 1472, 2021, 2304, 1491, 2320, 1499, 1515, 2335, 1524, 1539, 
          2350, 1548, 1562, 2365, 1571, 1587, 2380, 1595, 1610, 2396, 1618, 
          1629}], 
         Line[{1328, 1962, 2191, 1347, 1968, 2205, 1369, 1976, 2220, 1393, 
          1981, 2235, 1417, 2250, 1426, 1441, 1995, 2265, 1459, 2008, 2287, 
          2289, 1474, 2023, 2309, 1493, 2324, 1503, 1517, 2035, 2339, 1542, 
          2354, 1551, 1565, 2049, 2369, 1590, 2055, 2384, 1613, 2062, 2400, 
          1631}], 
         Line[{1329, 1337, 2193, 1349, 1359, 2207, 1371, 1382, 2222, 1395, 
          2237, 1984, 1418, 1429, 2252, 1442, 2269, 1998, 1460, 2266, 2012, 
          2291, 1475, 1483, 2311, 1495, 1506, 2326, 1519, 2341, 2038, 1544, 
          1554, 2356, 1566, 1578, 2371, 1591, 1602, 2387, 1614, 2385, 2064, 
          1632}], 
         Line[{1330, 1341, 2194, 1350, 1363, 2209, 1372, 1386, 2224, 1397, 
          1409, 2239, 1420, 1434, 2254, 1444, 2272, 2000, 1461, 2293, 2014, 
          2294, 1476, 1487, 2313, 1496, 1511, 2328, 1521, 1535, 2343, 1546, 
          1558, 2358, 1568, 1583, 2373, 1593, 2389, 2057, 1616, 2401, 2065, 
          1633}], 
         Line[{1332, 1344, 2196, 1352, 1366, 2211, 1374, 1389, 2226, 1398, 
          1413, 2241, 1422, 2256, 1991, 1445, 2275, 2002, 1462, 2296, 2016, 
          2297, 1477, 1490, 2315, 1498, 1514, 2330, 1523, 1538, 2345, 1547, 
          2360, 2046, 1570, 2375, 2051, 1594, 2391, 2058, 1617, 2402, 2066, 
          1634}], 
         Line[{1333, 1348, 2198, 1353, 1370, 2213, 1376, 1394, 2228, 1400, 
          2243, 1986, 1424, 2258, 1992, 1447, 2278, 2004, 1463, 2300, 2018, 
          2299, 1478, 1494, 2317, 1500, 1518, 2332, 1525, 1543, 2347, 1549, 
          2362, 2047, 1572, 2377, 2052, 1596, 2393, 2059, 1619, 2403, 2067, 
          1635}], 
         Line[{1334, 1351, 2200, 1355, 1373, 2215, 1377, 2230, 1980, 1402, 
          1421, 2245, 1425, 2260, 1993, 1448, 2281, 2006, 1464, 2302, 2020, 
          2303, 1479, 1497, 2319, 1502, 1522, 2334, 1527, 2349, 2040, 1550, 
          1569, 2364, 1573, 2379, 2053, 1597, 2395, 2060, 1620, 2404, 2068, 
          1636}], 
         Line[{1335, 1354, 2202, 1357, 2217, 1975, 1379, 1401, 2232, 1404, 
          2247, 1987, 1427, 2262, 1994, 1450, 647, 1465, 2305, 2022, 2306, 
          1481, 1501, 2321, 1504, 1526, 2336, 1529, 2351, 2041, 1552, 2366, 
          2048, 1575, 2381, 2054, 1599, 2397, 2061, 1622, 2405, 2069, 1637}], 
         Line[{1336, 2204, 1969, 1358, 2219, 1977, 1380, 2234, 1982, 1405, 
          2249, 1989, 1428, 2264, 1996, 1451, 2286, 2010, 1466, 2308, 2024, 
          2284, 1482, 2323, 2031, 1505, 2338, 2036, 1530, 2353, 2043, 1553, 
          2368, 2050, 1576, 2383, 2056, 1600, 2399, 2063, 1623, 2406, 2070, 
          1638}], 
         Line[{1630, 1621, 2398, 1612, 1598, 2382, 1589, 1574, 2367, 1564, 
          2352, 2042, 1541, 1528, 2337, 1516, 2322, 2030, 1492, 1480, 2307, 
          1473, 2288, 2009, 2285, 1458, 1449, 2263, 1440, 2248, 1988, 1416, 
          1403, 2233, 1392, 1378, 2218, 1368, 1356, 2203, 1346, 1331, 2190, 
          1327}], 
         Line[{1639, 886, 1656, 2077, 2414, 1678, 2084, 2428, 1701, 2443, 
          1699, 1724, 2097, 2458, 1748, 2104, 2473, 1770, 2490, 2111, 2489, 
          1785, 2125, 2512, 1802, 2139, 2532, 1825, 2146, 2547, 1849, 2151, 
          2562, 1873, 2158, 2577, 1897, 2592, 1895, 1921, 2608, 1919, 1942}], 
         Line[{1640, 2071, 2407, 1657, 907, 1679, 2085, 2430, 1702, 2092, 
          2445, 1725, 2099, 2460, 1749, 2475, 1750, 1771, 2493, 2113, 2492, 
          1786, 2127, 2514, 1803, 2140, 2534, 1826, 2549, 1827, 1850, 2564, 
          1851, 1874, 2159, 2579, 1898, 2594, 1899, 1922, 2610, 1923, 1943}], 
         Line[{1641, 2072, 2408, 1658, 2078, 2417, 1680, 2086, 2432, 1703, 
          2093, 2447, 1726, 2462, 1729, 1751, 2477, 1754, 1772, 2496, 2115, 
          2495, 1787, 2129, 2517, 1804, 2141, 2536, 1828, 2147, 2551, 1852, 
          2153, 2566, 1875, 2581, 1878, 1900, 2596, 1903, 1924, 2612, 1926, 
          1944}], 
         Line[{1642, 2073, 2409, 1660, 2079, 2419, 1682, 2087, 2434, 1705, 
          2449, 1709, 1728, 2464, 1733, 1753, 2479, 1757, 1773, 2499, 2117, 
          2498, 1788, 2131, 2520, 1806, 2142, 2538, 1830, 2148, 2553, 1854, 
          2568, 1858, 1877, 2583, 1881, 1902, 2598, 1906, 1925, 2614, 1929, 
          1945}], 
         Line[{1643, 2074, 2410, 1661, 2080, 2421, 1683, 2088, 2436, 1706, 
          2451, 1714, 1730, 2466, 1737, 1755, 2481, 1761, 1774, 2502, 2119, 
          2501, 1789, 2133, 2523, 1807, 2143, 2540, 1831, 2555, 1838, 1855, 
          2570, 1863, 1879, 2585, 1885, 1904, 2600, 1910, 1927, 2616, 1933, 
          1946}], 
         Line[{1644, 2075, 2411, 1663, 2081, 2423, 1685, 2438, 1693, 1708, 
          2453, 1717, 1732, 2468, 1741, 1756, 2483, 1764, 1775, 2504, 2121, 
          2505, 1790, 2135, 2526, 1809, 2542, 1817, 1833, 2557, 1842, 1857, 
          2572, 1866, 1880, 2587, 1889, 1905, 2602, 1913, 1928, 2618, 1936, 
          1947}], 
         Line[{1646, 2076, 2413, 1665, 2082, 2427, 1687, 2090, 2442, 1711, 
          2095, 2457, 1735, 2472, 1744, 1759, 2109, 2487, 1777, 2122, 2509, 
          2511, 1792, 2137, 2531, 1811, 2546, 1821, 1835, 2149, 2561, 1860, 
          2576, 1869, 1883, 2163, 2591, 1908, 2169, 2606, 1931, 2176, 2622, 
          1949}], 
         Line[{1647, 1655, 2415, 1667, 1677, 2429, 1689, 1700, 2444, 1713, 
          2459, 2098, 1736, 1747, 2474, 1760, 2491, 2112, 1778, 2488, 2126, 
          2513, 1793, 1801, 2533, 1813, 1824, 2548, 1837, 2563, 2152, 1862, 
          1872, 2578, 1884, 1896, 2593, 1909, 1920, 2609, 1932, 2607, 2178, 
          1950}], 
         Line[{1648, 1659, 2416, 1668, 1681, 2431, 1690, 1704, 2446, 1715, 
          1727, 2461, 1738, 1752, 2476, 1762, 2494, 2114, 1779, 2515, 2128, 
          2516, 1794, 1805, 2535, 1814, 1829, 2550, 1839, 1853, 2565, 1864, 
          1876, 2580, 1886, 1901, 2595, 1911, 2611, 2171, 1934, 2623, 2179, 
          1951}], 
         Line[{1650, 1662, 2418, 1670, 1684, 2433, 1692, 1707, 2448, 1716, 
          1731, 2463, 1740, 2478, 2105, 1763, 2497, 2116, 1780, 2518, 2130, 
          2519, 1795, 1808, 2537, 1816, 1832, 2552, 1841, 1856, 2567, 1865, 
          2582, 2160, 1888, 2597, 2165, 1912, 2613, 2172, 1935, 2624, 2180, 
          1952}], 
         Line[{1651, 1666, 2420, 1671, 1688, 2435, 1694, 1712, 2450, 1718, 
          2465, 2100, 1742, 2480, 2106, 1765, 2500, 2118, 1781, 2522, 2132, 
          2521, 1796, 1812, 2539, 1818, 1836, 2554, 1843, 1861, 2569, 1867, 
          2584, 2161, 1890, 2599, 2166, 1914, 2615, 2173, 1937, 2625, 2181, 
          1953}], 
         Line[{1652, 1669, 2422, 1673, 1691, 2437, 1695, 2452, 2094, 1720, 
          1739, 2467, 1743, 2482, 2107, 1766, 2503, 2120, 1782, 2524, 2134, 
          2525, 1797, 1815, 2541, 1820, 1840, 2556, 1845, 2571, 2154, 1868, 
          1887, 2586, 1891, 2601, 2167, 1915, 2617, 2174, 1938, 2626, 2182, 
          1954}], 
         Line[{1653, 1672, 2424, 1675, 2439, 2089, 1697, 1719, 2454, 1722, 
          2469, 2101, 1745, 2484, 2108, 1768, 1082, 1783, 2527, 2136, 2528, 
          1799, 1819, 2543, 1822, 1844, 2558, 1847, 2573, 2155, 1870, 2588, 
          2162, 1893, 2603, 2168, 1917, 2619, 2175, 1940, 2627, 2183, 1955}], 
         Line[{1654, 2426, 2083, 1676, 2441, 2091, 1698, 2456, 2096, 1723, 
          2471, 2103, 1746, 2486, 2110, 1769, 2508, 2124, 1784, 2530, 2138, 
          2506, 1800, 2545, 2145, 1823, 2560, 2150, 1848, 2575, 2157, 1871, 
          2590, 2164, 1894, 2605, 2170, 1918, 2621, 2177, 1941, 2628, 2184, 
          1956}], 
         Line[{1948, 1939, 2620, 1930, 1916, 2604, 1907, 1892, 2589, 1882, 
          2574, 2156, 1859, 1846, 2559, 1834, 2544, 2144, 1810, 1798, 2529, 
          1791, 2510, 2123, 2507, 1776, 1767, 2485, 1758, 2470, 2102, 1734, 
          1721, 2455, 1710, 1696, 2440, 1686, 1674, 2425, 1664, 1649, 2412, 
          1645}]}, {
         Line[{454, 755, 2338, 752, 751, 2336, 748, 2334, 747, 744, 743, 2332,
           740, 739, 2330, 736, 2328, 735, 732, 2326, 731, 725, 2324, 724, 
          2322, 721, 720, 2320, 717, 716, 2318, 713, 2316, 712, 709, 2314, 
          708, 705, 2312, 704, 701, 2310, 699, 729}], 
         Line[{466, 726, 2323, 723, 2321, 722, 719, 2319, 718, 715, 2317, 714,
           711, 2315, 710, 707, 706, 2313, 703, 2311, 702, 694, 2309, 693, 
          2307, 688, 2304, 687, 682, 2301, 681, 676, 675, 2298, 670, 2295, 
          669, 664, 2292, 663, 658, 2290, 655, 700}], 
         Line[{468, 451, 453, 452, 2185, 455, 456, 2186, 457, 458, 2187, 459, 
          460, 2188, 461, 462, 2189, 463, 2190, 464, 2191, 465, 470, 2193, 
          471, 474, 2194, 475, 478, 2196, 479, 2198, 482, 483, 486, 2200, 487,
           490, 2202, 491, 2204, 494, 495}], 
         Line[{497, 467, 2192, 469, 472, 473, 476, 2195, 477, 480, 2197, 481, 
          484, 2199, 485, 2201, 488, 489, 2203, 492, 2205, 493, 499, 2207, 
          500, 503, 2209, 504, 2211, 507, 508, 511, 2213, 512, 2215, 515, 516,
           2217, 519, 520, 2219, 523, 524}], 
         Line[{526, 496, 2206, 498, 501, 2208, 502, 505, 2210, 506, 509, 2212,
           510, 2214, 513, 514, 2216, 517, 518, 2218, 521, 2220, 522, 528, 
          2222, 529, 532, 2224, 533, 536, 2226, 537, 540, 2228, 541, 2230, 
          544, 545, 2232, 548, 549, 2234, 552, 553}], 
         Line[{555, 525, 2221, 527, 530, 2223, 531, 534, 2225, 535, 2227, 538,
           539, 2229, 542, 543, 2231, 546, 547, 2233, 550, 2235, 551, 557, 
          2237, 558, 561, 2239, 562, 565, 2241, 566, 2243, 569, 570, 2245, 
          573, 574, 2247, 577, 578, 2249, 581, 582}], 
         Line[{584, 554, 2236, 556, 559, 2238, 560, 2240, 563, 564, 2242, 567,
           568, 2244, 571, 572, 2246, 575, 576, 2248, 579, 2250, 580, 586, 
          2252, 587, 590, 2254, 591, 594, 2256, 595, 598, 2258, 599, 2260, 
          602, 603, 2262, 606, 607, 2264, 610, 611}], 
         Line[{614, 583, 2251, 585, 588, 2253, 589, 2255, 592, 593, 596, 2257,
           597, 2259, 600, 601, 2261, 604, 605, 2263, 608, 2265, 609, 617, 
          2269, 618, 2272, 623, 624, 2275, 629, 630, 2278, 635, 636, 2281, 
          641, 642, 647, 648, 2286, 653, 654}], 
         Line[{656, 2268, 612, 615, 2271, 619, 621, 2274, 625, 627, 2277, 631,
           633, 2280, 637, 639, 643, 2282, 645, 2285, 649, 2287, 651, 2266, 
          659, 661, 2293, 665, 667, 2296, 671, 673, 677, 2300, 679, 2302, 683,
           685, 2305, 689, 691, 2308, 695, 697}], 
         Line[{698, 2284, 696, 692, 2306, 690, 686, 2303, 684, 680, 678, 2299,
           674, 2297, 672, 668, 2294, 666, 662, 2291, 660, 652, 2289, 2288, 
          650, 646, 644, 2283, 640, 2279, 638, 634, 2276, 632, 628, 2273, 626,
           622, 2270, 620, 616, 2267, 613, 657}], 
         Line[{727, 784, 2353, 781, 780, 2351, 777, 776, 2349, 773, 772, 2347,
           769, 2345, 768, 765, 2343, 764, 761, 2341, 760, 754, 2339, 753, 
          2337, 750, 749, 2335, 746, 745, 2333, 742, 2331, 741, 738, 2329, 
          737, 734, 2327, 733, 730, 2325, 728, 758}], 
         Line[{756, 813, 2368, 810, 809, 2366, 806, 805, 2364, 802, 801, 2362,
           798, 2360, 797, 794, 2358, 793, 790, 2356, 789, 783, 2354, 782, 
          2352, 779, 778, 2350, 775, 774, 2348, 771, 770, 2346, 767, 2344, 
          766, 763, 2342, 762, 759, 2340, 757, 787}], 
         Line[{785, 842, 2383, 839, 838, 2381, 835, 834, 2379, 831, 830, 2377,
           827, 826, 2375, 823, 2373, 822, 819, 2371, 818, 812, 2369, 811, 
          2367, 808, 807, 2365, 804, 803, 2363, 800, 799, 2361, 796, 795, 
          2359, 792, 2357, 791, 788, 2355, 786, 816}], 
         Line[{814, 871, 2399, 868, 867, 2397, 864, 863, 2395, 860, 2393, 859,
           856, 855, 2391, 852, 2389, 851, 848, 2387, 847, 841, 2384, 840, 
          2382, 837, 836, 2380, 833, 2378, 832, 829, 828, 2376, 825, 824, 
          2374, 821, 820, 2372, 817, 2370, 815, 845}], 
         Line[{843, 885, 2406, 884, 2405, 883, 882, 2404, 881, 880, 879, 2403,
           878, 877, 2402, 876, 875, 2401, 874, 873, 2385, 870, 2400, 869, 
          2398, 866, 865, 2396, 862, 861, 2394, 858, 857, 2392, 854, 853, 
          2390, 850, 2388, 849, 846, 844, 2386, 872}], 
         Line[{889, 1190, 2560, 1187, 1186, 2558, 1183, 2556, 1182, 1179, 
          1178, 2554, 1175, 1174, 2552, 1171, 2550, 1170, 1167, 2548, 1166, 
          1160, 2546, 1159, 2544, 1156, 1155, 2542, 1152, 1151, 2540, 1148, 
          2538, 1147, 1144, 2536, 1143, 1140, 2534, 1139, 1136, 2532, 1134, 
          1164}], 
         Line[{901, 1161, 2545, 1158, 2543, 1157, 1154, 2541, 1153, 1150, 
          2539, 1149, 1146, 2537, 1145, 1142, 1141, 2535, 1138, 2533, 1137, 
          1129, 2531, 1128, 2529, 1123, 2526, 1122, 1117, 2523, 1116, 1111, 
          1110, 2520, 1105, 2517, 1104, 1099, 2514, 1098, 1093, 2512, 1090, 
          1135}], 
         Line[{903, 886, 888, 887, 2407, 890, 891, 2408, 892, 893, 2409, 894, 
          895, 2410, 896, 897, 2411, 898, 2412, 899, 2413, 900, 905, 2415, 
          906, 909, 2416, 910, 913, 2418, 914, 2420, 917, 918, 921, 2422, 922,
           925, 2424, 926, 2426, 929, 930}], 
         Line[{932, 902, 2414, 904, 907, 908, 911, 2417, 912, 915, 2419, 916, 
          919, 2421, 920, 2423, 923, 924, 2425, 927, 2427, 928, 934, 2429, 
          935, 938, 2431, 939, 2433, 942, 943, 946, 2435, 947, 2437, 950, 951,
           2439, 954, 955, 2441, 958, 959}], 
         Line[{961, 931, 2428, 933, 936, 2430, 937, 940, 2432, 941, 944, 2434,
           945, 2436, 948, 949, 2438, 952, 953, 2440, 956, 2442, 957, 963, 
          2444, 964, 967, 2446, 968, 971, 2448, 972, 975, 2450, 976, 2452, 
          979, 980, 2454, 983, 984, 2456, 987, 988}], 
         Line[{990, 960, 2443, 962, 965, 2445, 966, 969, 2447, 970, 2449, 973,
           974, 2451, 977, 978, 2453, 981, 982, 2455, 985, 2457, 986, 992, 
          2459, 993, 996, 2461, 997, 1000, 2463, 1001, 2465, 1004, 1005, 2467,
           1008, 1009, 2469, 1012, 1013, 2471, 1016, 1017}], 
         Line[{1019, 989, 2458, 991, 994, 2460, 995, 2462, 998, 999, 2464, 
          1002, 1003, 2466, 1006, 1007, 2468, 1010, 1011, 2470, 1014, 2472, 
          1015, 1021, 2474, 1022, 1025, 2476, 1026, 1029, 2478, 1030, 1033, 
          2480, 1034, 2482, 1037, 1038, 2484, 1041, 1042, 2486, 1045, 1046}], 
         Line[{1049, 1018, 2473, 1020, 1023, 2475, 1024, 2477, 1027, 1028, 
          1031, 2479, 1032, 2481, 1035, 1036, 2483, 1039, 1040, 2485, 1043, 
          2487, 1044, 1052, 2491, 1053, 2494, 1058, 1059, 2497, 1064, 1065, 
          2500, 1070, 1071, 2503, 1076, 1077, 1082, 1083, 2508, 1088, 1089}], 
         Line[{1091, 2490, 1047, 1050, 2493, 1054, 1056, 2496, 1060, 1062, 
          2499, 1066, 1068, 2502, 1072, 1074, 1078, 2504, 1080, 2507, 1084, 
          2509, 1086, 2488, 1094, 1096, 2515, 1100, 1102, 2518, 1106, 1108, 
          1112, 2522, 1114, 2524, 1118, 1120, 2527, 1124, 1126, 2530, 1130, 
          1132}], 
         Line[{1133, 2506, 1131, 1127, 2528, 1125, 1121, 2525, 1119, 1115, 
          1113, 2521, 1109, 2519, 1107, 1103, 2516, 1101, 1097, 2513, 1095, 
          1087, 2511, 2510, 1085, 1081, 1079, 2505, 1075, 2501, 1073, 1069, 
          2498, 1067, 1063, 2495, 1061, 1057, 2492, 1055, 1051, 2489, 1048, 
          1092}], 
         Line[{1162, 1219, 2575, 1216, 1215, 2573, 1212, 1211, 2571, 1208, 
          1207, 2569, 1204, 2567, 1203, 1200, 2565, 1199, 1196, 2563, 1195, 
          1189, 2561, 1188, 2559, 1185, 1184, 2557, 1181, 1180, 2555, 1177, 
          2553, 1176, 1173, 2551, 1172, 1169, 2549, 1168, 1165, 2547, 1163, 
          1193}], 
         Line[{1191, 1248, 2590, 1245, 1244, 2588, 1241, 1240, 2586, 1237, 
          1236, 2584, 1233, 2582, 1232, 1229, 2580, 1228, 1225, 2578, 1224, 
          1218, 2576, 1217, 2574, 1214, 1213, 2572, 1210, 1209, 2570, 1206, 
          1205, 2568, 1202, 2566, 1201, 1198, 2564, 1197, 1194, 2562, 1192, 
          1222}], 
         Line[{1220, 1277, 2605, 1274, 1273, 2603, 1270, 1269, 2601, 1266, 
          1265, 2599, 1262, 1261, 2597, 1258, 2595, 1257, 1254, 2593, 1253, 
          1247, 2591, 1246, 2589, 1243, 1242, 2587, 1239, 1238, 2585, 1235, 
          1234, 2583, 1231, 1230, 2581, 1227, 2579, 1226, 1223, 2577, 1221, 
          1251}], 
         Line[{1249, 1306, 2621, 1303, 1302, 2619, 1299, 1298, 2617, 1295, 
          2615, 1294, 1291, 1290, 2613, 1287, 2611, 1286, 1283, 2609, 1282, 
          1276, 2606, 1275, 2604, 1272, 1271, 2602, 1268, 2600, 1267, 1264, 
          1263, 2598, 1260, 1259, 2596, 1256, 1255, 2594, 1252, 2592, 1250, 
          1280}], 
         Line[{1278, 1320, 2628, 1319, 2627, 1318, 1317, 2626, 1316, 1315, 
          1314, 2625, 1313, 1312, 2624, 1311, 1310, 2623, 1309, 1308, 2607, 
          1305, 2622, 1304, 2620, 1301, 1300, 2618, 1297, 1296, 2616, 1293, 
          1292, 2614, 1289, 1288, 2612, 1285, 2610, 1284, 1281, 1279, 2608, 
          1307}]}, {}, {}, {}, {}, {}}}, VertexNormals -> CompressedData["
1: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
mZ0Psa8QzzasG2ggfCmX7lPgXbpPgZum+xSGL3bFLWr1g0OCuslcaQzI1LlW
UU72LXfilUbUk2hgv/TB9wtHHuj7q6jwdFNwkO6DICf1rw+CzD6IDt1nwVC6
z4Ly030WvcTzFdFhUTCUJaM1dDQH5rXJVK4gfED2WLLPbI80WKK3f+a17HzQ
TA1+sLSFgny6j4PX6D4OMvs4B+k+Ea6k+0TI7BM9ujt6aentTHjbf4fj8Nd8
8FGed3CykeD5aSdlz/A02N0dUO08ng3HrjtehOckj+g+FE73oZDZh9Kk+2XY
QPfLkNkv+53jX8i9NBUiEq7xKisxYNbZz5acZP5yW7dukh67hUNiCmZen6Ow
qq5UNvo3Wa/XzPVllXHoEFzz7M6hLLzQ7vfo5nsK1hyNaJoj9xDz1lL+w05B
mLTJMH0R+b5yv0GB7oZUfKslx2YxkIPrl6Y8/vseRH3jv74ebqP7esDs65nS
fUNQpPuGwOwbWgsuLokRzUKJUplP52oLcXF58VA2iWcvy16R4NsMlO73U3ry
sgi3J35TsUMKduB3kTdZifD4o+y5Z0FZcEqpZn7Tm7/v7F631GolAcsueV7n
qzmQcD39ZzaJf8cPwZbDm7MxsmGg90hJMZ7qM8pzJjyhwlSsUleOgbXlc/Z+
jSnEUJ6MX5uqKai2kV6bLkry3XN7WNWuPOjfeiPi7/ugQ3cm9F95Z4KlIb+i
1JNcuNmmZP2d/O4wdeBi3cxE5J/nuLD+Qg4mjNWvbSTx9qfAbIWrQRQuSzYv
v8TDwNK++NdLyHn5Pv55RL4lF3pz3s07o1wMTkf45rhnU7Cdb5mZTFEWsBtp
SjVnFcPSV8VnnhZSwGb6r++MmnTfGZl9Z6T72thC97WR2deWZltoFTDGALMP
u7RGYwphvvnR4OuE721zt9lwd1cGSKT92n3BOw8+GVstQzL/B3TfHNzpvjky
++aBdF8eqsX+9eWB2ZffoZ3e0M6SAkMGxfFnoxhgb3d6hgiJq/2fDixRqY2F
KN7T7wKDUkHXw7vR9iupv3TfH3rpvj9Q033/x/T9BHhH308A5v2EuKlktLIP
hb2C5wu380eBsJObixOp4+ZBD+of7Y9FkWcXzqq7FiPf+RdD7CRfrvBcsBA6
lY4+W23nLxDIxyt8flNiZF1Pirj3Vn6OQy2hlkOOnlmYNUdp9dDfe0qKMfVq
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
4PD/A6W874M=
       "]], {
     Axes -> True, 
      AxesLabel -> {
       "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
        "\!\(\*SubscriptBox[\(q\), \(y\)]\)", None}, BoxRatios -> {1, 1, 0.4},
       ImageSize -> {380, 380}, Method -> {"RotationControl" -> "Globe"}, 
      PlotRange -> {{-2.4992510502846317`, 
       2.4992510502846317`}, {-1.686793091142225, 1.686793091142225}, {0., 
       0.4881422247485916}}, PlotRangePadding -> {
        Scaled[0.02], 
        Scaled[0.02], 
        Scaled[0.02]}}], $CellContext`freqTab$$ = 
    2, $CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, -1} -> RGBColor[0, 
       Rational[2, 3], 0], {-1, -1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]], {0, 0} -> RGBColor[
       Rational[2, 3], 
       Rational[2, 3], 0], {1, 0} -> RGBColor[
       Rational[2, 3], 0.33333333333333337`, 0], {0, 1} -> RGBColor[0, 
       Rational[2, 3], 0], {1, 1} -> 
     RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
     RGBColor[0, 
       Rational[2, 3], 
       Rational[2, 3]]}, $CellContext`k1$$ = 0.25, $CellContext`k2$$ = 
    0.25, $CellContext`k3$$ = 0.25, $CellContext`k4$$ = 
    0.25, $CellContext`k5$$ = {
    1, 2, {0, 0}}, $CellContext`kArray$$ = {{1, 1, {-1, 0}} -> 
     0.25, {1, 1, {0, -1}} -> 0.25, {1, 1, {-1, -1}} -> 0.25, {1, 1, {-1, 1}} -> 
     0.25, {1, 1, {1, 0}} -> 0.25, {1, 1, {0, 1}} -> 0.25, {1, 1, {1, 1}} -> 
     0.25, {1, 1, {1, -1}} -> 0.25}, $CellContext`m1Sel$$ = 
    1, $CellContext`m2Sel$$ = 1, $CellContext`matrix$$ = 
    ReplaceAll[$CellContext`res$93829, $CellContext`qVec -> #]& , \
$CellContext`mLocDefault$$ = {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
    1.4}}, $CellContext`moSel$$ = 2, $CellContext`omegaIndex$$ = 
    2, $CellContext`parameterLocatorDependencies$$ = {
    "mScalarArray" -> {10}, "numberOfMasses" -> 1, 
     "latticeBasis" -> {{0.062000000000000055`, 1.3900000000000001`}, {1.9, 
      0.8}}, "latticeNorms" -> {1.391382046743453, 2.06155281280883}, 
     "latticeUnitVectors" -> {{0.04456001149728202, 0.9990067093745477}, {
      0.9216353751380655, 0.3880570000581329}}, 
     "numberLatticeLinesToDisplay" -> {49, 4}, 
     "latticeCellOriginIndexes" -> {{-2, -1}, {-2, 0}, {-2, 1}, {-1, -1}, {-1,
       0}, {-1, 1}, {0, -1}, {0, 0}, {0, 1}, {1, -1}, {1, 0}, {1, 1}, {
      2, -1}, {2, 0}}, 
     "reciprocalBasis" -> {{-0.3087134367523347, 0.7331944122867947}, {
      0.5363895963571815, -0.02392529134830596}}, 
     "reciprocalNorms" -> {0.7955363173608204, 0.5369229168570862}, 
     "qMaxVec" -> {4.998502100569263, 3.37358618228445}, 
     "mObliqueComponents" -> {{0.2353939955236551, 0.46600293277764926`}}, 
     "mPosFirstCell" -> {{0.9, 0.7}}, 
     "pointsDataTable" -> {{{-1.124, -2.88}, {0.7759999999999999, -2.08}, {
      2.6759999999999997`, -1.2800000000000002`}, {-1.0619999999999998`, \
-1.4900000000000004`}, {0.838, -0.6900000000000002}, {2.738, 
      0.10999999999999988`}, {-0.9999999999999999, -0.10000000000000009`}, {
      0.9, 0.7}, {2.8, 1.5}, {-0.9379999999999998, 1.29}, {0.9620000000000001,
       2.09}, {2.862, 2.8900000000000006`}, {-0.8759999999999998, 2.68}, {
      1.024, 3.4800000000000004`}}}, "lineTable" -> {{
        Line[{{-10.638000000000002`, -71.31}, {-4.561999999999997, 64.91}}], 
        Line[{{-8.738000000000003, -70.51}, {-2.6619999999999964`, 65.71}}], 
        Line[{{-6.838000000000003, -69.71}, {-0.7619999999999969, 66.51}}], 
        Line[{{-4.938000000000002, -68.91}, {1.138000000000003, 67.31}}], 
        Line[{{-3.038000000000003, -68.11}, {3.038000000000003, 68.11}}], 
        Line[{{-1.138000000000003, -67.31}, {4.938000000000002, 68.91}}], 
        Line[{{0.7619999999999969, -66.51}, {6.838000000000003, 69.71}}], 
        Line[{{2.6619999999999964`, -65.71}, {8.738000000000003, 70.51}}], 
        Line[{{4.561999999999997, -64.91}, {10.638000000000002`, 71.31}}]}, {
        Line[{{-10.638000000000002`, -71.31}, {4.561999999999997, -64.91}}], 
        Line[{{-10.576000000000002`, -69.92}, {
         4.623999999999997, -63.519999999999996`}}], 
        Line[{{-10.514000000000003`, -68.53000000000002}, {
         4.685999999999997, -62.13000000000001}}], 
        Line[{{-10.452000000000002`, -67.14}, {4.7479999999999976`, -60.74}}], 
        Line[{{-10.390000000000002`, -65.75}, {4.809999999999997, -59.35}}], 
        Line[{{-10.328000000000003`, -64.36}, {4.871999999999997, -57.96}}], 
        Line[{{-10.266000000000002`, -62.970000000000006`}, {
         4.9339999999999975`, -56.57}}], 
        Line[{{-10.204000000000002`, -61.580000000000005`}, {
         4.995999999999997, -55.18}}], 
        Line[{{-10.142000000000003`, -60.190000000000005`}, {
         5.057999999999997, -53.79}}], 
        Line[{{-10.080000000000002`, -58.80000000000001}, {
         5.119999999999997, -52.400000000000006`}}], 
        Line[{{-10.018, -57.41000000000001}, {
         5.181999999999998, -51.010000000000005`}}], 
        Line[{{-9.956000000000001, -56.02000000000001}, {
         5.243999999999998, -49.620000000000005`}}], 
        Line[{{-9.894000000000002, -54.63000000000001}, {
         5.305999999999997, -48.230000000000004`}}], 
        Line[{{-9.832, -53.24000000000001}, {5.367999999999998, -46.84}}], 
        Line[{{-9.770000000000001, -51.85000000000001}, {
         5.429999999999998, -45.45}}], 
        Line[{{-9.708000000000002, -50.46000000000001}, {
         5.491999999999997, -44.06}}], 
        Line[{{-9.646, -49.07000000000001}, {5.553999999999998, -42.67}}], 
        Line[{{-9.584000000000001, -47.68000000000001}, {
         5.615999999999998, -41.28}}], 
        Line[{{-9.522000000000002, -46.290000000000006`}, {
         5.677999999999998, -39.89}}], 
        Line[{{-9.46, -44.900000000000006`}, {5.739999999999998, -38.5}}], 
        Line[{{-9.398000000000001, -43.510000000000005`}, {
         5.801999999999998, -37.11}}], 
        Line[{{-9.336000000000002, -42.120000000000005`}, {
         5.863999999999998, -35.72}}], 
        Line[{{-9.274000000000001, -40.730000000000004`}, {
         5.925999999999998, -34.33}}], 
        Line[{{-9.212000000000002, -39.34}, {5.987999999999998, -32.94}}], 
        Line[{{-9.15, -37.95}, {6.049999999999998, -31.55}}], 
        Line[{{-9.088000000000001, -36.56}, {6.111999999999998, -30.16}}], 
        Line[{{-9.026000000000002, -35.17}, {
         6.173999999999999, -28.770000000000003`}}], 
        Line[{{-8.964, -33.78}, {6.235999999999999, -27.380000000000003`}}], 
        Line[{{-8.902000000000001, -32.39}, {
         6.297999999999998, -25.990000000000002`}}], 
        Line[{{-8.84, -31.000000000000004`}, {
         6.3599999999999985`, -24.600000000000005`}}], 
        Line[{{-8.778, -29.610000000000003`}, {
         6.421999999999999, -23.210000000000004`}}], 
        Line[{{-8.716000000000001, -28.220000000000002`}, {
         6.483999999999998, -21.820000000000004`}}], 
        Line[{{-8.654, -26.830000000000002`}, {
         6.5459999999999985`, -20.430000000000003`}}], 
        Line[{{-8.592, -25.44}, {6.607999999999999, -19.040000000000003`}}], 
        Line[{{-8.530000000000001, -24.05}, {
         6.669999999999999, -17.650000000000002`}}], 
        Line[{{-8.468, -22.66}, {6.731999999999999, -16.26}}], 
        Line[{{-8.406, -21.27}, {6.793999999999999, -14.870000000000001`}}], 
        Line[{{-8.344000000000001, -19.88}, {6.855999999999999, -13.48}}], 
        Line[{{-8.282, -18.490000000000002`}, {6.917999999999999, -12.09}}], 
        Line[{{-8.22, -17.1}, {6.979999999999999, -10.700000000000003`}}], 
        Line[{{-8.158, -15.71}, {7.041999999999999, -9.310000000000002}}], 
        Line[{{-8.096, -14.32}, {7.103999999999999, -7.920000000000001}}], 
        Line[{{-8.034, -12.93}, {7.1659999999999995`, -6.53}}], 
        Line[{{-7.9719999999999995`, -11.54}, {7.228, -5.14}}], 
        Line[{{-7.91, -10.150000000000002`}, {
         7.289999999999999, -3.750000000000001}}], 
        Line[{{-7.848, -8.760000000000002}, {
         7.351999999999999, -2.3600000000000003`}}], 
        Line[{{-7.786, -7.37}, {7.414, -0.9699999999999998}}], 
        Line[{{-7.724, -5.98}, {7.475999999999999, 0.41999999999999993`}}], 
        Line[{{-7.662, -4.59}, {7.537999999999999, 1.81}}], 
        Line[{{-7.6, -3.2}, {7.6, 3.2}}], 
        Line[{{-7.537999999999999, -1.81}, {7.662, 4.59}}], 
        Line[{{-7.475999999999999, -0.41999999999999993`}, {7.724, 5.98}}], 
        Line[{{-7.414, 0.9699999999999998}, {7.786, 7.37}}], 
        Line[{{-7.351999999999999, 2.3600000000000003`}, {7.848, 
         8.760000000000002}}], 
        Line[{{-7.289999999999999, 3.750000000000001}, {7.91, 
         10.150000000000002`}}], 
        Line[{{-7.228, 5.14}, {7.9719999999999995`, 11.54}}], 
        Line[{{-7.1659999999999995`, 6.53}, {8.034, 12.93}}], 
        Line[{{-7.103999999999999, 7.920000000000001}, {8.096, 14.32}}], 
        Line[{{-7.041999999999999, 9.310000000000002}, {8.158, 15.71}}], 
        Line[{{-6.979999999999999, 10.700000000000003`}, {8.22, 17.1}}], 
        Line[{{-6.917999999999999, 12.09}, {8.282, 18.490000000000002`}}], 
        Line[{{-6.855999999999999, 13.48}, {8.344000000000001, 19.88}}], 
        Line[{{-6.793999999999999, 14.870000000000001`}, {8.406, 21.27}}], 
        Line[{{-6.731999999999999, 16.26}, {8.468, 22.66}}], 
        Line[{{-6.669999999999999, 17.650000000000002`}, {8.530000000000001, 
         24.05}}], 
        Line[{{-6.607999999999999, 19.040000000000003`}, {8.592, 25.44}}], 
        Line[{{-6.5459999999999985`, 20.430000000000003`}, {8.654, 
         26.830000000000002`}}], 
        Line[{{-6.483999999999998, 21.820000000000004`}, {8.716000000000001, 
         28.220000000000002`}}], 
        Line[{{-6.421999999999999, 23.210000000000004`}, {8.778, 
         29.610000000000003`}}], 
        Line[{{-6.3599999999999985`, 24.600000000000005`}, {8.84, 
         31.000000000000004`}}], 
        Line[{{-6.297999999999998, 25.990000000000002`}, {8.902000000000001, 
         32.39}}], 
        Line[{{-6.235999999999999, 27.380000000000003`}, {8.964, 33.78}}], 
        Line[{{-6.173999999999999, 28.770000000000003`}, {9.026000000000002, 
         35.17}}], 
        Line[{{-6.111999999999998, 30.16}, {9.088000000000001, 36.56}}], 
        Line[{{-6.049999999999998, 31.55}, {9.15, 37.95}}], 
        Line[{{-5.987999999999998, 32.94}, {9.212000000000002, 39.34}}], 
        Line[{{-5.925999999999998, 34.33}, {9.274000000000001, 
         40.730000000000004`}}], 
        Line[{{-5.863999999999998, 35.72}, {9.336000000000002, 
         42.120000000000005`}}], 
        Line[{{-5.801999999999998, 37.11}, {9.398000000000001, 
         43.510000000000005`}}], 
        Line[{{-5.739999999999998, 38.5}, {9.46, 44.900000000000006`}}], 
        Line[{{-5.677999999999998, 39.89}, {9.522000000000002, 
         46.290000000000006`}}], 
        Line[{{-5.615999999999998, 41.28}, {9.584000000000001, 
         47.68000000000001}}], 
        Line[{{-5.553999999999998, 42.67}, {9.646, 49.07000000000001}}], 
        Line[{{-5.491999999999997, 44.06}, {9.708000000000002, 
         50.46000000000001}}], 
        Line[{{-5.429999999999998, 45.45}, {9.770000000000001, 
         51.85000000000001}}], 
        Line[{{-5.367999999999998, 46.84}, {9.832, 53.24000000000001}}], 
        Line[{{-5.305999999999997, 48.230000000000004`}, {9.894000000000002, 
         54.63000000000001}}], 
        Line[{{-5.243999999999998, 49.620000000000005`}, {9.956000000000001, 
         56.02000000000001}}], 
        Line[{{-5.181999999999998, 51.010000000000005`}, {10.018, 
         57.41000000000001}}], 
        Line[{{-5.119999999999997, 52.400000000000006`}, {10.080000000000002`,
          58.80000000000001}}], 
        Line[{{-5.057999999999997, 53.79}, {10.142000000000003`, 
         60.190000000000005`}}], 
        Line[{{-4.995999999999997, 55.18}, {10.204000000000002`, 
         61.580000000000005`}}], 
        Line[{{-4.9339999999999975`, 56.57}, {10.266000000000002`, 
         62.970000000000006`}}], 
        Line[{{-4.871999999999997, 57.96}, {10.328000000000003`, 64.36}}], 
        Line[{{-4.809999999999997, 59.35}, {10.390000000000002`, 65.75}}], 
        Line[{{-4.7479999999999976`, 60.74}, {10.452000000000002`, 67.14}}], 
        Line[{{-4.685999999999997, 62.13000000000001}, {10.514000000000003`, 
         68.53000000000002}}], 
        Line[{{-4.623999999999997, 63.519999999999996`}, {10.576000000000002`,
          69.92}}], 
        Line[{{-4.561999999999997, 64.91}, {10.638000000000002`, 
         71.31}}]}}}, $CellContext`parametersTab$$ = 
    3, $CellContext`qLoc$$ = {
    0.44999999999999973`, -0.7899999999999999}, $CellContext`qPlaneLoc$$ = \
{{-2.4992510502846317`, -1.686793091142225}, {2.4992510502846317`, 
    1.686793091142225}}, $CellContext`rawArrayOfMasses$$ = {
    10}, $CellContext`rawNumberOfMasses$$ = 1, $CellContext`scale$$ = 
    0.2, $CellContext`tabNumber$$ = 3, $CellContext`tauSliderValue$$ = 
    6, $CellContext`tick$$ = False, $CellContext`u$$ = {{
    0.062000000000000055`, 1.3900000000000001`}, {1.9, 0.8}, {0.9, 0.7}}, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Dynamic[
        Function[$CellContext`k5manip$, 
         TabView[{
          "dynamics" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
               Row[{
                 OverVector["q"], " = ", 
                 
                 Module[{$CellContext`qm$}, $CellContext`qm$ = 
                   ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                  Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                 Dynamic[
                  NumberForm[
                   MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
               Row[{
                 Text["time, normalized to one period, t/T = "], 
                 Dynamic[
                  
                  N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
               Row[{
                 Manipulator[
                  
                  Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                  1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                  ContinuousAction -> True, Appearance -> "Open", 
                  AppearanceElements -> {
                   "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
               Row[{
                 Text["oscillation scale factor:"]}], 
               Row[{Manipulator[
                   
                   Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}] " ", 
                 Dynamic[
                  NumberForm[$CellContext`scale$$, {3, 2}]]}], 
               Row[{
                 Text["Angular frequency \[Omega](q), selection:"], 
                 Dynamic[
                  SetterBar[
                   
                   Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
           "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
           Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
               Row[{
                 Text["number of mesh intervals "], 
                 Manipulator[
                  
                  Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                  Tiny, ContinuousAction -> False, 
                  AppearanceElements -> {"InputField"}], " ", 
                 Dynamic[$CellContext`freqMeshSize$$]}], 
               LocatorPane[
                Dynamic[$CellContext`qPlaneLoc$$], 
                Dynamic[
                 (Graphics[{
                   Lighter[Gray], 
                   Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                   Line[$CellContext`qPlaneLoc$$]}, 
                  PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                  ReplaceAll[
                  "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                ContinuousAction -> False]}], "parameters" -> 
           Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                Row[{
                  Text["mass: "], 
                  Dynamic[
                   If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                Text["coupling to neighbouring: "], 
                Dynamic[
                 If[$CellContext`rawNumberOfMasses$$ > 1, 
                  SetterBar[
                   
                   Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                   Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                  $CellContext`massLabel[1]]]}, {
                Row[{
                  Text["horizontal: "], 
                  $CellContext`kLable[1], " || ", 
                  OverVector["a"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                Row[{
                  Text["vertical: "], 
                  $CellContext`kLable[2], " || ", 
                  OverVector["b"], " "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[3], " || (", 
                  OverVector["b"], " + ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                Row[{
                  Text["diagonal: "], 
                  $CellContext`kLable[4], " || (", 
                  OverVector["b"], " - ", 
                  OverVector["a"], ") "}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                   ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[
                   NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
               Part[$CellContext`k5manip$, 1], 
               Part[$CellContext`k5manip$, 2]}]}, 
          Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
         If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
            Row[{
              Text["coupling from "], 
              Dynamic[
               $CellContext`massLabel[$CellContext`m1Sel$$]], 
              Text[" to: "]}], 
            Dynamic[
             If[$CellContext`rawNumberOfMasses$$ > 2, 
              SetterBar[
               
               Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                 Not[$CellContext`tick$$])& ], 
               Map[# -> $CellContext`massLabel[#]& , 
                DeleteCases[
                 
                 Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
              Dynamic[
               $CellContext`massLabel[
                First[
                 Delete[
                  Range[2], $CellContext`m1Sel$$]]]]]]}, {
            Row[{
              $CellContext`kLable[5], ": "}], 
            Row[{
              Manipulator[
               
               Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                 True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                Dynamic[$CellContext`glConstKMin], 
                Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
               ContinuousAction -> False, 
               AppearanceElements -> {"InputField"}], " ", 
              Dynamic[
               NumberForm[$CellContext`k5$$, {3, 2}]]}]}}]]]], 
      Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`qPlaneLoc$$], {}}, 0}, {{
       Hold[$CellContext`qLoc$$], {}}, 0}, {{
       Hold[$CellContext`tauSliderValue$$], 1}, 0}, {{
       Hold[$CellContext`omegaIndex$$], 1}, 0}, {{
       Hold[$CellContext`scale$$], 0.2}, 0}, {{
       Hold[$CellContext`freqMeshSize$$], 8}, 0}, {{
       Hold[$CellContext`dynMeshSize$$], 14}, 0}, {{
       Hold[$CellContext`matrix$$], {}}, 0}, {{
       Hold[$CellContext`dynamics$$], {}}, 0}, {{
       Hold[$CellContext`dynPlot$$], {}}, 0}, {{
       Hold[$CellContext`freqPlot$$], {}}, 0}, {{
       Hold[$CellContext`bInitDefaults$$], True}, 0}, {{
       Hold[$CellContext`bRefreshMatrix$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynamics$$], False}, 0}, {{
       Hold[$CellContext`bRefreshDynPlot$$], False}, 0}, {{
       Hold[$CellContext`bRefreshFreqPlot$$], False}, 0}, {{
       Hold[$CellContext`tabNumber$$], 1}, 0}, {{
       Hold[$CellContext`dynTab$$], 1}, 0}, {{
       Hold[$CellContext`freqTab$$], 2}, 0}, {{
       Hold[$CellContext`parametersTab$$], 3}, 0}, {{
       Hold[$CellContext`rawNumberOfMasses$$], 3}, 0}, {{
       Hold[$CellContext`mLocDefault$$], {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
       1.4}}}, 0}, {{
       Hold[$CellContext`rawArrayOfMasses$$], {10, 15, 20}}, 0}, {{
       Hold[$CellContext`moSel$$], 2}, 0}, {{
       Hold[$CellContext`m1Sel$$], 1}, 0}, {{
       Hold[$CellContext`m2Sel$$], 1}, 0}, {{
       Hold[$CellContext`kArray$$], {}}, 0}, {{
       Hold[$CellContext`u$$], {}}, 0}, {{
       Hold[$CellContext`parameterLocatorDependencies$$], {}}, 0}, {{
       Hold[$CellContext`couplingData$$], {}}, 0}, {{
       Hold[$CellContext`glConstSpringColorsByN$$], {}}, 0}, {{
       Hold[$CellContext`k1$$], 0.25}, 0}, {{
       Hold[$CellContext`k2$$], 0.25}, 0}, {{
       Hold[$CellContext`k3$$], 0.25}, 0}, {{
       Hold[$CellContext`k4$$], 0.25}, 0}, {{
       Hold[$CellContext`k5$$], 0.25}, 0}}, Typeset`size$$ = Automatic, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`bInitDefaults$$ = 
        True, $CellContext`bRefreshDynamics$$ = 
        False, $CellContext`bRefreshDynPlot$$ = 
        False, $CellContext`bRefreshFreqPlot$$ = 
        False, $CellContext`bRefreshMatrix$$ = 
        False, $CellContext`couplingData$$ = {}, $CellContext`dynamics$$ = \
{}, $CellContext`dynMeshSize$$ = 
        14, $CellContext`dynPlot$$ = {}, $CellContext`dynTab$$ = 
        1, $CellContext`freqMeshSize$$ = 
        8, $CellContext`freqPlot$$ = {}, $CellContext`freqTab$$ = 
        2, $CellContext`glConstSpringColorsByN$$ = {}, $CellContext`k1$$ = 
        0.25, $CellContext`k2$$ = 0.25, $CellContext`k3$$ = 
        0.25, $CellContext`k4$$ = 0.25, $CellContext`k5$$ = 
        0.25, $CellContext`kArray$$ = {}, $CellContext`m1Sel$$ = 
        1, $CellContext`m2Sel$$ = 
        1, $CellContext`matrix$$ = {}, $CellContext`mLocDefault$$ = {{0.9, 
         0.7}, {0.4, 1.2}, {1.3, 1.4}}, $CellContext`moSel$$ = 
        2, $CellContext`omegaIndex$$ = 
        1, $CellContext`parameterLocatorDependencies$$ = {}, \
$CellContext`parametersTab$$ = 
        3, $CellContext`qLoc$$ = {}, $CellContext`qPlaneLoc$$ = {}, \
$CellContext`rawArrayOfMasses$$ = {10, 15, 
         20}, $CellContext`rawNumberOfMasses$$ = 3, $CellContext`scale$$ = 
        0.2, $CellContext`tabNumber$$ = 1, $CellContext`tauSliderValue$$ = 
        1, $CellContext`tick$$ = False, $CellContext`u$$ = {}}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> ($CellContext`tick$$; 
       If[$CellContext`bInitDefaults$$, $CellContext`u$$ = 
          Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 
            1]; $CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`kArray$$ = \
$CellContext`constructKArray[1]; 
         Module[{$CellContext`n$}, $CellContext`n$ = 2; 
           While[$CellContext`n$ <= $CellContext`rawNumberOfMasses$$, \
$CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`n$]; Increment[$CellContext`n$]]]; $CellContext`qLoc$$ = 
          ReplaceAll["qMaxVec", $CellContext`parameterLocatorDependencies$$]/
           2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
            $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
            
            Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bInitDefaults$$ = False; Null, Null]; Dynamic[
         If[$CellContext`tabNumber$$ == $CellContext`dynTab$$, 
          If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
             False; $CellContext`bRefreshDynamics$$ = 
             True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
          If[$CellContext`bRefreshDynamics$$, $CellContext`dynamics$$ = \
$CellContext`calcDynamics[
               $CellContext`matrix$$[$CellContext`qLoc$$]]; \
$CellContext`bRefreshDynamics$$ = False; $CellContext`bRefreshDynPlot$$ = 
             True, Null]; 
          If[$CellContext`bRefreshDynPlot$$, $CellContext`dynPlot$$ = \
$CellContext`dynamicsGraphicsTable[$CellContext`parameterLocatorDependencies$$\
, 
               
               Part[$CellContext`dynamics$$, $CellContext`omegaIndex$$], \
$CellContext`scale$$, $CellContext`qLoc$$, $CellContext`dynMeshSize$$]; \
$CellContext`bRefreshDynPlot$$ = False, 
            Null]; $CellContext`showDynPlot[$CellContext`dynPlot$$, \
$CellContext`tauSliderValue$$], 
          
          If[$CellContext`tabNumber$$ == $CellContext`freqTab$$, 
           If[$CellContext`bRefreshMatrix$$, $CellContext`matrix$$ = \
$CellContext`dynamicsMatrix[$CellContext`parameterLocatorDependencies$$, \
$CellContext`couplingData$$]; $CellContext`bRefreshMatrix$$ = 
              False; $CellContext`bRefreshDynamics$$ = 
              True; $CellContext`bRefreshFreqPlot$$ = True, Null]; 
           If[$CellContext`bRefreshFreqPlot$$, $CellContext`freqPlot$$ = \
$CellContext`frequencyPlotCalc[$CellContext`parameterLocatorDependencies$$, \
$CellContext`matrix$$, $CellContext`freqMeshSize$$]; \
$CellContext`bRefreshFreqPlot$$ = False, 
             Null]; $CellContext`showFreqPlot[$CellContext`qPlaneLoc$$, \
$CellContext`freqPlot$$], 
           LocatorPane[
            Dynamic[$CellContext`u$$, ($CellContext`u$$ = If[First[
                  Dimensions[#]] < 3, 
                
                Flatten[{$CellContext`glConstLocDefault, \
$CellContext`mLocDefault$$}, 1], 
                If[First[
                   Dimensions[#]] > 7, 
                 Take[#, 7], #]]; 
             Module[{$CellContext`rm$, $CellContext`km$}, $CellContext`rm$ = 
                First[
                  Dimensions[$CellContext`rawArrayOfMasses$$]]; 
               If[$CellContext`rm$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], \
$CellContext`rawArrayOfMasses$$ = Take[$CellContext`rawArrayOfMasses$$, 
                   $CellContext`nMassesFromLocArray[$CellContext`u$$]], 
                 
                 While[$CellContext`rm$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  AppendTo[$CellContext`rawArrayOfMasses$$, \
$CellContext`glConstDefaultMass]; 
                  Increment[$CellContext`rm$]]]; $CellContext`km$ = Max[
                  Part[
                   Part[$CellContext`kArray$$, All, 1], All, 1]]; 
               If[$CellContext`km$ > \
$CellContext`nMassesFromLocArray[$CellContext`u$$], $CellContext`kArray$$ = 
                 Select[$CellContext`kArray$$, Max[{
                    Part[#, 1], 
                    
                    Part[#, 
                    2]}] <= \
$CellContext`nMassesFromLocArray[$CellContext`u$$]& ], 
                 
                 While[$CellContext`km$ < \
$CellContext`nMassesFromLocArray[$CellContext`u$$], 
                  Increment[$CellContext`km$]; $CellContext`kArray$$ = \
$CellContext`returnKarrayForAdditionalMassIndex[$CellContext`kArray$$, \
$CellContext`km$]]]]; Part[$CellContext`u$$, 1] = If[Dot[
                  Part[$CellContext`u$$, 1], 
                  
                  Part[$CellContext`u$$, 
                   1]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 1], 
                Part[$CellContext`u$$, 1]]; Part[$CellContext`u$$, 2] = If[Dot[
                  Part[$CellContext`u$$, 2], 
                  
                  Part[$CellContext`u$$, 
                   2]] < $CellContext`glConstMinSquaredDistanceFromOrigin, 
                Part[$CellContext`glConstLocDefault, 2], 
                Part[$CellContext`u$$, 2]]; {
                Part[$CellContext`u$$, 1], 
                
                Part[$CellContext`u$$, 
                 2]} = $CellContext`resetLatticeVectorsIfAngleTooSmall[$\
CellContext`u$$, $CellContext`glConstMinAngleBetweenLatticeVectors]; \
$CellContext`rawNumberOfMasses$$ = \
$CellContext`nMassesFromLocArray[$CellContext`u$$]; $CellContext`m1Sel$$ = 
              If[$CellContext`m1Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m1Sel$$]; $CellContext`m2Sel$$ = 
              If[$CellContext`m2Sel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`m2Sel$$]; $CellContext`moSel$$ = 
              If[$CellContext`moSel$$ > $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`moSel$$]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`omegaIndex$$ = 
              If[$CellContext`omegaIndex$$ > 
                2 $CellContext`rawNumberOfMasses$$, 
                1, $CellContext`omegaIndex$$]; $CellContext`k1$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                4]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; \
$CellContext`parameterLocatorDependencies$$ = \
$CellContext`locDependent[$CellContext`u$$, $CellContext`rawNumberOfMasses$$, \
$CellContext`rawArrayOfMasses$$]; $CellContext`qLoc$$ = 
              ReplaceAll[
                "qMaxVec", $CellContext`parameterLocatorDependencies$$]/
               2; $CellContext`qPlaneLoc$$ = {-$CellContext`qLoc$$, \
$CellContext`qLoc$$}; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
              True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
            $CellContext`plotSprings[$CellContext`u$$, \
$CellContext`parameterLocatorDependencies$$, $CellContext`couplingData$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, $CellContext`moSel$$], 
            LocatorAutoCreate -> True, ContinuousAction -> False]]]]), 
      "Specifications" :> {
        Dynamic[
         Function[$CellContext`k5manip$, 
          
          TabView[{
           "dynamics" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`dynTab$$; {
                Row[{
                  OverVector["q"], " = ", 
                  
                  Module[{$CellContext`qm$}, $CellContext`qm$ = 
                    ReplaceAll[
                    "qMaxVec", $CellContext`parameterLocatorDependencies$$]; 
                   Slider2D[
                    
                    Dynamic[$CellContext`qLoc$$, ($CellContext`qLoc$$ = #; \
$CellContext`bRefreshDynamics$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    ({-#, #}/2& )[$CellContext`qm$], ContinuousAction -> 
                    False, ImageSize -> (
                    150 (#/Max[#])& )[$CellContext`qm$]]], " 2 \[Pi] ", 
                  Dynamic[
                   NumberForm[
                    MatrixForm[$CellContext`qLoc$$/(2 Pi)], {3, 2}]]}], 
                Row[{
                  Text["time, normalized to one period, t/T = "], 
                  Dynamic[
                   
                   N[($CellContext`tauSliderValue$$ - 
                    1)/$CellContext`dynMeshSize$$]]}], 
                Row[{
                  Manipulator[
                   
                   Dynamic[$CellContext`tauSliderValue$$, \
($CellContext`tauSliderValue$$ = #; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {
                   1, $CellContext`dynMeshSize$$ + 1, 1}, ImageSize -> Tiny, 
                   ContinuousAction -> True, Appearance -> "Open", 
                   AppearanceElements -> {
                    "StepLeftButton", "PlayPauseButton", "StepRightButton", 
                    "FasterSlowerButtons", "DirectionButton"}]}], 
                Row[{
                  Text["oscillation scale factor:"]}], 
                Row[{Manipulator[
                    
                    Dynamic[$CellContext`scale$$, ($CellContext`scale$$ = \
$CellContext`checkAgainstRange[#, 0.05, 0.05, 
                    1]; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.05, 1}, ImageSize -> 
                    Tiny, ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}] " ", 
                  Dynamic[
                   NumberForm[$CellContext`scale$$, {3, 2}]]}], 
                Row[{
                  Text["Angular frequency \[Omega](q), selection:"], 
                  Dynamic[
                   SetterBar[
                    
                    Dynamic[$CellContext`omegaIndex$$, \
($CellContext`omegaIndex$$ = #; $CellContext`bRefreshDynPlot$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Range[2 $CellContext`rawNumberOfMasses$$]]]}]}], 
            "\[Omega](\!\(\*OverscriptBox[\(q\), \(\[RightVector]\)]\))" -> 
            Column[$CellContext`tabNumber$$ = $CellContext`freqTab$$; {
                Row[{
                  Text["number of mesh intervals "], 
                  Manipulator[
                   
                   Dynamic[$CellContext`freqMeshSize$$, \
($CellContext`freqMeshSize$$ = $CellContext`checkAgainstRange[#, 8, 2, 30, 
                    EvenQ]; $CellContext`bRefreshFreqPlot$$ = 
                    True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {2, 30, 2}, ImageSize -> 
                   Tiny, ContinuousAction -> False, 
                   AppearanceElements -> {"InputField"}], " ", 
                  Dynamic[$CellContext`freqMeshSize$$]}], 
                LocatorPane[
                 Dynamic[$CellContext`qPlaneLoc$$], 
                 Dynamic[
                  (Graphics[{
                    Lighter[Gray], 
                    Polygon[{{-Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], -Part[#, 2]}, {
                    Part[#, 1], 
                    Part[#, 2]}, {-Part[#, 1], 
                    Part[#, 2]}}], Black, 
                    Line[$CellContext`qPlaneLoc$$]}, 
                   PlotRange -> {{-Part[#, 1], 
                    Part[#, 1]}, {-Part[#, 2], 
                    Part[#, 2]}}/2, ImageSize -> 200 (#/Max[#])]& )[
                   ReplaceAll[
                   "qMaxVec", $CellContext`parameterLocatorDependencies$$]]], 
                 ContinuousAction -> False]}], "parameters" -> 
            Grid[$CellContext`tabNumber$$ = $CellContext`parametersTab$$; {{
                 Row[{
                   Text["mass: "], 
                   Dynamic[
                    If[$CellContext`rawNumberOfMasses$$ > 1, 
                    SetterBar[
                    
                    Dynamic[$CellContext`m1Sel$$, ($CellContext`m1Sel$$ = #; \
$CellContext`massValue = Part[
                    ReplaceAll[
                    "mScalarArray", \
$CellContext`parameterLocatorDependencies$$], $CellContext`m1Sel$$]; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    4]; $CellContext`moSel$$ = \
$CellContext`adjustedmoSel[$CellContext`rawNumberOfMasses$$, \
$CellContext`moSel$$, $CellContext`m1Sel$$]; $CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                    $CellContext`massLabel[1]]]}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`massValue, ($CellContext`massValue = \
$CellContext`checkAgainstRange[#, 0.25, 0.25, $CellContext`glConstMMax]; 
                    Part[$CellContext`rawArrayOfMasses$$, \
$CellContext`m1Sel$$] = $CellContext`massValue; \
$CellContext`parameterLocatorDependencies$$ = 
                    ReplaceAll[$CellContext`parameterLocatorDependencies$$, (
                    "mScalarArray" -> Blank[]) :> (
                    "mScalarArray" -> $CellContext`rawArrayOfMasses$$)]; \
$CellContext`bRefreshMatrix$$ = True; $CellContext`tick$$ = 
                    Not[$CellContext`tick$$])& ], {0.25, 
                    Dynamic[$CellContext`glConstMMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`massValue, {2, 1}]]}]}, {
                 Text["coupling to neighbouring: "], 
                 Dynamic[
                  If[$CellContext`rawNumberOfMasses$$ > 1, 
                   SetterBar[
                    
                    Dynamic[$CellContext`m2Sel$$, ($CellContext`m2Sel$$ = #; \
$CellContext`k1$$ = $CellContext`selectVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1]; $CellContext`k2$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    2]; $CellContext`k3$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 
                    3]; $CellContext`k4$$ = \
$CellContext`selectVFromKarray[$CellContext`kArray$$, $CellContext`m1Sel$$, \
$CellContext`m2Sel$$, 4]; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], 
                    Map[# -> $CellContext`massLabel[#]& , 
                    Range[$CellContext`rawNumberOfMasses$$]]], 
                   $CellContext`massLabel[1]]]}, {
                 Row[{
                   Text["horizontal: "], 
                   $CellContext`kLable[1], " || ", 
                   OverVector["a"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k1$$, ($CellContext`k1$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    1, $CellContext`k1$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k1$$, {3, 2}]]}]}, {
                 Row[{
                   Text["vertical: "], 
                   $CellContext`kLable[2], " || ", 
                   OverVector["b"], " "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k2$$, ($CellContext`k2$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    2, $CellContext`k2$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k2$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[3], " || (", 
                   OverVector["b"], " + ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k3$$, ($CellContext`k3$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    3, $CellContext`k3$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k3$$, {3, 2}]]}]}, {
                 Row[{
                   Text["diagonal: "], 
                   $CellContext`kLable[4], " || (", 
                   OverVector["b"], " - ", 
                   OverVector["a"], ") "}], 
                 Row[{
                   Manipulator[
                    
                    Dynamic[$CellContext`k4$$, ($CellContext`k4$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKArrayElements[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`m2Sel$$, 
                    4, $CellContext`k4$$]; $CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                    True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                    Dynamic[$CellContext`glConstKMin], 
                    Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                    ContinuousAction -> False, 
                    AppearanceElements -> {"InputField"}], " ", 
                   Dynamic[
                    NumberForm[$CellContext`k4$$, {3, 2}]]}]}, 
                Part[$CellContext`k5manip$, 1], 
                Part[$CellContext`k5manip$, 2]}]}, 
           Dynamic[$CellContext`tabNumber$$], ImageSize -> {250, 350}]][
          If[$CellContext`rawNumberOfMasses$$ == 1, {{"", ""}, {"", ""}}, {{
             Row[{
               Text["coupling from "], 
               Dynamic[
                $CellContext`massLabel[$CellContext`m1Sel$$]], 
               Text[" to: "]}], 
             Dynamic[
              If[$CellContext`rawNumberOfMasses$$ > 2, 
               SetterBar[
                
                Dynamic[$CellContext`moSel$$, ($CellContext`moSel$$ = #; \
$CellContext`k5$$ = \
$CellContext`selectOriginVFromKarray[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$]; $CellContext`tick$$ = 
                  Not[$CellContext`tick$$])& ], 
                Map[# -> $CellContext`massLabel[#]& , 
                 DeleteCases[
                  
                  Range[$CellContext`rawNumberOfMasses$$], \
$CellContext`m1Sel$$]]], 
               Dynamic[
                $CellContext`massLabel[
                 First[
                  Delete[
                   Range[2], $CellContext`m1Sel$$]]]]]]}, {
             Row[{
               $CellContext`kLable[5], ": "}], 
             Row[{
               Manipulator[
                
                Dynamic[$CellContext`k5$$, ($CellContext`k5$$ = \
$CellContext`checkAgainstRange[#, $CellContext`glConstKMin, \
$CellContext`glConstKMin, $CellContext`glConstKMax]; $CellContext`kArray$$ = \
$CellContext`returnAlteredKarrayOriginElement[$CellContext`kArray$$, \
$CellContext`m1Sel$$, $CellContext`moSel$$, $CellContext`k5$$]; \
$CellContext`couplingData$$ = \
$CellContext`calculateCouplings[$CellContext`parameterLocatorDependencies$$, \
$CellContext`kArray$$]; $CellContext`bRefreshMatrix$$ = 
                  True; $CellContext`tick$$ = Not[$CellContext`tick$$])& ], {
                 Dynamic[$CellContext`glConstKMin], 
                 Dynamic[$CellContext`glConstKMax]}, ImageSize -> Tiny, 
                ContinuousAction -> False, 
                AppearanceElements -> {"InputField"}], " ", 
               Dynamic[
                
                NumberForm[$CellContext`k5$$, {3, 
                 2}]]}]}}]]], {{$CellContext`tick$$, False}, 0, ControlType -> 
         None}, {{$CellContext`qPlaneLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`qLoc$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`tauSliderValue$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`omegaIndex$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`scale$$, 0.2}, 0, ControlType -> 
         None}, {{$CellContext`freqMeshSize$$, 8}, 0, ControlType -> 
         None}, {{$CellContext`dynMeshSize$$, 14}, 0, ControlType -> 
         None}, {{$CellContext`matrix$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynamics$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`dynPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`freqPlot$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`bInitDefaults$$, True}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshMatrix$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynamics$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshDynPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`bRefreshFreqPlot$$, False}, 0, ControlType -> 
         None}, {{$CellContext`tabNumber$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`dynTab$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`freqTab$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`parametersTab$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`rawNumberOfMasses$$, 3}, 0, ControlType -> 
         None}, {{$CellContext`mLocDefault$$, {{0.9, 0.7}, {0.4, 1.2}, {1.3, 
          1.4}}}, 0, ControlType -> 
         None}, {{$CellContext`rawArrayOfMasses$$, {10, 15, 20}}, 0, 
         ControlType -> None}, {{$CellContext`moSel$$, 2}, 0, ControlType -> 
         None}, {{$CellContext`m1Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`m2Sel$$, 1}, 0, ControlType -> 
         None}, {{$CellContext`kArray$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`u$$, {}}, 0, ControlType -> 
         None}, {{$CellContext`parameterLocatorDependencies$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`couplingData$$, {}}, 0, 
         ControlType -> None}, {{$CellContext`glConstSpringColorsByN$$, {}}, 
         0, ControlType -> None}, {{$CellContext`k1$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k2$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k3$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k4$$, 0.25}, 0, ControlType -> 
         None}, {{$CellContext`k5$$, 0.25}, 0, ControlType -> None}}, 
      "Options" :> {
       TrackedSymbols :> {$CellContext`tick$$}, ControlPlacement -> Left, 
        SynchronousInitialization -> False}, "DefaultOptions" :> {}],
     ImageSizeCache->{916., {293., 300.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`glConstLocDefault = {{0.1, 1.3}, {1.9, 
        0.8}}, $CellContext`locDependent[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`numMasses, 
          Blank[Integer]], 
         Pattern[$CellContext`rma, 
          Blank[List]]] := 
       Module[{$CellContext`m, $CellContext`latticeBasis, \
$CellContext`numberLatticeLinesToDisplay, $CellContext`reciprocalBasis, \
$CellContext`mObliqueComponents, $CellContext`mPosFirstCell, \
$CellContext`reciprocalNorms, \
$CellContext`allLatticeCellOriginsInDynPlotRange, $CellContext`cellOrigins}, \
$CellContext`latticeBasis = Take[$CellContext`uLoc, 2]; $CellContext`m = 
          Drop[$CellContext`uLoc, 
            2]; $CellContext`numberLatticeLinesToDisplay = Map[Ceiling[
             Abs[$CellContext`glConstWindowHalfWidth/Part[
               Part[$CellContext`latticeBasis, #], #]]]& , 
            Range[
            2]]; $CellContext`reciprocalBasis = \
$CellContext`calcReciprocalBasis[$CellContext`latticeBasis]; \
$CellContext`reciprocalNorms = Map[Norm[
             Part[$CellContext`reciprocalBasis, #]]& , 
            Range[2]]; $CellContext`mObliqueComponents = Table[
            Dot[
             Part[$CellContext`m, $CellContext`i], 
             
             Part[$CellContext`reciprocalBasis, $CellContext`j]], \
{$CellContext`i, $CellContext`numMasses}, {$CellContext`j, 
             2}]; $CellContext`mPosFirstCell = 
          Map[Part[$CellContext`m, #] - Dot[
             Floor[
              
              Part[$CellContext`mObliqueComponents, #]], \
$CellContext`latticeBasis]& , 
            
            Range[$CellContext`numMasses]]; \
$CellContext`allLatticeCellOriginsInDynPlotRange = Transpose[
            $CellContext`findLatticeCells[$CellContext`latticeBasis, \
$CellContext`glConstDynPlotRange]]; $CellContext`cellOrigins = 
          Last[$CellContext`allLatticeCellOriginsInDynPlotRange]; {
          "mScalarArray" -> $CellContext`rma, 
           "numberOfMasses" -> $CellContext`numMasses, 
           "latticeBasis" -> $CellContext`latticeBasis, "latticeNorms" -> 
           Map[Norm[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], "latticeUnitVectors" -> Map[Normalize[
              Part[$CellContext`latticeBasis, #]]& , 
             Range[2]], 
           "numberLatticeLinesToDisplay" -> \
$CellContext`numberLatticeLinesToDisplay, "latticeCellOriginIndexes" -> 
           First[$CellContext`allLatticeCellOriginsInDynPlotRange], 
           "reciprocalBasis" -> $CellContext`reciprocalBasis, 
           "reciprocalNorms" -> $CellContext`reciprocalNorms, 
           "qMaxVec" -> (2 Pi) $CellContext`reciprocalNorms, 
           "mObliqueComponents" -> $CellContext`mObliqueComponents, 
           "mPosFirstCell" -> $CellContext`mPosFirstCell, "pointsDataTable" -> 
           Map[$CellContext`pointsTable[
              
              Part[$CellContext`mPosFirstCell, #], $CellContext`cellOrigins]& \
, 
             Range[$CellContext`numMasses]], "lineTable" -> 
           Map[$CellContext`calcLineTable[$CellContext`\
numberLatticeLinesToDisplay, $CellContext`latticeBasis, #]& , 
             Permutations[{1, 2}]]}], 
       TagSet[$CellContext`locDependent, 
        MessageName[$CellContext`locDependent, "usage"], 
        "Locator dependent calculations (i.e. based on the mass positions and \
the unit cell basis vectors)\n\nExample:\n\nld = locDependent[ { {1/2,1}, \
{1,1/2}, {1/2,3} }, 1, {10} ] ;\n"], $CellContext`glConstWindowHalfWidth = 
       3, $CellContext`calcReciprocalBasis[
         Pattern[$CellContext`loc, 
          Blank[List]]] := Inverse[
         Transpose[$CellContext`loc]], 
       TagSet[$CellContext`calcReciprocalBasis, 
        MessageName[$CellContext`calcReciprocalBasis, "usage"], 
        "Return a reciprocal frame basis for a set of vectors.  This doesn't \
include the 2 \[Pi] scaling that is common in solid state physics.  Example, \
displaying the desired Kronicker delta behaviour:\n\nb = {{2,1},{-1/4, 2}} ;\n\
g = calcReciprocalBasis[ b ] ;\n\n\
{g[[1]].loc[[1]],\[IndentingNewLine]g[[1]].loc[[2]],\[IndentingNewLine]g[[2]].\
loc[[1]],\[IndentingNewLine]g[[2]].loc[[2]]}\n"], \
$CellContext`findLatticeCells[
         Pattern[$CellContext`latticeVectors, 
          Blank[List]], 
         Pattern[$CellContext`limits, 
          Blank[List]]] := 
       Module[{$CellContext`a, $CellContext`b, $CellContext`sol, \
$CellContext`oneSolution}, {$CellContext`a, $CellContext`b} = \
$CellContext`latticeVectors; $CellContext`oneSolution[
            Pattern[$CellContext`o, 
             Blank[]]] := ReplaceAll[{$CellContext`n, $CellContext`m}, 
            Solve[
             Rationalize[
              And[Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {1, 0}] < Part[
                 Part[$CellContext`limits, 1], 2], Part[
                 Part[$CellContext`limits, 1], 1] < 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}], 
               Dot[$CellContext`n $CellContext`a + $CellContext`m \
$CellContext`b + $CellContext`o, {0, 1}] < Part[
                 Part[$CellContext`limits, 1], 
                 2]]], {$CellContext`n, $CellContext`m}, 
             Integers]]; $CellContext`sol = DeleteDuplicates[
            Sort[
             Flatten[
              
              Map[$CellContext`oneSolution[#]& , {{0, 
                0}, $CellContext`a, $CellContext`b, $CellContext`a + \
$CellContext`b}], 1]]]; 
         Map[{#, $CellContext`a Part[#, 1] + $CellContext`b 
             Part[#, 2]}& , $CellContext`sol]], 
       TagSet[$CellContext`findLatticeCells, 
        MessageName[$CellContext`findLatticeCells, "usage"], 
        "All the cell index pairs that lie within a rectangular region.\n\n\
Example: \nModule[{a, b, nAndPoints, cellOrigins, sol},\[IndentingNewLine]a = \
{1/2,2} ;\[IndentingNewLine]b = {2,-1/3} ;\[IndentingNewLine]\
\[IndentingNewLine]nAndPoints = findLatticeCells[{a,b}, {{-3, 5},{-1,6}}]  ;\
\[IndentingNewLine]cellOrigins = (nAndPoints // Transpose // Last) ;\
\[IndentingNewLine]\[IndentingNewLine]Show[{\[IndentingNewLine]ListPlot[\
cellOrigins, PlotStyle\[Rule]{Darker@Red, PointSize[Large]},\
\[IndentingNewLine]Epilog\[Rule] {Darker@Blue,Arrow[{{0,0},a}], Darker@Green, \
Arrow[{{0,0},b}]} \
]\[IndentingNewLine],\[IndentingNewLine]ListPlot[pointsTable[{0.3, 0.5}, \
cellOrigins], PlotStyle\[Rule]{Darker@Purple, PointSize[Medium]} ]\
\[IndentingNewLine]} ]\[IndentingNewLine]]\n"], \
$CellContext`glConstDynPlotRange = {{(-3)/2, 3}, {(-3)/2, 
          3}}, $CellContext`pointsTable[
         Pattern[$CellContext`massPosition, 
          Blank[List]], 
         Pattern[$CellContext`latticeOrigins, 
          Blank[List]]] := 
       Map[# + $CellContext`massPosition& , $CellContext`latticeOrigins], 
       TagSet[$CellContext`pointsTable, 
        MessageName[$CellContext`pointsTable, "usage"], 
        "Adds a position within a cell to a set of vectors to the origins of \
all the cells of interest.  Example in findLatticeCells::usage."], \
$CellContext`calcLineTable[
         Pattern[$CellContext`n, 
          Blank[List]], 
         Pattern[$CellContext`b, 
          Blank[List]], 
         Pattern[$CellContext`i, 
          Blank[List]]] := 
       Module[{$CellContext`first, $CellContext`second}, {$CellContext`first, \
$CellContext`second} = $CellContext`i; Table[
           
           Line[{(-Part[$CellContext`n, $CellContext`first]) 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second], 
             Part[$CellContext`n, $CellContext`first] 
              Part[$CellContext`b, $CellContext`first] + $CellContext`j 
              Part[$CellContext`b, $CellContext`second]}], {$CellContext`j, -
            Part[$CellContext`n, $CellContext`second], 
            
            Part[$CellContext`n, $CellContext`second]}]], \
$CellContext`constructKArray[
         Pattern[$CellContext`r, 
          Blank[Integer]]] := Flatten[
         Table[
          $CellContext`constructKArrayElements[$CellContext`i, \
$CellContext`j], {$CellContext`i, $CellContext`r}, {$CellContext`j, \
$CellContext`r}], 2], $CellContext`constructKArrayElements[
         Pattern[$CellContext`i, 
          Blank[Integer]], 
         Pattern[$CellContext`j, 
          Blank[Integer]]] := 
       Module[{$CellContext`a}, $CellContext`a = Flatten[
            
            Table[{$CellContext`i, $CellContext`j, $CellContext`s 
               Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`n]} -> 
             Part[$CellContext`glConstKDefaults, $CellContext`n], \
{$CellContext`s, -1, 1, 2}, {$CellContext`n, 4}], 1]; 
         If[$CellContext`i < $CellContext`j, 
           
           Append[$CellContext`a, {$CellContext`i, $CellContext`j, {0, 0}} -> 
            Part[$CellContext`glConstKDefaults, 
              5]], $CellContext`a]], \
$CellContext`glConstNeighboringCellIndexes = {{1, 0}, {0, 1}, {1, 1}, {
        1, -1}}, $CellContext`glConstKDefaults = {0.25, 0.25, 0.25, 0.25, 
        0.25}, $CellContext`returnKarrayForAdditionalMassIndex[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`nmNew, 
          Blank[Integer]]] := 
       Module[{$CellContext`k2}, $CellContext`k2 = Flatten[
            Map[$CellContext`constructKArrayElements[
              Part[#, 1], 
              Part[#, 2]]& , 
             Select[
              Flatten[
               
               Table[{$CellContext`i, $CellContext`j}, {$CellContext`i, \
$CellContext`nmNew}, {$CellContext`j, $CellContext`nmNew}], 1], 
              Max[#] == $CellContext`nmNew& ]], 2]; 
         Flatten[{$CellContext`kA, $CellContext`k2}, 
           1]], $CellContext`calculateCouplings[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`kA, 
          Blank[List]]] := 
       Module[{$CellContext`t, $CellContext`t1, $CellContext`t2, \
$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses}, \
{$CellContext`r, $CellContext`mp, $CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mPosFirstCell", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`t = 
          Map[Append[#, 
             $CellContext`relativeDifferences[$CellContext`r, $CellContext`mp, 
              First[#]]]& , 
            ReplaceAll[$CellContext`kA, Rule -> List]]; $CellContext`t = 
          Map[Flatten[{
              Part[#, 1], {
               Part[#, 2]}, 
              Part[#, 3]}, 1]& , $CellContext`t]; $CellContext`t1 = Table[
            Sort[
             
             Select[$CellContext`t, And[
              Part[#, 1] == $CellContext`i, Part[#, 3] != {0, 0}]& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
$CellContext`t2 = 
          Select[$CellContext`t, Part[#, 3] == {0, 0}& ]; $CellContext`t2 = 
          Flatten[{$CellContext`t2, 
             Map[Flatten[{{
                 Part[#, 2], 
                 Part[#, 1]}, 
                Drop[#, 2]}, 1]& , $CellContext`t2]}, 1]; $CellContext`t2 = 
          Table[
            Sort[
             Select[$CellContext`t2, Part[#, 1] == $CellContext`i& ], 
             Part[#, 5] < 
             Part[#2, 
               5]& ], {$CellContext`i, $CellContext`numberOfMasses}]; \
{$CellContext`t2, $CellContext`t1}], 
       TagSet[$CellContext`calculateCouplings, 
        MessageName[$CellContext`calculateCouplings, "usage"], 
        "Returns a pair of sets for each origin m_i coupling:\
\[IndentingNewLine]\nWith:\n\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\) for the position of the \
\!\(\*SuperscriptBox[\(k\), \(th\)]\) mass in the origin cell, \nj for the \
index of the neighbouring cell mass, \n\!\(\*OverscriptBox[\(m\), \(\
\[RightVector]\)]\) for the cell index of the neighbouring cell,\n\nthis \
function returns elements of the form:\[IndentingNewLine]{k, j, \
\!\(\*OverscriptBox[\(m\), \(\[RightVector]\)]\), \!\(\*SubscriptBox[\(K\), \
\(\*OverscriptBox[\(n\), \(\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\
\[RightVector]\)], j\)]\), \
\!\(\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)]\), \!\(\*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)]\), \!\(\*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\) + \
\!\(\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)]\), \
\!\(\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \(\
\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]\)}\n\nThere are two sets of \
lists returned:\nFirst has all the origin cell couplings for that mass.\
\[IndentingNewLine]Second has all the nn couplings for each mass sorted by \
distance from mass.  Can use that to select up to num-interactions."], \
$CellContext`relativeDifferences[
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mp, 
          Blank[List]], {
          Pattern[$CellContext`mIndex1, 
           Blank[Integer]], 
          Pattern[$CellContext`mIndex2, 
           Blank[Integer]], 
          Pattern[$CellContext`n, 
           Blank[List]]}] := 
       Module[{$CellContext`d, $CellContext`pOrigin, $CellContext`pOther, \
$CellContext`dn}, $CellContext`pOrigin = 
          Part[$CellContext`mp, $CellContext`mIndex1]; $CellContext`pOther = 
          Part[$CellContext`mp, $CellContext`mIndex2] + 
           Dot[$CellContext`n, $CellContext`r]; $CellContext`d = \
$CellContext`pOther - $CellContext`pOrigin; $CellContext`dn = 
          Dot[$CellContext`d, $CellContext`d]; {$CellContext`dn, \
$CellContext`pOrigin, $CellContext`pOther, \
$CellContext`projOpU[$CellContext`d]/$CellContext`dn}], 
       TagSet[$CellContext`relativeDifferences, 
        MessageName[$CellContext`relativeDifferences, "usage"], 
        "Example: relativeDifferences[ {aLoc, bLoc}, {mLoc1, mLoc2, ...}, \
kArray[[1]] /. Rule -> List ].\n\nHere, the list of the form: (kArray[[1]] /. \
Rule -> List) // First = {1,1,{-1,0}} = {m1index, m2index, {nIndex1, \
nIndex2}},\n\n is a tuple for the spring constant between m1 in the origin \
cell to m2 in the lattice cell {n1,n2} ;\n"], $CellContext`projOpU[
         Pattern[$CellContext`v, 
          Blank[List]]] := {{
         Part[$CellContext`v, 1]^2, Part[$CellContext`v, 1] 
          Part[$CellContext`v, 2]}, {
         Part[$CellContext`v, 1] Part[$CellContext`v, 2], 
          Part[$CellContext`v, 2]^2}}, $CellContext`dynamicsMatrix[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`cd, 
          Blank[List]]] := 
       Module[{$CellContext`cdFlatAndSorted, $CellContext`r, \
$CellContext`res, $CellContext`epsilon, $CellContext`m, \
$CellContext`mScalarArray, $CellContext`numberOfMasses}, \
$CellContext`cdFlatAndSorted = SplitBy[
            Sort[
             Flatten[$CellContext`cd, 2]], 
            First]; {$CellContext`r, $CellContext`mScalarArray, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "latticeBasis", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`epsilon = 
          Partition[
            IdentityMatrix[2 $CellContext`numberOfMasses], 
            2]; $CellContext`res = Partition[
            Flatten[
             Table[
              Total[
               Map[$CellContext`oneTermOfdynamicsMatrix[#, $CellContext`r, 
                 
                 Part[$CellContext`mScalarArray, $CellContext`i], \
$CellContext`epsilon, $CellContext`mScalarArray]& , 
                
                Part[$CellContext`cdFlatAndSorted, $CellContext`i]]], \
{$CellContext`i, $CellContext`numberOfMasses}]], 
            2 $CellContext`numberOfMasses]; 
         ReplaceAll[$CellContext`res, $CellContext`qVec -> #]& ], \
$CellContext`oneTermOfdynamicsMatrix[{
          Pattern[$CellContext`k, 
           Blank[Integer]], 
          Pattern[$CellContext`j, 
           Blank[Integer]], 
          Pattern[$CellContext`mVec, 
           Blank[List]], 
          Pattern[$CellContext`kS, 
           Blank[]], 
          Blank[], 
          Blank[], 
          Blank[], 
          Pattern[$CellContext`proj, 
           Blank[List]]}, 
         Pattern[$CellContext`r, 
          Blank[List]], 
         Pattern[$CellContext`mk, 
          Blank[]], 
         Pattern[$CellContext`epsilon, 
          Blank[List]], 
         Pattern[$CellContext`mA, 
          Blank[List]]] := $CellContext`kS 
        Dot[$CellContext`proj, 
          Part[$CellContext`epsilon, $CellContext`k]/$CellContext`mk - 
          Part[$CellContext`epsilon, $CellContext`j] (E^(I Dot[
               Dot[$CellContext`mVec, $CellContext`r], $CellContext`qVec])/
           Sqrt[$CellContext`mk Part[$CellContext`mA, $CellContext`j]])], 
       TagSet[$CellContext`oneTermOfdynamicsMatrix, 
        MessageName[$CellContext`oneTermOfdynamicsMatrix, "usage"], 
        "\!\(TraditionalForm\`\(grab\\ data\\ \(from : \\ rawArrayOfMasses\), \
\\ parameterLocatorDependencies, \[IndentingNewLine]\(\(couplingData[\([_]\)]\
\)[\([_]\)]\)[\([_]\)]\\  = \\ {k, \\ j, \\ \*OverscriptBox[\(m\), \(\
\[RightVector]\)], \\ \*SubscriptBox[\(K\), \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)], \\ \
\*SuperscriptBox[SubscriptBox[OverscriptBox[\(a\), \(\[RightVector]\)], \
\(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \*OverscriptBox[\(0\), \(\
\[RightVector]\)], k\)], \(2\)], \\ \*SubscriptBox[OverscriptBox[\(p\), \(\
\[RightVector]\)], \(k\)], \\ \*SubscriptBox[OverscriptBox[\(r\), \(\
\[RightVector]\)], OverscriptBox[\(m\), \(\[RightVector]\)]]\\  + \\ \
\*SubscriptBox[OverscriptBox[\(p\), \(\[RightVector]\)], \(j\)], \\ \
\*SubscriptBox[\(Proj\), SubscriptBox[OverscriptBox[\(a\), \
\(\[RightVector]\)], \(\*OverscriptBox[\(m\), \(\[RightVector]\)], j; \
\*OverscriptBox[\(0\), \(\[RightVector]\)], k\)]]}\[IndentingNewLine]\n ex : \
\\ {1, 2, {\(-1\), 0}, 0.5`, 1.`, {0.9`, 0.7`}, {0.30000000000000004`, \
\(-0.10000000000000009`\)}, {{0.36`, 0.48`}, {0.48`, 0.6400000000000001`}}}\
\[IndentingNewLine]\[IndentingNewLine]\n to\\ form\\ equations\\ of\\ the\\ \
\(form : \[IndentingNewLine]\*SuperscriptBox[\(\[Omega]\), \(2\)]\\ \
\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)], \
\(k\)](\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\)\\  = \\ \
\*UnderscriptBox[\(\[Sum]\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], \
k\\  \[NotEqual] \\ \*OverscriptBox[\(m\), \(\[RightVector]\)], \
j\)]\*SubscriptBox[\(K\), \(\*OverscriptBox[\(0\), \(\[RightVector]\)], k; \
\*OverscriptBox[\(m\), \(\[RightVector]\)], j\)] \*SubscriptBox[\(Proj\), \
SubscriptBox[OverscriptBox[\(a\), \(^\)], \(\*OverscriptBox[\(n\), \(\
\[RightVector]\)], k; \*OverscriptBox[\(m\), \(\[RightVector]\)], j\)]]\\ \((\
\*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\
\)], \(k\)] \((\*OverscriptBox[\(q\), \(\[RightVector]\)])\)\), SubscriptBox[\
\(m\), \(k\)]] - \\ \*FractionBox[\(\*SubscriptBox[OverscriptBox[\(\[Epsilon]\
\), \(\[RightVector]\)], \(j\)] \((\*OverscriptBox[\(q\), \
\(\[RightVector]\)])\)\), SqrtBox[\(\*SubscriptBox[\(m\), \(k\)] \
\*SubscriptBox[\(m\), \(j\)]\)]] \*SuperscriptBox[\(e\), \(I\\ \
\((\*SubscriptBox[OverscriptBox[\(r\), \(\[RightVector]\)], OverscriptBox[\(m\
\), \(\[RightVector]\)]]\\  . \\ \*OverscriptBox[\(q\), \(\[RightVector]\)]\\ \
)\)\)])\)\[IndentingNewLine]\n Note\\ that\\ qVec\\ here\\ is\\ intended\\ to\
\\ be\\ an\\ undefined\\ global . \\ \\ Is\\ there\\ a\\ way\\ to\\ do\\ that\
\\ \(\(programatically\)\(?\)\)\)\)"], $CellContext`calcDynamics[
         Pattern[$CellContext`mAtQ, 
          Blank[List]]] := Map[{
          Sqrt[
           Part[#, 1]], 
          Part[#, 2]}& , 
         Transpose[
          Eigensystem[$CellContext`mAtQ]]], 
       TagSet[$CellContext`calcDynamics, 
        MessageName[$CellContext`calcDynamics, "usage"], 
        "a list of 2 N elements {\!\(\*SubscriptBox[\(\[Omega]\), \(k\)]\),\!\
\(\*OverscriptBox[\(\[Epsilon]\), \(\[RightVector]\)]\)}, one for each of the \
system eigenvalues, when evaluated at qLoc."], \
$CellContext`dynamicsGraphicsTable[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`dynAtOmegaIndex, 
          Blank[List]], 
         Pattern[$CellContext`sc, 
          Blank[]], 
         Pattern[$CellContext`qPoint, 
          Blank[List]], 
         Pattern[$CellContext`dynMesh, 
          Blank[Integer]]] := 
       Module[{$CellContext`pointsDataTable, $CellContext`e, \
$CellContext`omega, $CellContext`lines, $CellContext`nu, $CellContext`a, \
$CellContext`b, $CellContext`mScalarArray, $CellContext`numberOfMasses, \
$CellContext`latticeCellOriginIndexes, $CellContext`mPosFirstCell, \
$CellContext`pointsData}, {{$CellContext`a, $CellContext`b}, \
$CellContext`pointsDataTable, $CellContext`lines, $CellContext`mScalarArray, \
$CellContext`numberOfMasses, $CellContext`latticeCellOriginIndexes, \
$CellContext`mPosFirstCell} = 
          ReplaceAll[{
            "latticeBasis", "pointsDataTable", "lineTable", "mScalarArray", 
             "numberOfMasses", "latticeCellOriginIndexes", 
             "mPosFirstCell"}, $CellContext`ld]; {$CellContext`omega, \
$CellContext`e} = $CellContext`dynAtOmegaIndex; $CellContext`e = 
          Partition[$CellContext`e, 2]; $CellContext`nu = (2 Pi) 
           If[$CellContext`omega == 0, 1, 
             1/$CellContext`omega]; $CellContext`pointsData := Table[
            
            Map[$CellContext`a Part[#, 1] + $CellContext`b Part[#, 2] + 
             Part[$CellContext`mPosFirstCell, $CellContext`k] + \
$CellContext`sc 
              Re[Part[$CellContext`e, $CellContext`k] 
                E^(I (Dot[$CellContext`qPoint, $CellContext`a 
                    Part[#, 1] + $CellContext`b 
                    Part[#, 
                    2]] - $CellContext`nu $CellContext`tau))]& , \
$CellContext`latticeCellOriginIndexes], {$CellContext`k, \
$CellContext`numberOfMasses}, {$CellContext`tau, 0, 1, 
             1/$CellContext`dynMesh}]; {$CellContext`pointsData, \
$CellContext`mScalarArray, $CellContext`numberOfMasses, $CellContext`lines, \
$CellContext`dynMesh}], 
       TagSet[$CellContext`dynamicsGraphicsTable, 
        MessageName[$CellContext`dynamicsGraphicsTable, "usage"], 
        "Calculate a time indexed table of positions for each of the \
masses"], $CellContext`frequencyPlotCalc[
         Pattern[$CellContext`ld, 
          Blank[List]], 
         Pattern[$CellContext`m, 
          Blank[]], 
         Pattern[$CellContext`meshSz, 
          Blank[Integer]]] := 
       Module[{$CellContext`eigTable2D, $CellContext`eigTable1D, \
$CellContext`qMax, $CellContext`omegaPointList2D, \
$CellContext`omegaPointList1D, $CellContext`range, \
$CellContext`numberOfMasses}, {$CellContext`qMax, \
$CellContext`numberOfMasses} = 
          ReplaceAll[{
            "qMaxVec", 
             "numberOfMasses"}, $CellContext`ld]; $CellContext`eigTable2D = 
          Flatten[
            Re[
             Table[{{$CellContext`qx, $CellContext`qy}, 
               Eigenvalues[
                N[
                 $CellContext`m[{$CellContext`qx, $CellContext`qy}]]]}, \
{$CellContext`qx, -(Part[$CellContext`qMax, 1]/2), Part[$CellContext`qMax, 1]/
               2, Part[$CellContext`qMax, 
                 1]/$CellContext`meshSz}, {$CellContext`qy, -(
                Part[$CellContext`qMax, 2]/2), Part[$CellContext`qMax, 2]/2, 
               Part[$CellContext`qMax, 2]/$CellContext`meshSz}]], 
            1]; $CellContext`omegaPointList2D[
            Pattern[$CellContext`nn, 
             Blank[]]] := Map[Flatten[{
              Part[#, 1], 
              Part[
               Sqrt[
                
                Part[#, 
                 2]], $CellContext`nn]}]& , $CellContext`eigTable2D]; \
$CellContext`range = Range[2 $CellContext`numberOfMasses]; ListPlot3D[
           Map[$CellContext`omegaPointList2D[#]& , $CellContext`range], 
           PlotRange -> Full, 
           ImageSize -> $CellContext`glConstPrimaryDisplaySize, 
           AxesLabel -> {
            "\!\(\*SubscriptBox[\(q\), \(x\)]\)", 
             "\!\(\*SubscriptBox[\(q\), \(y\)]\)"}]], 
       TagSet[$CellContext`frequencyPlotCalc, 
        MessageName[$CellContext`frequencyPlotCalc, "usage"], 
        "frequencyPlotCalc[ parameterLocatorDependencies, matrix, \
freqMeshSize]"], $CellContext`glConstPrimaryDisplaySize = {380, 
        380}, $CellContext`showDynPlot[{
          Pattern[$CellContext`pointsData, 
           Blank[List]], 
          Pattern[$CellContext`mScalarArray, 
           Blank[List]], 
          Pattern[$CellContext`numberOfMasses, 
           Blank[Integer]], 
          Pattern[$CellContext`lines, 
           Blank[List]], 
          Pattern[$CellContext`dynMesh, 
           Blank[Integer]]}, 
         Pattern[$CellContext`n, 
          Blank[]]] := Show[
         Flatten[{
           Table[
            ListPlot[
             Part[
              Part[$CellContext`pointsData, $CellContext`k], $CellContext`n], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize, PlotStyle -> 
             Directive[
               PointSize[
                Sqrt[
                Part[$CellContext`mScalarArray, \
$CellContext`k]/($CellContext`glConstMMax 350)]], 
               $CellContext`massColors[$CellContext`k]]], {$CellContext`k, \
$CellContext`numberOfMasses}], {
            Graphics[{$CellContext`lines}]}}, 1]], 
       TagSet[$CellContext`showDynPlot, 
        MessageName[$CellContext`showDynPlot, "usage"], 
        "showDynPlot[ dynamicsGraphicsTable[ld, dynAtOmegaIndex, sc, qPoint, \
dynMesh ] ]"], $CellContext`glConstMMax = 30, $CellContext`massColors := Part[
         Darker[{Blue, Green, Purple, Red, Orange}], Mod[#, 5] + 
         1]& , $CellContext`showFreqPlot[
         Pattern[$CellContext`qpl, 
          Blank[List]], 
         Pattern[$CellContext`freqPlotData, 
          Blank[]]] := 
       Module[{$CellContext`aa, $CellContext`bb}, {$CellContext`aa, \
$CellContext`bb} = $CellContext`qpl; Show[{$CellContext`freqPlotData, 
            Graphics3D[
             Polygon[{{
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 0}, {
                Part[$CellContext`bb, 1], 
                Part[$CellContext`bb, 2], 23}, {
                Part[$CellContext`aa, 1], 
                Part[$CellContext`aa, 2], 23}}]]}]], 
       TagSet[$CellContext`showFreqPlot, 
        MessageName[$CellContext`showFreqPlot, "usage"], 
        "showFreqPlot[ qPlaneLoc, freqPlot ]"], \
$CellContext`nMassesFromLocArray[
         Pattern[$CellContext`uLoc, 
          Blank[]]] := First[
          Dimensions[$CellContext`uLoc]] - 2, $CellContext`glConstDefaultMass = 
       20, $CellContext`glConstMinSquaredDistanceFromOrigin = 
       0.1, $CellContext`resetLatticeVectorsIfAngleTooSmall[
         Pattern[$CellContext`uLoc, 
          Blank[List]], 
         Pattern[$CellContext`minAngle, 
          Blank[]]] := Module[{$CellContext`t}, $CellContext`t = Abs[
            ArcCos[
             Dot[
              Normalize[
               Part[$CellContext`uLoc, 1]], 
              Normalize[
               Part[$CellContext`uLoc, 2]]]]]; $CellContext`t = 
          If[$CellContext`t > Pi/2, Pi - $CellContext`t, $CellContext`t]; 
         If[$CellContext`t < $CellContext`minAngle, \
$CellContext`glConstLocDefault, {
            Part[$CellContext`uLoc, 1], 
            
            Part[$CellContext`uLoc, 
             2]}]], $CellContext`glConstMinAngleBetweenLatticeVectors = 
       Pi/6, $CellContext`adjustedmoSel[
         Pattern[$CellContext`rNumM, 
          Blank[]], 
         Pattern[$CellContext`mOrigInd, 
          Blank[]], 
         Pattern[$CellContext`m1Ind, 
          Blank[]]] := If[$CellContext`rNumM > 2, 
         If[$CellContext`mOrigInd == $CellContext`m1Ind, 
          First[
           DeleteCases[
            
            Range[$CellContext`rNumM], $CellContext`m1Ind]], \
$CellContext`mOrigInd], 
         First[
          Delete[
           Range[2], $CellContext`m1Ind]]], $CellContext`selectVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]]] := 
       ReplaceAll[{$CellContext`m1Ind, $CellContext`m2Ind, 
          
          Part[$CellContext`glConstNeighboringCellIndexes, $CellContext`ni]}, \
$CellContext`kA], $CellContext`selectOriginVFromKarray[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]]] := ReplaceAll[
         Append[
          Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 
          0}], $CellContext`kA], $CellContext`plotSprings[
         Pattern[$CellContext`uLoc$, 
          Blank[List]], 
         Pattern[$CellContext`ld$, 
          Blank[List]], 
         Pattern[$CellContext`cd$, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind$, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd$, 
          Blank[Integer]]] := 
       Module[{$CellContext`aLoc$, $CellContext`bLoc$, $CellContext`mLoc$, \
$CellContext`pointsList$, $CellContext`latticeBasis$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`cOrigin$, $CellContext`cN$, $CellContext`g$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$, \
$CellContext`scaleLoc$}, $CellContext`latticeBasis$ = 
          Take[$CellContext`uLoc$, 2]; $CellContext`aLoc$ = 
          Part[$CellContext`uLoc$, 1]; $CellContext`bLoc$ = 
          Part[$CellContext`uLoc$, 2]; $CellContext`scaleLoc$ = 
          Dot[$CellContext`aLoc$, $CellContext`aLoc$] + 
           Dot[$CellContext`bLoc$, $CellContext`bLoc$]; {$CellContext`mLoc$, \
$CellContext`reciprocalBasis$, $CellContext`pointsDataTable$, \
$CellContext`numberLatticeLinesToDisplay$, $CellContext`lines$, \
$CellContext`mScalarArray$, $CellContext`numberOfMasses$} = 
          ReplaceAll[{
            "mPosFirstCell", "reciprocalBasis", "pointsDataTable", 
             "numberLatticeLinesToDisplay", "lineTable", "mScalarArray", 
             "numberOfMasses"}, $CellContext`ld$]; $CellContext`pointsList$[
            Pattern[$CellContext`n$, 
             Blank[Integer]]] := {
            $CellContext`massColors[$CellContext`n$], Null, 
            PointSize[
             Sqrt[
             Part[$CellContext`mScalarArray$, \
$CellContext`n$]/($CellContext`glConstMMax 500)]], 
            Map[Point[#]& , 
             Part[$CellContext`pointsDataTable$, $CellContext`n$]], 
            Text[
             $CellContext`massLabel[$CellContext`n$], 
             Part[$CellContext`mLoc$, $CellContext`n$] + \
$CellContext`glConstTextDisplayOffsetHack]}; $CellContext`cOrigin$ = Select[
            Part[
             Part[$CellContext`cd$, 1], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`moInd$}& ]; \
$CellContext`cN$ = Select[
            Part[
             Part[$CellContext`cd$, 2], $CellContext`m1Ind$], 
            Take[#, 2] == {$CellContext`m1Ind$, $CellContext`m2Ind$}& ]; \
$CellContext`g$ = Map[ListLinePlot[
             $CellContext`spScaled[
              Take[#, {6, 7}], 
              Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
             AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
               Part[#, 3], 
               FE`glConstSpringColorsByN$$774]]& , $CellContext`cN$]; 
         If[$CellContext`numberOfMasses$ > 1, 
           AppendTo[$CellContext`g$, 
            Map[ListLinePlot[
              $CellContext`spScaled[
               Take[#, {6, 7}], 
               Part[#, 4]/$CellContext`glConstKMax, $CellContext`scaleLoc$], 
              AspectRatio -> Automatic, PlotStyle -> ReplaceAll[
                Part[#, 3], 
                FE`glConstSpringColorsByN$$774]]& , $CellContext`cOrigin$]], 
           Null]; Show[{
            Graphics[
             Flatten[{{$CellContext`lines$, Blue, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`reciprocalBasis$, #]}]& , 
                 Range[2]], Thick, 
                Arrowheads[0.05], Red, 
                Map[Arrow[{{0, 0}, 
                   Part[$CellContext`latticeBasis$, #]}]& , 
                 Range[2]], 
                Text[
                 OverVector[
                 "a"], $CellContext`aLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack], 
                Text[
                 OverVector[
                 "b"], $CellContext`bLoc$/
                  2 + $CellContext`glConstTextDisplayOffsetHack]}, 
               Map[$CellContext`pointsList$[#]& , 
                Range[$CellContext`numberOfMasses$]]}], 
             PlotRange -> $CellContext`glConstDynPlotRange, 
             ImageSize -> $CellContext`glConstPrimaryDisplaySize], \
$CellContext`g$}]], 
       TagSet[$CellContext`plotSprings, 
        MessageName[$CellContext`plotSprings, "usage"], 
        "Example:\n\nModule[{ld, cd, basisAndMassPoints, kArray},\
\[IndentingNewLine]basisAndMassPoints = { {0.6,1}, {1,-0.4}, {0.3,3} } ;\
\[IndentingNewLine]ld = locDependent[ basisAndMassPoints, 1,{10} ]  ;\
\[IndentingNewLine]kArray = constructKArray[ 1 ] ;\[IndentingNewLine]cd = \
calculateCouplings[ ld, kArray ] \
;\[IndentingNewLine]plotSprings[basisAndMassPoints, ld, cd, 1, 1, 1 ] \
\[IndentingNewLine]]\n"], Attributes[$CellContext`uLoc$] = {Temporary}, 
       Attributes[$CellContext`ld$] = {Temporary}, 
       Attributes[$CellContext`cd$] = {Temporary}, 
       Attributes[$CellContext`m1Ind$] = {Temporary}, 
       Attributes[$CellContext`m2Ind$] = {Temporary}, 
       Attributes[$CellContext`moInd$] = {Temporary}, 
       Attributes[$CellContext`aLoc$] = {Temporary}, 
       Attributes[$CellContext`bLoc$] = {Temporary}, 
       Attributes[$CellContext`mLoc$] = {Temporary}, 
       Attributes[$CellContext`pointsList$] = {Temporary}, 
       Attributes[$CellContext`latticeBasis$] = {Temporary}, 
       Attributes[$CellContext`reciprocalBasis$] = {Temporary}, 
       Attributes[$CellContext`pointsDataTable$] = {Temporary}, 
       Attributes[$CellContext`numberLatticeLinesToDisplay$] = {Temporary}, 
       Attributes[$CellContext`lines$] = {Temporary}, 
       Attributes[$CellContext`cOrigin$] = {Temporary}, 
       Attributes[$CellContext`cN$] = {Temporary}, 
       Attributes[$CellContext`g$] = {Temporary}, 
       Attributes[$CellContext`mScalarArray$] = {Temporary}, 
       Attributes[$CellContext`numberOfMasses$] = {Temporary}, 
       Attributes[$CellContext`scaleLoc$] = {Temporary}, 
       Attributes[$CellContext`n$] = {Temporary}, $CellContext`massLabel := 
       Style[
         $CellContext`indexLabel["m", #], 
         $CellContext`massColors[#]]& , $CellContext`indexLabel = Subscript[
         Style[#, Italic], #2]& , 
       TagSet[$CellContext`indexLabel, 
        MessageName[$CellContext`indexLabel, "usage"], 
        "\!\(\*SubscriptBox[\(k\), \(i\)]\)(or other character) in italic. \
indexLabel['k', 1]"], 
       Attributes[Subscript] = {
        NHoldRest}, $CellContext`glConstTextDisplayOffsetHack = {0.25, 
        0.25}, $CellContext`spScaled[{
          Pattern[$CellContext`s1, 
           Blank[List]], 
          Pattern[$CellContext`s2, 
           Blank[List]]}, 
         Pattern[$CellContext`scaleKValue, 
          Blank[]], 
         Pattern[$CellContext`referenceSepSquared, 
          Blank[]]] := 
       Module[{$CellContext`ds}, $CellContext`ds = $CellContext`s2 - \
$CellContext`s1; $CellContext`springPoints[{$CellContext`s1, $CellContext`s2}, 
           
           Ceiling[(12 $CellContext`scaleKValue) 
            Sqrt[Dot[$CellContext`ds, \
$CellContext`ds]/$CellContext`referenceSepSquared]]]], \
$CellContext`springPoints[
         Pattern[$CellContext`a12, 
          Blank[List]], 
         Optional[
          Pattern[$CellContext`n, 
           Blank[Integer]], 8], 
         Optional[
          Pattern[$CellContext`h, 
           Blank[]], 0.05], 
         Optional[
          Pattern[$CellContext`f, 
           Blank[]], 0.1]] := 
       Module[{$CellContext`a1, $CellContext`a2, $CellContext`n1, \
$CellContext`springDiff, $CellContext`nd, $CellContext`r, $CellContext`r1}, \
{$CellContext`a1, $CellContext`a2} = $CellContext`a12; $CellContext`n1 = 
          Norm[$CellContext`a1]; $CellContext`springDiff = $CellContext`a2 - \
$CellContext`a1; $CellContext`nd = 
          Norm[$CellContext`springDiff]; $CellContext`r = RotationMatrix[
            Apply[ArcTan, $CellContext`springDiff]]; $CellContext`r1 = 
          Dot[$CellContext`r, {$CellContext`n1, 0}]; {
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + ($CellContext`t (1 - 
                  2 $CellContext`f)) $CellContext`nd, $CellContext`h 
               Sin[((2 Pi) $CellContext`n) $CellContext`t]}], {$CellContext`t,
              0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + $CellContext`nd \
$CellContext`f + (1 - 
                 2 $CellContext`f) $CellContext`nd + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}], 
           
           Table[$CellContext`a1 - $CellContext`r1 + 
            Dot[$CellContext`r, {$CellContext`n1 + ($CellContext`t \
$CellContext`f) $CellContext`nd, 0}], {$CellContext`t, 0, 1, 0.01}]}], 
       TagSet[$CellContext`springPoints, 
        MessageName[$CellContext`springPoints, "usage"], 
        "springPoints[ {point1, point2}, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ].  Example:\n\
\[IndentingNewLine]ListLinePlot[springPoints[{{1,2},{3,5}}], AspectRatio\
\[Rule]Automatic, PlotStyle -> Darker[ Purple ] ]"], $CellContext`glConstKMax = 
       1, FE`glConstSpringColorsByN$$774 = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}, $CellContext`checkAgainstRange[
         Pattern[$CellContext`v, 
          Blank[]], 
         Pattern[$CellContext`default, 
          Blank[]], 
         Pattern[$CellContext`lowerLimit, 
          Blank[]], 
         Pattern[$CellContext`upperLimit, 
          Blank[]], 
         Optional[
          Pattern[$CellContext`typeFunc, 
           Blank[]], NumberQ]] := 
       Module[{$CellContext`result}, $CellContext`result = If[
            $CellContext`typeFunc[$CellContext`v], $CellContext`v, \
$CellContext`default]; $CellContext`result = 
          If[$CellContext`result <= $CellContext`upperLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result = 
          If[$CellContext`result >= $CellContext`lowerLimit, \
$CellContext`result, $CellContext`default]; $CellContext`result], 
       TagSet[$CellContext`checkAgainstRange, 
        MessageName[$CellContext`checkAgainstRange, "usage"], 
        "This is to deal with InputForm Manipulators, that allow non-numeric \
values to be passed, or values that exceed the range specified in the \
Manipulator."], $CellContext`massValue = 10, $CellContext`kLable = Style[
         $CellContext`indexLabel["k", #], FontColor -> 
         Part[$CellContext`glConstSpringColors, #]]& , 
       TagSet[$CellContext`kLable, 
        MessageName[$CellContext`kLable, "usage"], 
        "SubscriptBox[k,i\\](or other character) in italic and colored by \
spring index. kLable[k]"], $CellContext`glConstSpringColors = {
         RGBColor[2/3, 0.33333333333333337`, 0], 
         RGBColor[0, 2/3, 0], 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], 
         RGBColor[0, 2/3, 2/3], 
         RGBColor[2/3, 2/3, 0]}, $CellContext`glConstKMin = 
       0.05, $CellContext`returnAlteredKArrayElements[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`m2Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`ni, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       ReplaceAll[$CellContext`kA, {({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, 
             
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v), ({$CellContext`m1Ind, \
$CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> 
           Blank[]) :> ({$CellContext`m1Ind, $CellContext`m2Ind, -
             Part[$CellContext`glConstNeighboringCellIndexes, \
$CellContext`ni]} -> $CellContext`v)}], \
$CellContext`returnAlteredKarrayOriginElement[
         Pattern[$CellContext`kA, 
          Blank[List]], 
         Pattern[$CellContext`m1Ind, 
          Blank[Integer]], 
         Pattern[$CellContext`moInd, 
          Blank[Integer]], 
         Pattern[$CellContext`v, 
          Blank[]]] := 
       Module[{$CellContext`m1oSet}, $CellContext`m1oSet = Append[
            Sort[{$CellContext`m1Ind, $CellContext`moInd}], {0, 0}]; 
         ReplaceAll[$CellContext`kA, ($CellContext`m1oSet -> 
            Blank[]) :> ($CellContext`m1oSet -> $CellContext`v)]], \
$CellContext`glConstSpringColorsByN$$ = {{-1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, -1} -> 
         RGBColor[0, 2/3, 0], {-1, -1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {-1, 1} -> 
         RGBColor[0, 2/3, 2/3], {0, 0} -> RGBColor[2/3, 2/3, 0], {1, 0} -> 
         RGBColor[2/3, 0.33333333333333337`, 0], {0, 1} -> 
         RGBColor[0, 2/3, 0], {1, 1} -> 
         RGBColor[0.33333333333333337`, 0, 0.33333333333333337`], {1, -1} -> 
         RGBColor[0, 2/3, 2/3]}}; Typeset`initDone$$ = True),
    SynchronousInitialization->False,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.601595184710431*^9, 3.601595194105968*^9}, 
   3.601595238917531*^9, 3.60159558297221*^9, {3.60159563385112*^9, 
   3.601595692016447*^9}, {3.601595722040164*^9, 3.6015957901640606`*^9}, {
   3.601595883095376*^9, 3.601595901713441*^9}, 3.601595934410311*^9, {
   3.601595966050121*^9, 3.6015959860792665`*^9}}]
}, Open  ]]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 118031, 2718, 15422, "Input",
 InitializationCell->True,
 CellID->454600298],
Cell[CellGroupData[{
Cell[118613, 2742, 102923, 2157, 11822, "Input",
 CellID->106836794],
Cell[221539, 4901, 362052, 6218, 615, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[583628, 11124, 3445, 79, 516, "Input"],
Cell[587076, 11205, 584705, 9808, 615, "Output"],
Cell[1171784, 21015, 271570, 4765, 615, "Output"]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
