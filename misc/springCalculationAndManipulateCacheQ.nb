(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[     69340,       1438]
NotebookOptionsPosition[     68336,       1399]
NotebookOutlinePosition[     68855,       1421]
CellTagsIndexPosition[     68769,       1416]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[{
 "Question for: ",
 ButtonBox["http://mathematica.stackexchange.com/questions/40066/how-to-avoid-\
an-expensive-subset-of-a-manipulate-computation-when-dependent-vari",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/40066/how-to-avoid-an-\
expensive-subset-of-a-manipulate-computation-when-dependent-vari"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/40066/how-to-avoid-an-\
expensive-subset-of-a-manipulate-computation-when-dependent-vari"]
}], "Text",
 CellChangeTimes->{{3.5982223353193183`*^9, 3.5982223374054375`*^9}, {
  3.5982223674221544`*^9, 3.598222377744745*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "preCalculateStuff", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"preCalculateStuff", " ", "=", " ", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"#1", "  ", "#2"}], " ", ")"}], " ", "&"}]}], " ", ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Manipulate", "[", " ", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"DynamicModule", "[", 
     RowBox[{
      RowBox[{"{", "f", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"f", "=", 
        RowBox[{"preCalculateStuff", "[", 
         RowBox[{"a", ",", "b"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"f", ",", " ", 
         RowBox[{"Dynamic", "@", 
          RowBox[{"Plot", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"f", " ", "t"}], ")"}], " ", 
             RowBox[{"Sin", "[", "  ", 
              RowBox[{"t", " ", "+", " ", "r"}], " ", "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"r", ",", " ", "0", ",", " ", 
              RowBox[{"2", " ", "Pi"}]}], "}"}]}], "]"}]}]}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"b", ",", "0.5"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", "0.5"}], "}"}], ",", "0", ",", "1", ",", 
      RowBox[{"ContinuousAction", "\[Rule]", "True"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"ContinuousAction", "\[Rule]", "None"}]}], "\[IndentingNewLine]", 
   "]"}], "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\n"}], "Input",
 CellChangeTimes->{{3.5982158122342196`*^9, 3.598215858277853*^9}, {
   3.5982159427046814`*^9, 3.5982161112383213`*^9}, {3.598216150499567*^9, 
   3.59821616664049*^9}, {3.5982163622466784`*^9, 3.598216465134563*^9}, {
   3.5982165253650084`*^9, 3.5982165878425817`*^9}, {3.5982184547913647`*^9, 
   3.59821845819656*^9}, {3.5982185228022547`*^9, 3.5982185231702757`*^9}, {
   3.5982185603474026`*^9, 3.5982187136221695`*^9}, {3.5982188424785395`*^9, 
   3.5982189029930005`*^9}, {3.598218941886225*^9, 3.5982189695318065`*^9}, {
   3.598219035064554*^9, 3.598219109850832*^9}, {3.5982191415196433`*^9, 
   3.5982191415376444`*^9}, {3.5982223209284954`*^9, 3.598222327608877*^9}, {
   3.598230575751644*^9, 3.598230630383769*^9}, 3.598230679728591*^9}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 0.438, $CellContext`b$$ = 
    0.551, $CellContext`t$$ = 0.42024972534179666`, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`a$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`b$$], 0.5}, 0, 1}, {{
       Hold[$CellContext`t$$], 0.5}, 0, 1}}, Typeset`size$$ = {
    356., {61., 69.}}, Typeset`update$$ = 
    3.5982126900961842`17.30866182004416*^9, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`a$62065$$ = 
    0, $CellContext`b$62066$$ = 0, $CellContext`t$62067$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = 0.5, $CellContext`b$$ = 
        0.5, $CellContext`t$$ = 0.5}, "ControllerVariables" :> {
        Hold[$CellContext`a$$, $CellContext`a$62065$$, 0], 
        Hold[$CellContext`b$$, $CellContext`b$62066$$, 0], 
        Hold[$CellContext`t$$, $CellContext`t$62067$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      DynamicModule[{$CellContext`f}, $CellContext`f = \
$CellContext`preCalculateStuff[$CellContext`a$$, $CellContext`b$$]; \
{$CellContext`f, 
          Dynamic[
           
           Plot[($CellContext`f $CellContext`t$$) 
            Sin[$CellContext`t$$ + $CellContext`r], {$CellContext`r, 0, 2 
             Pi}]]}], 
      "Specifications" :> {{{$CellContext`a$$, 0.5}, 0, 
         1}, {{$CellContext`b$$, 0.5}, 0, 1}, {{$CellContext`t$$, 0.5}, 0, 1, 
         ContinuousAction -> True}}, "Options" :> {ContinuousAction -> None}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{419., {175., 182.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.598219113379034*^9, 3.5982191450158434`*^9, {3.5982306043382792`*^9, 
   3.5982306315458355`*^9}, 3.5982306811996756`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"tick", ";", "\[IndentingNewLine]", 
     RowBox[{"Grid", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Row", "[", 
          RowBox[{"{", 
           RowBox[{
           "\"\<f=\>\"", ",", "f", ",", "\"\< a=\>\"", ",", "a", ",", 
            "\"\< b=\>\"", ",", "b", ",", "\"\< t=\>\"", ",", "t", ",", " ", 
            "\"\< tick=\>\"", ",", " ", "tick"}], "}"}], "]"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"Plot", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"f", " ", "t"}], ")"}], " ", 
            RowBox[{"Sin", "[", 
             RowBox[{"t", "+", "r"}], "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"r", ",", "0", ",", 
             RowBox[{"2", " ", "Pi"}]}], "}"}], ",", 
           RowBox[{"ImagePadding", "\[Rule]", "30"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "400"}], ",", 
           RowBox[{"Frame", "\[Rule]", "True"}]}], "]"}], "}"}]}], "}"}], 
      "]"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"Grid", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<a\>\"", ",", 
          RowBox[{"Manipulator", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"a", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"a", "=", "#"}], ";", 
                 RowBox[{"f", "=", 
                  RowBox[{"preCalculateStuff", "[", 
                   RowBox[{"a", ",", "b"}], "]"}]}], ";", 
                 RowBox[{"tick", "=", 
                  RowBox[{"Not", "[", "tick", "]"}]}]}], "}"}], "&"}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", "0.01"}], "}"}]}], "]"}], ",", 
          RowBox[{"Dynamic", "[", "a", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<b\>\"", ",", 
          RowBox[{"Manipulator", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"b", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"b", "=", "#"}], ";", 
                 RowBox[{"f", "=", 
                  RowBox[{"preCalculateStuff", "[", 
                   RowBox[{"a", ",", "b"}], "]"}]}], ";", 
                 RowBox[{"tick", "=", 
                  RowBox[{"Not", "[", "tick", "]"}]}]}], "}"}], "&"}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", "0.01"}], "}"}]}], "]"}], ",", 
          RowBox[{"Dynamic", "[", "b", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"\"\<t\>\"", ",", 
          RowBox[{"Manipulator", "[", 
           RowBox[{
            RowBox[{"Dynamic", "[", 
             RowBox[{"t", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"t", "=", "#"}], ";", 
                 RowBox[{"tick", "=", 
                  RowBox[{"Not", "[", "tick", "]"}]}]}], "}"}], "&"}]}], 
             "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1", ",", "0.01"}], "}"}]}], "]"}], ",", 
          RowBox[{"Dynamic", "[", "t", "]"}]}], "}"}]}], "}"}], ",", 
      RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
      RowBox[{"Spacings", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{".5", ",", ".5"}], "}"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"tick", ",", "False"}], "}"}], ",", "None"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", ".5"}], "}"}], ",", "None"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"b", ",", ".4"}], "}"}], ",", "None"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"t", ",", ".7"}], "}"}], ",", "None"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"f", ",", 
        RowBox[{".5", "*", ".4"}]}], "}"}], ",", "None"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"TrackedSymbols", "\[RuleDelayed]", 
     RowBox[{"{", "tick", "}"}]}], ",", "\[IndentingNewLine]", 
    RowBox[{"Initialization", "\[RuleDelayed]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"preCalculateStuff", "[", 
        RowBox[{"a_", ",", "b_"}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "}"}], ",", 
         RowBox[{"(*", 
          RowBox[{"heavy", " ", "computation", " ", "goes", " ", "here"}], 
          "*)"}], 
         RowBox[{"a", "*", "b"}]}], "]"}]}], ")"}]}]}], "]"}], 
  "\n"}]], "Input",
 CellChangeTimes->{{3.598232210676156*^9, 3.598232210686157*^9}, {
  3.598232272369685*^9, 3.598232302266395*^9}, {3.5982323598826904`*^9, 
  3.598232450734887*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`a$$ = 0.61, $CellContext`b$$ = 
    0.63, $CellContext`f$$ = 0.3843, $CellContext`t$$ = 
    0.58, $CellContext`tick$$ = True, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[
       Grid[{{"a", 
          Manipulator[
           
           Dynamic[$CellContext`a$$, {$CellContext`a$$ = #; $CellContext`f$$ = \
$CellContext`preCalculateStuff[$CellContext`a$$, $CellContext`b$$]; \
$CellContext`tick$$ = Not[$CellContext`tick$$]}& ], {0, 1, 0.01}], 
          Dynamic[$CellContext`a$$]}, {"b", 
          Manipulator[
           
           Dynamic[$CellContext`b$$, {$CellContext`b$$ = #; $CellContext`f$$ = \
$CellContext`preCalculateStuff[$CellContext`a$$, $CellContext`b$$]; \
$CellContext`tick$$ = Not[$CellContext`tick$$]}& ], {0, 1, 0.01}], 
          Dynamic[$CellContext`b$$]}, {"t", 
          Manipulator[
           
           Dynamic[$CellContext`t$$, {$CellContext`t$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$]}& ], {0, 1, 0.01}], 
          Dynamic[$CellContext`t$$]}}, Alignment -> Center, 
        Spacings -> {0.5, 0.5}]], Manipulate`Dump`ThisIsNotAControl}, {{
       Hold[$CellContext`tick$$], False}, 0}, {{
       Hold[$CellContext`a$$], 0.5}, 0}, {{
       Hold[$CellContext`b$$], 0.4}, 0}, {{
       Hold[$CellContext`t$$], 0.7}, 0}, {{
       Hold[$CellContext`f$$], 0.2}, 0}}, Typeset`size$$ = {
    533., {187.5, 194.5}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`a$$ = 0.5, $CellContext`b$$ = 
        0.4, $CellContext`f$$ = 0.2, $CellContext`t$$ = 
        0.7, $CellContext`tick$$ = False}, "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> ($CellContext`tick$$; Grid[{{
           
           Row[{"f=", $CellContext`f$$, " a=", $CellContext`a$$, 
             " b=", $CellContext`b$$, " t=", $CellContext`t$$, 
             " tick=", $CellContext`tick$$}]}, {
           
           Plot[($CellContext`f$$ $CellContext`t$$) 
            Sin[$CellContext`t$$ + $CellContext`r], {$CellContext`r, 0, 2 Pi},
             ImagePadding -> 30, ImageSize -> 400, Frame -> True]}}]), 
      "Specifications" :> {
        Grid[{{"a", 
           Manipulator[
            
            Dynamic[$CellContext`a$$, {$CellContext`a$$ = #; $CellContext`f$$ = \
$CellContext`preCalculateStuff[$CellContext`a$$, $CellContext`b$$]; \
$CellContext`tick$$ = Not[$CellContext`tick$$]}& ], {0, 1, 0.01}], 
           Dynamic[$CellContext`a$$]}, {"b", 
           Manipulator[
            
            Dynamic[$CellContext`b$$, {$CellContext`b$$ = #; $CellContext`f$$ = \
$CellContext`preCalculateStuff[$CellContext`a$$, $CellContext`b$$]; \
$CellContext`tick$$ = Not[$CellContext`tick$$]}& ], {0, 1, 0.01}], 
           Dynamic[$CellContext`b$$]}, {"t", 
           Manipulator[
            
            Dynamic[$CellContext`t$$, {$CellContext`t$$ = #; \
$CellContext`tick$$ = Not[$CellContext`tick$$]}& ], {0, 1, 0.01}], 
           Dynamic[$CellContext`t$$]}}, Alignment -> Center, 
         Spacings -> {0.5, 0.5}], {{$CellContext`tick$$, False}, 0, 
         ControlType -> None}, {{$CellContext`a$$, 0.5}, 0, ControlType -> 
         None}, {{$CellContext`b$$, 0.4}, 0, ControlType -> 
         None}, {{$CellContext`t$$, 0.7}, 0, ControlType -> 
         None}, {{$CellContext`f$$, 0.2}, 0, ControlType -> None}}, 
      "Options" :> {TrackedSymbols :> {$CellContext`tick$$}}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{596., {286., 293.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>($CellContext`preCalculateStuff[
        Pattern[$CellContext`a, 
         Blank[]], 
        Pattern[$CellContext`b, 
         Blank[]]] := Module[{}, $CellContext`a $CellContext`b]; 
     Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.5982322129852886`*^9, {3.5982322733037386`*^9, 3.5982323032424507`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"turns", " ", "=", " ", "10"}], ",", " ", 
      RowBox[{"o", " ", "=", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "2"}], "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Manipulate", "[", 
       RowBox[{
        RowBox[{"ParametricPlot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"RotationMatrix", "[", 
            RowBox[{"ArcTan", "@@", "r"}], "]"}], ".", 
           RowBox[{"(", 
            RowBox[{"o", " ", "+", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", 
               RowBox[{"Sin", "[", 
                RowBox[{"2", " ", "Pi", " ", "turns", " ", 
                 RowBox[{"x", "/", 
                  RowBox[{"Norm", "[", "r", "]"}]}]}], "]"}]}], "}"}]}], 
            ")"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", 
            RowBox[{"Norm", "[", "r", "]"}]}], "}"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "5"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", "Locator"}], 
         "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", 
       RowBox[{
        RowBox[{"ParametricPlot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x", ",", 
             RowBox[{"Sin", "[", 
              RowBox[{"2", " ", "Pi", " ", "turns", " ", 
               RowBox[{"x", "/", 
                RowBox[{"Norm", "[", "r", "]"}]}]}], "]"}]}], "}"}], " ", "+",
            " ", "o"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", "0", ",", 
            RowBox[{"Norm", "[", "r", "]"}]}], "}"}], ",", 
          RowBox[{"PlotRange", "\[Rule]", "5"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"r", ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", "Locator"}], 
         "}"}]}], "]"}]}], "}"}]}], "\[IndentingNewLine]", "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.598222624048833*^9, 3.598222749149988*^9}, {
   3.59822278414999*^9, 3.5982227957206516`*^9}, 3.598230568367222*^9}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "spring", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spring", "::", "usage"}], " ", "=", " ", 
   "\"\<spring[ point1, point2, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds ]\>\""}], " ", ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"spring", "[", " ", 
    RowBox[{"a1_List", ",", " ", "a2_List", ",", " ", 
     RowBox[{"n_:", "8"}], ",", 
     RowBox[{"h_:", ".25"}], ",", " ", 
     RowBox[{"f_:", " ", "0.1"}]}], " ", "]"}], " ", ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "n1", ",", " ", "d", ",", " ", "nd", ",", " ", "r", ",", " ", "r1"}], 
      " ", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"n1", " ", "=", " ", 
       RowBox[{"Norm", "[", "a1", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"d", " ", "=", " ", 
       RowBox[{"a2", " ", "-", " ", "a1"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"nd", " ", "=", " ", 
       RowBox[{"Norm", "[", "d", "]"}]}], " ", ";", "\[IndentingNewLine]", 
      RowBox[{"r", " ", "=", " ", 
       RowBox[{"RotationMatrix", "[", 
        RowBox[{"ArcTan", " ", "@@", "  ", "d"}], " ", "]"}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"r1", " ", "=", " ", 
       RowBox[{"r", " ", ".", " ", 
        RowBox[{"{", 
         RowBox[{"n1", ",", " ", "0"}], "}"}]}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ParametricPlot", "[", " ", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"n1", " ", "+", " ", 
                RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                RowBox[{"t", " ", 
                 RowBox[{"(", 
                  RowBox[{"1", " ", "-", " ", 
                   RowBox[{"2", "f"}]}], ")"}], " ", "nd"}]}], ",", " ", 
               RowBox[{"h", " ", 
                RowBox[{"Sin", "[", " ", 
                 RowBox[{"2", " ", "Pi", " ", "n", " ", "t"}], "]"}]}]}], 
              "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"n1", " ", "+", " ", 
                RowBox[{"nd", " ", "f"}], " ", "+", " ", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"1", " ", "-", " ", 
                   RowBox[{"2", "f"}]}], ")"}], " ", "nd"}], " ", "+", " ", 
                RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
              "}"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"a1", " ", "-", "r1", " ", "+", " ", 
            RowBox[{"r", " ", ".", " ", 
             RowBox[{"{", " ", 
              RowBox[{
               RowBox[{"n1", " ", "+", 
                RowBox[{"t", " ", "f", " ", "nd"}]}], ",", " ", "0"}], 
              "}"}]}]}], "}"}]}], "\[IndentingNewLine]", "}"}], 
        "\[IndentingNewLine]", ",", " ", 
        RowBox[{"{", 
         RowBox[{"t", ",", " ", "0", ",", " ", "1"}], " ", "}"}], 
        "\[IndentingNewLine]", ",", " ", 
        RowBox[{"Epilog", "\[Rule]", 
         RowBox[{"{", " ", 
          RowBox[{"Point", "[", 
           RowBox[{"{", 
            RowBox[{"a1", ",", " ", "a2"}], "}"}], "]"}], "}"}]}]}], 
       "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"spring", "[", " ", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], " ", "]"}]}], "Input",
 CellChangeTimes->{{3.598223782760107*^9, 3.5982240326524*^9}, {
  3.598224063476163*^9, 3.5982240657072906`*^9}, {3.5982240998852453`*^9, 
  3.598224169571232*^9}, {3.598224235073978*^9, 3.598224273826195*^9}, {
  3.5982243073301105`*^9, 3.598224312013379*^9}, {3.5982243433541713`*^9, 
  3.5982243557988834`*^9}, {3.598224493258745*^9, 3.598224566881956*^9}, {
  3.5982246227411513`*^9, 3.598224662124404*^9}, {3.598224714524401*^9, 
  3.598224821718532*^9}, {3.5982248610017796`*^9, 3.5982249192921133`*^9}, {
  3.598224959514414*^9, 3.5982250979093294`*^9}, {3.5982251479271903`*^9, 
  3.5982252457357845`*^9}, {3.598225280635781*^9, 3.5982253255053473`*^9}, {
  3.598225356224104*^9, 3.5982254081800756`*^9}, {3.5982254415539846`*^9, 
  3.598225454149705*^9}, {3.598225509864892*^9, 3.5982257461924095`*^9}, {
  3.598226087872952*^9, 3.598226169949647*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {}, 
   {Hue[0.67, 0.6, 0.6], LineBox[CompressedData["
1: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
1P77oOF/JDcfww==
     "]]}, 
   {Hue[0.9060679774997897, 0.6, 0.6], LineBox[CompressedData["
1:eJwtzgs012cYB/C/xu91WZPf20lWhCkOJyzUHNHXEIeUtJCoqFxy60KlWqHc
4o+EKWUpl5RcquH8x1xjs7kkmdTmbxEiio0uYq+j55z3POfzPu/zvI+aZ5Dj
/gUCgcCenbns7TUXHJr/mAseK29uSIxiXv5L0HAfc9/Q0vJcZr8iXvYjs0fA
7zIDzDLJLtarm3m4Buvf8fbmYOHcVyNkto94P+Hjw0HU+6F0cwsPg8yEcL8D
HPImtbPaWnnMPi69cjCQwxnV2JCOdh5/hRhMaB7j4JXuNen+hIduXaWf3RkO
no4tScd72P9mP0ltjOagM2Z9LrifR8/LrqpXiRw0i//ZMj7MY4ul7BWJdA4m
94iRxDgPyRbv9NprHM52249feMtDJWpNqWs+hx/6cqQlZ3kUDMtO7irhUKMf
8w2RojgdLu+0SMRhRVYc4uUoGurVulbXckjZpuR5XYHi0Nqsk+pNHB4Plj+7
pEjh2bVpQ307B9vroXpUhaJRk1vZ3s3qV+szlDUoDucNawufc0ir1Bfna1NE
bDdzXDHCQa268HvFrym4kswM5X851EuWGS5ZR9GyXkfqt2kOGQHiujRTCrmj
D5LEkgSxS1P8b1pQJPTErc9ZSHB7wOeViS1FyLEqGfMlBOmXtjQWO1C0Vgje
2agQZAirRaVOFAfXBErPrCLoyHGMMnOniNw+ZLxCj0BDEOTnvJdiJvdhvOI6
AjPTq/lbfSkqtV7MVmwgSMgcqWoOohhzlk5tsSaYMG8Y6w6h8C5zshU6EAhl
aqZ8T1FYWvFqX+1g9XvNLt0RFClhT5VWehAEXdv36GkMhc5I25oOXwLVkuWr
didSGEl1BIwdIhj8bHfykVSK7E2WTb2hBCeN7zn7ZlA414s3hkcQfHtR6z9x
FkXY0Pn++POsX0+rYCiPYtTMI9vqIoHBmI1JcCFFm7lV5IEMArc3E88T71Ms
OZIW7XWDwKGzuD9eRHG9g96SLyAI7Umokqthfp45qnGfQKQ9dXdZI8WgutO2
gQoC3cthp+80UyQnnXgS9oAgcGTZDdUOiqLbBeFRzQR1Yea9Gt0UdErW1riT
YLNxzNQtMcXLsaOGLn8TvDbYoVn7gkJT0QGbXxC4K6wvFo1Q3Azc7v9mlGCG
h4LRBEXmER+RYIqg1KklDu/Y/g9Pl2kwuyn/GLuTWUI/9b4Ns6AvKPoo876R
msIkZrtDCmcLmLX3s73eEvTEfXdi6Xv6aQ6BTE23z2vmNmND97APbJ7OgNW1
aTYv3dY1m1kwXmbxM7PB5B7nX5lzy2PMO5nT7gq3Lppm+1tpm37+kX7qI4jc
E2B4nHlw+WXd6o8EhakT6g4zFEoni3X6mLe51av6Mds9adCSniF4q56qEsU8
/47AonjtlxXMwV/YK4qZ/2wKVdCapcjx37tYcpbg1AVbeQvm+XsCdZdlC3cx
m0Tnyh1k9u+vkE5hns8ECgVCrog50+KRVDlz6eFdkk3MrVlDC54x7zTWW9DP
LCGYC+lPeTH+BzFnDMs=
     "]]}, 
   {Hue[0.1421359549995791, 0.6, 0.6], LineBox[CompressedData["
1:eJwtzw1UzWcYAPD3/4/LikL5vE0rIvmolJR1PU+TqNSoSBpJqc1SjK7KbivF
umlN6JSoKHOxy7impku+ym0Wt6mVVqcPnT5E/D9kc23sdew55z3v+zvPeZ8P
603xgZtZQog/Pe/u98HB/w9UpGtWIXXxo6UyR2qDZHNZKrVHzf7kjdTi6Lve
DMOBPGvi0A3qXunh71iWg0ELh4E0huC9hXbS4cM4+HPWhkYjI4IF8StdjUdy
oAm6enqEhKBjx/FYizEcRKkSV5mNIvhkauHkdGsOHPOdg2wmE8y5ct74rhMH
9iZGmSG2BF9dKFp83ZMDrdfLuE+dCPIjezSmQRxcvjNb4reYoF677EvXSA7a
6hLqP/cluEjPRv2yk4NYKeuXFUIwDgpK+vdycNBBsysuiqDS2MeKz+OgTydv
3rmNzuMa2BGk4uDkaUVfioJg1VV5d04FBzmjj9j/qCRocTzBPlHHgZnbQ6vC
PIJ/dddd1D7kwHA2tCa7lOCtPaBo7udgbOnzohPnCU7cY6z0N9B+XboZlVqC
C9t/at5uwsOZ3tsRebUEZXnbtsRJeXgW36g/2EjnVytlNXN4OOo589mhLoLL
raqCX3jwIM/PgYpBgv6Cr1oRwEPlAjfPdgNBSxuN9+VwHvKODB/SjWDwgdrF
tiaeh+K0vtYGcwbHFZh5OaTxYKox2dH9EYMe7cNV23N5OBftJRs/l8G5aU0r
Np3g4VHn8SsfuDN4NuPt/HMaHlLLoJfxZtCse8n6+ls8+A0ISy0DGSSlnTr/
RppP6l+9KJzBymshCUk9NH+fmSSNZTDMZSBaMcSDl8ph9NREBjNN/iholQhw
qrZEM30vg8dkrabjJgqwIG76fv9cBpPrtLqXMwQIa6kb717E4CPtixsL3AQY
yK5YaXeWwfkSnzcrltP/1eVV7uV0notDu6tCBfjN6++2gNt03/JrspFbBJjq
EzBvn57BDZM3fkKSBZCY1zqltjIob1v3beB+AUJtM3oU/dSGbWMURwVo0QbX
Fb1gkEnqaGHOCXCzMCbyJsPi6mC7XpcqARCK1SpTFnOzsl3xvgBPYx7bXZjC
4lprH90PHQKwLfLVV2eyOMLc+lj3cwGW3p90ecCZxW8iGi7p3wpgpWy/0wos
po9pN5kwVoRN2b2Z9StY3Dpl2GkXaxEemBul9K1lsb7JsfRrassTJ5M+DGXR
+dD6Y9XUMfO8E4KoX5lUHAi2EeH1cmXsdep9/36RtHOaCNNTzMLy17FY0qn3
/dlWhMR+qduyz2i9U0cHne1pvWsuwqlwWi+ytm83dYxv02Abdb7VUNdt6ovN
ux6P28ji+oKApqDZIngLlZ0p1I+VzPUdc0SIn+mpXxPBotHWmAOX5olwK9df
LYlkMXrW4azX1KOsnqs8qH/tuZGxxEGEEPWBsq+ov98wJamB+smdhsJ2aunK
exGiowgW/4Qqy6NYTBllCPvYSYRw5euMp9RdtTPWpFOfmVCUarOZRZVnqq/5
fBFkTp27cqiN36i9wqgzq9J2VFNvrWxZXEb9wG9avIH6d7nE/Qm1ZUv1Fsdo
Fl2c3wXdN/pdsPgfnR4hXg==
     "]]}},
  Axes->True,
  AxesOrigin->{1., 2.},
  Epilog->{
    PointBox[{{1, 2}, {3, 5}}]},
  Method->{},
  PlotRange->{{1., 3.0000000000000004`}, {2., 5.000000000000001}},
  PlotRangeClipping->True,
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02]}]], "Output",
 CellChangeTimes->{{3.598223962330378*^9, 3.5982240333844423`*^9}, 
   3.5982240673003817`*^9, 3.598224120174406*^9, {3.5982241561154623`*^9, 
   3.598224170286272*^9}, {3.598224247624696*^9, 3.598224274418228*^9}, 
   3.5982243125694103`*^9, 3.598224360786168*^9, {3.5982245244495296`*^9, 
   3.598224567692003*^9}, {3.598224635562885*^9, 3.5982246633554745`*^9}, {
   3.5982247258460484`*^9, 3.598224752419568*^9}, {3.5982248737485085`*^9, 
   3.5982248939366627`*^9}, 3.5982249770254154`*^9, 3.5982250364078116`*^9, 
   3.5982251076828885`*^9, 3.598225158154775*^9, {3.598225204147406*^9, 
   3.5982252292428412`*^9}, {3.5982253762642508`*^9, 3.598225381589555*^9}, 
   3.598225664016709*^9, {3.598225711535427*^9, 3.598225751490712*^9}, {
   3.598226137995819*^9, 3.598226156999906*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "spring"}]], "Input",
 CellChangeTimes->{{3.5982261379798183`*^9, 3.5982261631172557`*^9}}],

Cell[BoxData[
 StyleBox["\<\"spring[ point1, point2, numberOfTurns, height, \
fractionToDrawAsLinesAtEnds]\"\>", "MSG"]], "Print", "PrintUsage",
 CellChangeTimes->{3.5982261641653156`*^9},
 CellTags->"Info3598208163-8013852"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Based", " ", 
    RowBox[{"on", ":", " ", 
     ButtonBox[
      RowBox[{
       RowBox[{"http", ":"}], "//", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"mathematica", ".", "stackexchange", ".", "com"}], "/", 
          "a"}], "/", "37228"}], "/", "10"}]}],
      BaseStyle->"Hyperlink",
      ButtonData->{
        URL["http://mathematica.stackexchange.com/a/37228/10"], None},
      ButtonNote->"http://mathematica.stackexchange.com/a/37228/10"]}]}], " ",
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ClearAll", "[", " ", 
     RowBox[{
     "unitSpringPoints", ",", " ", "coordinateTrasformMatrix", ",", " ", 
      "coordinateTransform", ",", " ", "spring"}], " ", "]"}], " ", ";", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"unitSpringPoints", "::", "usage"}], " ", "=", " ", 
     "\"\<This is a spring connecting {0,0} and {1,0} with two small \
horizontal segment at the end points (that is the reason for generating two \
separate lists).To show the spring just wrap a Line around the generated \
points,like this\[IndentingNewLine]\n\
Show[Graphics[Line[unitSpringPoints[5,0.25]]]]\>\""}], " ", ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"unitSpringPoints", "[", 
      RowBox[{"n_", ",", "h_"}], "]"}], ":=", 
     RowBox[{
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"dl", ",", "xlist", ",", "ylist"}], "}"}], ",", 
         RowBox[{
          RowBox[{"dl", "=", 
           RowBox[{"1", "/", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"2", " ", "n"}], "+", "1"}], ")"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"xlist", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"1.5", " ", "dl"}], ",", 
              RowBox[{"dl", " ", 
               RowBox[{"Table", "[", 
                RowBox[{"k", ",", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "2", ",", 
                   RowBox[{
                    RowBox[{"2", " ", "n"}], "-", "1"}]}], "}"}]}], "]"}]}], 
              ",", 
              RowBox[{"1", "-", 
               RowBox[{"1.5", " ", "dl"}]}], ",", "1"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ylist", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0", ",", 
              RowBox[{
               RowBox[{"h", "/", "2"}], " ", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"-", "1"}], ")"}], "^", 
                  RowBox[{"(", 
                   RowBox[{"k", "+", "1"}], ")"}]}], ",", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "2", ",", 
                   RowBox[{
                    RowBox[{"2", " ", "n"}], "-", "1"}]}], "}"}]}], "]"}]}], 
              ",", "0", ",", "0"}], "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Transpose", "[", 
           RowBox[{"{", 
            RowBox[{"xlist", ",", "ylist"}], "}"}], "]"}]}]}], "]"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"coordinateTrasformMatrix", "::", "usage"}]}], " ", "=", " ", 
      "\"\<Next I defined a function to transform coordinates in order to \
produce a spring between two given points {x0,y0} and {x1,y1}.Since this is \
very old code,I defined my own transformation matrix as in\>\""}]}], " ", ";",
     "\n", 
    RowBox[{
     RowBox[{"coordinateTrasformMatrix", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x0_", ",", "y0_"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x1_", ",", "y1_"}], "}"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "theta", "}"}], ",", 
       RowBox[{
        RowBox[{"theta", "=", 
         RowBox[{"ArcTan", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"x1", "-", "x0"}], ")"}], ",", 
           RowBox[{"(", 
            RowBox[{"y1", "-", "y0"}], ")"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Cos", "[", "theta", "]"}], ",", 
            RowBox[{"-", 
             RowBox[{"Sin", "[", "theta", "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"Sin", "[", "theta", "]"}], ",", 
            RowBox[{"Cos", "[", "theta", "]"}]}], "}"}]}], "}"}]}]}], "]"}]}],
     " ", ";", "\[IndentingNewLine]", "\n", "\n", 
    RowBox[{
     RowBox[{"coordinateTransform", "::", "usage"}], " ", "=", " ", 
     "\"\<And then I used it to transform the coordinates of the points of \
the the unit spring in those of the points of the spring between the given \
points\>\""}], " ", ";", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"coordinateTransform", "[", 
      RowBox[{"coords_List", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x0_", ",", "y0_"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x1_", ",", "y1_"}], "}"}]}], "}"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"scale", ",", "mat"}], "}"}], ",", 
       RowBox[{
        RowBox[{"scale", "=", 
         RowBox[{"Sqrt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x1", "-", "x0"}], ")"}], "^", "2"}], "+", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"y1", "-", "y0"}], ")"}], "^", "2"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"mat", "=", 
         RowBox[{"coordinateTrasformMatrix", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"x0", ",", "y0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"x1", ",", "y1"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"x0", ",", "y0"}], "}"}], "+", 
            RowBox[{"mat", ".", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"scale", ",", "1"}], "}"}], "*", "#"}], ")"}]}]}], 
           ")"}], "&"}], "/@", "coords"}]}]}], "]"}]}], " ", ";", "\n", "\n", 
    RowBox[{
     RowBox[{"spring", "::", "usage"}], " ", "=", " ", 
     "\"\<Then,a spring with n coils and aspect ratio h between points \
{x0,y0} and {x1,y1} would be given by\[IndentingNewLine]For example:\
\[IndentingNewLine]\[IndentingNewLine]Show[Graphics[spring[{{2,2},{3,3}},8,0.\
25]],AspectRatio\[Rule]Automatic]\[IndentingNewLine]Show[Graphics[spring[{{0,\
0},{0,1}},8,0.25]],AspectRatio\[Rule]Automatic]\>\""}], " ", ";", "\n", 
    RowBox[{
     RowBox[{"spring", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"x0_", ",", "y0_"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"x1_", ",", "y1_"}], "}"}]}], "}"}], ",", 
       RowBox[{"n_:", "8"}], ",", 
       RowBox[{"h_:", ".25"}]}], "]"}], ":=", 
     RowBox[{"Line", "[", 
      RowBox[{"coordinateTransform", "[", 
       RowBox[{
        RowBox[{"unitSpringPoints", "[", 
         RowBox[{"n", ",", "h"}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"x0", ",", "y0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"x1", ",", "y1"}], "}"}]}], "}"}]}], "]"}], "]"}]}], " ", 
    ";"}], "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.5982676137942953`*^9, 3.5982676212777233`*^9}}]
},
WindowSize->{1584, 765},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
ShowSelection->True,
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Info3598208163-8013852"->{
  Cell[60232, 1187, 225, 4, 56, "Print",
   CellTags->"Info3598208163-8013852"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Info3598208163-8013852", 68664, 1410}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[557, 20, 671, 13, 40, "Text"],
Cell[CellGroupData[{
Cell[1253, 37, 2663, 60, 416, "Input"],
Cell[3919, 99, 2489, 51, 379, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6445, 155, 5098, 137, 391, "Input"],
Cell[11546, 294, 4668, 97, 601, "Output"]
}, Open  ]],
Cell[16229, 394, 2369, 64, 116, "Input"],
Cell[CellGroupData[{
Cell[18623, 462, 4754, 104, 516, "Input"],
Cell[23380, 568, 36693, 610, 596, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60110, 1183, 119, 2, 39, "Input"],
Cell[60232, 1187, 225, 4, 56, "Print",
 CellTags->"Info3598208163-8013852"]
}, Open  ]],
Cell[60472, 1194, 7860, 203, 916, "Input"]
}
]
*)

(* End of internal cache information *)
